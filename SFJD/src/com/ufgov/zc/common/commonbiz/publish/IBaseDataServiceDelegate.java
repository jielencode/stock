package com.ufgov.zc.common.commonbiz.publish;import java.util.Date;import java.util.List;import java.util.Map;import com.kingdrive.workflow.model.runtime.TraceInfoModel;import com.ufgov.zc.common.commonbiz.model.AutheInfo;import com.ufgov.zc.common.commonbiz.model.BankAccount;import com.ufgov.zc.common.commonbiz.model.BaseBill;import com.ufgov.zc.common.commonbiz.model.BillElement;import com.ufgov.zc.common.commonbiz.model.Company;import com.ufgov.zc.common.commonbiz.model.MaCompany;import com.ufgov.zc.common.commonbiz.model.MaCompanyKey;import com.ufgov.zc.common.commonbiz.model.MaElementRelationRule;import com.ufgov.zc.common.commonbiz.model.MaElementRelationRuleEntry;import com.ufgov.zc.common.commonbiz.model.MaExpSerial;import com.ufgov.zc.common.commonbiz.model.MaTzdSumElement;import com.ufgov.zc.common.commonbiz.model.NumLimCompo;import com.ufgov.zc.common.commonbiz.model.Project;import com.ufgov.zc.common.commonbiz.model.SendDoc;import com.ufgov.zc.common.commonbiz.model.WfTaskGranter;import com.ufgov.zc.common.console.model.AsEmp;import com.ufgov.zc.common.console.model.GkGetdataRule;import com.ufgov.zc.common.system.Publishable;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.dto.PrintObject;import com.ufgov.zc.common.system.dto.UserFuncDto;import com.ufgov.zc.common.system.model.AsCompo;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.system.model.AsOption;import com.ufgov.zc.common.system.model.PrintSetting;import com.ufgov.zc.common.system.model.ResultInfo;import com.ufgov.zc.common.system.model.User;import com.ufgov.zc.common.system.model.UserPreferences;import com.ufgov.zc.common.system.model.UserSearchStore;public interface IBaseDataServiceDelegate extends Publishable {  AsOption getAsOption(String optId, RequestMeta requestMeta);  void updateOptionVal(AsOption asOption, RequestMeta requestMeta);  List getAsVal(String valSetId, RequestMeta requestMeta);  Map getAsValMap(String valSetId, RequestMeta requestMeta);  List getBAccTree(int nd, RequestMeta requestMeta);  List getBAcc(ElementConditionDto dto, RequestMeta requestMeta);    List getPayBankAccount(int nd, String accoType, String userId, RequestMeta requestMeta);  public List getPayBank(int nd, String accoType, String userId, RequestMeta requestMeta);  List getDefaultPayBankAccount(int nd, String isDefault, String coCode, String fundCode, List accoTypeList, RequestMeta requestMeta);  List getReceBankAccountList(int nd, String userId, RequestMeta requestMeta);  void deleteReceBankAccout(List bankAccountList, RequestMeta requestMeta);  BankAccount getReceBankAccount(String accName, String bankAccCode, String bankNodeName, String coCode, String userId, RequestMeta requestMeta);  BankAccount getDwZeroAccount(int nd, String coCode, String fundCode, String optFundFilterVal, RequestMeta requestMeta);  List getPayBankAccountByAccoType(int nd, List accoTypeList, RequestMeta requestMeta);  List getBankAccountByAccoType(int nd, String coCode, List accoTypeList, RequestMeta requestMeta);  List getBankAccountByUserId(int nd, String userId, List accoTypeList, RequestMeta requestMeta);  BankAccount getReceBankAccount(BankAccount bankAccount, RequestMeta requestMeta);  List getDwZeroAccountList(int nd, List accoType, String coCode, RequestMeta requestMeta);  List getDwBaseBankAccountList(int nd, List accoType, String coCode, RequestMeta requestMeta);  List getSpecialAccountList(int nd, List accoType, RequestMeta requestMeta);  BankAccount insertReceBankAccount(BankAccount bankAccount, RequestMeta requestMeta);  Map getBillElement(int nd, String billTypeCode, RequestMeta requestMeta);  Map getWfCanEditField(Long proInstId, RequestMeta requestMeta);  public void updateIncludeForBillElement(BillElement billElement, RequestMeta requestMeta);  public void updateBillElementGroupInfo(BillElement billElement, RequestMeta requestMeta);  List getCompanyTree(int nd, RequestMeta requestMeta);  List getCompany(ElementConditionDto dto, RequestMeta requestMeta);  List getCompanyByUserId(String userId, int nd, RequestMeta requestMeta);  List getCompanyNumLimTree(ElementConditionDto dto, RequestMeta requestMeta);  Company getCompanyByCoCode(int nd, String coCode, RequestMeta requestMeta);  MaCompany getCompanyByExampleKey(MaCompanyKey key, RequestMeta requestMeta);  List getCompanyChildren(int nd, String coCode, RequestMeta requestMeta);  List getContract(int nd, RequestMeta requestMeta);  List getDAttr(ElementConditionDto dto, RequestMeta requestMeta);  List getFund(ElementConditionDto dto, RequestMeta requestMeta);  List getBiXJFund(ElementConditionDto dto, RequestMeta requestMeta);  List getInceptDoc(int nd, RequestMeta requestMeta);  Map getLangTrans(String resId, RequestMeta requestMeta);  List getAsLangTrans(String resId, RequestMeta requestMeta);  void updateAslangTrans(List langTranList, RequestMeta requestMeta);  List getManage(ElementConditionDto dto, RequestMeta requestMeta);  List getManageForBiXJ(ElementConditionDto dto, RequestMeta requestMeta);  List getNumLimCompo(RequestMeta requestMeta);  NumLimCompo getNumLimCompoByCompoId(String compoId, RequestMeta requestMeta);  List getNumLimCompoByParentCompoId(String parentCompoId, RequestMeta requestMeta);  public String getNumLimCondByCoType(String numLimCompoId, String funcId, RequestMeta requestMeta);  public String getNumLimCondByCoType(String numLimCompoId, String funcId, String ctrlField, RequestMeta requestMeta);  public String getNumLimCondByCoType(String numLimCompoId, String funcId, String ctrlField, boolean isTableContainCoCode, RequestMeta requestMeta);  public String getNumLimCondByCoType(String numLimCompoId, String funcId, boolean isTableContainCoCode, RequestMeta requestMeta);  List getOperationType(ElementConditionDto dto, RequestMeta requestMeta);  List getCzOrg(int nd, RequestMeta requestMeta);  List getZcOrg(int nd, RequestMeta requestMeta);  public List getOrg(int nd, RequestMeta requestMeta);  public List getOrg(ElementConditionDto dto, RequestMeta requestMeta);  public List getPosition(int nd, RequestMeta requestMeta);  public List getEmp(int nd, RequestMeta requestMeta);//  public List getOrgCodeByDto(ElementConditionDto dto, RequestMeta requestMeta);  List getBalMode(ElementConditionDto dto, RequestMeta requestMeta);  List getOrigin(ElementConditionDto dto, RequestMeta requestMeta);  List getOutlayTree(int nd, RequestMeta requestMeta);  List getOutlay(ElementConditionDto dto, RequestMeta requestMeta);  List getPayout(ElementConditionDto dto, RequestMeta requestMeta);  List getPaytype(ElementConditionDto dto, RequestMeta requestMeta);  List getProjectTree(int nd, RequestMeta requestMeta);  List getProjectByCode(String pCode, RequestMeta requestMeta);  List getProject(int nd, RequestMeta requestMeta);  List getProject(ElementConditionDto dto, RequestMeta requestMeta);  boolean projectCodeExist(Project project, RequestMeta requestMeta);  boolean projectNameExist(Project project, RequestMeta requestMeta);  /**   *    * 除当前code对应name外的 是否重复   *    * @param nd   *    * @param currentCode   *    * @return   */  boolean projectNameExistSelfExcluded(Project project, RequestMeta requestMeta);  List getProjectBiXJ(int nd, RequestMeta requestMeta);  List getProjectDetail(RequestMeta requestMeta);  List getProjectBalance(RequestMeta requestMeta);  List getPdProject(int nd, RequestMeta requestMeta);  List getProjectTypeTree(int nd, RequestMeta requestMeta);  List getProjectType(int nd, RequestMeta requestMeta);  boolean projectUsed(Project project, RequestMeta requestMeta);  void deleteProjectWithChildren(Project project, RequestMeta requestMeta);  public Project savePdProject(Project project, RequestMeta requestMeta);  public List getSearchCondition(String conditionId, RequestMeta requestMeta);  public List getRoleSearchCondition(String conditionId, String userId, RequestMeta requestMeta);  public List getSearchTypeCondition(String conditionId, String conditionType, RequestMeta requestMeta);  public List getUserSearchConditionJoinRole(String conditionId, String userId, RequestMeta requestMeta);  public List getUserSearchCondition(String conditionId, String userId, RequestMeta requestMeta);  public void deleteUserSearchCondition(String conditionId, String userId, RequestMeta requestMeta);  public void insertUserSearchCondition(List userSearchConditionList, RequestMeta requestMeta);  public void updateUserSearchCondition(String userId, String conditionId, List searchConditionList, RequestMeta requestMeta);  List getSendDoc(int nd, RequestMeta requestMeta);  void insertSendDoc(SendDoc sendDoc, RequestMeta requestMeta);  void updateSendDoc(SendDoc sendDoc, RequestMeta requestMeta);  void deleteSendDoc(SendDoc sendDoc, RequestMeta requestMeta);  boolean sendDocCodeExist(SendDoc sendDoc, RequestMeta requestMeta);  boolean sendDocNameExist(SendDoc sendDoc, RequestMeta requestMeta);  boolean sendDocUsed(SendDoc sendDoc, RequestMeta requestMeta);  /**   *    * 除当前code对应name外的 是否重复   *    * @param nd   *    * @param currentCode   *    * @return   */  boolean sendDocNameExistSelfExcluded(SendDoc sendDoc, RequestMeta requestMeta);  List getSendDocType(int nd, RequestMeta requestMeta);  public UserPreferences getUserPreferences(String userId, String preferId, RequestMeta requestMeta);  public void deleteUserPreferences(String userId, String preferId, RequestMeta requestMeta);  public void putUserPreferences(UserPreferences userPreferences, RequestMeta requestMeta);  public void removeUserPreferences(UserPreferences userPreferences, RequestMeta requestMeta);  public List getAllBank(int nd, RequestMeta requestMeta);  public List getZeroBalanceBank(int nd, RequestMeta requestMeta);  public List getMaBanknode(int nd, String bankCode, RequestMeta requestMeta);  public List getMaCpBankBal(int nd, String bankCode, String fundCode, RequestMeta requestMeta);  public List getMaCpBankBalByView(int nd, String bankCode, String fundCode, String maCpBankBalView, RequestMeta requestMeta);  public List getMaTzdSumElement(int nd, String billTypeCode, RequestMeta requestMeta);  public List getMaUserTzdSumElement(int nd, String billTypeCode, String userId, RequestMeta requestMeta);  public Map getMaTzdSumElementMap(int nd, String billTypeCode, RequestMeta requestMeta, String userId);  MaTzdSumElement getMaTzdSumElement(int nd, String billTypeCode, String elementCode, RequestMeta requestMeta);  public void updateMaTzdSumElement(MaTzdSumElement maTzdSumElement, RequestMeta requestMeta);  public void updateBillElementForBbFN(List list, RequestMeta requestMeta);  public void updateMaTzdSumElements(List maTzdSumElementList, RequestMeta requestMeta);  public void updateMaUserTzdSumElements(List maTzdSumElementList, RequestMeta requestMeta);  public void updateMaTzdSum(MaTzdSumElement maTzdSumElement, RequestMeta requestMeta);  List getDecBillElementList(int nd, String billTypeCode, RequestMeta requestMeta);  List getAllDecBillElementList(int nd, String billTypeCode, RequestMeta requestMeta);  List getDownDisplayBillElementList(int nd, String billTypeCode, String displayType, RequestMeta requestMeta);  User getUserById(String userId, RequestMeta requestMeta);  List getUserGrantFunc(UserFuncDto dto, RequestMeta requestMeta);  List getUsedCompoFunc(String compoId, RequestMeta requestMeta);  TraceInfoModel getTraceInfo(Long instanceId, RequestMeta requestMeta);  List getMaGkFuncCompo(RequestMeta requestMeta);  public List getAsCompoFunc(String compoId, RequestMeta requestMeta);  public void updateAsCompoFunc(List asCompoFuncList, RequestMeta requestMeta);  List getCompoSearchCondition(String conditionType, RequestMeta requestMeta);  public void updateSearchCondition(List searchConditionList, RequestMeta requestMeta);  List getCurrentPrintTemplate(RequestMeta requestMeta);  PrintSetting getCurrentPrintSetting(RequestMeta requestMeta);  void savePrintSettingFN(PrintSetting printSetting, RequestMeta requestMeta);  PrintObject genMainBillPrintObjectFN(BaseBill bill, RequestMeta requestMeta);  PrintObject genMainBillPrintObjectFN(List billList, RequestMeta requestMeta);  PrintObject genMainBillPrintObjectFN(BaseBill bill, String templateCode, RequestMeta requestMeta);  PrintObject genMainBillPrintObjectFN(List billList, String templateCode, RequestMeta requestMeta);  // PrintObject genMainSubPrintObject(List billList, RequestMeta  // requestMeta);  boolean isFinalAudit(Long processInstId, RequestMeta requestMeta);  String getOrgPosiId(String coCode, String orgCode, String posiCode, int nd, RequestMeta requestMeta);  public void updateAsFileById(AsFile asFile, RequestMeta requestMeta);  String uploadFile(AsFile asFile, RequestMeta requestMeta);  boolean uploadFile(AsFile asFile, String savePath, String fileName, RequestMeta requestMeta);  AsFile getAsFileById(String fileId, RequestMeta requestMeta);  AsFile getLargeAsFileById(String fileId, RequestMeta requestMeta);  AsFile downloadFile(String fileId, RequestMeta requestMeta);  void deleteFile(String fileId, RequestMeta requestMeta);  void deletePdProjectFN(List dList, RequestMeta requestMeta);  List getAsUserNumLim(String userId, String compoId, String funcId, String ctrlField, RequestMeta requestMeta);  List getAsRoleNumLimByUserId(String userId, String compoId, String funcId, String ctrlField, RequestMeta requestMeta);  List getReceAccountInfoList(int nd, String coCode, String product, RequestMeta requestMeta);  public List getAllAsCompo(RequestMeta requestMeta);  public AsCompo getAsCompoById(String compoId, RequestMeta requestMeta);  public void updateAsCompo(AsCompo asCompo, RequestMeta requestMeta);  public List getAsTabColForOrder(String tabName, RequestMeta requestMeta);  public GkGetdataRule getGkGetDataRuleById(String ruleId, RequestMeta requestMeta);  public GkGetdataRule getGkGetDataRule(String ruleId, RequestMeta requestMeta);  Map getDzDateMap(ElementConditionDto elementConditionDto, RequestMeta requestMeta);  Map getDzResultMap(ElementConditionDto elementConditionDto, RequestMeta requestMeta);  List getDzMonth(ElementConditionDto elementConditionDto, RequestMeta requestMeta);  List getWfTaskGranter(String userId, RequestMeta requestMeta);  void insertWfTaskGranterFN(WfTaskGranter wfTaskGranter, RequestMeta requestMeta);  void deleteWfTaskGranterFN(String userId, RequestMeta requestMeta);  void updateWfTaskGranterFN(List grantList, RequestMeta requestMeta);  List getMaCpElementMapping(ElementConditionDto dto, RequestMeta requestMeta);  void saveMaCpElementMapping(List maCpElementMappingList, String type, String useType, RequestMeta requestMeta);  void updateToRelieveWarrant(List grantList, RequestMeta requestMeta);  void cancelGrantedTaskFN(String userId, RequestMeta requestMeta);  public Map getFieldLevelOptions(RequestMeta requestMeta);  String getNo(String compoId, String noField, Object bill, RequestMeta requestMeta);  String getElementRelationId(RequestMeta requestMeta);  String getElementEntryId(RequestMeta requestMeta);  public List getElementRelationRules(String compoId, String handleType, String ruleType, RequestMeta requestMeta);  void deleteElementRelationRuleById(String ruleId, RequestMeta requestMeta);  void deleteRelationEntryByEntryId(String entityId, RequestMeta requestMeta);  void insertElementRelationRule(MaElementRelationRule relationRule, RequestMeta requestMeta);  void updateElementRelationRule(MaElementRelationRule relationRule, RequestMeta requestMeta);  void insertElementRelationEntry(MaElementRelationRuleEntry ruleEntry, RequestMeta requestMeta);  void updateElementRelationEntry(MaElementRelationRuleEntry ruleEntry, RequestMeta requestMeta);  void saveBiFundXJFN(List insertList, List updateList, RequestMeta requestMeta);  void saveBiManageXJFN(List insertList, List updateList, RequestMeta requestMeta);  void saveBiProjectXJFN(List insertList, List updateList, RequestMeta requestMeta);  void deleteManageFN(List idList, RequestMeta requestMeta);  void deleteFundFN(List idList, RequestMeta requestMeta);  void deleteProjectFN(List idList, RequestMeta requestMeta);  Date getSysDate(RequestMeta requestMeta);  Company getDirectorCompany(ElementConditionDto dto, RequestMeta requestMeta);  public MaExpSerial getMaExpSerial(Map params, RequestMeta requestMeta);  public void insertMaExpSerial(MaExpSerial serial, RequestMeta requestMeta);  public void updateMaExpSerial(MaExpSerial serial, RequestMeta requestMeta);  public void saveLog(ResultInfo result, RequestMeta requestMeta);  public ResultInfo payTrade(AutheInfo autheInfo, Object businessObject, String bankType, RequestMeta requestMeta);  public ResultInfo queryTrade(AutheInfo autheInfo, Object businessObject, String bankType, RequestMeta requestMeta);  public ResultInfo testTrade(AutheInfo autheInfo, Object businessObject, String bankType, RequestMeta requestMeta);  public ResultInfo icbcGetDataTrade(AutheInfo autheInfo, RequestMeta requestMeta);  public Map getMacpRuleDetail(Map params, RequestMeta requestMeta);  public List getMaCpBankBalList(int nd, RequestMeta requestMeta);  public List getUserSearchStore(String userId, String conditionId, int nd, RequestMeta requestMeta);  public void updateUserSearchStore(UserSearchStore store, RequestMeta requestMeta);  public void insertuserSearchStore(UserSearchStore store, RequestMeta requestMeta);  public void deleteSearchStore(UserSearchStore store, RequestMeta requestMeta);  public List getAgentBank(int nd, String accoType, String userId, RequestMeta requestMeta);  public List getBankAccountByAccNo(int nd, String bankAccNo, RequestMeta requestMeta);  public List getGkBusinessLog(BaseBill bill, RequestMeta requestMeta);  public List getGkBusinessLog(String billId, String tableName, RequestMeta requestMeta);  public void addUser(User user, String coCode, String orgCode, String posiCode, String groupId, String nd);  void uploadLargeFile(AsFile asFile, RequestMeta meta);  // 从web服务器直接下载投标一栏表  byte[] getTbylbFromFileMenuById(String fileId, String packCode, RequestMeta requestMeta) throws Exception;  public void uploadFileSavePath(AsFile asFile, RequestMeta meta);  public List getAsEmpByUserID(AsEmp emp, RequestMeta requestMeta);  public List getAllAsOptionById(String optId, RequestMeta requestMeta);  AsFile getAsFileNoContentById(String fileId, RequestMeta requestMeta);  List getRoleLstSearchCondition(String conditionId, List roles, RequestMeta requestMeta);}