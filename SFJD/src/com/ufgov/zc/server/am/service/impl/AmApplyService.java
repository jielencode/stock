package com.ufgov.zc.server.am.service.impl;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import org.josql.Query;import org.josql.QueryResults;import com.ufgov.zc.common.am.model.AmApply;import com.ufgov.zc.common.am.model.AmVoucher;import com.ufgov.zc.common.commonbiz.fieldmap.FieldMapRegister;import com.ufgov.zc.common.commonbiz.model.BankAccount;import com.ufgov.zc.common.commonbiz.model.MaTzdSumElement;import com.ufgov.zc.common.system.constants.BillTypeConstants;import com.ufgov.zc.common.system.constants.BusinessOptionConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.dto.MainSubBill;import com.ufgov.zc.common.system.dto.PrintObject;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.exception.DataAlreadyDeletedException;import com.ufgov.zc.common.system.josql.JoSqlFunctions;import com.ufgov.zc.common.system.model.AsOption;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.common.system.model.User;import com.ufgov.zc.common.system.util.BeanUtil;import com.ufgov.zc.common.system.util.LevelControlUtil;import com.ufgov.zc.server.am.dao.IAmApplyDao;import com.ufgov.zc.server.am.dao.IAmVoucherDao;import com.ufgov.zc.server.am.service.IAmApplyService;import com.ufgov.zc.server.commonbiz.dao.IBiBalanceDao;import com.ufgov.zc.server.commonbiz.dao.IMaTzdSumElementDao;import com.ufgov.zc.server.system.dao.IAsOptionDao;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.print.PrintManager;import com.ufgov.zc.server.system.util.BillDBDigestUtil;import com.ufgov.zc.server.system.util.GkBusinessLogUtil;import com.ufgov.zc.server.system.util.NumUtil;import com.ufgov.zc.server.system.util.RequestMetaUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;public class AmApplyService implements IAmApplyService {  private IAmApplyDao amApplyDao;  private IAmVoucherDao amVoucherDao;  private IWorkflowDao workflowDao;  private WFEngineAdapter wfEngineAdapter;  private IBiBalanceDao biBalanceDao;  private IAsOptionDao asOptionDao;  private IMaTzdSumElementDao maTzdSumElementDao;  public IMaTzdSumElementDao getMaTzdSumElementDao() {    return maTzdSumElementDao;  }  public void setMaTzdSumElementDao(IMaTzdSumElementDao maTzdSumElementDao) {    this.maTzdSumElementDao = maTzdSumElementDao;  }  public IWorkflowDao getWorkflowDao() {    return workflowDao;  }  public void setWorkflowDao(IWorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public IAmApplyDao getAmApplyDao() {    return amApplyDao;  }  public void setAmApplyDao(IAmApplyDao amApplyDao) {    this.amApplyDao = amApplyDao;  }  public IAmVoucherDao getAmVoucherDao() {    return amVoucherDao;  }  public void setAmVoucherDao(IAmVoucherDao amVoucherDao) {    this.amVoucherDao = amVoucherDao;  }  public IAsOptionDao getAsOptionDao() {    return asOptionDao;  }  public void setAsOptionDao(IAsOptionDao asOptionDao) {    this.asOptionDao = asOptionDao;  }  public IBiBalanceDao getBiBalanceDao() {    return biBalanceDao;  }  public void setBiBalanceDao(IBiBalanceDao biBalanceDao) {    this.biBalanceDao = biBalanceDao;  }  public PrintObject genSumMainSubPrintObject(List printList) {    List idList = new ArrayList();    for (int i = 0; i < printList.size(); i++) {      AmApply bill = (AmApply) printList.get(i);      idList.add(bill.getAmApplyId());    }    List subList = this.amApplyDao.getAmApplyBySumAmApplyIdForPrint(idList);    Map subMap = new HashMap();    for (int i = 0; i < subList.size(); i++) {      AmApply subBill = (AmApply) subList.get(i);      List list = (List) subMap.get(subBill.getSumAmApplyId());      if (list == null) {        list = new ArrayList();        subMap.put(subBill.getSumAmApplyId(), list);      }      list.add(subBill);    }    List mainSubBillList = new ArrayList();    for (int i = 0; i < printList.size(); i++) {      AmApply bill = (AmApply) printList.get(i);      List subDataList = (List) subMap.get(bill.getAmApplyId());      if (subDataList == null) {        subDataList = new ArrayList();      }      MainSubBill msb = new MainSubBill();      msb.setMainBill(bill);      msb.setSubBillList(subDataList);      mainSubBillList.add(msb);    }    return PrintManager.genMainSubPrintObject(mainSubBillList);  }  public List getAmApplyForProvider(ElementConditionDto dto) {    return this.amApplyDao.getAmApplyForProvider(dto);  }  public List getAmApplyForIssum(ElementConditionDto dto) {    return amApplyDao.getAmApplyForIssum(dto);  }  public void updateAmApplyReceInfo(List amApplyList) {    this.amApplyDao.updateAmApplyReceInfo(amApplyList);  }  public void updateProcDateForAmBpAeEdit(List amApplyList) {    this.amApplyDao.updateProcDateForAmBpAeEdit(amApplyList);  }  private boolean isFinalAudit(Long processInstId) {    return workflowDao.getWfInstanceIdStatus(processInstId).equalsIgnoreCase("9");  }  //草稿保存数据  public void saveBeforSumAmApplyBAF(AmApply amApply) {    saveForAmApplyBAF(amApply);  }  public AmApply insertAmApply(AmApply amApply) {    String userId = RequestMetaUtil.getSvUserID();    String compoId = RequestMetaUtil.getCompoId();    amApply.setInputorId(userId);    amApply.setCdate(new Date());    amApply.setProcDate(RequestMetaUtil.getTransDate());    amApply.setNd(RequestMetaUtil.getSvNd());    String amApplyId = NumUtil.getInstance().getNo("AM_BPAE_EDIT", "AM_APPLY_ID", amApply);    amApply.setAmApplyId(amApplyId);    String inputGroupId = NumUtil.getInstance().getNo("AM_BPAE_EDIT", "INPUT_GROUP_ID", amApply);    amApply.setInputGroupId(inputGroupId);    Long draftid = workflowDao.createDraftId();    amApply.setProcessInstId(draftid);    amApplyDao.insertBeforSumAmApply(amApply);    AsWfDraft asWfDraft = new AsWfDraft();    asWfDraft.setCompoId(compoId);    asWfDraft.setWfDraftName(amApply.getTitleField());    asWfDraft.setUserId(userId);    asWfDraft.setMasterTabId("AM_APPLY");    asWfDraft.setWfDraftId(BigDecimal.valueOf(draftid.longValue()));    workflowDao.insertAsWfdraft(asWfDraft);    return amApply;  }  public AmApply saveForAmApplyBAF(AmApply amApply) {    if (amApply.getAmApplyId() == null || amApply.getAmApplyId().trim().equals("")) {      insertForAmApply(amApply);    } else {      updateForAmApply(amApply);    }    GkBusinessLogUtil.saveGkBusinessLog(amApply);    return amApply;  }  private void insertForAmApply(AmApply amApply) {    updateBiBalanceForAmApply(amApply);    insertAmApply(amApply);  }  /**   * 判断保存时是否写余额   * @param amVoucher   * @return   */  private boolean saveNeedProcessBalance(AmApply amApply) {    if (amApply.getOrgMoney().signum() == -1) {      return false;    }    boolean result = "0".equals(asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DECBAL_FLAG_AM)    .getOptVal());    if (result && amApply.getOrgMoney().signum() == 1) {      return true;    }    return false;  }  private void updateForAmApply(AmApply amApply) {    AmApply oldAmApply = amApplyDao.getAmApplyByAmApplyId(amApply.getAmApplyId());    if (oldAmApply == null) {      throw new DataAlreadyDeletedException("拨款申请id为：" + oldAmApply.getAmApplyId() + "的数据已被删除,保存失败！");    }    if ((oldAmApply.getOrgMoney().signum() * amApply.getOrgMoney().signum() == -1)    || (oldAmApply.getCurMoney().signum() * amApply.getCurMoney().signum() == -1)) {      throw new BusinessException("修改金额有误！");    }    String compoId = RequestMetaUtil.getCompoId();    if (!"AM_BPAE_AUDIT".equals(compoId)) {//编辑页面保存要处理余额，审核页面保存不用处理余额      BigDecimal subValue = amApply.getOrgMoney().subtract(oldAmApply.getOrgMoney());      if (subValue.signum() != 0) {        if (saveNeedProcessBalance(amApply)) {//0：保存时写余额          int updateCount = biBalanceDao.updateBiBalanceForAm(subValue, amApply.getBiBalanceId());          if (updateCount == 0) {            throw new BusinessException("余额不足！保存失败！");          }        }      }    }    amApplyDao.updateAmApply(amApply);  }  private void updateBiBalanceForAmApply(AmApply amApply) {    if (saveNeedProcessBalance(amApply)) {//0：保存时写余额      BigDecimal money = amApply.getOrgMoney();      String biBalanceId = amApply.getBiBalanceId();      int updateCount = biBalanceDao.updateBiBalanceForAm(money, biBalanceId);      if (updateCount == 0) {        throw new BusinessException("余额不足！保存失败！");      }    }  }  //送审  public AmApply sendForAmApplyEdit(AmApply amApply) {    wfEngineAdapter.newCommit(amApply.getComment(), amApply, null);    GkBusinessLogUtil.saveGkBusinessLog(amApply);    return amApply;  }  public List getAmApplyForAmBpaeAuditList(ElementConditionDto dto) {    return amApplyDao.getAmApplyForAmBpaeAuditList(dto);  }  /**   * 通过   */  public AmApply auditForAmApply(AmApply amApply) {    return auditForAmApply(amApply, null);  }  /**   * 填写意见通过   */  public AmApply auditForAmApply(AmApply amApply, String opinion) {    wfEngineAdapter.commit(opinion == null ? "" : opinion, amApply, null);    //1：终审时写余额    if (isFinalAudit(amApply.getProcessInstId())) {//是否终审      int updateRowCount = updateBiBalance(amApply, "audit");      if (updateRowCount != 1) {        throw new BusinessException("指标余额不足！");      }      amApplyDao.updateAmApplyForAudit(amApply);    }    GkBusinessLogUtil.saveGkBusinessLog(amApply);    return amApply;  }  private int updateBiBalance(AmApply amApply, String auditOrRework) {    String balFlag = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DECBAL_FLAG_AM).getOptVal();    int updateRowCount = 0;    boolean isAudit = "audit".equalsIgnoreCase(auditOrRework) ? true : false;    if (balFlag != null & balFlag.equalsIgnoreCase("1") || amApply.getOrgMoney().signum() == -1) {      BigDecimal curMoney = isAudit ? amApply.getCurMoney() : amApply.getCurMoney().negate();      updateRowCount = biBalanceDao.updateBiBalanceForAm(curMoney, amApply.getBiBalanceId());    } else if (balFlag != null & balFlag.equalsIgnoreCase("0") && amApply.getOrgMoney().signum() == 1) {      BigDecimal tempSubMoney = amApply.getCurMoney().subtract(amApply.getOrgMoney());      BigDecimal subMoney = isAudit ? tempSubMoney : tempSubMoney.negate();      if (subMoney.signum() != 0) {        updateRowCount = biBalanceDao.updateBiBalanceForAm(subMoney, amApply.getBiBalanceId());      } else {        updateRowCount = 1;      }    }    return updateRowCount;  }  /**   * 作废   */  public void blankoutForAmApply(AmApply amApply) {    String balFlag = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DECBAL_FLAG_AM).getOptVal();    if (balFlag.equalsIgnoreCase("0") & amApply.getOrgMoney().signum() != -1) {      updateBiBalanceForAmDelete(amApply);    }    this.wfEngineAdapter.interrupt(amApply.getComment(), amApply, null);    String isValidFlag = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DEL_INVALIDATION).getOptVal();    int num = amApplyDao.updateAmApplyForUndo(isValidFlag.equals("1") ? "9" : "0", amApply.getAmApplyId());    if (num == 0) {      throw new DataAlreadyDeletedException("拨款申请id为" + amApply.getAmApplyId() + "的数据已被删除，作废失败！");    }    GkBusinessLogUtil.saveGkBusinessLog(amApply);  }  /**   * 余额减少   */  private void updateBiBalanceForAmDelete(AmApply amApply) {    int rownum = biBalanceDao.updateBiBalanceForAmDelete(amApply.getAmApplyId(), amApply.getBiBalanceId());    if (rownum != 1) {      throw new BusinessException("指标余额不足！");    }  }  /**   * 收回   */  public AmApply callbackForAmApply(AmApply amApply) {    wfEngineAdapter.callback(amApply.getComment(), amApply, null);    GkBusinessLogUtil.saveGkBusinessLog(amApply);    return amApply;  }  /**   * 删除拨款申请   */  public int deleteForAmApply(AmApply amApply) {    String balFlag = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DECBAL_FLAG_AM).getOptVal();    if (balFlag.equalsIgnoreCase("0") & amApply.getOrgMoney().signum() != -1) {      updateBiBalanceForAmDelete(amApply);    }    String compoId = RequestMetaUtil.getCompoId();    workflowDao.deleteDraft(compoId, amApply.getProcessInstId());    GkBusinessLogUtil.saveGkBusinessLog(amApply);    return amApplyDao.deleteAmApply(amApply);  }  public AmApply saveAndSendForAmApplyBAF(AmApply amApply) {    amApply = this.saveForAmApplyBAF(amApply);    wfEngineAdapter.newCommit(amApply.getComment(), amApply, null);    return amApply;  }  /**   * 销审   */  public AmApply unAuditForAmApply(AmApply amApply) {    String balFlag = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DECBAL_FLAG_AM).getOptVal();    //1：终审时写余额    if (isFinalAudit(amApply.getProcessInstId())) {//是否终审      int updateRowCount = updateBiBalance(amApply, "rework");      if (updateRowCount != 1) {        throw new BusinessException("指标余额不足！");      }    }    int num = amApplyDao.updateAmApplyFieldValueById("A_STATUS_CODE", "2", amApply.getAmApplyId());    if (num == 0) {      throw new DataAlreadyDeletedException("拨款申请id为" + amApply.getAmApplyId() + "的数据已被删除，销审失败！");    }    wfEngineAdapter.unAudit(amApply.getComment(), amApply, null);    afterForAmApplyReWork(amApply);    amApply.setAdate(null);    amApply.setAuditorId(null);    amApply.setAuditorName(null);    amApplyDao.updateAmApplyForAudit(amApply);    GkBusinessLogUtil.saveGkBusinessLog(amApply);    return amApply;  }  /**   * 退回   */  public AmApply untreadForAmApply(AmApply amApply) {    wfEngineAdapter.untreadGk(amApply.getComment(), amApply, null);    GkBusinessLogUtil.saveGkBusinessLog(amApply);    return amApply;  }  public List getAmApplyForAmPafpv(ElementConditionDto dto) {    return amApplyDao.getAmApplyForAmPafpv(dto);  }  /**   * 流程销审后做相应的处理   * @param cpApply   */  private void afterForAmApplyReWork(AmApply amApply) {    //凭证号为空,不需判断其他,直接重启流程    if (amApply.getAmVoucherId() != null) {      AmVoucher amVoucher = amVoucherDao.getAmVoucherById(amApply.getAmVoucherId());      String aStatusCode = amVoucher.getAstatusCode();      String dealState = amVoucher.getDealState();      if (isAuditedVoucher()) {//生成终审凭证        if (!"0".equals(dealState) && !"2".equals(dealState)) //处理状态为未发送和已退回可以重启          throw new BusinessException("该拨款凭证已经提交银行，不能重启流程!");        deleteVou(amApply);        updateAmApplyForAfterUnAudit(amApply);      } else if (!isAuditedVoucher()) {//生成草稿凭证        if (!"0".equals(aStatusCode) && !"9".equals(aStatusCode)) {//草稿,作废可以重启          throw new BusinessException("终审生成的凭证正在审核或者已经终审,不能重启流程！");        }        deleteVou(amApply);        updateAmApplyForAfterUnAudit(amApply);      }    }  }  /**   * 获取拨款申请终审时产生的凭证：是草稿还是终审过的   */  private boolean isAuditedVoucher() {    String strGenAuditedVou = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_GEN_AUDITED_VOU)    .getOptVal();    if (strGenAuditedVou.equals("1"))      return true;    else      return false;  }  /**   * 删除直接拨款申请对应的拨款凭证   * @param cpApply   */  private void deleteVou(AmApply amApply) {    int rowCount = amVoucherDao.deleteAmVoucherById(amApply.getAmVoucherId());    if (rowCount != 1) {      String errorMsg = "删除拨款申请 " + amApply.getAmVoucherId() + " 对应的拨款凭证失败！删除凭证：" + rowCount + " 条！";      throw new BusinessException(errorMsg);    }  }  /**   * 销审后清空拨款支付申请 生成的支付凭证ID   * @param amApply   */  private void updateAmApplyForAfterUnAudit(AmApply amApply) {    int rowCount = amApplyDao.updateAmApplyForAfterUnAudit(amApply.getAmApplyId());    if (rowCount != 1) {      String errorMsg = "清空拨款申请 " + amApply.getAmApplyId() + " 生成的拨款凭证ID失败！清空凭证ID：" + rowCount + " 条！";      throw new BusinessException(errorMsg);    }  }  public String AmApplyCreateAmVoucher(String coCode, List amApplyList, int nd, User user,  BankAccount payBankAccount, Date createDate, String isSum) {    // 是否生成终审的拨款凭证    AsOption asOption = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_GEN_AUDITED_VOU);    String compoId = "AM_PAFPV";    String amApplyIds = "";    String amVoucherIds = "";    String vouNos = "";    String inputGroupIds = "";    String draftIds = "";    // 获取ids列表（自动编号）    NumUtil numUtil = NumUtil.getInstance();    String inputGroupId = null;    for (int i = 0; i < amApplyList.size(); i++) {      AmApply amApply = (AmApply) amApplyList.get(i);      if (inputGroupId == null)        inputGroupId = numUtil.getNo(compoId, "INPUT_GROUP_ID", amApply);//处理批次号一致      // 汇总拨款凭证的id      if (i == 0 && isSum.equals("Y")) {        amApplyIds += ",@";        amVoucherIds += "," + numUtil.getNo(compoId, "AM_VOUCHER_ID", amApply);        vouNos += "," + numUtil.getNo(compoId, "VOU_NO", amApply);        inputGroupIds += "," + inputGroupId;        draftIds += ",@";      }      amApplyIds += "," + amApply.getAmApplyId();      amVoucherIds += ","      + (amApply.getAmVoucherIdBak() == null ? numUtil.getNo(compoId, "AM_VOUCHER_ID", amApply) : amApply      .getAmVoucherIdBak());//防止断号处理      vouNos += ","      + (amApply.getVouNoBak() == null ? numUtil.getNo(compoId, "VOU_NO", amApply) : amApply.getVouNoBak());//防止断号处理      inputGroupIds += "," + inputGroupId;      // 获取草稿号：@表示直接生成终审的拨款凭证      String draftId = "@";      if (isSum.equals("N") && asOption != null && asOption.getOptVal() != null      && asOption.getOptVal().equals("0"))        draftId = workflowDao.createDraftId().toString();      draftIds += "," + draftId;    }    amApplyIds = amApplyIds.substring(1);    amVoucherIds = amVoucherIds.substring(1);    vouNos = vouNos.substring(1);    inputGroupIds = inputGroupIds.substring(1);    draftIds = draftIds.substring(1);    GkBusinessLogUtil.saveGkBusinessLog(amApplyList);    return amApplyDao.AmApplyCreateAmVoucher(coCode, amApplyIds, amVoucherIds, vouNos, inputGroupIds,    draftIds, nd, BillTypeConstants.BILL_TYPE_CODE_AM_PAFPV_EDIT, user, payBankAccount, createDate, isSum);  }  public String AmApplyCreateAmVoucher(List amApplyList, Date createDate, String isSum) {    GkBusinessLogUtil.saveGkBusinessLog(amApplyList);    if ("Y".equalsIgnoreCase(isSum)) {      return CreateSumAmVoucher(amApplyList, createDate);    } else {      return CreateUnSumAmVoucher(amApplyList, createDate);    }  }  private String CreateSumAmVoucher(List amApplyList, Date createDate) {    AsOption asOption = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_GEN_AUDITED_VOU);// 是否生成终审的拨款凭证    int nd = RequestMetaUtil.getSvNd();    String elementId = "m05";    List elementList = maTzdSumElementDao.getMaTzdSumElement(nd, elementId);    Map map = FieldMapRegister.get(AmApply.class);    Map levelMap = asOptionDao.getFieldLevelOptions();    String groupByStr = "";    for (int i = 0; i < elementList.size(); i++) {      MaTzdSumElement maTzdSumElement = (MaTzdSumElement) elementList.get(i);      if ("1".equals(maTzdSumElement.getIsSum())) {        String propName = (String) map.get(maTzdSumElement.getElementCode());        if ("FUND_CODE".equals(maTzdSumElement.getElementCode()) && maTzdSumElement.getSumLevel() != null          && Integer.parseInt(maTzdSumElement.getSumLevel().trim()) > 0) {          int sumLen = LevelControlUtil.getCtrLength((String) levelMap.get(maTzdSumElement.getElementCode()),          Integer.parseInt(maTzdSumElement.getSumLevel().trim()));          groupByStr += "subStr(" + propName + ",0," + sumLen + ") ,";        } else {          groupByStr += propName + ",";        }      }    }    String sql = "SELECT * FROM "    + AmApply.class.getName()    + " group BY " + groupByStr    + " receBankAccCode ,payBankAccCode "    + " EXECUTE ON GROUP_BY_RESULTS sumBigDecimal(orgMoney) sumorgmoney,sumBigDecimal(curMoney) sumcurmoney ";    Query query = new Query();    NumUtil numUtil = NumUtil.getInstance();    String compoId = "AM_PAFPV";    String inputGroupId = numUtil.getNo(compoId, "INPUT_GROUP_ID", new AmVoucher());    try {      query.addFunctionHandler(new JoSqlFunctions());      query.parse(sql);      QueryResults rs = query.execute(amApplyList);      Map groupResultMap = rs.getGroupByResults();      Iterator it = ((HashMap) groupResultMap).keySet().iterator();      List amVoucherList = new ArrayList();      List tempAmApplyList = new ArrayList();      while (it.hasNext()) {        List key = (List) it.next();        List list = (List) groupResultMap.get(key);        Map sumMap = rs.getGroupBySaveValues(key);        AmApply amApply = (AmApply) list.get(0);        AmVoucher amVoucher = new AmVoucher();        amVoucher.setIsValid("1");        amVoucher.setIsSumAmVoucher("1");        amVoucher.setCreateType("0");        amVoucher.setControlType("3");        amVoucher.setAmAdjustCode("101");        amVoucher.setProcDate(createDate);        amVoucher.setInputorId(RequestMetaUtil.getSvUserID());        amVoucher.setInputorName(RequestMetaUtil.getSvUserName());        amVoucher.setPreMonth(RequestMetaUtil.getSvMonth());        amVoucher.setCdate(new Date());        amVoucher.setNd(RequestMetaUtil.getSvNd());        amVoucher.setOrgMoney((BigDecimal) sumMap.get("sumorgmoney"));        amVoucher.setCurMoney((BigDecimal) sumMap.get("sumcurmoney"));        amVoucher.setAstatusCode("3");        amVoucher.setDealState("9".equals(amApply.getBaccId()) ? "3" : "0");//专户拨款用        amVoucher.setDecType(amApply.getDecType());        amVoucher.setInputGroupId(inputGroupId);        if (groupByStr.indexOf("fundCode") > -1) {          amVoucher.setFundCode(amApply.getFundCode());        }        amVoucher.setPayAccCode(amApply.getPayAccCode());        amVoucher.setPayAccName(amApply.getPayAccName());        amVoucher.setPayBankAccCode(amApply.getPayBankAccCode());        amVoucher.setPayBankNo(amApply.getPayBankNo());        amVoucher.setPayBankNodeCode(amApply.getPayBankNodeCode());        amVoucher.setPayBankNodeName(amApply.getPayBankNodeName());        amVoucher.setPayBankCode(amApply.getPayBankCode());        amVoucher.setPayBankName(amApply.getPayBankName());        amVoucher.setPayCode(amApply.getPayCode());        amVoucher.setReceAccCode(amApply.getReceAccCode());        amVoucher.setReceAccName(amApply.getReceAccName());        amVoucher.setReceBankAccCode(amApply.getReceBankAccCode());        amVoucher.setReceBankNo(amApply.getReceBankNo());        amVoucher.setReceBankNodeCode(amApply.getReceBankNodeCode());        amVoucher.setReceBankNodeName(amApply.getReceBankNodeName());        amVoucher.setReceCode(amApply.getReceCode());        String amVoucherId = numUtil.getNo(compoId, "AM_VOUCHER_ID", amVoucher);        amVoucher.setAmVoucherId(amVoucherId);        amVoucher.setVouNo(numUtil.getNo(compoId, "VOU_NO", amVoucher));        amVoucherList.add(amVoucher);        amVoucherList.addAll(convertAmVoucher(list, createDate, amVoucherId, inputGroupId, asOption));        tempAmApplyList.addAll(list);      }      this.amVoucherDao.insertAmVoucher(amVoucherList);      this.amApplyDao.updateAmApplyAfterSum(tempAmApplyList);    } catch (Exception e) {      throw new BusinessException("拨款申请生成汇总凭证时出错！", e);    }    return null;  }  private String CreateUnSumAmVoucher(List amApplyList, Date createDate) {    NumUtil numUtil = NumUtil.getInstance();    AsOption asOption = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_GEN_AUDITED_VOU);// 是否生成终审的拨款凭证    String inputGroupId = numUtil.getNo("AM_PAFPV", "INPUT_GROUP_ID", new AmVoucher());    List amVoucherList = convertAmVoucher(amApplyList, createDate, null, inputGroupId, asOption);    this.amVoucherDao.insertAmVoucher(amVoucherList);    this.amApplyDao.updateAmApplyAfterSum(amApplyList);    return null;  }  private List convertAmVoucher(List amApplyList, Date createDate, String sumAmVoucherId,  String inputGroupId, AsOption asOption) {    String compoId = "AM_PAFPV";    NumUtil numUtil = NumUtil.getInstance();    List amVoucherList = new ArrayList();    for (int i = 0; i < amApplyList.size(); i++) {      AmApply amApply = (AmApply) amApplyList.get(i);      AmVoucher amVoucher = new AmVoucher();      BeanUtil.commonFieldsCopy(amApply, amVoucher);      amVoucher.setIsValid("1");      amVoucher.setIsSumAmVoucher("0");      amVoucher.setCreateType("0");      amVoucher.setControlType("3");      amVoucher.setAmAdjustCode("101");      amVoucher.setProcDate(createDate);      amVoucher.setInputorId(RequestMetaUtil.getSvUserID());      amVoucher.setInputorName(RequestMetaUtil.getSvUserName());      amVoucher.setPreMonth(RequestMetaUtil.getSvMonth());      amVoucher.setCdate(new Date());      amVoucher.setNd(RequestMetaUtil.getSvNd());      amVoucher.setOrgMoney(amApply.getOrgMoney());      amVoucher.setCurMoney(amApply.getCurMoney());      amVoucher.setDecType(amApply.getDecType());      amVoucher.setDealState("9".equals(amApply.getBaccId()) ? "3" : "0");//专户拨款用      String idBak = amApply.getAmVoucherIdBak();      amVoucher.setAmVoucherId(idBak == null ? numUtil.getNo(compoId, "AM_VOUCHER_ID", amVoucher) : idBak);      String noBak = amApply.getVouNoBak();      amVoucher.setVouNo(noBak == null ? numUtil.getNo(compoId, "VOU_NO", amVoucher) : noBak);      amVoucher.setInputGroupId(inputGroupId);      amVoucher.setAuditorId(null);      amVoucher.setAuditorName(null);      amVoucher.setAdate(null);      amVoucher.setAopinion(null);      amVoucher.setAnStatus(null);      amVoucher.setCheckNo(null);      amVoucher.setSumAmVoucherId(sumAmVoucherId);      amVoucher.setProcessInstId(null);      if (asOption != null && asOption.getOptVal() != null && asOption.getOptVal().equals("0")) {        amVoucher.setAstatusCode("3");      } else {        amVoucher.setAstatusCode("0");        //amVoucher.setProcessInstId(workflowDao.createDraftId());      }      amVoucherList.add(amVoucher);      amApply.setVouNo(amVoucher.getVouNo());//生成凭证后要回写申请VOU_NO用      amApply.setAmVoucherId(amVoucher.getAmVoucherId());//生成凭证后要回写申请AM_VOUCHERID用    }    return amVoucherList;  }  public void increasePrintTimes(List amApplyIdList) {    amApplyDao.increasePrintTimes(amApplyIdList);  }  public List getAmApplyForAmApplyQueryList(ElementConditionDto dto) {    return amApplyDao.getAmApplyForAmApplyQueryList(dto);  }  public List getAmApplyForApplySum(ElementConditionDto dto) {    List list = this.amApplyDao.getAmApplyForApplySum(dto);    BillDBDigestUtil.setBillDBDigest(list);    return list;  }  public void sumAmApply(List amApplyList) {    checkConsistency(amApplyList);    int nd = RequestMetaUtil.getSvNd();    String elementId = "m01";    List elementList = maTzdSumElementDao.getMaTzdSumElement(nd, elementId);    Map map = FieldMapRegister.get(AmApply.class);    Map levelMap = asOptionDao.getFieldLevelOptions();    String groupByStr = "";    List propertyList = new ArrayList();    // 固定汇总条件    propertyList.add("controlType");    for (int i = 0; i < propertyList.size(); i++) {      groupByStr += propertyList.get(i) + ",";    }    for (int i = 0; i < elementList.size(); i++) {      MaTzdSumElement maTzdSumElement = (MaTzdSumElement) elementList.get(i);      if ("1".equals(maTzdSumElement.getIsSum())) {        String propName = (String) map.get(maTzdSumElement.getElementCode());        propertyList.add(propName);        if (("CO_CODE".equals(maTzdSumElement.getElementCode())        || "FUND_CODE".equals(maTzdSumElement.getElementCode()) || "B_ACC_CODE".equals(maTzdSumElement        .getElementCode()))        && maTzdSumElement.getSumLevel() != null        && Integer.parseInt(maTzdSumElement.getSumLevel().trim()) > 0) {          int sumLen = LevelControlUtil.getCtrLength((String) levelMap.get(maTzdSumElement.getElementCode()),          Integer.parseInt(maTzdSumElement.getSumLevel().trim()));          groupByStr += "subStr(" + propName + ",0," + sumLen + ") ,";        } else if ("RECE_BANKACCCODE".equals(maTzdSumElement.getElementCode())) {          groupByStr += propName + ",";//receBankAccCode          propertyList.add("receAccName");          groupByStr += "receAccName,";          propertyList.add("receBankNodeName");          groupByStr += "receBankNodeName,";        } else {          groupByStr += propName + ",";        }      }    }    groupByStr = groupByStr.substring(0, groupByStr.lastIndexOf(','));    String sql = "SELECT * FROM "    + AmApply.class.getName()    + " group BY "    + groupByStr    + " EXECUTE ON GROUP_BY_RESULTS sumBigDecimal(orgMoney) sumorgmoney,sumBigDecimal(curMoney) sumcurmoney ";    Query query = new Query();    try {      query.addFunctionHandler(new JoSqlFunctions());      query.parse(sql);      QueryResults rs = query.execute(amApplyList);      Map groupResultMap = rs.getGroupByResults();      Iterator it = ((HashMap) groupResultMap).keySet().iterator();      List mainBillList = new ArrayList();      List subBillList = new ArrayList();      while (it.hasNext()) {        List key = (List) it.next();        List list = (List) groupResultMap.get(key);        Map sumMap = rs.getGroupBySaveValues(key);        AmApply mainBill = new AmApply();        mainBill.setOrgMoney((BigDecimal) sumMap.get("sumorgmoney"));        mainBill.setCurMoney((BigDecimal) sumMap.get("sumcurmoney"));        for (int i = 0; i < propertyList.size(); i++) {          String pro = (String) propertyList.get(i);          mainBill.set(pro, key.get(i));        }        mainBill.setIsSumAmApply("1");        mainBill.setIsValid("1");        mainBill.setCdate(new Date());        mainBill.setInputorId(RequestMetaUtil.getSvUserID());        mainBill.setInputorId(RequestMetaUtil.getSvUserName());        mainBill.setPreMonth(new Integer(RequestMetaUtil.getSvMonth()));        mainBill.setCdate(new Date());        mainBill.setProcDate(RequestMetaUtil.getTransDate());        mainBill.setNd(RequestMetaUtil.getSvNd());        String amApplyId = NumUtil.getInstance().getNo("AM_APPLY_SUM", "AM_APPLY_ID", mainBill);        mainBill.setAmApplyId(amApplyId);        String inputGroupId = NumUtil.getInstance().getNo("AM_APPLY_SUM", "INPUT_GROUP_ID", mainBill);        mainBill.setInputGroupId(inputGroupId);        for (int i = 0; i < list.size(); i++) {          AmApply subBill = (AmApply) list.get(i);          subBill.setSumAmApplyId(mainBill.getAmApplyId());        }        mainBillList.add(mainBill);        subBillList.addAll(list);      }      this.amApplyDao.insertAmApply(mainBillList);      this.amApplyDao.updateSumAmApplyId(subBillList);      GkBusinessLogUtil.saveGkBusinessLog(amApplyList);    } catch (Exception e) {      throw new BusinessException("拨款申请汇总时出错！", e);    }  }  private void checkConsistency(List amApplyList) {    List idList = new ArrayList();    for (int i = 0; i < amApplyList.size(); i++) {      idList.add(((AmApply) amApplyList.get(i)).getAmApplyId());    }    List originalList = this.amApplyDao.getAmApplyByIdList(idList);    Map originalMap = new HashMap();    for (int i = 0; i < originalList.size(); i++) {      AmApply am = ((AmApply) originalList.get(i));      originalMap.put(am.getAmApplyId(), am);    }    StringBuffer deleteInfo = new StringBuffer("");    StringBuffer updateInfo = new StringBuffer("");    boolean isConsistent = true;    for (int i = 0; i < amApplyList.size(); i++) {      AmApply am = (AmApply) amApplyList.get(i);      AmApply oriAm = (AmApply) originalMap.get(am.getAmApplyId());      if (oriAm == null) {        isConsistent = false;        deleteInfo.append(am.getAmApplyId() + ",");      } else {        if (!am.getDbDigest().equals(oriAm.digest())) {          isConsistent = false;          updateInfo.append(am.getAmApplyId() + ",");        }      }    }    if (!isConsistent) {      String errorInfo = "";      if (deleteInfo.length() > 0) {        errorInfo += "id为：" + deleteInfo.substring(0, deleteInfo.lastIndexOf(",")) + "的数据已被删除.";      }      if (updateInfo.length() > 0) {        errorInfo += "\nid为：" + updateInfo.substring(0, updateInfo.lastIndexOf(",")) + "的数据已被修改.";      }      throw new BusinessException(errorInfo);    }  }  public void cancelSumAmApply(List amApplyList) {    List sumAmApplyIdList = new ArrayList();    for (int i = 0; i < amApplyList.size(); i++) {      sumAmApplyIdList.add(((AmApply) amApplyList.get(i)).getAmApplyId());    }    this.amApplyDao.deleteAmApply(sumAmApplyIdList);    this.amApplyDao.setSumAmApplyIdNull(sumAmApplyIdList);    GkBusinessLogUtil.saveGkBusinessLog(amApplyList);  }  public List getAmApplyBySumAmApplyId(String sumAmApplyId) {    return amApplyDao.getAmApplyBySumAmApplyId(sumAmApplyId);  }  public String blankOutApply(Map map) {    StringBuffer str = new StringBuffer();    str.append(blankOutDpControlApply((List) map.get("dpControl")));    str.append(blankOutBiControlApply((List) map.get("biControl")));    str.append(blankOutNoControlApply((List) map.get("noControl")));    str.append(blankOutZhControlApply((List) map.get("zhControl")));    return str.toString();  }  /**   * 受计划控制   */  private String blankOutDpControlApply(List dpControl) {    if (dpControl.size() != 0) {      return "";    }    return "";  }  /**   * 受指标控制   */  private String blankOutBiControlApply(List biControl) {    if (biControl.size() != 0) {      for (int i = 0; i < biControl.size(); i++) {        AmApply amApply = (AmApply) biControl.get(i);        updateBiBalanceForAmDelete(amApply);        this.wfEngineAdapter.interruptNotJudge(amApply.getComment(), amApply, null);        int num = amApplyDao.updateAmApplyForUndo("0", amApply.getAmApplyId());        if (num == 0) {          throw new DataAlreadyDeletedException("拨款申请id为" + amApply.getAmApplyId() + "的数据已被删除，作废失败！");        }      }    }    return "";  }  /**   * 无源头   */  private String blankOutNoControlApply(List noControl) {    if (noControl.size() != 0) {      for (int i = 0; i < noControl.size(); i++) {        AmApply amApply = (AmApply) noControl.get(i);        this.wfEngineAdapter.interruptNotJudge(amApply.getComment(), amApply, null);        int num = amApplyDao.updateAmApplyForUndo("0", amApply.getAmApplyId());        if (num == 0) {          throw new DataAlreadyDeletedException("拨款申请id为" + amApply.getAmApplyId() + "的数据已被删除，作废失败！");        }      }    }    GkBusinessLogUtil.saveGkBusinessLog(noControl);    return "";  }  /**   * 专户拨款   */  private String blankOutZhControlApply(List zhControl) {    if (zhControl.size() != 0) {      return "";    }    return "";  }}