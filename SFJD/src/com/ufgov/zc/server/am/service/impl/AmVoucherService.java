package com.ufgov.zc.server.am.service.impl;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import org.josql.Query;import org.josql.QueryResults;import com.ufgov.zc.common.am.model.AmVoucher;import com.ufgov.zc.common.commonbiz.fieldmap.FieldMapRegister;import com.ufgov.zc.common.commonbiz.model.MaTzdSumElement;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.BusinessOptionConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.dto.MainSubBill;import com.ufgov.zc.common.system.dto.PrintObject;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.exception.DataAlreadyDeletedException;import com.ufgov.zc.common.system.josql.JoSqlFunctions;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.common.system.util.LevelControlUtil;import com.ufgov.zc.server.am.dao.IAmVoucherDao;import com.ufgov.zc.server.am.service.IAmVoucherService;import com.ufgov.zc.server.commonbiz.dao.IBiBalanceDao;import com.ufgov.zc.server.commonbiz.dao.IDpBalanceDao;import com.ufgov.zc.server.commonbiz.dao.IMaTzdSumElementDao;import com.ufgov.zc.server.system.dao.IAsOptionDao;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.print.PrintManager;import com.ufgov.zc.server.system.util.BillDBDigestUtil;import com.ufgov.zc.server.system.util.GkBusinessLogUtil;import com.ufgov.zc.server.system.util.NumUtil;import com.ufgov.zc.server.system.util.RequestMetaUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;public class AmVoucherService implements IAmVoucherService {  private IAmVoucherDao amVoucherDao;  private IDpBalanceDao dpBalanceDao;  private IAsOptionDao asOptionDao;  private IWorkflowDao workflowDao;  private IBiBalanceDao biBalanceDao;  private WFEngineAdapter wfEngineAdapter;  private IMaTzdSumElementDao maTzdSumElementDao;  public IMaTzdSumElementDao getMaTzdSumElementDao() {    return maTzdSumElementDao;  }  public void setMaTzdSumElementDao(IMaTzdSumElementDao maTzdSumElementDao) {    this.maTzdSumElementDao = maTzdSumElementDao;  }  public IAmVoucherDao getAmVoucherDao() {    return amVoucherDao;  }  public void setAmVoucherDao(IAmVoucherDao amVoucherDao) {    this.amVoucherDao = amVoucherDao;  }  public IDpBalanceDao getDpBalanceDao() {    return dpBalanceDao;  }  public void setDpBalanceDao(IDpBalanceDao dpBalanceDao) {    this.dpBalanceDao = dpBalanceDao;  }  public IBiBalanceDao getBiBalanceDao() {    return biBalanceDao;  }  public void setBiBalanceDao(IBiBalanceDao biBalanceDao) {    this.biBalanceDao = biBalanceDao;  }  public void auditForAmVoucherFN(AmVoucher amVoucher) {    amVoucherDao.auditForAmVouApplyAudit(amVoucher);  }  public AmVoucher auditForAmVoucher(AmVoucher amVoucher, String opinion) {    wfEngineAdapter.commit(opinion == null ? "" : opinion, amVoucher, null);    if (amVoucher.getControlType().equals("7") || amVoucher.getControlType().equals("2")) {      if (isFinalAudit(amVoucher.getProcessInstId())) {//是否终审        int updateRowCount = updateBiBalance(amVoucher, "audit");        if (updateRowCount != 1) {          throw new BusinessException("指标余额不足！");        }      }    } else if (amVoucher.getControlType().equals("1")) {      if (isFinalAudit(amVoucher.getProcessInstId())) {//是否终审        int updateRowCount = updateDpBalance(amVoucher, "audit");        if (updateRowCount != 1) {          throw new BusinessException("计划余额不足！");        }      }    }    amVoucherDao.updateAmVoucherForAudit(amVoucher);    GkBusinessLogUtil.saveGkBusinessLog(amVoucher);    return amVoucher;  }  private int updateBiBalance(AmVoucher amVoucher, String auditOrRework) {    String balFlag = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DECBAL_FLAG_AM).getOptVal();    int updateRowCount = 0;    boolean isAudit = "audit".equalsIgnoreCase(auditOrRework) ? true : false;    if (balFlag != null & balFlag.equalsIgnoreCase("1") || amVoucher.getOrgMoney().signum() == -1) {      BigDecimal curMoney = isAudit ? amVoucher.getCurMoney() : amVoucher.getCurMoney().negate();      updateRowCount = biBalanceDao.updateBiBalanceForAm(curMoney, amVoucher.getBiBalanceId());    } else if (balFlag != null & balFlag.equalsIgnoreCase("0") && amVoucher.getOrgMoney().signum() == 1) {      BigDecimal tempSubMoney = amVoucher.getCurMoney().subtract(amVoucher.getOrgMoney());      BigDecimal subMoney = isAudit ? tempSubMoney : tempSubMoney.negate();      if (subMoney.signum() != 0) {        updateRowCount = biBalanceDao.updateBiBalanceForAm(subMoney, amVoucher.getBiBalanceId());      } else {        updateRowCount = 1;      }    }    return updateRowCount;  }  private int updateDpBalance(AmVoucher amVoucher, String auditOrRework) {    String balFlag = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DECBAL_FLAG_AM).getOptVal();    int updateRowCount = 0;    boolean isAudit = "audit".equalsIgnoreCase(auditOrRework) ? true : false;    if (balFlag != null & balFlag.equalsIgnoreCase("1") || amVoucher.getOrgMoney().signum() == -1) {      BigDecimal curMoney = isAudit ? amVoucher.getCurMoney() : amVoucher.getCurMoney().negate();      updateRowCount = dpBalanceDao.updateDpBalanceForAm(curMoney, amVoucher.getDpBalanceId(), amVoucher      .getPreMonth());    } else if (balFlag != null & balFlag.equalsIgnoreCase("0") && amVoucher.getOrgMoney().signum() == 1) {      BigDecimal tempSubMoney = amVoucher.getCurMoney().subtract(amVoucher.getOrgMoney());      BigDecimal subMoney = isAudit ? tempSubMoney : tempSubMoney.negate();      if (subMoney.signum() != 0) {        updateRowCount = dpBalanceDao.updateDpBalanceForAm(subMoney, amVoucher.getDpBalanceId(), amVoucher        .getPreMonth());      } else {        updateRowCount = 1;      }    }    return updateRowCount;  }  private boolean isFinalAudit(Long processInstId) {    return workflowDao.getWfInstanceIdStatus(processInstId).equalsIgnoreCase("9");  }  public void unAuditForAmVoucherFN(AmVoucher amVoucher) {    GkBusinessLogUtil.saveGkBusinessLog(amVoucher);    amVoucherDao.depassForAmVouApplyAudit(amVoucher);  }  public IAsOptionDao getAsOptionDao() {    return asOptionDao;  }  public void setAsOptionDao(IAsOptionDao asOptionDao) {    this.asOptionDao = asOptionDao;  }  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public IWorkflowDao getWorkflowDao() {    return workflowDao;  }  public void setWorkflowDao(IWorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  /**   * 是否走工作流   * @return Y 走工作流 N 不走工作流   */  private boolean isDoWorkFlow() {    return "Y".equals(asOptionDao.getAsOption(BusinessOptionConstants.OPT_AM_IS_DO_WF).getOptVal()    .toUpperCase());  }  private boolean isSaveProcBalance() {    return "0".equals(asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DECBAL_FLAG_AM).getOptVal());  }  //审核通过  public AmVoucher auditForAmVoucher(AmVoucher amVoucher) {    return auditForAmVoucher(amVoucher, null);  }  public void blankoutForAmVoucher(AmVoucher amVoucher) {    String balFlag = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DECBAL_FLAG_AM).getOptVal();    String isValidFlag = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DEL_INVALIDATION).getOptVal();    if (amVoucher.getControlType().equals("7") || amVoucher.getControlType().equals("2")) {      if (balFlag.equalsIgnoreCase("0") & amVoucher.getOrgMoney().signum() != -1) {        updateBiBalanceForAmDelete(amVoucher);      }    } else if (amVoucher.getControlType().equals("1")) {      if (balFlag.equalsIgnoreCase("0") & amVoucher.getOrgMoney().signum() != -1) {        updateDpBalanceForAmDelete(amVoucher);      }    }    this.wfEngineAdapter.interrupt(amVoucher.getComment(), amVoucher, null);    int num = amVoucherDao.updateAmVoucherForUndo(isValidFlag.equals("1") ? "9" : "0", amVoucher    .getAmVoucherId());    if (num == 0) {      throw new DataAlreadyDeletedException("拨款凭证id为" + amVoucher.getAmVoucherId() + "的数据已被删除，作废失败！");    }    GkBusinessLogUtil.saveGkBusinessLog(amVoucher);  }  /**   * 余额减少   */  private void updateBiBalanceForAmDelete(AmVoucher amVoucher) {    int rownum = biBalanceDao.updateBiBalanceForAmVoucherDelete(amVoucher.getAmVoucherId(), amVoucher    .getBiBalanceId());    if (rownum != 1) {      throw new BusinessException("指标余额不足！");    }  }  /**   * 余额减少   */  private void updateDpBalanceForAmDelete(AmVoucher amVoucher) {    int rownum = dpBalanceDao.updateDpBalanceForAmVoucherDelete(amVoucher.getAmVoucherId(), amVoucher    .getDpBalanceId());    if (rownum != 1) {      throw new BusinessException("计划余额不足！");    }  }  public AmVoucher callbackForAmVoucher(AmVoucher amVoucher) {    wfEngineAdapter.callback(amVoucher.getComment(), amVoucher, null);    GkBusinessLogUtil.saveGkBusinessLog(amVoucher);    return amVoucher;  }  public int deleteForAmVoucher(AmVoucher amVoucher) {    if (saveNeedProcessBalance(amVoucher)) {      AmVoucher oldAmVoucher = amVoucherDao.getAmVoucherById(amVoucher.getAmVoucherId());      BigDecimal money = oldAmVoucher.getCurMoney().negate();//取反      updateBiBalanceForAmVoucher(money, amVoucher);    }    int rowNum = amVoucherDao.deleteAmVoucher(amVoucher);    if (rowNum != 1)      throw new BusinessException("删除行数不为1，删除失败！");    GkBusinessLogUtil.saveGkBusinessLog(amVoucher);    return rowNum;  }  public int deleteForAmVoucherEdit(AmVoucher amVoucher) {    AmVoucher oldAmVoucher = amVoucherDao.getAmVoucherById(amVoucher.getAmVoucherId());    if (amVoucher.getControlType().equals("7") ||    amVoucher.getControlType().equals("2")) {      if (saveNeedProcessBalance(amVoucher)) {        BigDecimal money = oldAmVoucher.getCurMoney().negate();//取反        int updateCount = biBalanceDao.updateBiBalanceForAm(money, amVoucher.getBiBalanceId());        if (updateCount == 0) {          throw new BusinessException("余额不足！保存失败！");        }      }    } else if (amVoucher.getControlType().equals("1")) {      if (saveNeedProcessBalance(amVoucher)) {        BigDecimal money = oldAmVoucher.getCurMoney().negate();//取反        updateBiBalanceForAmVoucher(money, amVoucher);      }    }    int rowNum = amVoucherDao.deleteAmVoucher(amVoucher);    if (rowNum != 1)      throw new BusinessException("删除行数不为1，删除失败！");    GkBusinessLogUtil.saveGkBusinessLog(amVoucher);    return rowNum;  }  public AmVoucher saveAndSendForAmVoucher(AmVoucher amVoucher) {    amVoucher = this.saveForAmVoucher(amVoucher);    wfEngineAdapter.newCommit(amVoucher.getComment(), amVoucher, null);    return amVoucher;  }  public AmVoucher saveForAmVoucher(AmVoucher amVoucher) {    if (amVoucher.getAmVoucherId() == null || amVoucher.getAmVoucherId().trim().equals("")) {      insertAmVoucher(amVoucher);      if (saveNeedProcessBalance(amVoucher)) {//保存时写余额        updateBiBalanceForAmVoucher(amVoucher.getOrgMoney(), amVoucher);//新增时更新余额      }    } else {      updateAmVoucher(amVoucher);    }    GkBusinessLogUtil.saveGkBusinessLog(amVoucher);    return amVoucher;  }  public AmVoucher saveForAmVoucherEdit(AmVoucher amVoucher) {    if (amVoucher.getAmVoucherId() == null || amVoucher.getAmVoucherId().trim().equals("")) {      insertAmVoucher(amVoucher);      if (amVoucher.getControlType().equals("7") ||      amVoucher.getControlType().equals("2")) {        if (saveNeedProcessBalance(amVoucher)) {//保存时写余额          updateBiBalanceForAmVoucher(amVoucher);//新增时更新余额        }      } else if (amVoucher.getControlType().equals("1")) {        if (saveNeedProcessBalance(amVoucher)) {//保存时写余额          updateBiBalanceForAmVoucher(amVoucher.getOrgMoney(), amVoucher);//新增时更新余额        }      }    } else {      updateAmVoucher(amVoucher);    }    GkBusinessLogUtil.saveGkBusinessLog(amVoucher);    return amVoucher;  }  private void updateAmVoucher(AmVoucher amVoucher) {    AmVoucher oldAmVoucher = amVoucherDao.getAmVoucherById(amVoucher.getAmVoucherId());    if (oldAmVoucher.getCurMoney().signum() * amVoucher.getCurMoney().signum() == -1) {      throw new BusinessException("修改金额有误！");    }    BigDecimal subValue = amVoucher.getCurMoney().subtract(oldAmVoucher.getCurMoney());    if (subValue.signum() != 0 && saveNeedProcessBalance(amVoucher)) {      updateBiBalanceForAmVoucher(subValue, amVoucher);//更新余额    }    amVoucherDao.updateAmVoucher(amVoucher);  }  public AmVoucher insertAmVoucher(AmVoucher amVoucher) {    String userId = RequestMetaUtil.getSvUserID();    String compoId = RequestMetaUtil.getCompoId();    amVoucher.setInputorId(userId);    amVoucher.setCdate(new Date());    amVoucher.setProcDate(RequestMetaUtil.getTransDate());    amVoucher.setNd(RequestMetaUtil.getSvNd());    amVoucher.setAmVoucherId(NumUtil.getInstance().getNo(compoId, "AM_VOUCHER_ID", amVoucher));    amVoucher.setInputGroupId(NumUtil.getInstance().getNo(compoId, "INPUT_GROUP_ID", amVoucher));    amVoucher.setVouNo(NumUtil.getInstance().getNo(compoId, "VOU_NO", amVoucher));    if (isDoWorkFlow()) {      Long draftid = workflowDao.createDraftId();      amVoucher.setProcessInstId(draftid);      amVoucherDao.insertAmVoucher(amVoucher);      AsWfDraft asWfDraft = new AsWfDraft();      asWfDraft.setCompoId(compoId);      asWfDraft.setWfDraftName(amVoucher.getTitleField());      asWfDraft.setUserId(userId);      asWfDraft.setMasterTabId("AM_VOUCHER");      asWfDraft.setWfDraftId(BigDecimal.valueOf(draftid.longValue()));      workflowDao.insertAsWfdraft(asWfDraft);    } else {      amVoucher.setAstatusCode("3");      amVoucher.setAuditorId(userId);      amVoucher.setAuditorName(RequestMetaUtil.getSvUserName());      amVoucher.setAdate(RequestMetaUtil.getTransDate());      amVoucherDao.insertAmVoucher(amVoucher);//不走工作流    }    return amVoucher;  }  /**   * 判断保存时是否写余额   * @param amVoucher   * @return   */  private boolean saveNeedProcessBalance(AmVoucher amVoucher) {    boolean result = false;    if (!isDoWorkFlow()) {      result = true;    } else {      if (isSaveProcBalance() && amVoucher.getOrgMoney().signum() == 1)        result = true;    }    return result;  }  private void updateBiBalanceForAmVoucher(BigDecimal money, AmVoucher amVoucher) {    String dpBalanceId = amVoucher.getDpBalanceId();    int monthId = amVoucher.getPreMonth();    int updateCount = dpBalanceDao.updateDpBalanceForAm(money, dpBalanceId, monthId);    if (updateCount == 0) {      throw new BusinessException("余额不足！保存失败！");    }  }  public AmVoucher sendForAmVoucher(AmVoucher amVoucher) {    wfEngineAdapter.newCommit(amVoucher.getComment(), amVoucher, null);    GkBusinessLogUtil.saveGkBusinessLog(amVoucher);    return amVoucher;  }  public AmVoucher unAuditForAmVoucher(AmVoucher amVoucher) {    if (amVoucher.getControlType().equals("7") || amVoucher.getControlType().equals("2")) {      if (isFinalAudit(amVoucher.getProcessInstId())) {//是否终审        int updateRowCount = updateBiBalance(amVoucher, "rework");        if (updateRowCount != 1) {          throw new BusinessException("指标余额不足！");        }      }    } else if (amVoucher.getControlType().equals("1")) {      if (isFinalAudit(amVoucher.getProcessInstId())) {//是否终审        int updateRowCount = updateDpBalance(amVoucher, "rework");        if (updateRowCount != 1) {          throw new BusinessException("计划余额不足！");        }      }    }    //    int num = amVoucherDao.updateAmVoucherFieldValueById("A_STATUS_CODE", "2", amVoucher.getAmVoucherId());    //    if (num == 0) {    //      throw new DataAlreadyDeletedException("拨款凭证id为" + amVoucher.getAmVoucherId() + "的数据已被删除，销审失败！");    //    }    wfEngineAdapter.unAudit(amVoucher.getComment(), amVoucher, null);    //    afterForAmVoucherReWork(amVoucher);    amVoucher.setAdate(null);    amVoucher.setAuditorId(null);    amVoucher.setAuditorName(null);    amVoucherDao.updateAmVoucherForAudit(amVoucher);    GkBusinessLogUtil.saveGkBusinessLog(amVoucher);    return amVoucher;  }  /**   * 流程销审后做相应的处理   * @param   */  private void afterForAmVoucherReWork(AmVoucher amVoucher) {    //凭证号为空,不需判断其他,直接重启流程    if (amVoucher.getAmVoucherId() != null) {      String aStatusCode = amVoucher.getAstatusCode();      String dealState = amVoucher.getDealState();      if (!"0".equals(dealState) && !"2".equals(dealState)) //处理状态为未发送和已退回可以重启        throw new BusinessException("该拨款凭证已经提交银行，不能重启流程!");      if (!"0".equals(aStatusCode) && !"9".equals(aStatusCode)) {//草稿,作废可以重启        throw new BusinessException("终审生成的凭证正在审核或者已经终审,不能重启流程！");      }      deleteVou(amVoucher);    }  }  /**   * 删除对应的拨款凭证   * @param   */  private void deleteVou(AmVoucher amVoucher) {    int rowCount = amVoucherDao.deleteAmVoucherById(amVoucher.getAmVoucherId());    if (rowCount != 1) {      String errorMsg = "删除拨款凭证 " + amVoucher.getAmVoucherId() + " 失败！删除凭证：" + rowCount + " 条！";      throw new BusinessException(errorMsg);    }  }  public AmVoucher untreadForAmVoucher(AmVoucher amVoucher) {    wfEngineAdapter.untreadGk(amVoucher.getComment(), amVoucher, null);    GkBusinessLogUtil.saveGkBusinessLog(amVoucher);    return amVoucher;  }  public List getAmVoucher(ElementConditionDto dto, RequestMeta requestMeta) {    return amVoucherDao.getAmVoucher(dto, requestMeta);  }  public List getAmVoucherForSum(ElementConditionDto dto, RequestMeta requestMeta) {    List list = amVoucherDao.getAmVoucherForSum(dto, requestMeta);    BillDBDigestUtil.setBillDBDigest(list);    return list;  }  public List getAmVoucherForNewSum(ElementConditionDto dto, RequestMeta requestMeta) {    List list = amVoucherDao.getAmVoucherForNewSum(dto, requestMeta);    BillDBDigestUtil.setBillDBDigest(list);    return list;  }  public List getAmVoucherForAmPvmDp(ElementConditionDto dto) {    return amVoucherDao.getAmVoucherForAmPvmDp(dto);  }  public List getAmVoucherForAmPvmDpEditN(ElementConditionDto dto) {    return amVoucherDao.getAmVoucherForAmPvmDpEditN(dto);  }  public List getAmVoucherForAmPvmBiEdit(ElementConditionDto dto) {    return amVoucherDao.getAmVoucherForAmPvmBiEdit(dto);  }  public List getAmVoucherForAmPvmDpAudit(ElementConditionDto dto) {    return amVoucherDao.getAmVoucherForAmPvmDpAudit(dto);  }  public List getAmVoucherForAmPvmBiAudit(ElementConditionDto dto) {    return amVoucherDao.getAmVoucherForAmPvmBiAudit(dto);  }  public List getAmVoucherForAmVoucherQueryList(ElementConditionDto dto, RequestMeta requestMeta) {    return amVoucherDao.getAmVoucherForAmVoucherQueryList(dto, requestMeta);  }  public List getAmVoucherForAmDv(ElementConditionDto dto) {    return amVoucherDao.getAmVoucherForAmDv(dto);  }  public void updateAmVoucherPayInfo(AmVoucher amVoucher) {    amVoucherDao.updateAmVoucherPayInfo(amVoucher);  }  public List getAmVoucherSumDetailById(String amVoucherId) {    return amVoucherDao.getAmVoucherSumDetailById(amVoucherId);  }  public String uncreateAmVoucher(String amVoucherIds, String isSum) {    return amVoucherDao.uncreateAmVoucher(amVoucherIds, isSum);  }  public PrintObject genSumMainSubPrintObject(List amVoucherList) {    Map subDataMap = getDetailAmVoucherMap(amVoucherList);    List mainSubBillList = new ArrayList();    for (int i = 0; i < amVoucherList.size(); i++) {      AmVoucher amVoucher = (AmVoucher) amVoucherList.get(i);      List subDataList = new ArrayList();      if (subDataMap.get(amVoucher.getAmVoucherId()) != null) {        subDataList = (List) subDataMap.get(amVoucher.getAmVoucherId());      }      MainSubBill msb = new MainSubBill();      msb.setMainBill(amVoucher);      msb.setSubBillList(subDataList);      mainSubBillList.add(msb);    }    return PrintManager.genMainSubPrintObject(mainSubBillList);  }  private Map getDetailAmVoucherMap(List amVoucherList) {    List amVoucherIdList = new ArrayList();    for (int i = 0; i < amVoucherList.size(); i++) {      amVoucherIdList.add(((AmVoucher) amVoucherList.get(i)).getAmVoucherId());    }    List subDataList = amVoucherDao.getAmVoucherSumDetailByIdList(amVoucherIdList);    Map dataMap = new HashMap();    for (int i = 0; i < subDataList.size(); i++) {      AmVoucher amVoucher = (AmVoucher) subDataList.get(i);      List oldList = (List) dataMap.get(amVoucher.getSumAmVoucherId());      if (oldList != null) {        oldList.add(amVoucher);      } else {        List newList = new ArrayList();        newList.add(amVoucher);        dataMap.put(amVoucher.getSumAmVoucherId(), newList);      }    }    return dataMap;  }  public void increasePrintTimes(List amVoucherIdList) {    amVoucherDao.increasePrintTimes(amVoucherIdList);  }  public List getAmVoucherForAmVoucherResponse(ElementConditionDto dto, RequestMeta requestMeta) {    return amVoucherDao.getAmVoucherForAmVoucherResponse(dto, requestMeta);  }  public String responseAmVoucher(String dealState, List amVoucherIds) {    return amVoucherDao.responseAmVoucher(dealState, amVoucherIds);  }  public List getAmVoucherBySumAmVoucherId(String amVoucherId) {    return amVoucherDao.getAmVoucherBySumAmVoucherId(amVoucherId);  }  public void sumAmVoucher(List amVoucherSumList) {    String elementType = "b01";    String compoId = "AM_VOUCHER_SUM";    sumAmVoucher(amVoucherSumList, compoId, elementType);    GkBusinessLogUtil.saveGkBusinessLog(amVoucherSumList);  }  /**  *  * @param amVoucherList  * @param compoId  生成编号使用  * @param sumElementType 汇总编号  * @param paytypeCode  */  public void sumAmVoucher(List amVoucherList, String compoId, String sumElementType) {    checkConsistency(amVoucherList);    int nd = RequestMetaUtil.getSvNd();    List elementList = maTzdSumElementDao.getMaTzdSumElement(nd, sumElementType);    Map map = FieldMapRegister.get(AmVoucher.class);    Map levelMap = asOptionDao.getFieldLevelOptions();    String groupByStr = "";    List propertyList = new ArrayList();    // 固定汇总条件    propertyList.add("payAccCode");    propertyList.add("payAccName");    propertyList.add("payBankAccCode");    propertyList.add("payBankNo");    propertyList.add("payBankNodeCode");    propertyList.add("payBankNodeName");    propertyList.add("payBankCode");    propertyList.add("payBankName");    propertyList.add("payCode");    propertyList.add("receAccName");    propertyList.add("receBankNodeName");    propertyList.add("receBankAccCode");    propertyList.add("preMonth");    for (int i = 0; i < propertyList.size(); i++) {      groupByStr += propertyList.get(i) + ",";    }    groupByStr = groupByStr.substring(0, groupByStr.lastIndexOf(","));    for (int i = 0; i < elementList.size(); i++) {      MaTzdSumElement maTzdSumElement = (MaTzdSumElement) elementList.get(i);      if ("1".equals(maTzdSumElement.getIsSum())) {        String propName = (String) map.get(maTzdSumElement.getElementCode());        propertyList.add(propName);        if (("B_ACC_CODE".equals(maTzdSumElement.getElementCode())        || "FUND_CODE".equals(maTzdSumElement.getElementCode())        || "ORIGIN_CODE".equals(maTzdSumElement.getElementCode())        || "PROJECT_CODE".equals(maTzdSumElement.getElementCode())        || "PAYOUT_CODE".equals(maTzdSumElement.getElementCode())        || "OPERATION_TYPE_CODE".equals(maTzdSumElement.getElementCode()) || "CO_CODE"        .equals(maTzdSumElement.getElementCode()))        && maTzdSumElement.getSumLevel() != null        && Integer.parseInt(maTzdSumElement.getSumLevel().trim()) > 0) {          int sumLen = LevelControlUtil.getCtrLength((String) levelMap.get(maTzdSumElement.getElementCode()),          Integer.parseInt(maTzdSumElement.getSumLevel().trim()));          groupByStr += ",subStr(" + propName + ",0," + sumLen + ")";        } else {          groupByStr += "," + propName;        }      }    }    String sql = "SELECT * FROM "    + AmVoucher.class.getName()    + " group BY "    + groupByStr    + " EXECUTE ON GROUP_BY_RESULTS sumBigDecimal(orgMoney) sumorgmoney,sumBigDecimal(curMoney) sumcurmoney";    Query query = new Query();    try {      query.addFunctionHandler(new JoSqlFunctions());      query.parse(sql);      QueryResults rs = query.execute(amVoucherList);      Map groupResultMap = rs.getGroupByResults();      Iterator it = ((HashMap) groupResultMap).keySet().iterator();      List mainBillList = new ArrayList();      List subBillList = new ArrayList();      while (it.hasNext()) {        List key = (List) it.next();        List list = (List) groupResultMap.get(key);        Map sumMap = rs.getGroupBySaveValues(key);        AmVoucher mainBill = new AmVoucher();        mainBill.setOrgMoney((BigDecimal) sumMap.get("sumorgmoney"));        mainBill.setCurMoney((BigDecimal) sumMap.get("sumcurmoney"));        for (int i = 0; i < propertyList.size(); i++) {          String pro = (String) propertyList.get(i);          mainBill.set(pro, key.get(i));        }        mainBill.setIsSumAmVoucher("1");        mainBill.setIsValid("1");        mainBill.setAstatusCode("3");        mainBill.setCdate(new Date());        mainBill.setProcDate(RequestMetaUtil.getTransDate());        mainBill.setInputorId(RequestMetaUtil.getSvUserID());        mainBill.setNd(RequestMetaUtil.getSvNd());        mainBill.setControlType("3");        mainBill.setDecType("3");        mainBill.setAmVoucherId(NumUtil.getInstance().getNo(compoId, "AM_VOUCHER_ID", mainBill));        mainBill.setInputGroupId(NumUtil.getInstance().getNo(compoId, "INPUT_GROUP_ID", mainBill));        mainBill.setVouNo(NumUtil.getInstance().getNo(compoId, "VOU_NO", mainBill));        for (int i = 0; i < list.size(); i++) {          AmVoucher subBill = (AmVoucher) list.get(i);          subBill.setSumAmVoucherId(mainBill.getAmVoucherId());        }        mainBillList.add(mainBill);        subBillList.addAll(list);      }      this.amVoucherDao.insertAmVoucher(mainBillList);      this.amVoucherDao.updateSumAmVoucherId(subBillList);    } catch (Exception e) {      throw new BusinessException("汇总凭证时出错", e);    }  }  private void checkConsistency(List amVoucherList) {    List idList = new ArrayList();    for (int i = 0; i < amVoucherList.size(); i++) {      idList.add(((AmVoucher) amVoucherList.get(i)).getAmVoucherId());    }    List originalList = this.amVoucherDao.getAmVoucherByIdList(idList);    Map originalMap = new HashMap();    for (int i = 0; i < originalList.size(); i++) {      AmVoucher am = ((AmVoucher) originalList.get(i));      originalMap.put(am.getAmVoucherId(), am);    }    StringBuffer deleteInfo = new StringBuffer("");    StringBuffer updateInfo = new StringBuffer("");    boolean isConsistent = true;    for (int i = 0; i < amVoucherList.size(); i++) {      AmVoucher amVoucher = (AmVoucher) amVoucherList.get(i);      AmVoucher oriAmVoucher = (AmVoucher) originalMap.get(amVoucher.getAmVoucherId());      if (oriAmVoucher == null) {        isConsistent = false;        deleteInfo.append(amVoucher.getAmVoucherId() + ",");      } else {        if (!amVoucher.getDbDigest().equals(oriAmVoucher.digest())) {          isConsistent = false;          updateInfo.append(amVoucher.getAmVoucherId() + ",");        }      }    }    if (!isConsistent) {      String errorInfo = "";      if (deleteInfo.length() > 0) {        errorInfo += "id为：" + deleteInfo.substring(0, deleteInfo.lastIndexOf(",")) + "的数据已被删除.";      }      if (updateInfo.length() > 0) {        errorInfo += "\nid为：" + updateInfo.substring(0, updateInfo.lastIndexOf(",")) + "的数据已被修改.";      }      throw new BusinessException(errorInfo);    }  }  public void cancelSumAmVoucher(List amVoucherList) {    List sumAmVoucherIdList = new ArrayList();    for (int i = 0; i < amVoucherList.size(); i++) {      sumAmVoucherIdList.add(((AmVoucher) amVoucherList.get(i)).getAmVoucherId());    }    this.amVoucherDao.deleteAmVoucher(sumAmVoucherIdList);    this.amVoucherDao.setSumAmVoucherIdNull(sumAmVoucherIdList);  }  public void updateExpoTimes(List amVoucherList) {    this.amVoucherDao.updateExpoTimes(amVoucherList);  }  public void updateVoucherGroupDealState(Map params) {    this.amVoucherDao.updateVoucherGroupDealState(params);  }  public AmVoucher saveAndSendForAmVoucherSpAcc(AmVoucher amVoucher) {    amVoucher = this.saveForAmVoucherSpAcc(amVoucher);    wfEngineAdapter.newCommit(amVoucher.getComment(), amVoucher, null);    return amVoucher;  }  public AmVoucher saveForAmVoucherSpAcc(AmVoucher amVoucher) {    if (amVoucher.getAmVoucherId() == null || amVoucher.getAmVoucherId().trim().equals("")) {      insertForAmVoucher(amVoucher);    } else {      updateAmVoucherSpAcc(amVoucher);    }    GkBusinessLogUtil.saveGkBusinessLog(amVoucher);    return amVoucher;  }  private void updateAmVoucherSpAcc(AmVoucher amVoucher) {    AmVoucher oldAmVoucher = amVoucherDao.getAmVoucherById(amVoucher.getAmVoucherId());    if (oldAmVoucher == null) {      throw new DataAlreadyDeletedException("拨款凭证id为：" + oldAmVoucher.getAmVoucherId() + "的数据已被删除,保存失败！");    }    if ((oldAmVoucher.getOrgMoney().signum() * amVoucher.getOrgMoney().signum() == -1)    || (oldAmVoucher.getCurMoney().signum() * amVoucher.getCurMoney().signum() == -1)) {      throw new BusinessException("修改金额有误！");    }    String compoId = RequestMetaUtil.getCompoId();    if (!"AM_PVM_DP_AUDIT".equals(compoId)) {//编辑页面保存要处理余额，审核页面保存不用处理余额      BigDecimal subValue = amVoucher.getOrgMoney().subtract(oldAmVoucher.getOrgMoney());      if (subValue.signum() != 0) {        if (saveNeedProcessBalance(amVoucher)) {//0：保存时写余额          int updateCount = biBalanceDao.updateBiBalanceForAm(subValue, amVoucher.getBiBalanceId());          if (updateCount == 0) {            throw new BusinessException("余额不足！保存失败！");          }        }      }    }    amVoucherDao.updateAmVoucher(amVoucher);  }  private void insertForAmVoucher(AmVoucher amVoucher) {    updateBiBalanceForAmVoucher(amVoucher);    insertAmVoucher(amVoucher);  }  private void updateBiBalanceForAmVoucher(AmVoucher amVoucher) {    if (saveNeedProcessBalance(amVoucher)) {//0：保存时写余额      BigDecimal money = amVoucher.getOrgMoney();      String biBalanceId = amVoucher.getBiBalanceId();      int updateCount = biBalanceDao.updateBiBalanceForAm(money, biBalanceId);      if (updateCount == 0) {        throw new BusinessException("余额不足！保存失败！");      }    }  }  public void updateExpoTipsTimes(final List amVoucherList) {    this.amVoucherDao.updateExpoTipsTimes(amVoucherList);  }}