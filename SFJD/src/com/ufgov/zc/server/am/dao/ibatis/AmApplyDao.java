package com.ufgov.zc.server.am.dao.ibatis;import java.sql.SQLException;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.orm.ibatis.SqlMapClientCallback;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;import com.ibatis.sqlmap.client.SqlMapExecutor;import com.ufgov.zc.common.am.model.AmApply;import com.ufgov.zc.common.commonbiz.model.BankAccount;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.DaoException;import com.ufgov.zc.common.system.model.User;import com.ufgov.zc.server.am.dao.IAmApplyDao;import com.ufgov.zc.server.system.util.OrderColumnsUtil;public class AmApplyDao extends SqlMapClientDaoSupport implements IAmApplyDao {  public List getAmApplyForApplySum(ElementConditionDto dto) {//    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(),////    NumLimConstants.FWATCH));//    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("AmApply.getAmApplyForApplySum", dto);  }  public List getAmApplyForIssum(ElementConditionDto dto) {//    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(),////    NumLimConstants.FWATCH));//    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("AmApply.getAmApplyForAmBpAeEditList", dto);  }  public List getAmApplyForProvider(ElementConditionDto dto) {//    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(),////    NumLimConstants.FWATCH));//    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("AmApply.getAmApplyForProvider", dto);  }  public void insertAmApply(final List amApplyList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < amApplyList.size(); i++) {          executor.insert("AmApply.insertAmApply", amApplyList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public AmApply insertBeforSumAmApply(AmApply amApply) {    return (AmApply) this.getSqlMapClientTemplate().insert("AmApply.insertAmApply", amApply);  }  public void updateSumAmApplyId(final List amApplyList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < amApplyList.size(); i++) {          executor.update("AmApply.updateSumAmApplyId", amApplyList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public void updateAmApplyAfterSum(final List amApplyList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < amApplyList.size(); i++) {          AmApply amApply = (AmApply) amApplyList.get(i);          Map map = new HashMap();          map.put("amApplyId", amApply.getAmApplyId());          map.put("amVoucherId", amApply.getAmVoucherId());          map.put("vouNo", amApply.getVouNo());          executor.update("AmApply.updateAmApplyAfterSum", map);        }        executor.executeBatch();        return null;      }    });  }  public int updateAmApply(AmApply amApply) {    return this.getSqlMapClientTemplate().update("AmApply.updateAmApplyByPrimaryKey", amApply);  }  public AmApply getAmApplyByAmApplyId(String amApplyId) {    return (AmApply) this.getSqlMapClientTemplate()    .queryForObject("AmApply.getAmApplyByAmApplyId", amApplyId);  }  public List getAmApplyForAmBpaeAuditList(ElementConditionDto elementDto) {//    elementDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(elementDto.getNumLimCompoId(),////    NumLimConstants.FWATCH));//    elementDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("AmApply.getAmApplyForAmBpaeAuditList", elementDto);  }  public List getAmApplyForAmApplyQueryList(ElementConditionDto elementDto) {////    elementDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(elementDto.getNumLimCompoId(),////    NumLimConstants.FWATCH));//    elementDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("AmApply.getAmApplyForAmApplyQueryList", elementDto);  }  public int updateAmApplyFieldValueById(String fieldName, String fieldValue, String amApplyId) {    Map map = new HashMap();    map.put("fieldName", fieldName);    map.put("fieldValue", fieldValue);    map.put("amApplyId", amApplyId);    return this.getSqlMapClientTemplate().update("AmApply.updateAmApplyFieldValueById", map);  }  public int updateAmApplyForUndo(String isValid, String amApplyId) {    Map map = new HashMap();    map.put("isValid", isValid);    map.put("amApplyId", amApplyId);    return this.getSqlMapClientTemplate().update("AmApply.updateAmApplyForUndo", map);  }  public void updateAmApplyForAudit(AmApply amApply) {    this.getSqlMapClientTemplate().update("AmApply.updateAmApplyForAudit", amApply);  }  public int deleteAmApply(AmApply amApply) {    return this.getSqlMapClientTemplate().delete("AmApply.deleteByPrimaryKey", amApply);  }  public void deleteAmApply(final List amApplyIdList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < amApplyIdList.size(); i++) {          executor.delete("AmApply.deleteById", amApplyIdList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public void setSumAmApplyIdNull(final List sumAmApplyIdList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < sumAmApplyIdList.size(); i++) {          executor.update("AmApply.setSumAmApplyIdNull", sumAmApplyIdList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public List getAmApplyForAmPafpv(ElementConditionDto dto) {    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(dto.getCompoId()));//    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList("AmApply.getAmApplyForAmPafpv", dto);  }  public String AmApplyCreateAmVoucher(String coCode, String amApplyIds, String amVoucherIds, String vouNos,  String inputGroupIds, String draftIds, int nd, String billTypeCode, User user,  BankAccount payBankAccount, Date createDate, String isSum) {    Map map = new HashMap();    map.put("coCode", coCode);    map.put("amApplyIds", amApplyIds);    map.put("amVoucherIds", amVoucherIds);    map.put("vouNos", vouNos);    map.put("inputGroupIds", inputGroupIds);    map.put("draftIds", draftIds);    map.put("svNd", new Integer(nd));    map.put("svBillTypeCode", billTypeCode);    map.put("userId", user.getUserId());    map.put("userName", user.getUserName());    map.put("payAcccode", payBankAccount != null ? payBankAccount.getAccCode() : null);    map.put("payAccname", payBankAccount != null ? payBankAccount.getAccName() : null);    map.put("payBankAcccode", payBankAccount != null ? payBankAccount.getBankAccCode() : null);    map.put("payBankNo", payBankAccount != null ? payBankAccount.getBankNo() : null);    map.put("payBanknodeCode", payBankAccount != null ? payBankAccount.getBankNodeCode() : null);    map.put("payBanknodeName", payBankAccount != null ? payBankAccount.getBankNodeName() : null);    map.put("payCode", payBankAccount != null ? payBankAccount.getCoCode() : null);    map.put("createDate", createDate);    map.put("isSum", isSum);    map.put("rtnStr", "");    this.getSqlMapClientTemplate().insert("AmApply.amApplyCreateAmVoucher", map);    return (String) map.get("rtnStr");  }  public int updateAmApplyForAfterUnAudit(String amApplyId) {    return this.getSqlMapClientTemplate().update("AmApply.updateAmApplyForAfterUnAudit", amApplyId);  }  public void increasePrintTimes(List amApplyIdList) {    Map map = new HashMap();    if (amApplyIdList.size() == 0) {      throw new DaoException("指标控制拨款申请单修改打印次数时，所选控制拨款申请单为空！");    }    map.put("amApplyIdList", amApplyIdList);    this.getSqlMapClientTemplate().update("AmApply.increasePrintTimes", map);  }  public List getAmApplyByIdList(List idList) {    if (idList.isEmpty()) {      return new ArrayList();    }    Map param = new HashMap();    param.put("amApplyIdList", idList);    return this.getSqlMapClientTemplate().queryForList("AmApply.getAmApplyByIdList", param);  }  public List getAmApplyBySumAmApplyId(String sumAmApplyId) {    Map param = new HashMap();    param.put("sumAmApplyId", sumAmApplyId);    return this.getSqlMapClientTemplate().queryForList("AmApply.getAmApplyBySumAmApplyId", param);  }  public List getAmApplyBySumAmApplyIdForPrint(List sumAmApplyIdList) {    if (sumAmApplyIdList.isEmpty()) {      return new ArrayList();    }    Map param = new HashMap();    param.put("sumAmApplyIdList", sumAmApplyIdList);    return this.getSqlMapClientTemplate().queryForList("AmApply.getAmApplyBySumAmApplyIdForPrint", param);  }  public void updateAmApplyReceInfo(List amApplyList) {    final List list = amApplyList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          AmApply value = (AmApply) list.get(i);          executor.update("AmApply.updateAmApplyReceInfo", value);        }        executor.executeBatch();        return null;      }    });  }  public void updateProcDateForAmBpAeEdit(List amApplyList) {    final List list = amApplyList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          AmApply value = (AmApply) list.get(i);          executor.update("AmApply.updateProcDateForAmBpAeEdit", value);        }        executor.executeBatch();        return null;      }    });  }  /**   * 受计划控制   * @param dpControl   * @return   */  public String blankOutDpControlApply(List dpControl) {    if (dpControl.size() != 0) {      return null;    }    return null;  }  /**   * 受指标控制   * @param biControl   * @return   */  public String blankOutBiControlApply(List biControl) {    if (biControl.size() != 0) {      return null;    }    return null;  }  /**   * 无源头   * @param noControl   * @return   */  public String blankOutNoControlApply(List noControl) {    if (noControl.size() != 0) {      return null;    }    return null;  }  /**   * 专户拨款   * @param zhControl   * @return   */  public String blankOutZhControlApply(List zhControl) {    if (zhControl.size() != 0) {      return null;    }    return null;  }}