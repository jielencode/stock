package com.ufgov.zc.server.bank.socket.tongxiang;import com.ufgov.zc.common.commonbiz.model.AutheInfo;import com.ufgov.zc.common.system.constants.SocketConstants;import com.ufgov.zc.common.system.model.AsOption;import com.ufgov.zc.server.bank.socket.SocketProxy;import com.ufgov.zc.server.bank.socket.tongxiang.ccb.CcbQuerySocketProxy;import com.ufgov.zc.server.bank.socket.tongxiang.ccb.CcbTestSocketProxy;import com.ufgov.zc.server.bank.socket.tongxiang.ccb.CcbTransactionSocketProxy;import com.ufgov.zc.server.bank.socket.tongxiang.icbc.IcbcGetDataTmpSocketProxy;import com.ufgov.zc.server.bank.socket.tongxiang.icbc.IcbcQuerySocketProxy;import com.ufgov.zc.server.bank.socket.tongxiang.icbc.IcbcTestSocketProxy;import com.ufgov.zc.server.bank.socket.tongxiang.icbc.IcbcTransactionSocketProxy;import com.ufgov.zc.server.system.SpringContext;import com.ufgov.zc.server.system.service.IAsOptionService;/** * 与银行进行支付交易的控制类,将根据具体的支付行来选择相应的socketProxy来进行支付交易和查询 * @author liubo * */public class TransactionController {  private static String ICBC_REMOTE_ADDRESS = "";  private static String ICBC_REMOTE_PORT = "";  private static String CCB_REMOTE_ADDRESS = "";  private static String CCB_REMOTE_PORT = "";  private static String CHARSET = "gb2312";  static {    IAsOptionService baseService = (IAsOptionService) SpringContext.getBean("asOptionService");    AsOption addressOption = baseService.getAsOption("OPT_TX_ICBC_REMOTE_ADDRESS");    AsOption portOption = baseService.getAsOption("OPT_TX_ICBC_REMOTE_PORT");    AsOption ccbAddressOption = baseService.getAsOption("OPT_TX_CCB_REMOTE_ADDRESS");    AsOption ccbPortOption = baseService.getAsOption("OPT_TX_CCB_REMOTE_PORT");    AsOption charsetOption = baseService.getAsOption("OPT_TX_SOCKET_CHARSET");    if (addressOption == null) {      ICBC_REMOTE_ADDRESS = "";    } else {      ICBC_REMOTE_ADDRESS = addressOption.getOptVal();    }    if (portOption == null) {      ICBC_REMOTE_PORT = "";    } else {      ICBC_REMOTE_PORT = portOption.getOptVal();    }    if (ccbAddressOption == null) {      CCB_REMOTE_ADDRESS = "localhost";//15.34.0.49    } else {      CCB_REMOTE_ADDRESS = ccbAddressOption.getOptVal();    }    if (ccbPortOption == null) {      CCB_REMOTE_PORT = "8888";    } else {      CCB_REMOTE_PORT = ccbPortOption.getOptVal();    }    if (charsetOption != null) {      String charset = charsetOption.getOptVal();      if (charset != null && charset.length() > 0) {        CHARSET = charset;      }    }  }  /**   * 获取银行的查询通信模块   * @param bankType   * @return   */  public static SocketProxy getQuerySocketProxy(AutheInfo autheInfo, String bankType) {    SocketProxy proxy = null;    if (SocketConstants.JH_TYPE_CODE.equals(bankType)) {      proxy = createCcbQuerySocketProxy(autheInfo);      proxy.putProperty("bankId", SocketConstants.JH_TYPE_CODE);    } else if (SocketConstants.GH_TYPE_CODE.equals(bankType)) {      proxy = createIcbcQuerySocketProxy(autheInfo);      proxy.putProperty("bankId", SocketConstants.GH_TYPE_CODE);    }    proxy.putProperty("charset", CHARSET);    return proxy;  }  /**   * 获取银行的支付交易通信模块   * @param bankType   * @return   */  public static SocketProxy getTransSocketProxy(AutheInfo autheInfo, String bankType) {    SocketProxy proxy = null;    if (SocketConstants.JH_TYPE_CODE.equals(bankType)) {      proxy = createCcbTrasaSocketProxy(autheInfo);      proxy.putProperty("bankId", SocketConstants.JH_TYPE_CODE);    } else if (SocketConstants.GH_TYPE_CODE.equals(bankType)) {      proxy = createIcbcTrasaSocketProxy(autheInfo);      proxy.putProperty("bankId", SocketConstants.GH_TYPE_CODE);    }    proxy.putProperty("charset", CHARSET);    return proxy;  }  public static SocketProxy getTestSocketProxy(AutheInfo autheInfo, String bankType) {    SocketProxy proxy = null;    if (SocketConstants.JH_TYPE_CODE.equals(bankType)) {      proxy = createCcbTestSocketProxy(autheInfo);      proxy.putProperty("bankId", SocketConstants.JH_TYPE_CODE);    } else if (SocketConstants.GH_TYPE_CODE.equals(bankType)) {      proxy = createIcbcTestSocketProxy(autheInfo);      proxy.putProperty("bankId", SocketConstants.GH_TYPE_CODE);    }    proxy.putProperty("charset", CHARSET);    return proxy;  }  private static SocketProxy createCcbQuerySocketProxy(AutheInfo autheInfo) {    SocketProxy proxy = new CcbQuerySocketProxy();    proxy.setAutheInfo(autheInfo);    proxy.putProperty(SocketConstants.REMOTE_ADDRESS, CCB_REMOTE_ADDRESS);//15.34.0.49 测试用 autheInfo.getClientIp() 61.153.231.146    proxy.putProperty(SocketConstants.REMOTE_PORT, new Integer(CCB_REMOTE_PORT));    return proxy;  }  private static SocketProxy createCcbTrasaSocketProxy(AutheInfo autheInfo) {    SocketProxy proxy = new CcbTransactionSocketProxy();    proxy.setAutheInfo(autheInfo);    proxy.putProperty(SocketConstants.REMOTE_ADDRESS, CCB_REMOTE_ADDRESS);    proxy.putProperty(SocketConstants.REMOTE_PORT, new Integer(CCB_REMOTE_PORT));    return proxy;  }  private static SocketProxy createCcbTestSocketProxy(AutheInfo autheInfo) {    SocketProxy proxy = new CcbTestSocketProxy();    proxy.setAutheInfo(autheInfo);    proxy.putProperty(SocketConstants.REMOTE_ADDRESS, CCB_REMOTE_ADDRESS);    proxy.putProperty(SocketConstants.REMOTE_PORT, new Integer(CCB_REMOTE_PORT));    return proxy;  }  private static SocketProxy createIcbcQuerySocketProxy(AutheInfo autheInfo) {    String icbcRemoteAddress = ICBC_REMOTE_ADDRESS;    String icbcRemotePort = ICBC_REMOTE_PORT;    SocketProxy proxy = new IcbcQuerySocketProxy();    proxy.setAutheInfo(autheInfo);    proxy.putProperty(SocketConstants.REMOTE_ADDRESS, icbcRemoteAddress);    proxy.putProperty(SocketConstants.REMOTE_PORT, new Integer(icbcRemotePort));    return proxy;  }  private static SocketProxy createIcbcTrasaSocketProxy(AutheInfo autheInfo) {    String icbcRemoteAddress = ICBC_REMOTE_ADDRESS;    String icbcRemotePort = ICBC_REMOTE_PORT;    SocketProxy proxy = new IcbcTransactionSocketProxy();    proxy.setAutheInfo(autheInfo);    proxy.putProperty(SocketConstants.REMOTE_ADDRESS, icbcRemoteAddress);    proxy.putProperty(SocketConstants.REMOTE_PORT, new Integer(icbcRemotePort));    return proxy;  }  private static SocketProxy createIcbcTestSocketProxy(AutheInfo autheInfo) {    SocketProxy proxy = new IcbcTestSocketProxy();    proxy.setAutheInfo(autheInfo);    return proxy;  }  public static SocketProxy createGetDataSocketProxy(AutheInfo autheInfo) {    String icbcRemoteAddress = ICBC_REMOTE_ADDRESS;    String icbcRemotePort = ICBC_REMOTE_PORT;    SocketProxy proxy = new IcbcGetDataTmpSocketProxy();    proxy.setAutheInfo(autheInfo);    proxy.putProperty(SocketConstants.REMOTE_ADDRESS, icbcRemoteAddress);    proxy.putProperty(SocketConstants.REMOTE_PORT, new Integer(icbcRemotePort));    proxy.putProperty("bankId", "GH");    return proxy;  }}