package com.ufgov.zc.server.bank.socket;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.InetSocketAddress;import java.net.Socket;import java.net.SocketException;import java.net.SocketTimeoutException;import java.nio.ByteBuffer;import java.util.Date;import java.util.HashMap;import java.util.Map;import org.apache.log4j.Logger;import com.ufgov.zc.common.am.model.AmVoucher;import com.ufgov.zc.common.commonbiz.model.AutheInfo;import com.ufgov.zc.common.cp.model.CpVoucher;import com.ufgov.zc.common.system.constants.SocketConstants;import com.ufgov.zc.common.system.exception.AutheException;import com.ufgov.zc.common.system.exception.MessageStructureException;import com.ufgov.zc.common.system.model.ResultInfo;public abstract class SocketProxy implements BusinessProxy {  private static final Logger logger = Logger.getLogger(SocketProxy.class);  private Map socketProp = new HashMap();  private AutheInfo autheInfo;  private Socket _socket;  private InetSocketAddress _address;  public AutheInfo getAutheInfo() {    return autheInfo;  }  public void setAutheInfo(AutheInfo autheInfo) {    this.autheInfo = autheInfo;  }  public Map getSocketProp() {    return socketProp;  }  public void setSocketProp(Map socketProp) {    this.socketProp = socketProp;    createInetAddress();  }  public void removeProperty(String propName) {    this.socketProp.remove(propName);    createInetAddress();  }  public void putProperty(String propName, Object value) {    this.socketProp.put(propName, value);    createInetAddress();  }  public Object getProperty(String propName) {    return this.socketProp.get(propName);  }  public void clearProperty() {    this.socketProp.clear();    createInetAddress();  }  public SocketProxy() {    super();    initDefaultProp();    createInetAddress();  }  public SocketProxy(Map prop) throws IllegalArgumentException {    super();    initDefaultProp();    this.socketProp.putAll(prop);    createInetAddress();  }  /**   * 发送businessObject到银行的socket服务器进行交易   * @param businessObject   * @return   */  public ResultInfo dealBusinessObject(Object businessObject) {    ResultInfo resultInfo = null;    Socket socket = createSocket();    String sendMess = "";    try {      beforeDealBusinessObject(businessObject);      Integer connectTimeout = (Integer) socketProp.get(SocketConstants.CONNECTION_TIMEOUT);      Integer receiveTimeout = (Integer) socketProp.get(SocketConstants.RECEIVE_TIMEOUT);      socket.connect(_address, connectTimeout.intValue());      InputStream inputStream = socket.getInputStream();      OutputStream outputStream = socket.getOutputStream();      socket.setSoTimeout(receiveTimeout.intValue());//设置连接超时时间      sendMess = this.handleSendMessage(businessObject, outputStream);      outputStream.flush();      socket.shutdownOutput();      resultInfo = this.handleReceiveMessage(businessObject, inputStream);      afterDealBusinessObject(businessObject, resultInfo);    } catch (SocketTimeoutException timeoutException) {      logger.error(timeoutException.getMessage(), timeoutException);      resultInfo = this.handleTimeoutException(timeoutException, businessObject);    } catch (SocketException socketException) {      logger.error(socketException.getMessage(), socketException);      resultInfo = this.handleSocketException(socketException, businessObject);    } catch (IOException ioException) {      logger.error(ioException.getMessage(), ioException);      resultInfo = this.handleIOException(ioException, businessObject);    } catch (MessageStructureException ex) {      logger.error(ex.getMessage(), ex);      resultInfo = this.handleMessStructureException(ex, businessObject);    } catch (AutheException ex) {      logger.error(ex.getMessage(), ex);      resultInfo = this.handleAutheException(ex, businessObject);    } catch (IllegalArgumentException ex) {      logger.error(ex.getMessage(), ex);      resultInfo = this.handleIllegalArgumentException(ex, businessObject);    } catch (Exception ex) {      logger.error(ex.getMessage(), ex);      resultInfo = this.handleOtherException(ex, businessObject);    } finally {      try {        socket.close();      } catch (IOException e) {        logger.error(e.getMessage(), e);      }      try {        String vouNo = "";        if (businessObject instanceof CpVoucher) {          vouNo = ((CpVoucher) businessObject).getCpVouNo();        } else if (businessObject instanceof AmVoucher) {          vouNo = ((AmVoucher) businessObject).getVouNo();        }        resultInfo.setVouNo(vouNo);        resultInfo.setTradeDate(new Date());        resultInfo.setBankId((String) this.getProperty("bankId"));        resultInfo.setSendMessage(sendMess);        //logger.error(resultInfo.getOriginalMessage());        LogService.saveLog(resultInfo);      } catch (Exception e) {        logger.error(e.getMessage(), e);      }    }    return resultInfo;  }  /**   * 标段发送message， 默认一次发送1k字节   * @param message   * @param bufferSize   * @param output   * @throws IOException   */  public void sendMessageInfo(String message, int bufferSize, OutputStream output) throws IOException {    //TODO:这里可能有问题，应该考虑转换成字节的编码格式    String charset = (String) this.getProperty("charset");    charset = charset == null ? "gb2312" : charset;    ByteBuffer buffer = ByteBuffer.wrap(message.getBytes(charset));    byte[] data = new byte[bufferSize];    while (buffer.remaining() >= bufferSize) {      buffer.get(data);      output.write(data);    }    if (buffer.remaining() > 0) {      data = new byte[buffer.remaining()];      buffer.get(data);      output.write(data);    }  }  /**   * 标段接收返回   * @param input   * @param bufferSize   * @return   * @throws IOException   */  public String receiveMessageInfo(InputStream input, Integer bufferSize) throws IOException {    //TODO:这里可能有问题，应该考虑转换成字节的编码格式    byte[] data = new byte[bufferSize.intValue()];    ByteArrayOutputStream outbuffer = new ByteArrayOutputStream();    int count = input.read(data);    while (count > 0) {      outbuffer.write(data, 0, count);      count = input.read(data);    }    byte[] bytes = outbuffer.toByteArray();    String charset = (String) this.getProperty("charset");    charset = charset == null ? "gb2312" : charset;    return new String(bytes, charset);  }  private Socket createSocket() {    _socket = new Socket();    return _socket;  }  private InetSocketAddress createInetAddress() throws IllegalArgumentException {    String address = (String) socketProp.get(SocketConstants.REMOTE_ADDRESS);    Integer port = (Integer) socketProp.get(SocketConstants.REMOTE_PORT);    if (address == null) {      throw new IllegalArgumentException("远程地址为空!");    }    if (port == null) {      throw new IllegalArgumentException("远程端口为空!");    }    _address = new InetSocketAddress(address, port.intValue());    return _address;  }  private void initDefaultProp() {    socketProp.put(SocketConstants.CONNECTION_TIMEOUT, new Integer(5 * 1000));//默认5秒连接超时    socketProp.put(SocketConstants.RECEIVE_TIMEOUT, new Integer(5 * 60 * 1000));//默认5分钟接受超时    socketProp.put(SocketConstants.SEND_BUFFER_SIZE, new Integer(1024));//默认发送缓存1k    socketProp.put(SocketConstants.RECE_BUFFER_SIZE, new Integer(1024));//默认接受缓存1k    socketProp.put(SocketConstants.REMOTE_ADDRESS, "15.34.0.49");    socketProp.put(SocketConstants.REMOTE_PORT, new Integer(8888));  }  //在处理业务数据之前的操作，进行初始化工作  public abstract void beforeDealBusinessObject(Object businessObject) throws Exception;  //在处理之后的操作，如更新业务数据状态等  public abstract void afterDealBusinessObject(Object businessObject, ResultInfo resultInfo) throws Exception;  //操作服务器端返回数据的操作  public abstract ResultInfo handleReceiveMessage(Object businessObject, InputStream input) throws Exception;  //操作向服务器端发送数据的操作  public abstract String handleSendMessage(Object businessObject, OutputStream output) throws Exception;  //捕获TimeoutException的操作  public abstract ResultInfo handleTimeoutException(SocketTimeoutException ex, Object businessObject);  //捕获SocketException的操作  public abstract ResultInfo handleSocketException(SocketException ex, Object userObject);  //捕获IOExcpetion的操作  public abstract ResultInfo handleIOException(IOException ex, Object businessObject);  //捕获返回报文结构不正确的错误操作  public abstract ResultInfo handleMessStructureException(MessageStructureException ex, Object businessObject);  //捕获未知错误的操作  public abstract ResultInfo handleOtherException(Exception ex, Object businessObject);  //捕获客户端认证信息错误  public abstract ResultInfo handleAutheException(AutheException ex, Object businessObject);  public abstract ResultInfo handleIllegalArgumentException(IllegalArgumentException ex, Object businessObject);}