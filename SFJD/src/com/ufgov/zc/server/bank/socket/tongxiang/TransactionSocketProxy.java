package com.ufgov.zc.server.bank.socket.tongxiang;import java.io.IOException;import java.net.SocketException;import java.net.SocketTimeoutException;import java.util.Map;import com.ufgov.zc.common.am.model.AmVoucher;import com.ufgov.zc.common.commonbiz.model.BaseBill;import com.ufgov.zc.common.cp.model.CpVoucher;import com.ufgov.zc.common.system.constants.SocketConstants;import com.ufgov.zc.common.system.exception.AutheException;import com.ufgov.zc.common.system.exception.MessageStructureException;import com.ufgov.zc.common.system.model.ResultInfo;import com.ufgov.zc.server.am.service.IAmVoucherService;import com.ufgov.zc.server.bank.socket.SocketProxy;import com.ufgov.zc.server.cp.service.ICpVoucherService;import com.ufgov.zc.server.system.SpringContext;/** * 进行支付交易的socketProxy父类,用来对相应的错误进行处理 * handleReceiveMessage和handleSendMessage方法由具体的实现类来实现 * @author liubo * */public abstract class TransactionSocketProxy extends SocketProxy {  public TransactionSocketProxy() {    super();  }  public TransactionSocketProxy(Map prop) {    super(prop);  }  public void beforeDealBusinessObject(Object businessObject) throws Exception {  }  public void afterDealBusinessObject(Object businessObject, ResultInfo resultInfo) throws Exception {  }  public ResultInfo handleIOException(IOException ex, Object businessObject) {    ResultInfo info = new ResultInfo();    info.setResultCode(SocketConstants.IO_EXCEPTION);    info.setResultMessage("输入输出错误:" + ex.getMessage());    return info;  }  public ResultInfo handleOtherException(Exception ex, Object businessObject) {    ResultInfo info = new ResultInfo();    info.setResultCode(SocketConstants.OTHER_EXCEPTION);    info.setResultMessage("未知错误:" + ex.getMessage());    return info;  }  public ResultInfo handleSocketException(SocketException ex, Object businessObject) {    ResultInfo info = new ResultInfo();    info.setResultCode(SocketConstants.SOCKET_EXCEPTION);    info.setResultMessage("socket连接错误:" + ex.getMessage());    return info;  }  public ResultInfo handleTimeoutException(SocketTimeoutException ex, Object businessObject) {    ResultInfo info = new ResultInfo();    info.setResultCode(SocketConstants.SOCKET_TIMEOUT_EXCEPTION);    info.setResultMessage("socket连接超时:" + ex.getMessage());    return info;  }  public ResultInfo handleMessStructureException(MessageStructureException ex, Object businessObject) {    ResultInfo info = new ResultInfo();    info.setResultCode(SocketConstants.MESSAGE_STRUCTURE_EXCEPTION);    info.setResultMessage("报文格式错误:" + ex.getMessage());    return info;  }  public ResultInfo handleAutheException(AutheException ex, Object businessObject) {    ResultInfo info = new ResultInfo();    info.setResultCode(SocketConstants.AUTHE_EXCEPTION);    info.setResultMessage(ex.getMessage());    return info;  }  public ResultInfo handleIllegalArgumentException(IllegalArgumentException ex, Object businessObject) {    ResultInfo info = new ResultInfo();    info.setResultCode(SocketConstants.ILLEGAlARGUMENT_EXCEPTION);    info.setResultMessage(ex.getMessage());    return info;  }  public void updateVoucherGroupState(Map params, BaseBill voucher) {    String vouNo = "";    String payTypeCode = "";    if (voucher instanceof CpVoucher) {      vouNo = ((CpVoucher) voucher).getCpVouNo();      payTypeCode = ((CpVoucher) voucher).getPaytypeCode();    } else if (voucher instanceof AmVoucher) {      vouNo = ((AmVoucher) voucher).getVouNo();      payTypeCode = ((AmVoucher) voucher).getPaytypeCode();    }    params.put("voucherNo", vouNo);    params.put("payTypeCode", payTypeCode);    if (voucher instanceof CpVoucher) {      ICpVoucherService voucherService = (ICpVoucherService) SpringContext.getBean("cpVoucherService");      voucherService.updateVoucherGroupDealState(params);    } else if (voucher instanceof AmVoucher) {      IAmVoucherService voucherService = (IAmVoucherService) SpringContext.getBean("amVoucherService");      voucherService.updateVoucherGroupDealState(params);    }  }}