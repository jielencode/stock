package com.ufgov.zc.server.bank.socket.tongxiang.ccb;import java.math.BigDecimal;import java.util.Date;import java.util.HashMap;import java.util.Map;import com.ufgov.zc.common.am.model.AmVoucher;import com.ufgov.zc.common.commonbiz.model.BaseBill;import com.ufgov.zc.common.cp.model.CpVoucher;import com.ufgov.zc.common.system.constants.SocketConstants;import com.ufgov.zc.common.system.model.ResultInfo;import com.ufgov.zc.common.system.util.DateUtil;public class CcbTransactionSocketProxy extends AbstractCcbSocketProxy {  public CcbTransactionSocketProxy() {    super();  }  public CcbTransactionSocketProxy(Map prop) {    super(prop);  }  public void afterDealBusinessObject(Object businessObject, ResultInfo resultInfo) throws Exception {    //对业务数据进行处理    System.out.println("it is after ccb transaction");    String returnCode = resultInfo.getResultCode();    BaseBill voucher = (BaseBill) businessObject;    Map params = new HashMap();    if (SocketConstants.SUCCESS.equals(returnCode)) {      //支付交易成功      //TODO:更新凭证数据的状态      params.put("dealState", "3");      this.updateVoucherGroupState(params, voucher);    } else if (SocketConstants.MESSAGE_STRUCTURE_EXCEPTION.equals(returnCode)    || SocketConstants.UNCERTAINTY.equals(returnCode) || SocketConstants.OTHER_EXCEPTION.equals(returnCode)) {      //报文结构不正确、服务器端返回不确定错误、操作的未名错误，都将通过银行提供的查询接口进行查询确定      //6 为状态不确定      params.put("dealState", "6");      this.updateVoucherGroupState(params, voucher);    }  }  public String parseToXml(Object businessObject) throws Exception {    String result = "";    if (businessObject instanceof CpVoucher) {      result = parseCpVoucherToXml(businessObject);    } else if (businessObject instanceof AmVoucher) {      result = parseAmVoucherToXml(businessObject);    }    return result;  }  private String parseCpVoucherToXml(Object businessObject) throws Exception {    //TODO: 填充实际的CUST_ID、USER_ID及相应的voucher值    //TODO: 考虑用freemark or velocity 模板技术    CpVoucher voucher = (CpVoucher) businessObject;    StringBuffer buffer = new StringBuffer();    buffer.append("<?xml version=\"1.0\" encoding=\"GB2312\" standalone=\"yes\"?>");//     buffer.append("<TX>");//      buffer.append("<REQUEST_SN>" + this.getRequestSn() + "</REQUEST_SN>");//只使用数字,必须唯一，不允许相同的请求序列码  varChar(16)    buffer.append("<CUST_ID>" + this.getAutheInfo().getUserId() + "</CUST_ID>");//发起支付交易的单位的建行网银签约客户号 varChar(21)    buffer.append("<USER_ID>" + this.getAutheInfo().getOperId() + "</USER_ID>");//发起支付交易的操作员的建行网银操作员号  varChar(6)    buffer.append("<PASSWORD>111111</PASSWORD>");//固定     buffer.append("<TX_CODE>6W5003</TX_CODE>");//固定     buffer.append("<LANGUAGE>CN</LANGUAGE>");//固定     buffer.append("<TX_INFO>");//     buffer.append("<SUBTX>FS9102</SUBTX>");//固定     buffer.append("<USERCLASS>3</USERCLASS>");//固定      String inputorId = voucher.getInputorId();    if (inputorId == null)      throw new IllegalArgumentException("财政系统中操作员代码!");    buffer.append("<USERNAME>" + inputorId + "</USERNAME>");//财政系统中操作员代码  varChar(40)    buffer.append("<FUNCID>33063CZ01</FUNCID>");//固定      buffer.append("<DEPTCODE>111111</DEPTCODE>");//固定     buffer.append("<TRADEROAD>1</TRADEROAD>");//固定      //TODO：再确认    String balModel = voucher.getBalModeCode();    if (balModel == null) {      throw new IllegalArgumentException("结算方式为空!");    }    balModel = balModel.substring(1, 2);    String bankSerial = voucher.getDattr5();    if (bankSerial != null && bankSerial.length() > 0) {      balModel = "3";    }    buffer.append("<TRADEATTR>" + balModel + "</TRADEATTR>");//交易属性：1-现金2-转帐3-托收4一户通  varChar(2)    buffer.append("<TRADEFLAG>1</TRADEFLAG>");//固定      buffer.append("<PROGRESSFLAG>0</PROGRESSFLAG>");//固定      String paybankAccCode = voucher.getPayBankAccCode();    if (paybankAccCode == null)      throw new IllegalArgumentException("付款账号为空!");    buffer.append("<ACCNO1>" + paybankAccCode + "</ACCNO1>");//支付交易的付款帐号 varChar(32)    String payAccName = voucher.getPayAccName();    if (payAccName == null)      throw new IllegalArgumentException("支付交易的付款单位名称为空!");    buffer.append("<ACCNAME1>" + payAccName + "</ACCNAME1>");//支付交易的付款单位名称 varChar(60)    buffer.append("<ACCDEPTNAME1>txt</ACCDEPTNAME1>");//固定      buffer.append("<COUNTERNO1>330000000</COUNTERNO1>");//固定      buffer.append("<CURRENCY1>01</CURRENCY1>");//固定     buffer.append("<UBANKNO1>01</UBANKNO1>");//固定     String receBankAccCode = voucher.getReceBankAccCode();    //    if (receBankAccCode == null)    //      throw new IllegalArgumentException("支付交易的收款帐号为空!");    receBankAccCode = receBankAccCode == null ? "" : receBankAccCode;    buffer.append("<ACCNO2>" + receBankAccCode + "</ACCNO2>");//支付交易的收款帐号 varChar(32)    String receAccName = voucher.getReceAccName();    if (receAccName == null)      throw new IllegalArgumentException("支付交易的收款单位名称为空!");    buffer.append("<ACCNAME2>" + receAccName + "</ACCNAME2>");//支付交易的收款单位名称 varChar(60)    String receBankNodeName = voucher.getReceBankNodeName();    //    if (receBankNodeName == null)    //      throw new IllegalArgumentException("支付交易的收款单位的开户机构名称为空");    receBankNodeName = receBankNodeName == null ? "" : receBankNodeName;    buffer.append("<ACCDEPTNAME2>" + receBankNodeName + "</ACCDEPTNAME2>");//支付交易的收款单位的开户机构名称  varChar(40)    buffer.append("<COUNTERNO2>000000000</COUNTERNO2>");//固定      buffer.append("<CURRENCY2>01</CURRENCY2>");//固定     buffer.append("<UBANKNO2>01</UBANKNO2>");//固定     String cocode = voucher.getCoCode();    if (cocode == null)      throw new IllegalArgumentException("财政系统中预算单位编号为空");    buffer.append("<BUDGETDEPTCD>" + voucher.getCoCode() + "</BUDGETDEPTCD>");//财政系统中预算单位编号  varChar(21)    //TODO:    String fundCode = voucher.getFundCode();    if (fundCode == null)      throw new IllegalArgumentException("资金性质为空!");    fundCode = fundCode.substring(1, 2);    fundCode = "1".equals(fundCode) ? fundCode : "2";    buffer.append("<IDTYPE>" + fundCode + "." + "</IDTYPE>");//资金性质代码 varChar(2)    String baccCode = voucher.getBaccCode();    if (baccCode == null)      throw new IllegalArgumentException("预算科目代码为空");    buffer.append("<IDNO>" + voucher.getBaccCode() + "</IDNO>");//预算科目代码 varchar(12)    //TODO://////    buffer.append("<CREDITNO>" + voucher.getDattr5() + "</CREDITNO>");//银行流水号(托收和一户通一定要填)  varchar(20)    buffer.append("<PAYCOMMANDCD>" + voucher.getCpVouNo() + "</PAYCOMMANDCD>");//支付指令号为财政系统中指令号  varChar(30)    BigDecimal curMoney = voucher.getCurMoney();    curMoney = curMoney.setScale(2, BigDecimal.ROUND_HALF_UP);    buffer.append("<AMOUNT1>" + curMoney + "</AMOUNT1>");//付款金额  Decimal(16,2)    buffer.append("<AMOUNT2>0.00</AMOUNT2>");//固定     buffer.append("<FEE1>0.00</FEE1>");//固定     buffer.append("<FEE2>0.00</FEE2>");//固定     buffer.append("<CASHTYPE>0</CASHTYPE>");//固定      buffer.append("<DIGEST1>" + voucher.getRemark() + "</DIGEST1>");//支付摘要 varChar(40)    buffer.append("<DIGEST2>" + voucher.getCoName() + "</DIGEST2>");//财政系统中预算单位名称 varChar(40)    Date procDate = voucher.getProcdate();    if (procDate == null) {      throw new IllegalArgumentException("凭证日期为空!");    }    buffer.append("<DATE1>" + DateUtil.dateToShortDdString(procDate) + "</DATE1>");//凭证日期YYYYMMDD Number(8)    buffer.append("<DATE2>20000101</DATE2>");//固定     buffer.append("<REM1>" + voucher.getFundName() + "</REM1>");//资金性质名称  varChar(99)    buffer.append("<REM2>" + voucher.getBaccName() + "</REM2>");//预算科目名称  varChar(99)    buffer.append("</TX_INFO>");//      buffer.append("</TX>");//     return buffer.toString();  }  private String parseAmVoucherToXml(Object businessObject) throws Exception {    StringBuffer buffer = new StringBuffer();    AmVoucher voucher = (AmVoucher) businessObject;    buffer.append("<?xml version=\"1.0\" encoding=\"GB2312\" standalone=\"yes\"?>"); //                                                           buffer.append("<TX>"); //                                                           buffer.append("<REQUEST_SN>" + this.getRequestSn() + "</REQUEST_SN>"); //只使用数字,必须唯一，不允许相同的请求序列码 varChar(16)    buffer.append("<CUST_ID>" + this.getAutheInfo().getUserId() + "</CUST_ID>"); //发起支付交易的单位的建行网银签约客户号  varChar(21)        buffer.append("<USER_ID>" + this.getAutheInfo().getOperId() + "</USER_ID>"); //发起支付交易的操作员的建行网银操作员号 varChar(6)         buffer.append("<PASSWORD>111111</PASSWORD>"); //固定                                                       buffer.append("<TX_CODE>6W8020</TX_CODE>"); //固定                                                       buffer.append("<LANGUAGE>CN</LANGUAGE>"); //固定                                                       buffer.append("<TX_INFO>"); //        String paybankAccCode = voucher.getPayBankAccCode();    if (paybankAccCode == null)      throw new IllegalArgumentException("付款账号为空!");    buffer.append("<PAY_ACCNO>" + paybankAccCode + "</PAY_ACCNO>"); //支付交易的付款帐号  varChar(32)      String receBankAccCode = voucher.getReceBankAccCode();    //    if (receBankAccCode == null)    //      throw new IllegalArgumentException("支付交易的收款帐号!");    receBankAccCode = receBankAccCode == null ? "" : receBankAccCode;    buffer.append("<RECV_ACCNO>" + receBankAccCode + "</RECV_ACCNO>"); //支付交易的收款帐号  varChar(32)       String receAccName = voucher.getReceAccName();    if (receAccName == null)      throw new IllegalArgumentException("支付交易的收款单位名称!");    buffer.append("<RECV_ACC_NAME>" + receAccName + "</RECV_ACC_NAME>"); //支付交易的收款单位名称 varChar(60)      String receBankNodeName = voucher.getReceBankNodeName();    //    if (receBankNodeName == null)    //      throw new IllegalArgumentException("支付交易的收款单位的开户机构名称为空");    receBankNodeName = receBankNodeName == null ? "" : receBankNodeName;    buffer.append("<RECV_OPENACC_DEPT>" + receBankNodeName + "</RECV_OPENACC_DEPT>"); //支付交易的收款单位的开户机构名称  varChar(40)    BigDecimal curMoney = voucher.getCurMoney();    curMoney = curMoney.setScale(2, BigDecimal.ROUND_HALF_UP);    buffer.append("<AMOUNT>" + curMoney + "</AMOUNT>"); //付款金额  Decimal(16,2)                                    buffer.append("<CUR_TYPE>01</CUR_TYPE>"); //         String payoutName = voucher.getPayoutName();    payoutName = payoutName == null ? "" : payoutName;    buffer.append("<USEOF>" + payoutName + "</USEOF>"); //支付用途  varChar(12)                                      buffer.append("<REM1>备注1</REM1>"); //固定                                                       buffer.append("<REM2>备注2</REM2>"); //固定                                                       buffer.append("</TX_INFO>"); //固定                                                       buffer.append("<SIGN_INFO>签名信息</SIGN_INFO>"); //固定                                                       buffer.append("<SIGNCERT>签名CA信息</SIGNCERT>"); //固定                                                       buffer.append("</TX>"); //                                                           return buffer.toString();  }}