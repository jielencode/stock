package com.ufgov.zc.server.cp.dao.ibatis;import java.math.BigDecimal;import java.sql.SQLException;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.orm.ibatis.SqlMapClientCallback;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;import com.ibatis.sqlmap.client.SqlMapExecutor;import com.ufgov.zc.common.commonbiz.model.BankAccount;import com.ufgov.zc.common.commonbiz.util.DpBalanceViewGetter;import com.ufgov.zc.common.cp.model.CpImpRecord;import com.ufgov.zc.common.cp.model.CpVoucher;import com.ufgov.zc.common.cp.model.CpVoucherSplit;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.DaoException;import com.ufgov.zc.common.system.util.DateUtil;import com.ufgov.zc.server.cp.dao.ICpVoucherDao;import com.ufgov.zc.server.system.util.GkGetDataRuleUtil;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.system.util.OrderColumnsUtil;import com.ufgov.zc.server.system.util.RequestMetaUtil;public class CpVoucherDao extends SqlMapClientDaoSupport implements ICpVoucherDao {  public List getCpVoucherInfo(String dpBalanceId, String paytypeCode, int nd) {    Map map = new HashMap();    map.put("nd", new Integer(nd));    map.put("dpBalanceId", dpBalanceId);    map.put("paytypeCode", paytypeCode);    return this.getSqlMapClientTemplate().queryForList("CpVoucher.getCpVoucherInfo",    map);  }  public List getCpVoucherBySumCpVoucherId(String sumCpVoucherId) {    Map param = new HashMap();    param.put("sumCpVoucherId", sumCpVoucherId);    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherBySumCpVoucherId", param);  }  public List getCpVoucherBySumCpVoucherIdForPrint(String sumCpVoucherId) {    Map param = new HashMap();    param.put("sumCpVoucherId", sumCpVoucherId);    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherBySumCpVoucherIdForPrint", param);  }  public List getCpVoucherBySumCpVoucherIdListForPrint(List sumCpVoucherIdList) {    if (sumCpVoucherIdList.isEmpty()) {      return new ArrayList();    }    Map param = new HashMap();    param.put("sumCpVoucherIdList", sumCpVoucherIdList);    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherBySumCpVoucherIdListForPrint", param);  }  public List getCpVoucherByIdList(List cpVoucherIdList) {    if (cpVoucherIdList.isEmpty()) {      return new ArrayList();    }    Map param = new HashMap();    param.put("cpVoucherIdList", cpVoucherIdList);    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherByIdList", param);  }  public List getAvCpVoucherByVouNoList(String cpVoucherVouNo) {    Map param = new HashMap();    param.put("cpVoucherVouNo", cpVoucherVouNo);    param.put("coCode", RequestMetaUtil.getSvCoCode());//    param.put("numLimitStr", NumLimUtil.getInstance().getNumLimCondByCoType(////    RequestMetaUtil.getCompoId(), NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getAvCpVoucherByVouNoList", param);  }  public List getDvCpVoucherByVouNoList(String cpVoucherVouNo) {    Map param = new HashMap();    param.put("cpVoucherVouNo", cpVoucherVouNo);//    param.put("numLimitStr", NumLimUtil.getInstance().getNumLimCondByCoType(////    RequestMetaUtil.getCompoId(), NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getDvCpVoucherByVouNoList", param);  }  public List getCpVoucherByIdListForSumDetail(List cpVoucherIdList) {    if (cpVoucherIdList.isEmpty()) {      return new ArrayList();    }    Map param = new HashMap();    param.put("cpVoucherIdList", cpVoucherIdList);    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherByIdListForSumDetail", param);  }  public List getCpVoucherForCpAvSum(ElementConditionDto eleConditionDto) {    eleConditionDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(    RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForCpAvSum", eleConditionDto);  }  public List getCpVoucherForCpAvNewSum(ElementConditionDto eleConditionDto) {    eleConditionDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(    RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForCpAvNewSum", eleConditionDto);  }  public List getCpVoucherForCpDvSum(ElementConditionDto eleConditionDto) {//    eleConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    eleConditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    eleConditionDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(    RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForCpDvSum", eleConditionDto);  }  public List getCpVoucherForCpDvNewSum(ElementConditionDto eleConditionDto) {//    eleConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    eleConditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    eleConditionDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(    RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForCpDvNewSum", eleConditionDto);  }  public List getCpVoucherForCpAv(ElementConditionDto eleConditionDto) {    eleConditionDto.setDpBalanceMonthView(DpBalanceViewGetter    .getMonthView(eleConditionDto.getMonth()));//    eleConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    eleConditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    eleConditionDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(    RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForCpAvEditList", eleConditionDto);  }  public List getCpVoucherForCpAvBiEdit(ElementConditionDto eleConditionDto) {    eleConditionDto.setDpBalanceMonthView(DpBalanceViewGetter    .getMonthView(eleConditionDto.getMonth()));//    eleConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    eleConditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    eleConditionDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(    RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForCpAvBiEditList", eleConditionDto);  }  public List getCpVoucherForRefund(ElementConditionDto eleConditionDto) {    eleConditionDto.setDpBalanceMonthView(DpBalanceViewGetter    .getMonthView(eleConditionDto.getMonth()));//    eleConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    eleConditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    eleConditionDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(    RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForRefund", eleConditionDto);  }  public List getCpVoucherForCpDvEdit(ElementConditionDto eleConditionDto) {    eleConditionDto.setDpBalanceMonthView(DpBalanceViewGetter    .getMonthView(eleConditionDto.getMonth()));//    eleConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    eleConditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    eleConditionDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(    RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForCpDvEdit", eleConditionDto);  }  public List getCpVoucher(ElementConditionDto eleConditionDto) {    return this.getSqlMapClientTemplate().queryForList("CpVoucher.getCpVoucher",    eleConditionDto);  }  public List getCpVoucherForCpDVou(ElementConditionDto eleConditionDto) {//    eleConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    eleConditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    eleConditionDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(    RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForCpDVouQueryList", eleConditionDto);  }  public List getCpVoucherForCpAVou(ElementConditionDto elementDto) {//    elementDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    elementDto.getNumLimCompoId(), NumLimConstants.FWATCH));    elementDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(    RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForCpAVouQueryList", elementDto);  }  public List getAuditedForCpVoucher(ElementConditionDto elementDto) {//    elementDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    elementDto.getNumLimCompoId(), NumLimConstants.FWATCH));    elementDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(    RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getAuditedForCpVoucherList", elementDto);  }  public List getCpVoucherSplitByCpVoucherId(String id) {    return this.getSqlMapClientTemplate().queryForList(    "CpVoucherSplit.getCpVoucherSplitByCpVoucherId", id);  }  public List getCpVoucherForCpDv(int nd, String a_status_code, String co_code) {    Map map = new HashMap();    map.put("nd", new Integer(nd));    if (a_status_code != null && a_status_code.trim().length() > 0    && a_status_code.equals("ALL") == false)      map.put("a_status_code", a_status_code);    if (co_code != null && co_code.trim().length() > 0)      map.put("co_code", co_code);    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForCpDvList", map);  }  public void insertCpVoucher(CpVoucher cpVoucher) {    this.getSqlMapClientTemplate().insert("CpVoucher.insertCpVoucher", cpVoucher);  }  public void insertCpVoucher(final List cpVoucherList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < cpVoucherList.size(); i++) {          executor.insert("CpVoucher.insertCpVoucher", cpVoucherList.get(i));        }        executor.executeBatch();        return null;      }    });  }  //回写CP_APPLY  public void updateCpApply(CpVoucher cpVoucher, String cpApplyId) {    Map map = new HashMap();    map.put("cpVoucherId", cpVoucher.getCpVoucherId());    map.put("vouNo", cpVoucher.getCpVouNo());    map.put("cpApplyId", cpApplyId);    map.put("nd", new Integer(RequestMetaUtil.getSvNd()));    this.getSqlMapClientTemplate().update("CpVoucher.updateCpApply", map);  }  public void updateSumCpVoucherId(final List cpVoucherList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < cpVoucherList.size(); i++) {          executor.update("CpVoucher.updateSumCpVoucherId", cpVoucherList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public CpVoucher getCpVoucherById(String cpVoucherId) {    Map param = new HashMap();    param.put("cpVoucherId", cpVoucherId);    return (CpVoucher) this.getSqlMapClientTemplate().queryForObject(    "CpVoucher.getCpVoucherById", param);  }  public int updateDpCdUseMoney(BigDecimal dpCdUseMoney, String cpVoucherId, int nd) {    Map param = new HashMap();    param.put("dpCdUseMoney", dpCdUseMoney);    param.put("cpVoucherId", cpVoucherId);    param.put("nd", new Integer(nd));    return this.getSqlMapClientTemplate().update("CpVoucher.updateDpCdUseMoney",    param);  }  public int updateCpAdjustCodeForRefund(String cpAdjustCode, String cpVoucherId) {    Map param = new HashMap();    param.put("cpAdjustCode", cpAdjustCode);    param.put("cpVoucherId", cpVoucherId);    return this.getSqlMapClientTemplate().update(    "CpVoucher.updateCpAdjustCodeForRefund", param);  }  public int updateCpVoucher(CpVoucher cpVoucher) {    return this.getSqlMapClientTemplate().update("CpVoucher.updateCpVoucherForCpAv",    cpVoucher);  }  public void updateCpVoucherForCpDzCzBank(final List cpVoucherList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < cpVoucherList.size(); i++) {          CpVoucher cpVoucher = (CpVoucher) cpVoucherList.get(i);          executor.update("CpVoucher.updateCpVoucherForCpDzCzBank", cpVoucher);        }        executor.executeBatch();        return null;      }    });  }  public List getCpVoucherForCpDtzd(ElementConditionDto elementDto) {    elementDto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance()    .getDataRuleCondiStr(elementDto.getDataRuleId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForCpDtzd", elementDto);  }  public int deleteCpVoucherById(String cpVoucherId) {    return this.getSqlMapClientTemplate().delete("CpVoucher.deleteCpVoucherById",    cpVoucherId);  }  public void deleteCpVoucher(final List cpVoucherIdList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < cpVoucherIdList.size(); i++) {          executor.delete("CpVoucher.deleteCpVoucherById", cpVoucherIdList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public void setSumCpVoucherIdNull(final List sumCpVoucherIdList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < sumCpVoucherIdList.size(); i++) {          executor.update("CpVoucher.setSumCpVoucherIdNull", sumCpVoucherIdList          .get(i));        }        executor.executeBatch();        return null;      }    });  }  public String cpApplyToCpVoucher(String cpApplyIds, String cpVoucherIds,  String vouNos, String inputGroupIds, String userId, String userName,  String aStatusCode, String useVouBak, BankAccount payBankAccount, Date payDate) {    Map map = new HashMap();    map.put("cpApplyIds", cpApplyIds);    map.put("cpVoucherIds", cpVoucherIds);    map.put("vouNos", vouNos);    map.put("inputGroupIds", inputGroupIds);    map.put("userId", userId);    map.put("userName", userName);    map.put("aStatusCode", aStatusCode);    map.put("useVouBak", useVouBak);    map.put("payAcccode", payBankAccount.getBankAccCode());    map.put("payAccname", payBankAccount.getAccName());    map.put("payBankacccode", payBankAccount.getBankAccCode());    map.put("payBankno", payBankAccount.getBankNo());    map.put("payBanknodecode", payBankAccount.getBankNodeCode());    map.put("payBanknodeName", payBankAccount.getBankNodeName());    map.put("payBankcode", payBankAccount.getBankCode());    map.put("payBankname", payBankAccount.getBankName());    map.put("payCode", payBankAccount.getCoCode());    map.put("payDate", payDate);    map.put("rtnStr", "");    this.getSqlMapClientTemplate().insert("CpVoucher.SP_CPAPPLY_CREATE_CPVOUCHER",    map);    return (String) map.get("rtnStr");  }  public List getCpVoucherForCpDtzdPrint(ElementConditionDto elementDto) {    elementDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(    elementDto.getCompoId()));    elementDto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance()    .getDataRuleCondiStr(elementDto.getDataRuleId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForCpDtzdPrint", elementDto);  }  public List getCpVoucherForCpDtzdDealStateQuery(ElementConditionDto elementDto) {    elementDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(    elementDto.getCompoId()));    elementDto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance()    .getDataRuleCondiStr(elementDto.getDataRuleId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForCpDtzdDealStateQuery", elementDto);  }  public List getCpVoucherForCpDzCzBank(ElementConditionDto elementDto) {    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForCpDzCzBank", elementDto);  }  public List getCpVoucherForCpDv(ElementConditionDto eleConditionDto) {    eleConditionDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(    RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForCpDvList", eleConditionDto);  }  public void auditForCpDvApplyAudit(CpVoucher cpVoucher) {    Map map = new HashMap();    map.put("aStatueCode", "3");    map.put("cpVoucherId", cpVoucher.getCpVoucherId());    map.put("nd", new Integer(RequestMetaUtil.getSvNd()));    this.getSqlMapClientTemplate().update("CpVoucher.updateAstatusCodeAndDealState",    map);  }  public void auditForCpAvEdit(CpVoucher cpVoucher) {    Map param = new HashMap();    param.put("aStatueCode", "3");    param.put("cpVoucherId", cpVoucher.getCpVoucherId());    param.put("nd", new Integer(RequestMetaUtil.getSvNd()));    this.getSqlMapClientTemplate().update("CpVoucher.updateCpVoucherForCpAvEdit",    param);  }  public void depassForCpDvApplyAudit(CpVoucher cpVoucher) {    Map map = new HashMap();    map.put("aStatueCode", "0");    map.put("cpVoucherId", cpVoucher.getCpVoucherId());    map.put("nd", new Integer(RequestMetaUtil.getSvNd()));    this.getSqlMapClientTemplate().update("CpVoucher.updateAstatusCodeAndDealState",    map);  }  public String revoCpVoucher(String cpVoucherIds) {    Map map = new HashMap();    map.put("cpVoucherIds", cpVoucherIds);    map.put("rtnStr", "");    this.getSqlMapClientTemplate().insert("CpVoucher.SP_CP_REVO_CPVOUCHER", map);    return (String) map.get("rtnStr");  }  public void increasePrintTimes(List cpVoucherIdList) {    Map map = new HashMap();    if (cpVoucherIdList.size() == 0) {      throw new DaoException("increasePrintTimes的参数cpVoucherIdList为空");    }    map.put("cpVoucherIdList", cpVoucherIdList);    this.getSqlMapClientTemplate().update("CpVoucher.increasePrintTimes", map);  }  public void updatePrintTimes(List cpVoucherIdList, int printTimes) {    Map map = new HashMap();    if (cpVoucherIdList.size() == 0) {      throw new DaoException("updatePrintTimes的参数cpVoucherIdList为空");    }    map.put("cpVoucherIdList", cpVoucherIdList);    map.put("printTimes", new Integer(printTimes));    this.getSqlMapClientTemplate().update("CpVoucher.updatePrintTimes", map);  }  public List getCpVoucherForBbBalDtzd(ElementConditionDto eleConditionDto) {//    eleConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    eleConditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForBbBalDtzd", eleConditionDto);  }  public List getCpVoucherForBbAdrDtzd(ElementConditionDto eleConditionDto) {//    eleConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    eleConditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    eleConditionDto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance()    .getDataRuleCondiStr(eleConditionDto.getDataRuleId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForBbAdrDtzd", eleConditionDto);  }  public List getCpVoucherForBbAmveDtzd(ElementConditionDto eleConditionDto) {//    eleConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    eleConditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForBbAmveDtzd", eleConditionDto);  }  public List getCpVoucherForBbDmveDtzd(ElementConditionDto eleConditionDto) {//    eleConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    eleConditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForBbDmveDtzd", eleConditionDto);  }  /******************zhaolh add methods********************/  //zhaolh add method 审核授权支付  public void auditForCpVoucherAudit(CpVoucher cpVoucher) {    Map map = new HashMap();    map.put("aStatueCode", "3");    map.put("cpVoucherId", cpVoucher.getCpVoucherId());    map.put("nd", new Integer(RequestMetaUtil.getSvNd()));    this.getSqlMapClientTemplate().update("CpVoucher.updateAstatusCodeAndDealState",    map);  }  //zhaolh add method 消审授权支付  public void unauditForCpVoucherAudit(CpVoucher cpVoucher) {    Map map = new HashMap();    map.put("aStatueCode", "2");    map.put("cpVoucherId", cpVoucher.getCpVoucherId());    map.put("nd", new Integer(RequestMetaUtil.getSvNd()));    this.getSqlMapClientTemplate().update("CpVoucher.updateAstatusCodeAndDealState",    map);  }  //zhaolh add method 退回  public void untreadForCpAvAudit(CpVoucher cpVoucher) {    Map map = new HashMap();    map.put("aStatueCode", "0");    map.put("cpVoucherId", cpVoucher.getCpVoucherId());    map.put("nd", new Integer(RequestMetaUtil.getSvNd()));    this.getSqlMapClientTemplate().update("CpVoucher.updateAstatusCodeAndDealState",    map);  }  public int updateCpVoucherForUndo(String isValid, String cpVoucherId) {    Map map = new HashMap();    map.put("isValid", isValid);    map.put("cpVoucherId", cpVoucherId);    map.put("nd", new Integer(RequestMetaUtil.getSvNd()));    return this.getSqlMapClientTemplate().update("CpVoucher.updateIsValid", map);  }  public List getCpVoucherForCpAvAudit(ElementConditionDto eleConditionDto) {    eleConditionDto.setDpBalanceMonthView(DpBalanceViewGetter    .getMonthView(eleConditionDto.getMonth()));//    eleConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    eleConditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    eleConditionDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(    RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForCpAvAuditList", eleConditionDto);  }  public List getCpVoucherForCpAvBiAudit(ElementConditionDto eleConditionDto) {    eleConditionDto.setDpBalanceMonthView(DpBalanceViewGetter    .getMonthView(eleConditionDto.getMonth()));//    eleConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    eleConditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    eleConditionDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(    RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForCpAvBiAudit", eleConditionDto);  }  public List getCpVoucherForRefundAudit(ElementConditionDto eleConditionDto) {    eleConditionDto.setDpBalanceMonthView(DpBalanceViewGetter    .getMonthView(eleConditionDto.getMonth()));//    eleConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    eleConditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    eleConditionDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(    RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForRefundAudit", eleConditionDto);  }  public List getCpVoucherForBbAvc(CpVoucher cpVoucher) {    String payTypeCode = cpVoucher.getPaytypeCode();    String numLimCompoId = "BB_AVC_53_CP_VOUCHER";    if ("0201".equals(payTypeCode)) {      numLimCompoId = "BB_DVC_53_CP_VOUCHER";    }    Map map = new HashMap();    map.put("cpVouNo", cpVoucher.getCpVouNo());    map.put("checkNo", cpVoucher.getCheckNo());    map.put("curMoney", cpVoucher.getCurMoney());    map.put("paytypeCode", cpVoucher.getPaytypeCode());//    map.put("numLimitStr", NumLimUtil.getInstance().getNumLimCondByCoType(////    numLimCompoId, NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForBbAvcList", map);  }  public List getCpVoucherForBbReturn(CpVoucher cpVoucher) {    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForBbReturnList", cpVoucher);  }  public List getCpVoucherForBbReturn(ElementConditionDto eleConditionDto) {//    eleConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    eleConditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForBbReturnList", eleConditionDto);  }  public String updateCpVoucherForBbAvc(CpVoucher cpVoucher) {    Map map = new HashMap();    map.put("pVouNo", cpVoucher.getCpVouNo());    map.put("pCheckNo", cpVoucher.getCheckNo());    map.put("pCurMoney", cpVoucher.getCurMoney().toString());    map.put("pPayTypeCode", cpVoucher.getPaytypeCode());    map.put("pUserId", cpVoucher.getInputorId());    map.put("pRemark", "");    map.put("pDattr1", cpVoucher.getComment());    map.put("pDattr2", DateUtil.dateToSsString(RequestMetaUtil.getSysDate()));    map.put("pDattr3", "");    map.put("pRetMessage", "");    this.getSqlMapClientTemplate().update("CpVoucher.updateCpVoucherForBbAvc", map);    return (String) map.get("pRetMessage");  }  public String updateCpVoucherForBbReturn(CpVoucher cpVoucher) {    Map map = new HashMap();    map.put("pVouNo", cpVoucher.getDattr4());//旧凭证号    map.put("pCurMoney", cpVoucher.getCurMoney().toString());    map.put("pPayTypeCode", cpVoucher.getPaytypeCode());    map.put("pDattr1", cpVoucher.getComment());    //自动编号    map.put("pCpVoucherId", cpVoucher.getCpVoucherId());    map.put("pInputGroupId", cpVoucher.getInputGroupId());    map.put("pVouNoNew", cpVoucher.getCpVouNo());    map.put("pCdate", DateUtil.dateToDdString(cpVoucher.getCdate()));    map.put("pBankAuditorId", RequestMetaUtil.getSvUserID());    map.put("pBankDate", DateUtil.dateToDdString(RequestMetaUtil.getTransDate()));    map.put("pInputorId", RequestMetaUtil.getSvUserID());    map.put("pInputorName", RequestMetaUtil.getSvUserName());    map.put("remark", cpVoucher.getRemark());    map.put("pRetMessage", "");    this.getSqlMapClientTemplate().update("CpVoucher.updateCpVoucherForBbReturn",    map);    return (String) map.get("pRetMessage");  }  public BigDecimal getCurMonthMoney(CpVoucher cpVoucher) {    Map map = new HashMap();    map.put("coCode", cpVoucher.getCoCode());    map.put("procDate", cpVoucher.getProcdate());    map.put("nd", new Integer(RequestMetaUtil.getSvNd()));    map.put("balModeCode", cpVoucher.getBalModeCode());    return (BigDecimal) this.getSqlMapClientTemplate().queryForObject(    "CpVoucher.getCurMonthMoney", map);  }  public BigDecimal getCurDayMoney(CpVoucher cpVoucher) {    Map map = new HashMap();    map.put("coCode", cpVoucher.getCoCode());    map.put("procDate", cpVoucher.getProcdate());    map.put("nd", new Integer(RequestMetaUtil.getSvNd()));    map.put("balModeCode", cpVoucher.getBalModeCode());    return (BigDecimal) this.getSqlMapClientTemplate().queryForObject(    "CpVoucher.getCurDayMoney", map);  }  public BigDecimal getCurMoneyAvailableForRefund(String cpVoucherId) {    BigDecimal d0 = (BigDecimal) this.getSqlMapClientTemplate().queryForObject(    "CpVoucher.getCurMoneyAvailableForRefund0", cpVoucherId);    BigDecimal d1 = (BigDecimal) this.getSqlMapClientTemplate().queryForObject(    "CpVoucher.getCurMoneyAvailableForRefund1", cpVoucherId);    if (d1 == null) {      d1 = new BigDecimal("0");    }    return d0.subtract(d1);  }  public String sendBankForBb(List cpVoucherList, String transType) {    int num = 0;    Map map = new HashMap();    map.put("cpVoucherList", cpVoucherList);    map.put("dealState", "00".equals(transType) ? "1" : "0");    num = this.getSqlMapClientTemplate().update("CpVoucher.sendBankForBb", map);    if (cpVoucherList.size() == num) {      return null;    } else {      throw new DaoException("CpVoucherDao-->sendBank()更新记录不唯一");    }  }  public String sendBankForBa(List cpVoucherList, String transType) {    StringBuffer billids = new StringBuffer();    for (int i = 0; i < cpVoucherList.size(); i++) {      billids.append(i > 0 ? "," : null);      billids.append(cpVoucherList.get(i));    }    Map map = new HashMap();    map.put("VoucherIds", billids.toString());    map.put("Sender", RequestMetaUtil.getSvUserID());    map.put("Fiscal", new Integer(RequestMetaUtil.getSvNd()));    map.put("Fisperd", new Integer(RequestMetaUtil.getSvMonth()));    map.put("Transtype", transType);    map.put("info", "");    this.getSqlMapClientTemplate().insert("CpVoucher.sendBankForBa", map);    return (String) map.get("info");  }  public void insertCpVoucherSplit(List iList) {    final List list = iList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          CpVoucherSplit value = (CpVoucherSplit) list.get(i);          executor.insert("CpVoucherSplit.insertCpVoucherSplit", value);        }        executor.executeBatch();        return null;      }    });  }  public void updateCpVoucherSplit(List biList) {    final List list = biList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          CpVoucherSplit value = (CpVoucherSplit) list.get(i);          executor.update("CpVoucherSplit.updateCpVoucherSplit", value);        }        executor.executeBatch();        return null;      }    });  }  public void deleteCpVoucherSplit(String id) {    Map map = new HashMap();    map.put("id", id);    this.getSqlMapClientTemplate()    .delete("CpVoucherSplit.deleteCpVoucherSplit", map);  }  public void updateCpVoucherForIsSplit(String id) {    Map map = new HashMap();    map.put("id", id);    this.getSqlMapClientTemplate().update(    "CpVoucherSplit.updateCpVoucherForIsSplit", map);  }  public void cancelSplit(List idList) {    final List list = idList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          CpVoucher value = (CpVoucher) list.get(i);          executor.update("CpVoucher.cancelSplit", value);        }        executor.executeBatch();        return null;      }    });  }  public void deleteCpVoucherSplitForCancel(List idList) {    final List list = idList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          CpVoucher value = (CpVoucher) list.get(i);          executor.update("CpVoucher.deleteCpVoucherSplitForCancel", value);        }        executor.executeBatch();        return null;      }    });  }  public void updateCpVoucherByPayClearBillId(final String payClearBillId,  final String billNo, List idList) {    final List list = idList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        Map param = new HashMap();        param.put("payClearBillId", payClearBillId);        param.put("billNo", billNo);        for (int i = 0; i < list.size(); i++) {          param.put("cpVoucherId", list.get(i));          executor.update("CpVoucher.updateCpVoucherByPayClearBillId", param);        }        executor.executeBatch();        return null;      }    });  }  public BigDecimal getRequestSeri() {    return (BigDecimal) this.getSqlMapClientTemplate().queryForObject(    "CpVoucher.getRequestSeri");  }  public void updateVoucherGroupDealState(Map params) {    this.getSqlMapClientTemplate().update("CpVoucher.updateVoucherGroupDealState",    params);  }  public void updateCpVoucherPayInfo(List cpVoucherList) {    final List list = cpVoucherList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          CpVoucher value = (CpVoucher) list.get(i);          executor.update("CpVoucher.updateCpVoucherPayInfo", value);        }        executor.executeBatch();        return null;      }    });  }  public int getUnHXCpVoucher(String coCode) {    Map map = new HashMap();    map.put("coCode", coCode);    return ((Integer) this.getSqlMapClientTemplate().queryForObject(    "CpVoucher.getUnHXCpVoucher", map)).intValue();  }  public void editRemarkForCpVoucher(List idList, final String remark) {    final List list = idList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        Map param = new HashMap();        param.put("remark", remark);        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          param.put("cpVoucherId", list.get(i));          executor.update("CpVoucher.editRemarkForCpVoucher", param);        }        executor.executeBatch();        return null;      }    });  }  public int getVoucherIsSum(List cpVoucherIdList) {    Map map = new HashMap();    map.put("cpVoucherIdList", cpVoucherIdList);    return ((Integer) this.getSqlMapClientTemplate().queryForObject(    "CpVoucher.getVoucherIsSum", map)).intValue();  }  public List getCpVoucherForCpAvtList(ElementConditionDto eleConditionDto) {//    eleConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    eleConditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    eleConditionDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(    RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForCpAvtList", eleConditionDto);  }  public List getCpVoucherForCpDvtList(ElementConditionDto eleConditionDto) {//    eleConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    eleConditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    eleConditionDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(    RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getCpVoucherForCpDvtList", eleConditionDto);  }  public void cpAvtSend(List cpVoucherList) {    final List list = cpVoucherList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          CpVoucher value = (CpVoucher) list.get(i);          executor.update("CpVoucher.updateCpVoucherForCpAvtSend", value);        }        executor.executeBatch();        return null;      }    });  }  public void cpAvtCancelSend(List cpVoucherList) {    final List list = cpVoucherList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          CpVoucher value = (CpVoucher) list.get(i);          executor.update("CpVoucher.updateCpVoucherForCpAvtCancelSend", value);        }        executor.executeBatch();        return null;      }    });  }  public void cpDvtCheckIn(List cpVoucherList) {    final List list = cpVoucherList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          CpVoucher value = (CpVoucher) list.get(i);          executor.update("CpVoucher.updateCpVoucherForCpDvtCheckIn", value);        }        executor.executeBatch();        return null;      }    });  }  public void cpDvtCancelCheckIn(List cpVoucherList) {    final List list = cpVoucherList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          CpVoucher value = (CpVoucher) list.get(i);          executor.update("CpVoucher.updateCpVoucherForCpDvtCancelCheckIn", value);        }        executor.executeBatch();        return null;      }    });  }  public List getSubCpVoucherForSumVouNo(List vouList) {    if (vouList.isEmpty()) {      return new ArrayList();    }    Map param = new HashMap();    param.put("cpVouNoList", vouList);    return this.getSqlMapClientTemplate().queryForList(    "CpVoucher.getSubCpVoucherForSumVouNo", param);  }  public void saveCpImpRecord(List ilist) {    final List list = ilist;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          CpImpRecord value = (CpImpRecord) list.get(i);          executor.insert("CpImpRecord.insertCpImpRecord", value);        }        executor.executeBatch();        return null;      }    });  }  public List getCpImpRecordList(ElementConditionDto eleConditionDto) {//    eleConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    eleConditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    eleConditionDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(    RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList(    "CpImpRecord.getCpImpRecordList", eleConditionDto);  }}