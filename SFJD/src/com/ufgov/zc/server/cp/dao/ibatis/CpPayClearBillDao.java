package com.ufgov.zc.server.cp.dao.ibatis;import java.sql.SQLException;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.orm.ibatis.SqlMapClientCallback;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;import com.ibatis.sqlmap.client.SqlMapExecutor;import com.ufgov.zc.common.cp.model.CpPayClearBill;import com.ufgov.zc.common.system.exception.DaoException;import com.ufgov.zc.server.cp.dao.ICpPayClearBillDao;import com.ufgov.zc.server.system.util.RequestMetaUtil;public class CpPayClearBillDao extends SqlMapClientDaoSupport implements ICpPayClearBillDao {  public List getCpPayClearBill(int nd, int printTimes, Date startDate, Date endDate, String astatusCode) {    Map map = new HashMap();    map.put("nd", new Integer(nd));    if (printTimes >= 0)      map.put("printTimes", new Integer(printTimes));    map.put("startDate", startDate);    map.put("endDate", endDate);    map.put("astatusCode", astatusCode);    return this.getSqlMapClientTemplate().queryForList("CpPayClearBill.getCpPayClearBill", map);  }  public CpPayClearBill getCpPayClearBillById(String payClearBillId) {    return (CpPayClearBill) this.getSqlMapClientTemplate().queryForObject(    "CpPayClearBill.getCpPayClearBillById", payClearBillId);  }  public String cpVoucherToCpPayClear(String cpVoucherIds, String cpAdjustCode, String payAccNo) {    Map map = new HashMap();    map.put("cpVoucherIds", cpVoucherIds);    map.put("nd", new Integer(RequestMetaUtil.getSvNd()));    map.put("procDate", RequestMetaUtil.getTransDate());    map.put("userId", RequestMetaUtil.getSvUserID());    map.put("cpAdjustCode", cpAdjustCode);    map.put("payAccNo", payAccNo);    map.put("rtnStr", "");    this.getSqlMapClientTemplate().insert("CpPayClearBill.SP_CP_GEN_CLEAR_FORCPVOUCHER", map);    return (String) map.get("rtnStr");  }  public String cpVoucherToCpPayClearAutoMatchAccount(String cpVoucherIds, String cpAdjustCode) {    Map map = new HashMap();    map.put("cpVoucherIds", cpVoucherIds);    map.put("nd", new Integer(RequestMetaUtil.getSvNd()));    map.put("procDate", RequestMetaUtil.getTransDate());    map.put("userId", RequestMetaUtil.getSvUserID());    map.put("cpAdjustCode", cpAdjustCode);    map.put("rtnStr", "");    this.getSqlMapClientTemplate()    .insert("CpPayClearBill.SP_CP_GEN_CLEAR_FORVOUCHER_AUTO_MATCH_ACCOUNT", map);    return (String) map.get("rtnStr");  }  public String deleteCpPayClearForCpVoucher(String payBillId) {    Map map = new HashMap();    map.put("payBillId", payBillId);    map.put("rtnStr", "");    this.getSqlMapClientTemplate().insert("CpPayClearBill.SP_CP_DEL_CLEAR_FORCPVOUCHER", map);    return (String) map.get("rtnStr");  }  public void increatePrintTimes(List billIdList) {    Map map = new HashMap();    if (billIdList.size() == 0) {      throw new DaoException("increasePrintTimes的参数billIdList为空");    }    map.put("billIdList", billIdList);    this.getSqlMapClientTemplate().update("CpPayClearBill.increasePrintTimes", map);  }  public String cpSendBankForBb(List sendBbList, String transType) {    int num = 0;    Map map = new HashMap();    map.put("CpPayClearBillList", sendBbList);    map.put("statusCode", "00".equals(transType) ? "2" : "1");    num = this.getSqlMapClientTemplate().update("CpPayClearBill.sendBankForBb", map);    if (sendBbList.size() == num) {      return null;    } else {      throw new DaoException("CpPayClearBillDao-->cpSendBankForBb()更新记录不唯一");    }  }  public String cpSendBankForBa(List sendBaList, String transType) {    StringBuffer billids = new StringBuffer();    for (int i = 0; i < sendBaList.size(); i++) {      billids.append(i > 0 ? "," : null);      billids.append(sendBaList.get(i));    }    Map map = new HashMap();    map.put("P_PKEYVALUE", billids.toString());    map.put("P_TRANSTYPE", transType);    map.put("P_DATTR1", "");    map.put("P_DATTR2", "");    map.put("P_DATTR3", "");    map.put("P_RET_MESSAGE", "");    this.getSqlMapClientTemplate().update("CpPayClearBill.sendBankForBb", map);    return (String) map.get("P_RET_MESSAGE");  }  public void insertCpPayClearBill(CpPayClearBill cpPayClearBill) {    this.getSqlMapClientTemplate().insert("CpPayClearBill.insertCpPayClearBill", cpPayClearBill);  }  public void insertCpPayClearBills(final List cpPayClearBills) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < cpPayClearBills.size(); i++) {          CpPayClearBill bill = (CpPayClearBill) cpPayClearBills.get(i);          Map map = new HashMap();          map.put("nd", new Integer(bill.getNd()));          map.put("payClearBillId", bill.getPayClearBillId());          map.put("coCode", bill.getCoCode());          map.put("fundCode", bill.getFundCode());          map.put("originCode", bill.getOriginCode());          executor.insert("CpPayClearBill.insertCpPayClearBill", bill);          executor.update("CpPayClearBill.updateCoCodeName", map);          executor.update("CpPayClearBill.updateFundName", map);          executor.update("CpPayClearBill.updateOriginName", map);        }        executor.executeBatch();        return null;      }    });  }}