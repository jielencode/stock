package com.ufgov.zc.server.cp.dao.ibatis;import java.sql.SQLException;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.orm.ibatis.SqlMapClientCallback;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;import com.ibatis.sqlmap.client.SqlMapExecutor;import com.ufgov.zc.common.cp.model.CpDzCoDatetime;import com.ufgov.zc.common.cp.model.CpDzCoResult;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DateUtil;import com.ufgov.zc.server.cp.dao.ICpCheckBillDao;public class CpCheckBillDao extends SqlMapClientDaoSupport implements ICpCheckBillDao {  public List getCpInterfaceCollectTempchx(String bankCode, Date startDate, Date endDate, String paytypeCode,  List differflagList) {    Map map = new HashMap();    map.put("payBankCode", bankCode);    map.put("startDate", DateUtil.dateToDdString(startDate));    map.put("endDate", DateUtil.dateToDdString(endDate));    map.put("paytypeCode", paytypeCode);    map.put("differflagList", differflagList == null ? new ArrayList() : differflagList);    return this.getSqlMapClientTemplate()    .queryForList("CpInterfaceTempchx.getCpInterfaceCollectTempchx", map);  }  public List getCpInterfaceAmountTempchx(String bankCode, Date startDate, Date endDate, String paytypeCode,  List differflagList) {    Map map = new HashMap();    map.put("payBankCode", bankCode);    map.put("startDate", startDate);    map.put("endDate", endDate);    map.put("paytypeCode", paytypeCode);    map.put("differflagList", differflagList == null ? new ArrayList() : differflagList);    return this.getSqlMapClientTemplate().queryForList("CpInterfaceTempchx.getCpInterfaceAmountTempchx", map);  }  public List getCpInterfacePayoutTempchx(String bankCode, Date startDate, Date endDate, String paytypeCode,  List differflagList) {    Map map = new HashMap();    map.put("payBankCode", bankCode);    map.put("startDate", startDate);    map.put("endDate", endDate);    map.put("paytypeCode", paytypeCode);    map.put("differflagList", differflagList == null ? new ArrayList() : differflagList);    return this.getSqlMapClientTemplate().queryForList("CpInterfaceTempchx.getCpInterfacePayoutTempchx", map);  }  public String checkCpInterfaceCollect(Date startDate, Date endDate, String paytypeCode, String payBankCode) {    Map map = new HashMap();    map.put("startDate", startDate);    map.put("endDate", endDate);    map.put("paytypeCode", paytypeCode);    map.put("payBankCode", payBankCode);    map.put("rtnStr", "");    this.getSqlMapClientTemplate().insert("CpInterfaceTempchx.SP_CP_INTERFACE_COLLECT", map);    return (String) map.get("rtnStr");  }  public String checkCpInterfaceAmount(Date startDate, Date endDate, String paytypeCode, String payBankCode) {    Map map = new HashMap();    map.put("startDate", startDate);    map.put("endDate", endDate);    map.put("paytypeCode", paytypeCode);    map.put("payBankCode", payBankCode);    map.put("rtnStr", "");    this.getSqlMapClientTemplate().insert("CpInterfaceTempchx.SP_CP_INTERFACE_AMOUNT", map);    return (String) map.get("rtnStr");  }  public String checkCpInterfacePayout(Date startDate, Date endDate, String paytypeCode, String payBankCode) {    Map map = new HashMap();    map.put("startDate", startDate);    map.put("endDate", endDate);    map.put("paytypeCode", paytypeCode);    map.put("payBankCode", payBankCode);    map.put("rtnStr", "");    this.getSqlMapClientTemplate().insert("CpInterfaceTempchx.SP_CP_INTERFACE_PAYOUT", map);    return (String) map.get("rtnStr");  }  public List getCpDzCoAccountForYear(String coCode, Date startDate, Date endDate, String curMonth,  String sumMonth) {    Map map = new HashMap();    map.put("coCode", coCode);    map.put("startDate", startDate);    map.put("endDate", endDate);    map.put("curMonth", curMonth);    map.put("sumMonth", sumMonth);    return this.getSqlMapClientTemplate().queryForList("CpDzCoAccount.getCpDzCoAccountForYear", map);  }  public List getCpDzCoAccountForMonth(String coCode, Date startDate, Date endDate, String curMonth,  String sumMonth) {    Map map = new HashMap();    map.put("coCode", coCode);    map.put("startDate", startDate);    map.put("endDate", endDate);    map.put("curMonth", curMonth);    map.put("sumMonth", sumMonth);    return this.getSqlMapClientTemplate().queryForList("CpDzCoAccount.getCpDzCoAccountForMonth", map);  }  public boolean getCpDzCoAccount(CpDzCoResult dzCoResult) {    if ((CpDzCoResult) this.getSqlMapClientTemplate().queryForObject("CpDzCoAccount.getByPrimaryKey",    dzCoResult) == null) {      return true;    }    return false;  }  public void insertForCpDzCoAccount(CpDzCoResult dzCoResult) {    this.getSqlMapClientTemplate().insert("CpDzCoAccount.insert", dzCoResult);  }  public void updateForCpDzCoAccount(CpDzCoResult dzCoResult) {    this.getSqlMapClientTemplate().update("CpDzCoAccount.updateByPrimaryKey", dzCoResult);  }  public List getCpDzCoDateTime(int nd) {    Map map = new HashMap();    map.put("nd", new Integer(nd));    return this.getSqlMapClientTemplate().queryForList("CpDzCoDatetime.getCpDzCoDateTime", map);  }  public void updatecpDzCoDatetime(List dztList) {    final List list = dztList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          CpDzCoDatetime dz = (CpDzCoDatetime) list.get(i);          executor.update("CpDzCoDatetime.updatecpDzCoDatetime", dz);        }        executor.executeBatch();        return null;      }    });  }  public List getCpDzCoResultQueryList(ElementConditionDto elementDto) {    return this.getSqlMapClientTemplate().queryForList("CpDzCoResult.getCpDzCoResultQueryList", elementDto);  }  public Map getDzDateMap(ElementConditionDto elementConditionDto) {    Map map = new HashMap();    map.put("nd", new Integer(elementConditionDto.getNd()));    return this.getSqlMapClientTemplate().queryForMap("CpDzCoDatetime.getCpDzCoDateTimeMap", map, "dzMonth",    "dzLimit");  }  public Map getDzResultMap(ElementConditionDto elementConditionDto) {    return this.getSqlMapClientTemplate().queryForMap("CpDzCoResult.getCpDzCoResultMap", elementConditionDto,    "dzMonth", "dzResult");  }  public List getDzMonth(ElementConditionDto elementConditionDto) {    return this.getSqlMapClientTemplate().queryForList("CpDzCoResult.getDzMonth", elementConditionDto);  }}