package com.ufgov.zc.server.cp.publish.impl;import java.util.List;import com.ufgov.zc.common.cp.model.CpApply;import com.ufgov.zc.common.cp.publish.ICpApplyServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.dto.PrintObject;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.util.ExceptionUtil;import com.ufgov.zc.server.cp.service.ICpApplyService;public class CpApplyServiceDelegate implements ICpApplyServiceDelegate {  private ICpApplyService cpApplyService;  public ICpApplyService getCpApplyService() {    return cpApplyService;  }  public void setCpApplyService(ICpApplyService cpApplyService) {    this.cpApplyService = cpApplyService;  }  public List getCpApplyForCpDaAuditList(ElementConditionDto dto, RequestMeta meta) {    return cpApplyService.getCpApplyForCpDaAuditList(dto);  }  public int updateCpApply(CpApply cpApply, RequestMeta meta) {    return cpApplyService.updateCpApply(cpApply);  }  public List getCpApplyForCpDtzd(ElementConditionDto elementDto, RequestMeta meta) {    return cpApplyService.getCpApplyForCpDtzd(elementDto);  }  public CpApply getCpApply(ElementConditionDto elementDto, RequestMeta meta) {    return cpApplyService.getCpApply(elementDto);  }  public List getCpApplyForCpDaEditList(ElementConditionDto dto, RequestMeta meta) {    return cpApplyService.getCpApplyForCpDaEditList(dto);  }  public List getCpApplyForCpApplyQueryList(ElementConditionDto dto, RequestMeta meta) {    return cpApplyService.getCpApplyForCpApplyQueryList(dto);  }  public CpApply auditForCpDaDpEditFN(CpApply cpApply, RequestMeta meta) {    return cpApplyService.auditForCpDaDpEdit(cpApply);  }  public CpApply saveForCpDaDpEditFN(CpApply cpApply, RequestMeta meta) {    return cpApplyService.saveForCpDaDpEditBAF(cpApply);  }  public CpApply saveAndSendForCpDaDpEditFN(CpApply cpApply, RequestMeta meta) {    return cpApplyService.saveAndSendForCpDaDpEdit(cpApply);  }  public CpApply sendForCpDaDpEditFN(CpApply cpApply, RequestMeta meta) {    return cpApplyService.sendForCpDaDpEdit(cpApply);  }  public int deleteForCpDaDpEditFN(CpApply cpApply, RequestMeta meta) {    return cpApplyService.deleteForCpDaDpEdit(cpApply);  }  public void increasePrintTimes(List cpApplyIdList, RequestMeta requestMeta) {    this.cpApplyService.increasePrintTimes(cpApplyIdList);  }  public PrintObject genMainSubPrintObject(List printList, int nd, String elementId, RequestMeta requestMeta) {    return cpApplyService.genMainSubPrintObject(printList, nd, elementId);  }  /**   *批量送审   */  public void sendForCpDaDpEditFN(List cpApplyList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < cpApplyList.size(); i++) {      CpApply cpApply = (CpApply) cpApplyList.get(i);      try {        cpApplyService.sendForCpDaDpEdit(cpApply);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(cpApply.getCpApplyId());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的直接支付申请送审失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 批量审核   */  public void auditForCpDaDpEditFN(List cpApplyList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < cpApplyList.size(); i++) {      CpApply cpApply = (CpApply) cpApplyList.get(i);      try {        cpApplyService.auditForCpDaDpEdit(cpApply);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(cpApply.getCpApplyId());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的直接支付申请审核失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 批量删除   */  public void deleteForCpDaDpEditFN(List cpApplyList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < cpApplyList.size(); i++) {      CpApply cpApply = (CpApply) cpApplyList.get(i);      try {        int num = cpApplyService.deleteForCpDaDpEdit(cpApply);        if (num == 0) {          errorInfo.append(": ");          errorInfo.append(cpApply.getCpApplyId());          errorInfo.append("已被删除");          fail = true;        }      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(cpApply.getCpApplyId());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的直接支付申请删除失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 填写意见审核通过   */  public void auditForCpDaDpEditFN(List cpApplyList, String opinion, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < cpApplyList.size(); i++) {      CpApply cpApply = (CpApply) cpApplyList.get(i);      try {        cpApplyService.auditForCpDaDpEdit(cpApply, opinion);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(cpApply.getCpApplyId());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的直接支付申请审核失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 销审   */  public CpApply unAuditForCpDaDpEditFN(CpApply cpApply, RequestMeta requestMeta) {    return cpApplyService.unAuditForCpDaDpEdit(cpApply);  }  /**   * 批量销审   */  public void unAuditForCpDaDpEditFN(List cpApplyList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < cpApplyList.size(); i++) {      CpApply cpApply = (CpApply) cpApplyList.get(i);      try {        cpApplyService.unAuditForCpDaDpEdit(cpApply);      } catch (Exception ex) {        errorInfo.append(cpApply.getCpApplyId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的直接支付申请销审失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 退回   */  public CpApply untreadForCpDaDpEditFN(CpApply cpApply, RequestMeta meta) {    return cpApplyService.untreadForCpDaDpEdit(cpApply);  }  /**   * 批量退回   */  public void untreadForCpDaDpEditFN(List cpApplyList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < cpApplyList.size(); i++) {      CpApply cpApply = (CpApply) cpApplyList.get(i);      try {        cpApplyService.untreadForCpDaDpEdit(cpApply);      } catch (Exception ex) {        errorInfo.append(cpApply.getCpApplyId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的直接支付申请退回失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 作废   */  public void blankoutForCpDaDpEditFN(CpApply cpApply, RequestMeta requestMeta) {    this.cpApplyService.blankoutForCpDaDpEdit(cpApply);  }  /**   * 批量作废   */  public void blankoutForCpDaDpEditFN(List cpApplyList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < cpApplyList.size(); i++) {      CpApply cpApply = (CpApply) cpApplyList.get(i);      try {        cpApplyService.blankoutForCpDaDpEdit(cpApply);      } catch (Exception ex) {        errorInfo.append(cpApply.getCpApplyId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的直接支付申请作废失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void lockedForCpDaDpEditFN(List cpApplyList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < cpApplyList.size(); i++) {      CpApply cpApply = (CpApply) cpApplyList.get(i);      try {        cpApplyService.lockedForCpDaDpEdit(cpApply);      } catch (Exception ex) {        errorInfo.append(cpApply.getCpApplyId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的直接支付申请锁定失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void unLockedForCpDaDpEditFN(List cpApplyList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < cpApplyList.size(); i++) {      CpApply cpApply = (CpApply) cpApplyList.get(i);      try {        cpApplyService.unLockedForCpDaDpEdit(cpApply);      } catch (Exception ex) {        errorInfo.append(cpApply.getCpApplyId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的直接支付申请解锁失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 作废   */  public void blankout2ForCpDaDpEditFN(CpApply cpApply, RequestMeta requestMeta) {    this.cpApplyService.blankout2ForCpDaDpEdit(cpApply);  }  /**   * 批量作废   */  public void blankout2ForCpDaDpEditFN(List cpApplyList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < cpApplyList.size(); i++) {      CpApply cpApply = (CpApply) cpApplyList.get(i);      try {        cpApplyService.blankout2ForCpDaDpEdit(cpApply);      } catch (Exception ex) {        errorInfo.append(cpApply.getCpApplyId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的直接支付申请作废失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 收回   */  public void callbackForCpDaDpEditFN(CpApply cpApply, RequestMeta requestMeta) {    this.cpApplyService.callbackForCpDaDpEdit(cpApply);  }  /**   * 批量收回   */  public void callbackForCpDaDpEditFN(List cpApplyList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < cpApplyList.size(); i++) {      CpApply cpApply = (CpApply) cpApplyList.get(i);      try {        cpApplyService.callbackForCpDaDpEdit(cpApply);      } catch (Exception ex) {        errorInfo.append(cpApply.getCpApplyId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的直接支付申请收回失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void sendTZDForCpDaDpEditFN(List cpApplyList, RequestMeta requestMeta) {    this.cpApplyService.sendTZDForCpDaDpEdit(cpApplyList);  }  /////////////////////////////////////////////////////zhaolh add///////////  /**   * zhaolh 2009-07-27 退回（授权支付）   */  public CpApply untreadForCpAvAuditFN(CpApply cpApply, RequestMeta meta) {    return cpApplyService.untreadForCpDaDpEdit(cpApply);  }  /**   *zhaolh 2009-07-27  批量退回（授权支付）   */  public void untreadForCpAvAuditFN(List cpApplyList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < cpApplyList.size(); i++) {      CpApply cpApply = (CpApply) cpApplyList.get(i);      try {        cpApplyService.untreadForCpDaDpEdit(cpApply);      } catch (Exception ex) {        errorInfo.append(cpApply.getCpApplyId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的直接支付申请退回失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public List getCpApplyForSum(ElementConditionDto conditionDto, RequestMeta requestMeta) {    return this.cpApplyService.getCpApplyForSum(conditionDto);  }  public void sumCpApplyFN(List beanList, RequestMeta requestMeta) {    this.cpApplyService.sumCpApply(beanList);  }  public List getCpApplyBySumCpApplyId(String sumCpApplyId, RequestMeta requestMeta) {    return this.cpApplyService.getCpApplyBySumCpApplyId(sumCpApplyId);  }  public List getCpApplyBySumCpApplyId(List sumCpApplyIdList, RequestMeta requestMeta) {    return this.cpApplyService.getCpApplyBySumCpApplyId(sumCpApplyIdList);  }  public void cancelSumCpApplyFN(List selectedData, RequestMeta requestMeta) {    this.cpApplyService.cancelSumCpApply(selectedData);  }  public PrintObject genSumMainSubPrintObjectFN(List printList, RequestMeta requestMeta) {    return this.cpApplyService.genSumMainSubPrintObject(printList);  }  public List getCpApplyInfo(String dpBalanceId, int nd, RequestMeta requestMeta) {    return this.cpApplyService.getCpApplyInfo(dpBalanceId, nd);  }  public List getGwkTradeInfo(String cpApplyId, int nd, RequestMeta requestMeta) {    return this.cpApplyService.getGwkTradeInfo(cpApplyId, nd);  }  public List getCpVoucherByIdListForSumDetail(List idList, RequestMeta requestMeta) {    return this.cpApplyService.getCpVoucherByIdListForSumDetail(idList);  }}