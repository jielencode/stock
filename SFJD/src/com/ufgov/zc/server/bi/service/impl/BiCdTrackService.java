package com.ufgov.zc.server.bi.service.impl;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import com.ufgov.zc.common.bi.model.BiCdTrack;import com.ufgov.zc.common.bi.model.BiTrack;import com.ufgov.zc.common.commonbiz.model.BiBalance;import com.ufgov.zc.common.commonbiz.model.MaCpElementMapping;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.common.system.util.BeanUtil;import com.ufgov.zc.server.bi.dao.IBiCdTrackDao;import com.ufgov.zc.server.bi.dao.IBiTrackDao;import com.ufgov.zc.server.bi.service.IBiCdTrackService;import com.ufgov.zc.server.commonbiz.dao.IBiBalanceDao;import com.ufgov.zc.server.commonbiz.dao.IMaCpElementMappingDao;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.util.AutoNum;import com.ufgov.zc.server.system.util.NumUtil;import com.ufgov.zc.server.system.util.RequestMetaUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;public class BiCdTrackService implements IBiCdTrackService {  private IBiCdTrackDao biCdTrackDao;  private IBiBalanceDao biBalanceDao;  private WFEngineAdapter wfEngineAdapter;  private IWorkflowDao workflowDao;  private IBiTrackDao biTrackDao;  private IMaCpElementMappingDao maCpElementMappingDao;  public IMaCpElementMappingDao getMaCpElementMappingDao() {    return maCpElementMappingDao;  }  public void setMaCpElementMappingDao(IMaCpElementMappingDao maCpElementMappingDao) {    this.maCpElementMappingDao = maCpElementMappingDao;  }  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public IBiCdTrackDao getBiCdTrackDao() {    return biCdTrackDao;  }  public void setBiCdTrackDao(IBiCdTrackDao biCdTrackDao) {    this.biCdTrackDao = biCdTrackDao;  }  private void updateBiBalanceForCd(BiCdTrack biCdTrack) {    List biCdTrackList = new ArrayList();    biCdTrackList.add(biCdTrack);    this.updateBiBalanceForCd(biCdTrackList);  }  private void updateBiBalanceForCd(List biCdTrackList) {    List biBalanceIdList = new ArrayList();    for (int i = 0; i < biCdTrackList.size(); i++) {      biBalanceIdList.add(((BiCdTrack) biCdTrackList.get(i)).getOriginBalanceId());    }    this.biBalanceDao.updateBiBalanceForCd(biBalanceIdList);  }  private void updateBiBalanceForCdUndo(List biCdTrackList) {    List biBalanceIdList = new ArrayList();    for (int i = 0; i < biCdTrackList.size(); i++) {      biBalanceIdList.add(((BiCdTrack) biCdTrackList.get(i)).getOriginBalanceId());    }    this.biBalanceDao.updateBiBalanceForCdUndo(biBalanceIdList);  }  private void updateBiBalanceForCdUndo(BiCdTrack biCdTrack) {    List biCdTrackList = new ArrayList();    biCdTrackList.add(biCdTrack);    this.updateBiBalanceForCdUndo(biCdTrackList);  }  public void carryDown(BiCdTrack biCdTrack) {    String userId = RequestMetaUtil.getSvUserID();    String compoId = RequestMetaUtil.getCompoId();    Long draftid = workflowDao.createDraftId();    biCdTrack.setProcessInstId(draftid);    AsWfDraft asWfDraft = new AsWfDraft();    asWfDraft.setCompoId(compoId);    asWfDraft.setWfDraftName(biCdTrack.getTitleField());    asWfDraft.setUserId(userId);    asWfDraft.setMasterTabId("BI_CD_TRACK");    asWfDraft.setWfDraftId(BigDecimal.valueOf(draftid.longValue()));    workflowDao.insertAsWfdraft(asWfDraft);    biCdTrack.setBiCdTrackId(NumUtil.getInstance().getNo(compoId, "BI_CD_TRACK_ID", biCdTrack));    biCdTrack.setInputGroupId(NumUtil.getInstance().getNo(compoId, "INPUT_GROUP_ID", biCdTrack));    biCdTrack.setIsCreateBi("0");    biCdTrack.setCreateType("0");    biCdTrack.setProcDate(RequestMetaUtil.getTransDate());    biCdTrack.setCdate(new Date());    biCdTrack.setInputorId(userId);    biCdTrack.setIsValid("1");    this.biCdTrackDao.insertBiCdTrack(biCdTrack);    this.updateBiBalanceForCd(biCdTrack);    wfEngineAdapter.newCommit("", biCdTrack, null);  }  public void importToNextYear(List biCdTrackList) {    Map elementMapping = this.getElementMappingForCarryDown();    this.biBalanceDao.insertBiBalance(genNexYearBiBalance(biCdTrackList, elementMapping));    this.biTrackDao.insertBiTrack(this.genNextYearBiTrack(biCdTrackList, elementMapping));    for (int i = 0; i < biCdTrackList.size(); i++) {      BiCdTrack biCdTrack = (BiCdTrack) biCdTrackList.get(i);      biCdTrack.setBiCreateDate(new Date());      biCdTrack.setBiCreatorId(RequestMetaUtil.getSvUserID());      biCdTrack.setIsCreateBi("1");    }    this.biCdTrackDao.updateBiCdTrack(biCdTrackList);  }  private List genNexYearBiBalance(List biCdTrackList, Map elementMapping) {    Map baccMapping = (Map) elementMapping.get(MaCpElementMapping.TYPE_BACC);    Map originMapping = (Map) elementMapping.get(MaCpElementMapping.TYPE_ORIGIN);    List biBalanceList = new ArrayList();    for (int i = 0; i < biCdTrackList.size(); i++) {      BiCdTrack biCdTrack = (BiCdTrack) biCdTrackList.get(i);      BiBalance biBal = new BiBalance();      BeanUtil.commonFieldsCopy(biCdTrack, biBal);      biBal.setBiMoney(biCdTrack.getCurMoney());      biBal.setBiTargetCode(biCdTrack.getBiTargetCode());      biBal.setBiLevel(biCdTrack.getBiLevel());      biBal.setFileName(biCdTrack.getFileName());      biBal.setFilenameBlobid(biCdTrack.getFileNameBlobId());      biBal.setIsCarryup("Y");      biBal.setNd(RequestMetaUtil.getSvNd() + 1);      biBal.setBiBalanceId(AutoNum.genNum("BI_BALANCE", biBal));      if (baccMapping.get(biBal.getBaccCode()) != null) {        biBal.setBaccCode((String) baccMapping.get(biBal.getBaccCode()));      }      if (originMapping.get(biBal.getOriginCode()) != null) {        biBal.setOriginCode((String) originMapping.get(biBal.getOriginCode()));      }      biBalanceList.add(biBal);      biCdTrack.setNewBiBalanceId(biBal.getBiBalanceId());    }    return biBalanceList;  }  private List genNextYearBiTrack(List biCdTrackList, Map elementMapping) {    Map baccMapping = (Map) elementMapping.get(MaCpElementMapping.TYPE_BACC);    Map originMapping = (Map) elementMapping.get(MaCpElementMapping.TYPE_ORIGIN);    String userId = RequestMetaUtil.getSvUserID();    List biTrackList = new ArrayList();    for (int i = 0; i < biCdTrackList.size(); i++) {      BiCdTrack biCdTrack = (BiCdTrack) biCdTrackList.get(i);      BiTrack biTrack = new BiTrack();      BeanUtil.commonFieldsCopy(biCdTrack, biTrack);      biTrack.setOrgMoney(biCdTrack.getCurMoney());      biTrack.setCurMoney(biCdTrack.getCurMoney());      biTrack.setBiTargetCode(biCdTrack.getBiTargetCode());      biTrack.setBiLevel(biCdTrack.getBiLevel());      biTrack.setFileName(biCdTrack.getFileName());      biTrack.setFilenameBlobid(biCdTrack.getFileNameBlobId());      biTrack.setInputorId(userId);      biTrack.setNd(RequestMetaUtil.getSvNd() + 1);      biTrack.setProcDate(RequestMetaUtil.getTransDate());      biTrack.setCdate(new Date());      biTrack.setBiTrackId(NumUtil.getInstance().getNo("BI_DBI_XXX", "BI_TRACK_ID", biTrack));      biTrack.setInputGroupId(NumUtil.getInstance().getNo("BI_DBI_XXX", "INPUT_GROUP_ID", biTrack));      biTrack.setastatusCode("3");      biTrack.setBiAdjustCode("101");      biTrack.setTargetBalanceId(biCdTrack.getNewBiBalanceId());      biTrack.setProcessInstId(null);      biCdTrack.setNewBiTrackId(biTrack.getBiTrackId());      if (baccMapping.get(biTrack.getBaccCode()) != null) {        biTrack.setBaccCode((String) baccMapping.get(biTrack.getBaccCode()));      }      if (originMapping.get(biTrack.getOriginCode()) != null) {        biTrack.setOriginCode((String) originMapping.get(biTrack.getOriginCode()));      }      biTrackList.add(biTrack);    }    return biTrackList;  }  private Map getElementMappingForCarryDown() {    ElementConditionDto dto = new ElementConditionDto();    dto.setNd(RequestMetaUtil.getSvNd());    dto.setUseType(MaCpElementMapping.USE_TYPE_CARRYDOWN);    List list = this.maCpElementMappingDao.getMaCpElementMapping(dto);    Map map = new HashMap();    for (int i = 0; i < list.size(); i++) {      MaCpElementMapping mapping = (MaCpElementMapping) list.get(i);      Map tempMap = (Map) map.get(mapping.getType());      if (tempMap == null) {        tempMap = new HashMap();        map.put(mapping.getType(), tempMap);      }      tempMap.put(mapping.getCurYearCode(), mapping.getNextYearCode());    }    return map;  }  public IBiBalanceDao getBiBalanceDao() {    return biBalanceDao;  }  public void setBiBalanceDao(IBiBalanceDao biBalanceDao) {    this.biBalanceDao = biBalanceDao;  }  public List getBiCdTrack(ElementConditionDto dto) {    return this.biCdTrackDao.getBiCdTrack(dto);  }  public void audit(BiCdTrack biCdTrack) {    wfEngineAdapter.commit(biCdTrack.getComment(), biCdTrack, null);  }  public void blankout(BiCdTrack biCdTrack) {    this.wfEngineAdapter.interrupt(biCdTrack.getComment(), biCdTrack, null);    updateBiBalanceForCdUndo(biCdTrack);    biCdTrack.setIsValid("0");    biCdTrackDao.updateBiCdTrackIsValid(biCdTrack);  }  public void unaudit(BiCdTrack biCdTrack) {    wfEngineAdapter.unAudit(biCdTrack.getComment(), biCdTrack, null);  }  public void untread(BiCdTrack biCdTrack) {    wfEngineAdapter.untreadGk(biCdTrack.getComment(), biCdTrack, null);  }  public IWorkflowDao getWorkflowDao() {    return workflowDao;  }  public void setWorkflowDao(IWorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  public IBiTrackDao getBiTrackDao() {    return biTrackDao;  }  public void setBiTrackDao(IBiTrackDao biTrackDao) {    this.biTrackDao = biTrackDao;  }}