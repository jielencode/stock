package com.ufgov.zc.server.bi.publish.impl;import java.util.List;import com.ufgov.zc.common.bi.model.BiAdjustTrack;import com.ufgov.zc.common.bi.publish.IBiAdjustTrackServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.util.ExceptionUtil;import com.ufgov.zc.server.bi.service.IBiAdjustTrackService;public class BiAdjustTrackServiceDelegate implements IBiAdjustTrackServiceDelegate {  private IBiAdjustTrackService biAdjustTrackService;  public IBiAdjustTrackService getBiAdjustTrackService() {    return biAdjustTrackService;  }  public void setBiAdjustTrackService(IBiAdjustTrackService biAdjustTrackService) {    this.biAdjustTrackService = biAdjustTrackService;  }  public List getBiAdjustTrackByModel(BiAdjustTrack biAdjustTrack, RequestMeta requestMeta) {    return biAdjustTrackService.getBiTrackByModel(biAdjustTrack);  }  public List getBiAdjustTrackEditByDto(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    return biAdjustTrackService.getBiAdjustTrackEditByDto(elementConditionDto);  }  public BiAdjustTrack getBiAdjustTrack(BiAdjustTrack biAdjustTrack, RequestMeta requestMeta) {    return biAdjustTrackService.getBiAdjustTrack(biAdjustTrack);  }  public List getBiAdjustTrackEditDetailByDto(BiAdjustTrack biAdjustTrack, RequestMeta requestMeta) {    return biAdjustTrackService.getBiAdjustTrackEditDetailByDto(biAdjustTrack);  }  public List getBiAdjustTrackAuditByDto(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    return biAdjustTrackService.getBiAdjustTrackAuditByDto(elementConditionDto);  }  public List saveForBiAdjustFN(List biAdjustTrackList, RequestMeta requestMeta) {    return biAdjustTrackService.insertBiAdjustTrack(biAdjustTrackList);  }  public void deleteForBiAdjustFN(List biAdjustTrackList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer(" ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biAdjustTrackList.size(); i++) {      BiAdjustTrack biAdjustTrack = (BiAdjustTrack) biAdjustTrackList.get(i);      try {        biAdjustTrackService.deleteBiAdjustTrack(biAdjustTrack);      } catch (Exception ex) {        errorInfo.append(ex.getMessage() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void biGenBillForBiBalance(BiAdjustTrack biAdjustTrack, RequestMeta requestMeta) {    biAdjustTrackService.biGenBillForBiBalance(biAdjustTrack);  }  public BiAdjustTrack auditForBiAdjustFN(BiAdjustTrack biAdjustTrack, RequestMeta requestMeta) {    return biAdjustTrackService.auditForBiAdjust(biAdjustTrack);  }  public void auditForDpEditFN(List biAdjustTracklList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer(" ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biAdjustTracklList.size(); i++) {      BiAdjustTrack biAdjustTrack = (BiAdjustTrack) biAdjustTracklList.get(i);      try {        biAdjustTrackService.auditForBiAdjust(biAdjustTrack);      } catch (Exception ex) {        errorInfo.append(ex.getMessage() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void blankoutForBiAdjustFN(List biAdjustTracklList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biAdjustTracklList.size(); i++) {      BiAdjustTrack biAdjustTrack = (BiAdjustTrack) biAdjustTracklList.get(i);      try {        biAdjustTrackService.blankoutForBiAdjust(biAdjustTrack);      } catch (Exception ex) {        errorInfo.append(biAdjustTrack.getBiTrackId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的调整指标作废失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void blankoutForBiAdjustFN(BiAdjustTrack biAdjustTrack, RequestMeta requestMeta) {    biAdjustTrackService.blankoutForBiAdjust(biAdjustTrack);  }  public void callbackForBiAdjustFN(List biAdjustTrackList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biAdjustTrackList.size(); i++) {      BiAdjustTrack biAdjustTrack = (BiAdjustTrack) biAdjustTrackList.get(i);      try {        biAdjustTrackService.callbackForBiAdjust(biAdjustTrack);      } catch (Exception ex) {        errorInfo.append(biAdjustTrack.getBiTrackId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的调整指标收回失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void callbackForBiAdjustFN(BiAdjustTrack biAdjustTrack, RequestMeta requestMeta) {    biAdjustTrackService.callbackForBiAdjust(biAdjustTrack);  }  public BiAdjustTrack sendForBiAdjustFN(BiAdjustTrack biAdjustTrack, RequestMeta requestMeta) {    return biAdjustTrackService.sendForBiAdjust(biAdjustTrack);  }  public void sendForBiAdjustFN(List biAdjustTrackList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biAdjustTrackList.size(); i++) {      BiAdjustTrack biAdjustTrack = (BiAdjustTrack) biAdjustTrackList.get(i);      try {        biAdjustTrackService.sendForBiAdjust(biAdjustTrack);      } catch (Exception ex) {        errorInfo.append(biAdjustTrack.getBiTrackId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的调整指标送审失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public BiAdjustTrack unAuditForBiAdjustFN(BiAdjustTrack biAdjustTrack, RequestMeta requestMeta) {    return biAdjustTrackService.unAuditForBiAdjust(biAdjustTrack);  }  public void unAuditForBiAdjustFN(List biAdjustTrackList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer(" ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biAdjustTrackList.size(); i++) {      BiAdjustTrack biAdjustTrack = (BiAdjustTrack) biAdjustTrackList.get(i);      try {        biAdjustTrackService.unAuditForBiAdjust(biAdjustTrack);      } catch (Exception ex) {        errorInfo.append(ex.getMessage() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public BiAdjustTrack untreadForBiAdjustFN(BiAdjustTrack biAdjustTrack, RequestMeta requestMeta) {    return biAdjustTrackService.untreadForBiAdjust(biAdjustTrack);  }  public void untreadForBiAdjustFN(List biAdjustTracklList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biAdjustTracklList.size(); i++) {      BiAdjustTrack biAdjustTrack = (BiAdjustTrack) biAdjustTracklList.get(i);      try {        biAdjustTrackService.untreadForBiAdjust(biAdjustTrack);      } catch (Exception ex) {        errorInfo.append(biAdjustTrack.getBiTrackId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的调整指标退回失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void auditForBiAdjustFN(List biAdjustTrackList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer(" ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biAdjustTrackList.size(); i++) {      BiAdjustTrack biAdjustTrack = (BiAdjustTrack) biAdjustTrackList.get(i);      try {        biAdjustTrackService.auditForBiAdjust(biAdjustTrack);      } catch (Exception ex) {        errorInfo.append(ex.getMessage() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }}