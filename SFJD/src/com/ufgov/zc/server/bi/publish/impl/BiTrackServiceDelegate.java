package com.ufgov.zc.server.bi.publish.impl;import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;import com.ufgov.zc.common.bi.model.BiTrack;import com.ufgov.zc.common.bi.publish.IBiTrackServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.dto.MainSubBill;import com.ufgov.zc.common.system.dto.PrintObject;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.util.ExceptionUtil;import com.ufgov.zc.server.bi.service.IBiTrackService;import com.ufgov.zc.server.system.print.PrintManager;public class BiTrackServiceDelegate implements IBiTrackServiceDelegate {  private IBiTrackService biTrackService;  public IBiTrackService getBiTrackService() {    return biTrackService;  }  public void setBiTrackService(IBiTrackService biTrackService) {    this.biTrackService = biTrackService;  }  public List getBiTrackForQueryData(BiTrack biTrack, RequestMeta requestMeta) {    return biTrackService.getBiTrackForQueryData(biTrack);  }  public List getBiTrackForQueryData(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    return biTrackService.getBiTrackForQueryData(elementConditionDto);  }  public List getBitrackForBc(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    return biTrackService.getBitrackForBc(elementConditionDto);  }  public void increasePrintTimes(List biTrackIdList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biTrackIdList.size(); i++) {      try {        biTrackService.increasePrintTimes((String) biTrackIdList.get(i));      } catch (Exception ex) {        errorInfo.append(biTrackIdList.get(i) + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的指标更新打印次数失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public List getBiTrackForDbiTbiCtrlAudit(ElementConditionDto dto, RequestMeta requestMeta) {    return this.biTrackService.getBiTrackForDbiTbiCtrlAudit(dto);  }  /**   * 指标批量审核   */  public void auditForBiDbiAuditFN(List biTrackList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biTrackList.size(); i++) {      BiTrack biTrack = (BiTrack) biTrackList.get(i);      try {        biTrackService.auditForBiDbiAudit(biTrack);      } catch (Exception ex) {        errorInfo.append(biTrack.getBiTrackId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的指标审核失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void unAuditForBiTrackFN(List biTrackList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biTrackList.size(); i++) {      BiTrack biTrack = (BiTrack) biTrackList.get(i);      try {        biTrackService.unAuditForBiTrack(biTrack);      } catch (Exception ex) {        errorInfo.append(biTrack.getBiTrackId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的指标可能已经使用，处理失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void untreadForBiTrackFN(List biTrackList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biTrackList.size(); i++) {      BiTrack biTrack = (BiTrack) biTrackList.get(i);      try {        biTrackService.untreadForBiTrack(biTrack);      } catch (Exception ex) {        errorInfo.append(biTrack.getBiTrackId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的指标退回失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void invalidateForBiTrackFN(List biTrackList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biTrackList.size(); i++) {      BiTrack biTrack = (BiTrack) biTrackList.get(i);      try {        biTrackService.invalidateForBiTrack(biTrack);      } catch (Exception ex) {        errorInfo.append(biTrack.getBiTrackId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的指标作废失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void deleteForBiTrackFN(List biTrackList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biTrackList.size(); i++) {      BiTrack biTrack = (BiTrack) biTrackList.get(i);      try {        biTrackService.deleteForBiTrack(biTrack);      } catch (Exception ex) {        errorInfo.append(biTrack.getBiTrackId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的指标删除失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 批量收回   */  public void callbackForBiEditFN(List biTrackList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biTrackList.size(); i++) {      BiTrack biTrack = (BiTrack) biTrackList.get(i);      try {        biTrackService.callbackForBiEdit(biTrack);      } catch (Exception ex) {        errorInfo.append(biTrack.getBiTrackId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的数据收回失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public List getBiTrackForDbiTbiEdit(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    return biTrackService.getBiTrackForDbiTbiEdit(elementConditionDto);  }  public BiTrack saveBiTrackForDbiTbiFN(BiTrack biTrack, RequestMeta requestMeta) {    return biTrackService.saveBiTrackForDbiTbiBAF(biTrack);  }  public List getAbiTrackList(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    return biTrackService.getAbiTrackList(elementConditionDto);  }  public List getBiTrackListByTargetBalanceId(String targetBalanceId, RequestMeta requestMeta) {    return biTrackService.getBiTrackListByTargetBalanceId(targetBalanceId);  }  public List getBiTrackListByTargetBalanceId(String targetBalanceId) {    return biTrackService.getBiTrackListByTargetBalanceId(targetBalanceId);  }  public BiTrack saveAndAuditBiTrackFN(BiTrack biTrack, RequestMeta requestMeta) {    return biTrackService.saveAndAuditBiTrackBAF(biTrack);  }  public void saveBiTrackForAdjust(List bitracks, RequestMeta requestMeta) {    biTrackService.saveBiTrackForAdjust(bitracks);  }  public void deleteBiTrackForAdj(List bitracks, RequestMeta requestMeta) {    biTrackService.deleteBiTrackForAdj(bitracks);  }  public void updateBiTrackForAdj(final List bitracks, RequestMeta requestMeta) {    biTrackService.updateBiTrackForAdj(bitracks);  }  public List getBiTrackForAdjAsc(String groupId, RequestMeta requestMeta) {    return biTrackService.getBiTrackForAdjAsc(groupId);  }  public int deleteBiTrack(BiTrack biTrack, RequestMeta requestMeta) {    return biTrackService.deleteBiTrack(biTrack);  }  public void auditForBiXbiAdjAuditFN(List biTrackList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biTrackList.size(); i++) {      BiTrack biTrack = (BiTrack) biTrackList.get(i);      try {        biTrackService.auditForBiXbiAdjAudit(biTrack);      } catch (Exception ex) {        errorInfo.append(biTrack.getBiTrackId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的指标审核失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void unAuditForBiXbiAdjFN(List biTrackList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biTrackList.size(); i++) {      BiTrack biTrack = (BiTrack) biTrackList.get(i);      try {        biTrackService.unAuditForBiXbiAdj(biTrack);      } catch (Exception ex) {        errorInfo.append(biTrack.getBiTrackId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的指标可能已经使用，处理失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void invalidateForBiXbiAdjFN(List biTrackList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biTrackList.size(); i++) {      BiTrack biTrack = (BiTrack) biTrackList.get(i);      try {        biTrackService.invalidateForBiXbiAdj(biTrack);      } catch (Exception ex) {        errorInfo.append(biTrack.getBiTrackId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的指标作废失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public PrintObject genBiTrackBillPrintObject(List BiTrack, RequestMeta requestMeta) {    List mainSubBillList = new ArrayList();    BiTrack decTrack = null;    BiTrack track = null;    for (int i = 0; i < BiTrack.size(); i++) {      decTrack = (BiTrack) BiTrack.get(i);      track = new BiTrack();      track.setInputGroupId(decTrack.getInputGroupId());      track.setNd(decTrack.getNd());      track.setBiAdjustCode("301");      MainSubBill msb = new MainSubBill();      msb.setMainBill(decTrack);      msb.setSubBillList(this.getBiTrackForQueryData(track, requestMeta));      mainSubBillList.add(msb);    }    return PrintManager.genMainSubPrintObject(mainSubBillList);  }  public List getAllBiTrack(ElementConditionDto conditionDto, RequestMeta requestMeta) {    return biTrackService.getAllBiTrack(conditionDto);  }  public BiTrack getTraceRootBiTrack(String balanceId, RequestMeta requestMeta) {    return biTrackService.getTraceRootBiTrack(balanceId);  }  public BigDecimal getHasAdjuseMoney(String balanceId, RequestMeta requestMeta) {    // TODO Auto-generated method stub    return biTrackService.getHasAdjuseMoney(balanceId);  }}