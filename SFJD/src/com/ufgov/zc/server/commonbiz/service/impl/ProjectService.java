package com.ufgov.zc.server.commonbiz.service.impl;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import com.ufgov.zc.common.commonbiz.model.Project;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.server.commonbiz.dao.IProjectDao;import com.ufgov.zc.server.commonbiz.service.IProjectService;public class ProjectService implements IProjectService {  IProjectDao projectDao;  public List getProjectTree(int nd) {    List rootProjectList = projectDao.getRootProject(nd);    List childrenProjectList = projectDao.getChildrenProject(nd);    Map childrenMap = new HashMap();    for (int i = 0; i < childrenProjectList.size(); i++) {      Project child = (Project) childrenProjectList.get(i);      List childrenList = (List) childrenMap.get(child.getParentCode());      if (childrenList != null) {        childrenList.add(child);      } else {        List tempList = new ArrayList();        tempList.add(child);        childrenMap.put(child.getParentCode(), tempList);      }    }    for (int i = 0; i < rootProjectList.size(); i++) {      Project project = (Project) rootProjectList.get(i);      this.setChildren(project, childrenMap);    }    return rootProjectList;  }  private void setChildren(Project project, Map childrenMap) {    List childrenList = (List) childrenMap.get(project.getCode());    if (childrenList != null) {      project.setChildren(childrenList);      for (int i = 0; i < childrenList.size(); i++) {        Project c = (Project) childrenList.get(i);        setChildren(c, childrenMap);      }    }  }  public List getProject(int nd) {    return projectDao.getProject(nd);  }  public List getProject(ElementConditionDto dto) {    return projectDao.getProject(dto);  }  public List getProjectBiXJ(int nd) {    return projectDao.getProjectBiXJ(nd);  }  public List getProjectDetail() {    return projectDao.getProjectDetail();  }  public List getProjectBalance() {    return projectDao.getProjectBalance();  }  public List getPdProject(int nd) {    return projectDao.getPdProject(nd);  }  public List getProjectByCode(String pCode) {    return projectDao.getProjectByCode(pCode);  }  public Project savePdProject(Project pdProject) {    boolean success = true;    List list = projectDao.getProjectByCode(pdProject.getCode());    if (list.size() == 0) {      success = false;    }    if (success) {      updateForProject(pdProject);    } else {      insertForProject(pdProject);    }    return pdProject;  }  private void insertForProject(Project pdProject) {    this.projectDao.insertForProject(pdProject);  }  private void updateForProject(Project pdProject) {    this.projectDao.updateForProject(pdProject);  }  public void deletePdProject(List dList) {    this.projectDao.deletePdProject(dList);  }  public IProjectDao getProjectDao() {    return projectDao;  }  public void setProjectDao(IProjectDao projectDao) {    this.projectDao = projectDao;  }  public void saveBiProjectXJ(List insertList, List updateList) {    this.projectDao.updateBiProject(updateList);    this.projectDao.insertBiProject(insertList);  }  public void deleteProject(List idList) {    this.projectDao.deleteProject(idList);  }  public boolean codeExist(Project project) {    return this.projectDao.codeExist(project);  }  public boolean nameExist(Project project) {    return this.projectDao.nameExist(project);  }  /**   * 除当前code对应name外的 是否重复   * @param nd   * @param currentCode   * @return   */  public boolean nameExistSelfExcluded(Project project) {    return this.projectDao.nameExistSelfExcluded(project);  }  public boolean projectUsed(Project project) {    return this.projectDao.projectUsed(project);  }  public void deleteProjectWithChildren(Project project) {    this.projectDao.deleteProjectWithChildren(project);  }}