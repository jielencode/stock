package com.ufgov.zc.server.commonbiz.helper;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import org.apache.log4j.Logger;import com.ufgov.zc.common.commonbiz.model.BiBalance;import com.ufgov.zc.common.commonbiz.model.DpBalance;import com.ufgov.zc.common.commonbiz.util.DpBalanceViewGetter;import com.ufgov.zc.common.dp.model.DpDetail;import com.ufgov.zc.common.system.constants.BillTypeConstants;import com.ufgov.zc.common.system.constants.BusinessOptionConstants;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.util.BeanUtil;import com.ufgov.zc.server.commonbiz.dao.IBiBalanceDao;import com.ufgov.zc.server.commonbiz.dao.IBillElementDao;import com.ufgov.zc.server.commonbiz.dao.IDpBalanceDao;import com.ufgov.zc.server.dp.dao.IDpDetailDao;import com.ufgov.zc.server.system.SpringContext;import com.ufgov.zc.server.system.dao.IAsOptionDao;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.util.AutoNum;import com.ufgov.zc.server.system.util.RequestMetaUtil;/** * 处理用款计划编辑及调整在保存或者终审的时候处理余额的逻辑； * @author ufwangfei * */public class DpBalanceUpdaterForDpdetail {  /**   * Logger for this class   */  private static final Logger logger = Logger.getLogger(DpBalanceUpdaterForDpdetail.class);  private static IAsOptionDao asOptionDao = (IAsOptionDao) SpringContext.getBean("asOptionDao");  private static IDpDetailDao dpDetailDao = (IDpDetailDao) SpringContext.getBean("dpDetailDao");  private static IBillElementDao billElementDao = (IBillElementDao) SpringContext.getBean("billElementDao");  private static IDpBalanceDao dpBalanceDao = (IDpBalanceDao) SpringContext.getBean("dpBalanceDao");  private static IBiBalanceDao biBalanceDao = (IBiBalanceDao) SpringContext.getBean("biBalanceDao");  private static IWorkflowDao workflowDao = (IWorkflowDao) SpringContext.getBean("workflowDao");  /**   * 有指标控制用款计划调整追减终审逻辑；   * @param dpDetail   */  public void updateDpBalanceForDpAdjustDecreaseBeforeAudit(DpDetail dpDetail) {    if (dpDetail.getIsValid().equals("0")) {      throw new BusinessException("单据已经作废，不能进行审核．");    }    String dpBalanceId = dpDetail.getDpBalanceId();    String payTypeCode = (dpDetail.getPaytypeCode()).substring(0, 2);    String optCpxxTrack = null;    if ("01".equals(payTypeCode)) {      optCpxxTrack = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_AM_TRACK).getOptVal();    } else if ("02".equals(payTypeCode)) {      optCpxxTrack = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_CP_TRACK).getOptVal();    }    optCpxxTrack = optCpxxTrack.trim();    if (optCpxxTrack.equals("0")) { //是余额管理才进行如下,重新获得指标余额ID      logger.info("是余额管理才进行如下,重新获得指标余额ID");      String optBIBALID = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DPBAL_BIBALID).getOptVal()      .trim();      String strMaxOrMin = "max";      if (optBIBALID.equals("0")) {        strMaxOrMin = "min";      }      String balanceMaxOrMin = dpDetailDao.getMaxOrMinBiBalanceForDpAdjust(strMaxOrMin, dpDetail.getNd(),      dpBalanceId);      dpDetail.setBiBalanceId(balanceMaxOrMin);    }  }  public void updateBiOrDpbalanceForDpEditAudit(DpDetail dpDetail) {    String balFlag = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DECBAL_FLAG_DP).getOptVal();    String isChangeMonth = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_CDP_ISCHANGEMONTH)    .getOptVal();    if (isChangeMonth.equalsIgnoreCase("Y")) {      int endMonth = this.calculateMonthByAsOption();      dpDetailDao.updateDpDetailMonth(dpDetail.getDpDetailId(), String.valueOf(endMonth));      dpDetail.setMonth(endMonth);    }    if (dpDetail.getIsValid().equals("0"))      throw new BusinessException("单据已经作废，不能进行审核．");    String retDpBalanceId = null;    String sUserId = RequestMetaUtil.getSvUserID();    String biBalanceId = dpDetail.getBiBalanceId();    BigDecimal diffCurMoney = new BigDecimal(0);    if (balFlag.equalsIgnoreCase("0")) {      diffCurMoney = dpDetail.getCurMoney().subtract(dpDetail.getOrgMoney());    } else {      diffCurMoney = dpDetail.getCurMoney();    }    int irow = biBalanceDao.updateBiBalanceForDpEdit(diffCurMoney, biBalanceId);    if (irow == 0) {      throw new BusinessException("指标余额不足，更新的指标余额失败！");    }    //下达操作    String payTypeCode = dpDetail.getPaytypeCode();    String optCpAdpCreate = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_ADP_CREATE).getOptVal();    String optCpDdpCreate = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DDP_CREATE).getOptVal();    if (payTypeCode == null || optCpAdpCreate == null || optCpDdpCreate == null)      throw new BusinessException("支付方式或OPT_CP_ADP_CREATE类型不能为空或OPT_CP_DDP_CREATE类型不能为空.");    if (payTypeCode.startsWith("01") || (payTypeCode.equals("0202") && optCpAdpCreate.equals("1"))    || (payTypeCode.equals("0201") && optCpDdpCreate.equals("1"))) {      retDpBalanceId = genDpBalancehandle(dpDetail);      int irowd = dpDetailDao.updateDpDetailForDpEditAudit(retDpBalanceId, sUserId, dpDetail.getDpDetailId());      if (irowd == 0) {        throw new BusinessException("回写计划数据失败！");      }    } else {      if (payTypeCode.equals("0202")) {        if (optCpAdpCreate.equals("2"))          logger.info("授权支付额度通知单审核通过后才下达计划额度.");        else if (optCpAdpCreate.equals("3"))          logger.info("授权支付额度到账通知单审核通过后才下达计划额度.");        else if (optCpAdpCreate.equals("4"))          logger.info("授权支付汇总清算额度通知单审核通过后才下达计划额度．");        else if (optCpAdpCreate.equals("5"))          logger.info("授权支付额度到账通知单接收后才下达计划额度．");        else if (optCpAdpCreate.equals("0"))          logger.info("手工控制下达授权支付计划额度．");      } else {        if (optCpDdpCreate.equals("2"))          logger.info("直接支付额度通知单审核通过后才下达计划额度.");        else if (optCpDdpCreate.equals("3"))          logger.info("直接支付额度到账通知单审核通过后才下达计划额度.");        else if (optCpDdpCreate.equals("4"))          logger.info("直接支付汇总清算额度通知单审核通过后才下达计划额度．");        else if (optCpDdpCreate.equals("5"))          logger.info("直接支付额度到账通知单接收后才下达计划额度．");        else if (optCpDdpCreate.equals("0"))          logger.info("手工控制下达直接支付计划额度．");      }    }  }  public void genDpbalForCpDi(DpDetail dpDetail, String svUserId) {    String optCpDdpCreate = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DDP_CREATE).getOptVal();    if (optCpDdpCreate != null && optCpDdpCreate.equalsIgnoreCase("2")) {      String jjPlanDetailId = dpDetail.getJjPlanDetailOid();      if (jjPlanDetailId != null) {        genDpBalForJJDetail(dpDetail);      } else {        String retDpBalanceId = genDpBalancehandle(dpDetail);        int irowd = dpDetailDao.updateDpDetailForDpEditAudit(retDpBalanceId, svUserId, dpDetail        .getDpDetailId());        if (irowd == 0) {          throw new BusinessException("回写计划数据失败！");        }      }    }  }  /**   * 按照系统选项计算该条计划归属的月份   * @param asOptionDao   * @return   */  private int calculateMonthByAsOption() {    Date date = RequestMetaUtil.getTransDate();    Calendar c = Calendar.getInstance();    c.setTime(date);    int exchangeDay = Integer.parseInt(asOptionDao    .getAsOption(BusinessOptionConstants.OPT_CP_CDP_CHANGEMONTH).getOptVal());    int endMonth = 0;    int month = c.get(Calendar.MONTH) + 1;    int day = c.get(Calendar.DAY_OF_MONTH);    if (day > exchangeDay && exchangeDay > 0 && month != 12) {      endMonth = month + 1;    } else {      endMonth = month;    }    return endMonth;  }  private String genDpBalancehandle(DpDetail dpDetail) {    Map map = billElementDao.getDecBillElement(RequestMetaUtil.getSvNd(),    BillTypeConstants.BILL_TYPE_CODE_DP_EDIT);    if (map.isEmpty()) {      throw new BusinessException(dpDetail.getDpDetailId() + " 下达失败,要素控制表中没有定义.");    }    String payTypeCode = dpDetail.getPaytypeCode();    if (payTypeCode == null || payTypeCode.equalsIgnoreCase("")) {      throw new BusinessException("支付方式为空，不能截取！");    }    String payType = payTypeCode.substring(0, 2);    String optCpxxTrack = null;    if ("01".equals(payType)) {      optCpxxTrack = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_AM_TRACK).getOptVal();    } else if ("02".equals(payType)) {      optCpxxTrack = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_CP_TRACK).getOptVal();    } else {      throw new BusinessException("截取的支付方式不正确.");    }    String elementWhere = constructWhere(map, optCpxxTrack, dpDetail);    String isoptSignle = asOptionDao.getAsOption(BusinessOptionConstants.OPT_IS_SIGNLE).getOptVal();    String moneyFieldName = null;    if (isoptSignle.equalsIgnoreCase("Y")) {      if (dpDetail.getIsCarryup().equalsIgnoreCase("N")) {        moneyFieldName = "DP_MONEY" + dpDetail.getMonth();      } else if (dpDetail.getIsCarryup().equalsIgnoreCase("Y")) {        moneyFieldName = "DP_CD_MONEY";      }      DpBalance dpBalance = this.constructDpBalance(dpDetail, moneyFieldName);      dpDetail.setDpBalanceId(dpBalance.getDpBalanceId());      dpBalanceDao.insertDpBalance(dpBalance);    } else {      String maxDpBalanceId = dpBalanceDao.queryMaxDpBalance(elementWhere);      if (maxDpBalanceId == null) {        if (dpDetail.getIsCarryup().equalsIgnoreCase("N")) {          moneyFieldName = "DP_MONEY" + dpDetail.getMonth();        } else if (dpDetail.getIsCarryup().equalsIgnoreCase("Y")) {          moneyFieldName = "DP_CD_MONEY";        }        DpBalance dpBalance = this.constructDpBalance(dpDetail, moneyFieldName);        dpDetail.setDpBalanceId(dpBalance.getDpBalanceId());        dpBalanceDao.insertDpBalance(dpBalance);      } else {        dpDetail.setDpBalanceId(maxDpBalanceId);        String setStr = "DP_MONEY" + dpDetail.getMonth();        setStr = setStr + "=" + setStr + "+";        int irow = dpBalanceDao.updateDpBalanceForDpEditAudit(setStr, dpDetail.getCurMoney(), dpDetail        .getDpBalanceId());        if (irow == 0) {          throw new BusinessException("更新计划余额表失败！");        }      }    }    return dpDetail.getDpBalanceId();  }  private String constructWhere(Map ELEMENT_CODEs, String optCpAmTrack, DpDetail dpDetail) {    StringBuffer elementWhere = new StringBuffer();    Set keySet = ELEMENT_CODEs.keySet();    Iterator it = keySet.iterator();    List keyList = new ArrayList();    keyList.addAll(keySet);    for (int i = 0; i < keyList.size(); i++) {      String elementCode = (String) keyList.get(i);      String elementValue = getElementVlaue(elementCode, dpDetail);      if (i == 0) {        if (elementValue == null) {          elementWhere          .append(" ND=" + dpDetail.getNd() + " AND " + elementCode + " is " + elementValue + " ");        } else {          elementWhere.append(" ND=" + dpDetail.getNd() + " AND " + elementCode + "='" + elementValue + "' ");        }      } else {        if (elementValue == null) {          elementWhere.append(" AND " + elementCode + " is " + elementValue + " ");        } else {          elementWhere.append(" AND " + elementCode + "='" + elementValue + "' ");        }      }    }    if ("1".equals(optCpAmTrack)) {      String biBalanceID = getElementVlaue("BI_BALANCE_ID", dpDetail);      if (biBalanceID == null) {        elementWhere.append(" AND BI_BALANCE_ID is " + biBalanceID + " ");      } else {        elementWhere.append(" AND BI_BALANCE_ID='" + biBalanceID + "' ");      }    }    return elementWhere.toString();  }  private String getElementVlaue(String elementCode, DpDetail dpDetail) {    String elementValue = "";    if (elementCode.equalsIgnoreCase("ORG_CODE")) {      elementValue = dpDetail.getOrgCode();    } else if (elementCode.equalsIgnoreCase("CO_CODE")) {      elementValue = dpDetail.getCoCode();    } else if (elementCode.equalsIgnoreCase("B_ACC_CODE")) {      elementValue = dpDetail.getBaccCode();    } else if (elementCode.equalsIgnoreCase("OUTLAY_CODE")) {      elementValue = dpDetail.getOutlayCode();    } else if (elementCode.equalsIgnoreCase("PROJECT_TYPE_CODE")) {      elementValue = dpDetail.getProjectTypeCode();    } else if (elementCode.equalsIgnoreCase("PROJECT_CODE")) {      elementValue = dpDetail.getProjectCode();    } else if (elementCode.equalsIgnoreCase("FUND_CODE")) {      elementValue = dpDetail.getFundCode();    } else if (elementCode.equalsIgnoreCase("ORIGIN_CODE")) {      elementValue = dpDetail.getOriginCode();    } else if (elementCode.equalsIgnoreCase("PAYTYPE_CODE")) {      elementValue = dpDetail.getPaytypeCode();    } else if (elementCode.equalsIgnoreCase("BI_BALANCE_ID")) {      elementValue = dpDetail.getBiBalanceId();    } else if (elementCode.equalsIgnoreCase("INCEPTDOC_CODE")) {      elementValue = dpDetail.getInceptDocCode();    } else if (elementCode.equalsIgnoreCase("SENDDOC_CODE")) {      elementValue = dpDetail.getSendDocCode();    } else if (elementCode.equalsIgnoreCase("PAYOUT_CODE")) {      elementValue = dpDetail.getPayoutCode();    } else if (elementCode.equalsIgnoreCase("MANAGE_CODE")) {      elementValue = dpDetail.getManageCode();    } else if (elementCode.equalsIgnoreCase("D_ATTR1")) {      elementValue = dpDetail.getDattr1();    } else if (elementCode.equalsIgnoreCase("D_ATTR2")) {      elementValue = dpDetail.getDattr2();    } else if (elementCode.equalsIgnoreCase("D_ATTR3")) {      elementValue = dpDetail.getDattr3();    } else if (elementCode.equalsIgnoreCase("D_ATTR4")) {      elementValue = dpDetail.getDattr4();    } else if (elementCode.equalsIgnoreCase("D_ATTR5")) {      elementValue = dpDetail.getDattr5();    }    return elementValue;  }  private DpBalance constructDpBalance(DpDetail dpDetail, String moneyFieldName) {    DpBalance dpBalance = new DpBalance();    dpBalance.setDpBalanceId(AutoNum.genNum("DP_BALANCE", dpDetail));    dpBalance.setCoCode(dpDetail.getCoCode());    dpBalance.setOrgCode(dpDetail.getOrgCode());    dpBalance.setBaccCode(dpDetail.getBaccCode());    dpBalance.setOutlayCode(dpDetail.getOutlayCode());    dpBalance.setPayoutCode(dpDetail.getPayoutCode());    dpBalance.setPaytypeCode(dpDetail.getPaytypeCode());    dpBalance.setProjectCode(dpDetail.getProjectCode());    dpBalance.setOriginCode(dpDetail.getOriginCode());    dpBalance.setFundCode(dpDetail.getFundCode());    dpBalance.setInceptdocCode(dpDetail.getInceptDocCode());    dpBalance.setSendDocCode(dpDetail.getSendDocCode());    dpBalance.setBiBalanceId(dpDetail.getBiBalanceId());    dpBalance.setNd(dpDetail.getNd());    dpBalance.setManageCode(dpDetail.getManageCode());    dpBalance.setIsBiControl(dpDetail.getIsBiControl());    dpBalance.setSenddocTypeCode(dpDetail.getSendDocTypeCode());    dpBalance.setProjectTypeCode(dpDetail.getProjectTypeCode());    dpBalance.setDattr1(dpDetail.getDattr1());    dpBalance.setDattr2(dpDetail.getDattr2());    dpBalance.setDattr3(dpDetail.getDattr3());    dpBalance.setDattr4(dpDetail.getDattr4());    dpBalance.setDattr5(dpDetail.getDattr5());    dpBalance.setRemark(dpDetail.getRemark());    if (moneyFieldName.equalsIgnoreCase("DP_MONEY1")) {      dpBalance.setDpMoney1(dpDetail.getCurMoney());    } else if (moneyFieldName.equalsIgnoreCase("DP_MONEY2")) {      dpBalance.setDpMoney2(dpDetail.getCurMoney());    } else if (moneyFieldName.equalsIgnoreCase("DP_MONEY3")) {      dpBalance.setDpMoney3(dpDetail.getCurMoney());    } else if (moneyFieldName.equalsIgnoreCase("DP_MONEY4")) {      dpBalance.setDpMoney4(dpDetail.getCurMoney());    } else if (moneyFieldName.equalsIgnoreCase("DP_MONEY5")) {      dpBalance.setDpMoney5(dpDetail.getCurMoney());    } else if (moneyFieldName.equalsIgnoreCase("DP_MONEY6")) {      dpBalance.setDpMoney6(dpDetail.getCurMoney());    } else if (moneyFieldName.equalsIgnoreCase("DP_MONEY7")) {      dpBalance.setDpMoney7(dpDetail.getCurMoney());    } else if (moneyFieldName.equalsIgnoreCase("DP_MONEY8")) {      dpBalance.setDpMoney8(dpDetail.getCurMoney());    } else if (moneyFieldName.equalsIgnoreCase("DP_MONEY9")) {      dpBalance.setDpMoney9(dpDetail.getCurMoney());    } else if (moneyFieldName.equalsIgnoreCase("DP_MONEY10")) {      dpBalance.setDpMoney10(dpDetail.getCurMoney());    } else if (moneyFieldName.equalsIgnoreCase("DP_MONEY11")) {      dpBalance.setDpMoney11(dpDetail.getCurMoney());    } else if (moneyFieldName.equalsIgnoreCase("DP_MONEY12")) {      dpBalance.setDpMoney12(dpDetail.getCurMoney());    } else if (moneyFieldName.equalsIgnoreCase("DP_CD_MONEY")) {      dpBalance.setDpCdMoney(dpDetail.getCurMoney());    }    return dpBalance;  }  /**   * 重启流程更新状态字段;   *   */  public void reworkUpdateAstatusCode(String compoId, DpDetail dpDetail) {    int nodeValue = workflowDao.getWfTemplateNode(compoId);    String astatusCode = "";    if (String.valueOf(nodeValue).equalsIgnoreCase("1")) {      astatusCode = "4";    } else {      astatusCode = "2";    }    dpDetail.setAstatusCode(astatusCode);    dpDetailDao.updateAstatusCode(dpDetail);  }  /**   * 用款计划编辑销审;   * 1.更新指标余额   * 2.更新计划余额   * @param dpDetail   */  public void reworkProcessBalanceForDpEdit(DpDetail dpDetail) {    String calcField = getCalcField();    this.beforeRework(dpDetail);    String moneyField = "DP_MONEY" + dpDetail.getMonth();    String monthField = this.getBalanceString(dpDetail);    int ibirow = biBalanceDao.updateBiBalanceForDpEditUnaudit(calcField, dpDetail.getDpDetailId(), dpDetail    .getBiBalanceId());    if (ibirow != 1) {      throw new BusinessException("更新指标余额表失败,指标余额不足,不能销审！");    }    int retBalanceCount = dpDetailDao.getDpDetailCountForUnAudit(dpDetail.getDpDetailId());    if (retBalanceCount > 0) {      int idprow = dpBalanceDao.updateDpBalanceForDpEditUnaudit(moneyField, monthField, dpDetail      .getDpDetailId(), dpDetail.getDpBalanceId());      if (idprow != 1) {        throw new BusinessException("更新计划余额表失败！");      }    }  }  /**   * 用款计划追减销审;   * @param dpDetail   */  public void reworkProcessBalanceForDpDecrease(DpDetail dpDetail) {    String calcField = getCalcField();    this.beforeRework(dpDetail);    String moneyField = "DP_MONEY" + dpDetail.getMonth();    String monthField = this.getBalanceString(dpDetail);    if (dpDetail.getBiBalanceId() != null &&    "1".equals(dpDetail.getIsBiControl())) {      int ibirow = biBalanceDao.updateBiBalanceForDpDecreaseUnaudit(dpDetail.getDpDetailId(), dpDetail      .getBiBalanceId());      if (ibirow != 1) {        throw new BusinessException("更新指标余额表失败,指标余额不足,不能销审!");      }    }    int idprow = dpBalanceDao.updateDpBalanceForDpDecreaseUnaudit(moneyField, calcField, monthField, dpDetail    .getDpDetailId(), dpDetail.getDpBalanceId());    if (idprow != 1) {      throw new BusinessException("更新计划余额表失败！");    }  }  /**   * 用款计划冻结,解冻销审;   * @param dpDetail   */  public void reworkProcessBalanceForDpFreezeOrUnfreeze(String flag, DpDetail dpDetail) {    String calcField = this.getCalcField();    this.beforeRework(dpDetail);    String monthField = this.getBalanceString(dpDetail);    String saveOption = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DECBAL_FLAG_DP).getOptVal();    if (flag.equalsIgnoreCase("FREEZE")) {      if (saveOption.equalsIgnoreCase("0")) {        int idprow = dpBalanceDao.updateDpBalanceForDpFreezeUnaudit0(calcField, dpDetail.getDpDetailId(),        dpDetail.getDpBalanceId(), monthField);        if (idprow != 1) {          throw new BusinessException("更新计划余额表失败！");        }      } else {        int idprow = dpBalanceDao.updateDpBalanceForDpFreezeUnaudit(calcField, dpDetail.getDpDetailId(),        dpDetail.getDpBalanceId());        if (idprow != 1) {          throw new BusinessException("更新计划余额表失败！");        }      }    } else if (flag.equalsIgnoreCase("UNFREEZE")) {      int idprow = dpBalanceDao.updateDpBalanceForDpUnFreezeUnaudit(dpDetail.getDpDetailId(), dpDetail      .getDpBalanceId(), monthField);      if (idprow != 1) {        throw new BusinessException("更新计划余额表失败！");      }    }  }  private String getBalanceString(DpDetail dpDetail) {    StringBuffer result = new StringBuffer("dp_cd_money");    int toMonth = dpDetail.getMonth();    for (int i = 1; i <= toMonth; i++) {      result.append("+dp_money");      result.append(i);    }    return result.toString();  }  /**   * 计算差值,暂时没有考虑负数的情况   * balFlag.equalsIgnoreCase("0")&&curmoney.floatValue()>0   * @param asOptionDao   * @return   */  private String getCalcField() {    String calcField = null;    String saveOption = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DECBAL_FLAG_DP).getOptVal();    if (saveOption.equalsIgnoreCase("0")) {      calcField = "cur_money-org_money";    } else {      calcField = "cur_money";    }    return calcField;  }  /**   * 用款计划编辑作废逻辑   * 1.校验 单据已处于作废状态，不能再次作废;   * 2.校验 单据已经终审通过，不能作废   * 3.要考虑有指标和无指标,目前处理有指标的情况   * 4.校验 用款计划的指标余额编号[BI_BALANCE_ID]不能为null;   * 5.校验 指标余额表中找不到编号为"+biBalanceId+"的指标余额;   * 6.校验 指标余额表中可用作废金额" + dpMoney + "不足" + orgMoney+ "元;   * 7.根据占余额选项 处理余额 update bi_balance set dp_money=dp_money-? where bi_balance_id=?   * 8.结束工作流程;   * 9.根据选项设置状态,setIsValidFlag;   * @param dpDetail   */  public void interruptProcessForDpEdit(DpDetail dpDetail) {    String balFlag = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DECBAL_FLAG_DP).getOptVal();    if (dpDetail.getIsValid().equalsIgnoreCase("0")) {      throw new BusinessException("单据" + dpDetail.getDpDetailId() + "已经作废不可再次作废！");    }    if (dpDetail.getAstatusCode().equalsIgnoreCase("3") || dpDetail.getAstatusCode().equalsIgnoreCase("5")) {      throw new BusinessException("单据" + dpDetail.getDpDetailId() + "已经审核通过不可作废！");    }    String biBalanceId = dpDetail.getBiBalanceId();    if (biBalanceId == null) {      throw new BusinessException("单据" + dpDetail.getDpDetailId() + "指标余额id不可为空！");    }    BiBalance biBalance = biBalanceDao.getBiBalanceById(biBalanceId);    BigDecimal orgMoney = dpDetail.getOrgMoney();    BigDecimal dpMoney = biBalance.getDpMoney();    if (balFlag.equalsIgnoreCase("0")) {      if (dpMoney.compareTo(orgMoney) == -1) {        throw new BusinessException("指标余额表中可用作废金额 " + dpMoney + " 不足 " + orgMoney + "元.");      }      biBalanceDao.updateBiBalanceForDpEditInterrupt(orgMoney, biBalanceId);    }    this.setIsValidFlag(dpDetail);  }  /**   * 作废的时候处理单据的状态;   *   */  private void setIsValidFlag(DpDetail dpDetail) {    String optionValue = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DEL_INVALIDATION).getOptVal();    boolean flag = optionValue.equals("1");    String isValid = "";    String astatusCode = "";    if (flag) {      isValid = "9";    } else {      isValid = "0";    }    astatusCode = "9";    dpDetailDao.updateDpDetailIsValid(isValid, astatusCode, dpDetail.getDpDetailId());  }  /**   * 用款计划调整作废;   * @param biBalanceDao   * @param dpDetail   * @param asOptionDao   * @param dpDetailDao   */  public void interruptProcessForDpAdjust(DpDetail dpDetail) {    String balFlag = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DECBAL_FLAG_DP).getOptVal();    if (dpDetail.getIsValid().equalsIgnoreCase("0")) {      throw new BusinessException("单据" + dpDetail.getDpDetailId() + "已经作废不可再次作废！");    }    if (dpDetail.getAstatusCode().equalsIgnoreCase("3") || dpDetail.getAstatusCode().equalsIgnoreCase("5")) {      throw new BusinessException("单据" + dpDetail.getDpDetailId() + "已经审核通过不可作废！");    }    if (balFlag.equalsIgnoreCase("0")) {      String pmAdjustCode = dpDetail.getPmAdjustCode();      if (pmAdjustCode.equalsIgnoreCase("202")) {        String setStr = "DP_MONEY" + dpDetail.getMonth() + "=" + "DP_MONEY" + dpDetail.getMonth();        dpBalanceDao.updateDpBalanceForDpEditAudit(setStr, dpDetail.getOrgMoney(), dpDetail.getDpBalanceId());      } else if (pmAdjustCode.equalsIgnoreCase("301")) {//解冻不处理，直接终止流程      } else if (pmAdjustCode.equalsIgnoreCase("302")) {//冻结        dpBalanceDao.updateDpBalanceForDpUnFreezeInterrupt(dpDetail.getOrgMoney(), dpDetail.getDpBalanceId());      }    }    this.setIsValidFlag(dpDetail);  }  /**   * 用款计划销审前增加判断是否可以进行销审;   * 1.如果生成额度通知单则不可销审;   * 2.如果生成汇总通知单则不可销审;   * 3.手动下达后也不可销审;   * @param dpDetail   */  private void beforeRework(DpDetail dpDetail) {    String adpFlag = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_ADP_CREATE).getOptVal();    String ddpFlag = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DDP_CREATE).getOptVal();    String adjustCode = dpDetail.getPmAdjustCode();    if (dpDetail.getPlanAgentBillId() != null) {      throw new BusinessException("单据 " + dpDetail.getDpDetailId() + " 已经生成额度通知单,不可销审！");    }    if (dpDetail.getPlanClearBillId() != null) {      throw new BusinessException("单据 " + dpDetail.getDpDetailId() + " 已经生成汇总清算额度通知单,不可销审！");    }    String isNeedUpdate0201 = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DDP_IS_NEED_UPDATE)    .getOptVal();    String isNeedUpdate0202 = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_ADP_IS_NEED_UPDATE)    .getOptVal();    if ("0201".equals(dpDetail.getPaytypeCode())) {      if (ddpFlag.equalsIgnoreCase("0") && adjustCode.equalsIgnoreCase("101")) {        if ("Y".equalsIgnoreCase(isNeedUpdate0201)) {          if (dpDetail.getIsShbaExport().equalsIgnoreCase("Y") || dpDetail.getDpBalanceId() != null) {            throw new BusinessException("单据 " + dpDetail.getDpDetailId() + " 已经手动下达,不可销审！");          }        } else {          if (dpDetail.getDpBalanceId() != null) {            throw new BusinessException("单据 " + dpDetail.getDpDetailId() + " 已经下达,不可销审！");          }        }      }    } else if ("0202".equals(dpDetail.getPaytypeCode())) {      if (adpFlag.equalsIgnoreCase("0") && adjustCode.equalsIgnoreCase("101")) {        if ("Y".equalsIgnoreCase(isNeedUpdate0202)) {          if (dpDetail.getIsShbaExport().equalsIgnoreCase("Y") || dpDetail.getDpBalanceId() != null) {            throw new BusinessException("单据 " + dpDetail.getDpDetailId() + " 已经手动下达,不可销审！");          }        } else {          if (dpDetail.getDpBalanceId() != null) {            throw new BusinessException("单据 " + dpDetail.getDpDetailId() + " 已经下达,不可销审！");          }        }      }    }  }  public void genDpBalForJJDetail(DpDetail jjDpDetail) {    if (jjDpDetail.getJjPlanDetailOid() == null)      return;    DpBalance dpBalance = new DpBalance();    BeanUtil.commonFieldsCopy(jjDpDetail, dpBalance);    dpBalance.setNd(RequestMetaUtil.getSvNd());    String moneyProperty = "dpMoney" + jjDpDetail.getMonth();    BeanUtil.set(moneyProperty, jjDpDetail.getCurMoney(), dpBalance);    dpBalance.setDpBalanceId(AutoNum.genNum("DP_BALANCE", dpBalance));    if (this.dpBalanceDao.getBalanceNumByJjPlanDetailOid(jjDpDetail.getJjPlanDetailOid()) == 0) {      this.dpBalanceDao.insertDpBalance(dpBalance);    } else {      String moneyField = "dp_money" + jjDpDetail.getMonth();      this.dpBalanceDao.updateDpbalanceByJjPlanDetailOid(moneyField, jjDpDetail.getCurMoney(), jjDpDetail      .getJjPlanDetailOid());      dpBalance = this.dpBalanceDao.getDpbalanceByJjPlanDetailOid(jjDpDetail.getJjPlanDetailOid());    }    int irowd = dpDetailDao.updateDpDetailForDpEditAudit(dpBalance.getDpBalanceId(), RequestMetaUtil    .getSvUserID(), jjDpDetail.getDpDetailId());    if (irowd == 0) {      throw new BusinessException("回写计划数据失败！");    }  }  public void updateJJDetail(DpDetail jjDpDetail) {    if (jjDpDetail.getJjPlanDetailOid() == null)      return;    String optCpDdpCreate = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_ADP_CREATE).getOptVal();    if ("2".equals(optCpDdpCreate)) {      genDpBalForJJDetail(jjDpDetail);    }  }  public String genBalanceForUpdate(DpDetail dpDetail) {    return genDpBalancehandle(dpDetail);  }  /**   * 更新计划余额表   */  public void returnBalanceForUnUpdate(DpDetail dpDetail) {    int month = dpDetail.getMonth();    String moneyField = "DP_MONEY" + month;    BigDecimal curMoney = dpDetail.getCurMoney();    String dpBalanceView = DpBalanceViewGetter.getRightQueryView(month);    DpBalance dpBalance = this.dpBalanceDao.getDpBalanceById(dpDetail.getDpBalanceId(), dpBalanceView);    BigDecimal money = dpBalance.getBalance().subtract(curMoney);    if (money.signum() != -1) {      int n = this.dpBalanceDao.updateDpbalanceForUnUpdate(moneyField, curMoney, dpDetail.getDpBalanceId());      if (n != 1) {        throw new BusinessException("更新该计划" + dpDetail.getDpDetailId() + "对应的余额表失败！");      }    } else {      throw new BusinessException(dpDetail.getDpDetailId() + "对应计划余额不足！");    }  }}