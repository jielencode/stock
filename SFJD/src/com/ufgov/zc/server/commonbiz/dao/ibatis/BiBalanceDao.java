package com.ufgov.zc.server.commonbiz.dao.ibatis;import java.math.BigDecimal;import java.sql.SQLException;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.orm.ibatis.SqlMapClientCallback;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;import com.ibatis.sqlmap.client.SqlMapExecutor;import com.ufgov.zc.common.bi.model.BiCarryReviewResult;import com.ufgov.zc.common.commonbiz.model.BiBalance;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.server.commonbiz.dao.IBiBalanceDao;import com.ufgov.zc.server.system.util.GkGetDataRuleUtil;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.system.util.OrderColumnsUtil;import com.ufgov.zc.server.system.util.RequestMetaUtil;public class BiBalanceDao extends SqlMapClientDaoSupport implements IBiBalanceDao {  public List getBiBalance(ElementConditionDto dto) {//    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    if (dto.getDataRuleCondiStr() == null || dto.getDataRuleCondiStr().trim().equals("")) {      dto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance().getDataRuleCondiStr(dto.getDataRuleId()));    }    dto.setPlanMonth(RequestMetaUtil.getSvMonth());    return this.getSqlMapClientTemplate().queryForList("BiBalance.getBiBalance", dto);  }  public List getBiBalanceInfo(ElementConditionDto dto) {    dto.setPlanMonth(RequestMetaUtil.getSvMonth());    return this.getSqlMapClientTemplate().queryForList("BiBalance.getBiBalanceInfo", dto);  }  public List getAllBiBalanceByDto(ElementConditionDto dto) {//    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(), NumLimConstants.FWATCH));////    dto.setPlanMonth(RequestMetaUtil.getSvMonth());    return this.getSqlMapClientTemplate().queryForList("BiBalance.getAllBiBalanceInfo", dto);  }  public List getBiBalanceForCd(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("BiBalance.getBiBalanceForCd", dto);  }  public BiBalance getBiBalanceById(String id) {    return (BiBalance) this.getSqlMapClientTemplate().queryForObject("BiBalance.getBiBalanceById", id);  }  public int updateBiBalanceForDpAdjust(BigDecimal adjustMoney, String biBalanceId) {    Map mParam = new HashMap();    mParam.put("adjustMoney", adjustMoney);    mParam.put("biBalanceId", biBalanceId);    return this.getSqlMapClientTemplate().update("BiBalance.updateBiBalanceForDpAdjust", mParam);  }  public int updateBiBalanceForDpEdit(BigDecimal diffMoney, String biBalanceId) {    Map mParam = new HashMap();    mParam.put("curMoney", diffMoney);    mParam.put("biBalanceId", biBalanceId);    return this.getSqlMapClientTemplate().update("BiBalance.updateBiBalanceForDpEdit", mParam);  }  public int updateBiBalanceForDpEditDelete(String dpDetailId, String biBalanceId) {    Map mparam = new HashMap();    mparam.put("dpDetailId", dpDetailId);    mparam.put("biBalanceId", biBalanceId);    return this.getSqlMapClientTemplate().update("BiBalance.updateBiBalanceForDpEditDelete", mparam);  }  public List getBiBalanceForAm(ElementConditionDto dto) {//    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(dto.getOrderCompoId()));    dto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance().getDataRuleCondiStr(dto.getDataRuleId()));    return this.getSqlMapClientTemplate().queryForList("BiBalance.getBiBalanceForAm", dto);  }  public List getBiBalanceForAmPvmDpEdit(ElementConditionDto dto) {//    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(dto.getOrderCompoId()));    dto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance().getDataRuleCondiStr(dto.getDataRuleId()));    return this.getSqlMapClientTemplate().queryForList("BiBalance.getBiBalanceForAmPvmDpEdit", dto);  }  public List getBiBalanceForDbiTbi(ElementConditionDto dto) {//    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList("BiBalance.getBiBalanceForDbiTbi", dto);  }  public int updateBiBalanceForAm(BigDecimal adjustMoney, String biBalanceId) {    Map map = new HashMap();    map.put("adjustMoney", adjustMoney);    map.put("biBalanceId", biBalanceId);    return this.getSqlMapClientTemplate().update("BiBalance.updateBiBalanceForAm", map);  }  public int updateBiBalanceForCp(BigDecimal adjustMoney, String biBalanceId) {    Map map = new HashMap();    map.put("adjustMoney", adjustMoney);    map.put("biBalanceId", biBalanceId);    return this.getSqlMapClientTemplate().update("BiBalance.updateBiBalanceForCp", map);  }  //拨款申请余额更新  public int updateBiBalanceForAmDelete(String amApplyId, String biBalanceId) {    Map map = new HashMap();    map.put("amApplyId", amApplyId);    map.put("biBalanceId", biBalanceId);    return this.getSqlMapClientTemplate().update("BiBalance.updateBiBalanceForAmDelete", map);  }  public int updateBiBalanceForAmVoucherDelete(String amVoucherId, String biBalanceId) {    Map map = new HashMap();    map.put("amVoucherId", amVoucherId);    map.put("biBalanceId", biBalanceId);    return this.getSqlMapClientTemplate().update("BiBalance.updateBiBalanceForAmVoucherDelete", map);  }  /**   * 用款计划编辑销审更新余额   * @param dpDetailId   * @param biBalanceId   * @return   */  public int updateBiBalanceForDpEditUnaudit(String calcField, String dpDetailId, String biBalanceId) {    Map map = new HashMap();    map.put("calcField", calcField);    map.put("dpDetailId", dpDetailId);    map.put("biBalanceId", biBalanceId);    return this.getSqlMapClientTemplate().update("BiBalance.updateBiBalanceForDpEditUnaudit", map);  }  /**   * 用款计划追减销审更新余额   * @param dpDetailId   * @param biBalanceId   * @return   */  public int updateBiBalanceForDpDecreaseUnaudit(String dpDetailId, String biBalanceId) {    Map map = new HashMap();    map.put("dpDetailId", dpDetailId);    map.put("biBalanceId", biBalanceId);    return this.getSqlMapClientTemplate().update("BiBalance.updateBiBalanceForDpDecreaseUnaudit", map);  }  /**   * 用款计划编辑作废更新余额;   * @param curMoney   * @param biBalanceId   * @return   */  public int updateBiBalanceForDpEditInterrupt(BigDecimal curMoney, String biBalanceId) {    Map map = new HashMap();    map.put("curMoney", curMoney);    map.put("biBalanceId", biBalanceId);    return this.getSqlMapClientTemplate().update("BiBalance.updateBiBalanceForDpEditInterrupt", map);  }  public String updateBiBalanceForPreAmToPay(String biBalanceIds, int nd) {    Map map = new HashMap();    map.put("biBalanceIds", biBalanceIds);    map.put("nd", new Integer(nd));    map.put("rtnStr", "");    this.getSqlMapClientTemplate().insert("BiBalance.SP_AM_PRE_AM_TO_PAY", map);    return (String) map.get("rtnStr");  }  /**   * 获取结转资金信息   */  public List getCarryDownInfo(Map params) {    return this.getSqlMapClientTemplate().queryForList("BiBalance.getCarryDownInfo", params);  }  public void updateBiBalanceForCd(List biBalanceIdList) {    final List list = biBalanceIdList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          executor.insert("BiBalance.updateBiBalanceForCd", list.get(i));        }        executor.executeBatch();        return null;      }    });  }  public void updateBiBalanceForCdUndo(List biBalanceIdList) {    final List list = biBalanceIdList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          executor.insert("BiBalance.updateBiBalanceForCdUndo", list.get(i));        }        executor.executeBatch();        return null;      }    });  }  public List getBiCarryReviewResult(String coCodeFilter, int nd) {    Map map = new HashMap();    map.put("coCodeFilter", coCodeFilter);    map.put("nd", new Integer(nd));    return this.getSqlMapClientTemplate().queryForList("BiCarryReviewResult.getBiCarryReviewResult", map);  }  public List getBiCarryReviewResultBycoCode(String coCode, int nd) {    Map map = new HashMap();    map.put("coCode", coCode);    map.put("nd", new Integer(nd));    return this.getSqlMapClientTemplate().queryForList("BiCarryReviewResult.getBiCarryReviewResultBycoCode",    map);  }  public List getBiCdMoneyCheck(String coCode, int nd) {    Map map = new HashMap();    map.put("coCode", coCode);    map.put("nd", new Integer(nd));    return this.getSqlMapClientTemplate().queryForList("BiCdMoneyCheck.getBiCdMoneyCheck", map);  }  public void insertForBiCarryReviewResult(BiCarryReviewResult biCarryReviewResult) {    biCarryReviewResult.setReviewTimes(1);    this.getSqlMapClientTemplate().insert("BiCarryReviewResult.insertBiCarryReviewResult",    biCarryReviewResult);  }  public void updateForBiCarryReviewResult(String coCode, int nd) {    Map map = new HashMap();    map.put("coCode", coCode);    map.put("nd", new Integer(nd));    this.getSqlMapClientTemplate().update("BiCarryReviewResult.updateReviewTimes", map);  }  public void insertBiBalance(List biBalanceList) {    final List list = biBalanceList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          executor.insert("BiBalance.insertBiBalance", list.get(i));        }        executor.executeBatch();        return null;      }    });  }  public List getBiBalanceByDto(ElementConditionDto dto) {//    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    dto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance().getDataRuleCondiStr(dto.getDataRuleId()));    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("BiBalance.getBiBalanceByDto", dto);  }  public List getBiBalanceForDz(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("BiBalance.getBiBalanceForDz", dto);  }  public void updateBiBalanceForArmTrackInput(final List bibalance) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        int length = bibalance.size();        BiBalance balance = null;        executor.startBatch();        for (int i = 0; i < length; i++) {          balance = (BiBalance) bibalance.get(i);          //TODO;          executor.update("BiBalance.updateBiBalanceForArmTrackInput", balance);        }        executor.executeBatch();        return null;      }    });  }  public void updateBiBalanceForArmTrackInput2(BiBalance balance) {    this.getSqlMapClientTemplate().update("BiBalance.updateBiBalanceForArmTrackInput2", balance);  }  public void updateBiBalanceOperateType(final List biBalanceIdList, String operateType) {    final Map param = new HashMap();    param.put("operateType", operateType);    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < biBalanceIdList.size(); i++) {          param.put("biBalanceId", biBalanceIdList.get(i));          executor.update("BiBalance.updateBiBalanceOperateType", param);        }        executor.executeBatch();        return null;      }    });  }  public int updateBiBalanceForBiDbiAudit(BigDecimal curMoney, String originBalanceId) {    Map mParam = new HashMap();    mParam.put("curMoney", curMoney);    mParam.put("originBalanceId", originBalanceId);    return this.getSqlMapClientTemplate().update("BiBalance.updateBiBalanceForBiDbiAudit", mParam);  }  public int updateOldBiBalanceForBiAudit(BigDecimal curMoney, String moneyField, String balanceId) {    Map mParam = new HashMap();    mParam.put("curMoney", curMoney);    mParam.put("moneyField", moneyField);    mParam.put("balanceId", balanceId);    return this.getSqlMapClientTemplate().update("BiBalance.updateOldBiBalanceForBiAudit", mParam);  }  public String queryOldBiBalanceId(String elementWhere, String biTrackId) {    Map map = new HashMap();    map.put("biTrackId", biTrackId);    map.put("elementWhere", elementWhere);    return (String) this.getSqlMapClientTemplate().queryForObject("BiBalance.queryOldBiBalanceId", map);  }  public void insertOneBiBalance(BiBalance biBalance) {    this.getSqlMapClientTemplate().insert("BiBalance.insertOneBiBalance", biBalance);  }  public int updateBiBalanceNotDecToNull(String updateSql, String biBalanceId) {    Map map = new HashMap();    map.put("updateSql", updateSql);    map.put("biBalanceId", biBalanceId);    return this.getSqlMapClientTemplate().update("BiBalance.updateBiBalanceNotDecToNull", map);  }  public void insertOneBiAbiBalance(BiBalance biBalance) {    this.getSqlMapClientTemplate().insert("BiBalance.insertOneBiAbiBalance", biBalance);  }  public int updateSourceBiBalanceForBiUnaudit(BigDecimal curMoney, String biTrackId) {    Map map = new HashMap();    map.put("curMoney", curMoney);    map.put("biTrackId", biTrackId);    return this.getSqlMapClientTemplate().update("BiBalance.updateSourceBiBalanceForBiUnaudit", map);  }  public int deleteSelfBiBalanceForUnaudit(String biTrackId) {    Map map = new HashMap();    map.put("biTrackId", biTrackId);    return this.getSqlMapClientTemplate().delete("BiBalance.deleteSelfBiBalanceForUnaudit", map);  }  public int updateSelfBiBalanceForUnaudit(BigDecimal curMoney, String biTrackId) {    Map map = new HashMap();    map.put("curMoney", curMoney);    map.put("biTrackId", biTrackId);    return this.getSqlMapClientTemplate().delete("BiBalance.updateSelfBiBalanceForUnaudit", map);  }  public int updateSelfBiBalanceForValid(String biTrackId) {    Map map = new HashMap();    map.put("biTrackId", biTrackId);    return this.getSqlMapClientTemplate().delete("BiBalance.updateSelfBiBalanceForValid", map);  }  public int updateBiBalanceForAdjAudit(BigDecimal curMoney, String balanceId) {    Map map = new HashMap();    map.put("curMoney", curMoney);    map.put("biBalanceId", balanceId);    return this.getSqlMapClientTemplate().update("BiBalance.updateBiBalanceForAdjAudit", map);  }  public int updateBiBalanceForAdjUnAudit(BigDecimal curMoney, String balanceId) {    Map map = new HashMap();    map.put("curMoney", curMoney);    map.put("biBalanceId", balanceId);    return this.getSqlMapClientTemplate().update("BiBalance.updateBiBalanceForAdjUnAudit", map);  }  public int updateBiBalanceForCpVoucherUnDo(String cpVoucherId, String biBalanceId) {    Map map = new HashMap();    map.put("cpVoucherId", cpVoucherId);    map.put("biBalanceId", biBalanceId);    return this.getSqlMapClientTemplate().update("BiBalance.updateBiBalanceForCpVoucherUnDo", map);  }}