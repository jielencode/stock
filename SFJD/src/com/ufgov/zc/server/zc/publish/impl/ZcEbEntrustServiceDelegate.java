package com.ufgov.zc.server.zc.publish.impl;import java.util.List;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.dto.PrintObject;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.util.ExceptionUtil;import com.ufgov.zc.common.zc.model.ZcEbEntrust;import com.ufgov.zc.common.zc.publish.IZcEbEntrustServiceDelegate;import com.ufgov.zc.server.zc.service.IZcEbEntrustService;public class ZcEbEntrustServiceDelegate implements IZcEbEntrustServiceDelegate {  public IZcEbEntrustService zcEbEntrustService;  public IZcEbEntrustService getZcEbEntrustService() {    return zcEbEntrustService;  }  public void setZcEbEntrustService(IZcEbEntrustService zcEbEntrustService) {    this.zcEbEntrustService = zcEbEntrustService;  }  public List getZcEbEntrust(ElementConditionDto dto, RequestMeta meta) {    return zcEbEntrustService.getZcEbEntrust(dto, meta);  }  public List getZcEbEntrustDetailBySn(String sn, RequestMeta meta) {    return zcEbEntrustService.getZcEbEntrustDetailBySn(sn);  }  public ZcEbEntrust getZcEbtrustBySn(String sn, RequestMeta meta) {    return zcEbEntrustService.getZcEbEntrustBySn(sn);  }  public ZcEbEntrust updateZcEbEntrustStatusFN(ZcEbEntrust entrust, RequestMeta meta) {    return zcEbEntrustService.updateZcEbEntrustStatus(entrust);  }  public void updateZcEbEntrustStatusFN(List entrustList, RequestMeta meta) {    zcEbEntrustService.updateZcEbEntrustStatus(entrustList);  }  public ZcEbEntrust newCommitFN(ZcEbEntrust entrust, RequestMeta meta) {    return zcEbEntrustService.newCommit(entrust, meta);  }  public ZcEbEntrust auditFN(ZcEbEntrust entrust, RequestMeta meta) {    return zcEbEntrustService.audit(entrust, meta);  }  public ZcEbEntrust unauditFN(ZcEbEntrust entrust, RequestMeta meta) {    return zcEbEntrustService.unaudit(entrust, meta);  }  public ZcEbEntrust untreadFN(ZcEbEntrust entrust, RequestMeta meta) {    return zcEbEntrustService.untread(entrust, meta);  }  public void newCommitFN(List entrustList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < entrustList.size(); i++) {      ZcEbEntrust bean = (ZcEbEntrust) entrustList.get(i);      try {        zcEbEntrustService.newCommit(bean, meta);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(bean.getSn());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的单据处理失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void auditFN(List entrustList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < entrustList.size(); i++) {      ZcEbEntrust bean = (ZcEbEntrust) entrustList.get(i);      try {        zcEbEntrustService.audit(bean, meta);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(bean.getSn());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的单据处理失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void unauditFN(List entrustList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < entrustList.size(); i++) {      ZcEbEntrust bean = (ZcEbEntrust) entrustList.get(i);      try {        zcEbEntrustService.unaudit(bean, meta);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(bean.getSn());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的单据处理失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void untreadFN(List entrustList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < entrustList.size(); i++) {      ZcEbEntrust bean = (ZcEbEntrust) entrustList.get(i);      try {        zcEbEntrustService.untread(bean, meta);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(bean.getSn());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的单据处理失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public PrintObject genMainSubPrintObjectFN(List zcEbEntrustList, RequestMeta meta) {    return this.zcEbEntrustService.genMainSubPrintObject(zcEbEntrustList);  }  public void doBack(ZcEbEntrust entrust, RequestMeta requestMeta) {    this.zcEbEntrustService.doBack(entrust, requestMeta);  }  public ZcEbEntrust saveFN(ZcEbEntrust entrust, RequestMeta requestMeta) {    return zcEbEntrustService.doSave(entrust);  }  public int getCountData(String sn, RequestMeta requestMeta) {    return zcEbEntrustService.getCountData(sn);  }  public int deleteByPrimaryKey(ZcEbEntrust zcEbEntrust, RequestMeta requestMeta) {    return zcEbEntrustService.deleteByPrimaryKey(zcEbEntrust);  }  public List findTransData(ElementConditionDto dto, RequestMeta meta) {    // TODO Auto-generated method stub    return zcEbEntrustService.findTransData(dto, meta);  }  public void impEntrust(ZcEbEntrust zeas, RequestMeta meta) {    // TODO Auto-generated method stub    zcEbEntrustService.impEntrust(zeas, meta);  }    public boolean checkUniqueZcMakeCode(ZcEbEntrust zeas, RequestMeta meta){	  return zcEbEntrustService.checkUniqueZcMakeCode(zeas, meta);  }    public List getTodoListByUser(List compId, String userId, RequestMeta meta) {    // TODO Auto-generated method stub    return zcEbEntrustService.getTodoListByUser(compId, userId);  }   public List getZcEbEntrustExportData(List entrustIdLst, RequestMeta meta) {    // TODO Auto-generated method stub    return zcEbEntrustService.getZcEbEntrustExportData(entrustIdLst, meta);  }     public String importTransDatasFN(ZcEbEntrust bill, RequestMeta meta) {    // TODO Auto-generated method stub    return zcEbEntrustService.importTransDatasFN(bill, meta);  }}