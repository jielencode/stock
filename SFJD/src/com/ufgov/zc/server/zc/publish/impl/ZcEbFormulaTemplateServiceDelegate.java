/**    * @(#) project: GK * @(#) file: ZcEbFormulaTemplateServiceDelegate.java *  * Copyright 2010 UFGOV, Inc. All rights reserved. * UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms. *  */package com.ufgov.zc.server.zc.publish.impl;import java.util.Date;import java.util.List;import java.util.Map;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.util.ExceptionUtil;import com.ufgov.zc.common.zc.model.ZcEbFormulaTemplate;import com.ufgov.zc.common.zc.model.ZcEbFormulaTemplateItem;import com.ufgov.zc.common.zc.publish.IZcEbFormulaTemplateServiceDelegate;import com.ufgov.zc.server.system.util.NumUtil;import com.ufgov.zc.server.zc.service.IZcEbFormulaTemplateService;/** *  * @ClassName: ZcEbFormulaTemplateServiceDelegate *  * @Description: TODO(这里用一句话描述这个类的作用) *  * @date: 2010-7-4 下午04:21:20 *  * @version: V1.0 *  * @since: 1.0 *  * @author: Administrator *  * @modify: */public class ZcEbFormulaTemplateServiceDelegate implements		IZcEbFormulaTemplateServiceDelegate {	private IZcEbFormulaTemplateService zcEbFormulaTemplateService;	public IZcEbFormulaTemplateService getZcEbFormulaTemplateService() {		return zcEbFormulaTemplateService;	}	public void setZcEbFormulaTemplateService(			IZcEbFormulaTemplateService zcEbFormulaTemplateService) {		this.zcEbFormulaTemplateService = zcEbFormulaTemplateService;	}	public void deleteListForZcEbFormulaTemplate(List ZcEbFormulaTemplateList,			RequestMeta meta) {		StringBuffer errorInfo = new StringBuffer("id为");		StringBuffer stackTraceMessage = new StringBuffer();		boolean fail = false;		for (int i = 0; i < ZcEbFormulaTemplateList.size(); i++) {			ZcEbFormulaTemplate zcEbFormulaTemplate = (ZcEbFormulaTemplate) ZcEbFormulaTemplateList					.get(i);			String templateCode = zcEbFormulaTemplate.getTemplateCode();			try {				int num = zcEbFormulaTemplateService						.deleteForZcEbFormulaTemplate(templateCode);				if (num == 0) {					errorInfo.append(": ");					errorInfo.append(templateCode);					errorInfo.append("已被删除");					fail = true;				}			} catch (Exception ex) {				errorInfo.append(": ");				errorInfo.append(templateCode);				stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));				fail = true;			}		}		errorInfo.append("的模板删除失败！");		if (fail) {			BusinessException be = new BusinessException(errorInfo.toString());			be.setStackTraceMessage(stackTraceMessage.toString());			throw be;		}	}	public void deleteForZcEbFormulaTemplate(String templateCode,			RequestMeta meta) {		StringBuffer errorInfo = new StringBuffer("id为");		StringBuffer stackTraceMessage = new StringBuffer();		boolean fail = false;		try {			int num = zcEbFormulaTemplateService					.deleteForZcEbFormulaTemplate(templateCode);			if (num == 0) {				errorInfo.append(": ");				errorInfo.append(templateCode);				errorInfo.append("已被删除");				fail = true;			}		} catch (Exception ex) {			errorInfo.append(": ");			errorInfo.append(templateCode);			stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));			fail = true;		}		errorInfo.append("的模板删除失败！");		if (fail) {			BusinessException be = new BusinessException(errorInfo.toString());			be.setStackTraceMessage(stackTraceMessage.toString());			throw be;		}	}	public void deleteForZcEbFormulaTemplateItem(String itemCode,			RequestMeta meta) {		StringBuffer errorInfo = new StringBuffer("id为");		StringBuffer stackTraceMessage = new StringBuffer();		boolean fail = false;		try {			int num = zcEbFormulaTemplateService					.deleteForZcEbFormulaTemplateItem(itemCode);			if (num == 0) {				errorInfo.append(": ");				errorInfo.append(itemCode);				errorInfo.append("已被删除");				fail = true;			}		} catch (Exception ex) {			errorInfo.append(": ");			errorInfo.append(itemCode);			stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));			fail = true;		}		errorInfo.append("的模板删除失败！");		if (fail) {			BusinessException be = new BusinessException(errorInfo.toString());			be.setStackTraceMessage(stackTraceMessage.toString());			throw be;		}	}	public void deleteZcEbFormulaTemplateItemBytemplateCode(			String templateCode, RequestMeta meta) {		StringBuffer errorInfo = new StringBuffer("id为");		StringBuffer stackTraceMessage = new StringBuffer();		boolean fail = false;		try {			int num = zcEbFormulaTemplateService					.deleteForZcEbFormulaTemplateItemByTemplateCode(templateCode);			if (num == 0) {				errorInfo.append(": ");				errorInfo.append(templateCode);				errorInfo.append("已被删除");				fail = true;			}		} catch (Exception ex) {			errorInfo.append(": ");			errorInfo.append(templateCode);			stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));			fail = true;		}		errorInfo.append("的模板项删除失败！");		if (fail) {			BusinessException be = new BusinessException(errorInfo.toString());			be.setStackTraceMessage(stackTraceMessage.toString());			throw be;		}	}	public List getZcEbFormulaTemplateList(ElementConditionDto dto,			RequestMeta meta) {		return zcEbFormulaTemplateService.getZcEbFormulaTemplateList(dto);	}	public ZcEbFormulaTemplate getZcEbFormulaTemplate(String templatCode,			RequestMeta meta) {		return zcEbFormulaTemplateService.getZcEbFormulaTemplate(templatCode);	}	public List getZcEbFormulaTemplateItemList(Map map,			ElementConditionDto dto, RequestMeta meta) {		return zcEbFormulaTemplateService.getZcEbFormulaTemplateItemList(map,				dto);	}	public List getZcEbFormulaTemplateItemByPcode(String templateCode,			String pcode, RequestMeta meta) {		return zcEbFormulaTemplateService.getZcEbFormulaTemplateItemByPcode(				templateCode, pcode, meta);	}	public List getTemplateParamList(String templateCode, RequestMeta meta) {		return zcEbFormulaTemplateService.getTemplateParamList(templateCode);	}	public ZcEbFormulaTemplateItem getZcEbFormulaTemplateItem(String itemCode,			RequestMeta meta) {		return zcEbFormulaTemplateService.getZcEbFormulaTemplateItem(itemCode);	}	public ZcEbFormulaTemplateItem updateZcEbFormulaTemplateItem(			ZcEbFormulaTemplateItem zcEbFormulaTemplateItem, RequestMeta meta) {		return zcEbFormulaTemplateService				.updateZcEbFormulaTemplateItem(zcEbFormulaTemplateItem);	}	public ZcEbFormulaTemplate insertZcEbFormulaTemplate(			ZcEbFormulaTemplate zcEbFormulaTemplate, RequestMeta meta) {		Date createDate = new Date();		zcEbFormulaTemplate.setExecuteDate(createDate);		String templateCode = NumUtil.getInstance().getNo(				"ZC_EB_FORMULA_TEMPLATE", "TEMPLATE_CODE", zcEbFormulaTemplate);		zcEbFormulaTemplate.setTemplateCode(templateCode);		zcEbFormulaTemplate.setCreator(meta.getSvUserName());		zcEbFormulaTemplate.setNd(new Integer(meta.getSvNd()));		return zcEbFormulaTemplateService				.insertZcEbFormulaTemplate(zcEbFormulaTemplate);	}	public ZcEbFormulaTemplateItem insertZcEbFormulaTemplateItem(			ZcEbFormulaTemplateItem zcEbFormulaTemplateItem, RequestMeta meta) {		return zcEbFormulaTemplateService				.insertZcEbFormulaTemplateItem(zcEbFormulaTemplateItem);	}	public ZcEbFormulaTemplate updateZcEbFormulaTemplate(			ZcEbFormulaTemplate zcEbFormulaTemplate, RequestMeta meta) {		return zcEbFormulaTemplateService				.updateZcEbFormulaTemplate(zcEbFormulaTemplate);	}	public int isExistsByItemName(String formulaCode, String itemName,			String itemCode, RequestMeta meta) {		return zcEbFormulaTemplateService.isExistsByItemName(formulaCode,				itemName, itemCode);	}	public void saveZcEbFormulaTemplateParam(List params, String templateCode,			RequestMeta meta) {		zcEbFormulaTemplateService.saveZcEbFormulaTemplateParam(params,				templateCode);	}}