package com.ufgov.zc.server.zc.dao.ibatis;import java.sql.SQLException;import java.util.List;import java.util.Map;import org.springframework.orm.ibatis.SqlMapClientCallback;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;import com.ibatis.sqlmap.client.SqlMapExecutor;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.ZcEbBidCondition;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbPackQua;import com.ufgov.zc.common.zc.model.ZcEbPackReq;import com.ufgov.zc.common.zc.model.ZcEbPackReqDetail;import com.ufgov.zc.common.zc.model.ZcEbPackSupplier;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcEbProjZbFile;import com.ufgov.zc.common.zc.model.ZcEbRequirementDetail;import com.ufgov.zc.common.zc.model.ZcEbXunJia;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.zc.dao.IZcEbProjDao;public class ZcEbProjDao extends SqlMapClientDaoSupport implements IZcEbProjDao {  public List getZcEbProj(ElementConditionDto dto, RequestMeta meta) {    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getWfcompoId(), NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList("ZcEbProj.getZcEbProj", dto);  }  public List getZcEbPackListByProjCode(String projCode) {    return this.getSqlMapClientTemplate().queryForList("ZcEbProj.getZcEbPackListByProjCode", projCode);  }  public List getZcEbPackReqListByProjCode(String projCode) {    return this.getSqlMapClientTemplate().queryForList("ZcEbProj.getZcEbPackReqListByProjCode", projCode);  }  public void deleteZcEbPackByProjCode(String projCode) {    this.getSqlMapClientTemplate().delete("ZcEbProj.deleteZcEbPackByProjCode", projCode);    this.deleteZcEbXunJiaByProjCode(projCode);    this.deleteBidConditionByProjCode(projCode);    this.getSqlMapClientTemplate().delete("ZcEbRequirement.removePackQuaByProjcode", projCode);  }  public void deleteProjFileByProjCode(String projCode) {    this.getSqlMapClientTemplate().delete("ZcEbProjZbFile.deleteZcEbProjFileByProjCode", projCode);  }  public void deleteZcEbPackReqByProjCode(String projCode) {    this.getSqlMapClientTemplate().delete("ZcEbProj.deleteZcEbPackReqByProjCode", projCode);  }  public ZcEbProj getOriginZcEbProjByProjId(String projCode) {    return (ZcEbProj) this.getSqlMapClientTemplate().queryForObject("ZcEbProj.getOriginalZcEbProjByProjCode", projCode);  }  public void insertZcEbPackInfo(final ZcEbProj proj) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        List packList = proj.getPackList();        executor.delete("ZcEbProj.deleteZcEbPackByProjCode", proj.getProjCode());//        executor.delete("ZcEbProj.deleteZcEbPackSupplierByProjCode", proj.getProjCode());        executor.delete("ZcEbXunJia.deleteXunJiaByProjCode", proj.getProjCode());//        executor.delete("ZcEbRequirement.removePackQuaByProjcode", proj.getProjCode());        ZcEbPack pack;        for (int i = 0; i < packList.size(); i++) {          pack = (ZcEbPack) packList.get(i);          pack.setProjCode(proj.getProjCode());          executor.insert("ZcEbProj.insertZcEbPack", pack);          List packReqList = pack.getRequirementDetailList();// 存在一个标段有多个标段需求明细          for (int j = 0; j < packReqList.size(); j++) {            ZcEbPackReq packReq = (ZcEbPackReq) packReqList.get(j);            packReq.setProjCode(proj.getProjCode());            packReq.setPackCode(pack.getPackCode());            /**             *              * 删插操作 保存标段和分包明细对应关系表             */            executor.delete("ZcEbProj.deleteZcEbPackReqByPackReqCode", String.valueOf(packReq.getPackReqCode()));            executor.insert("ZcEbProj.insertZcEbPackReq", packReq);            /**             *              * 删除操作 保存分包明细             */            ZcEbRequirementDetail requdetail = packReq.getRequirementDetail();            if (requdetail != null && requdetail.getDetailCode() != null) {              executor.delete("ZcEbProj.deleteZcEbReqDetailByKey", String.valueOf(requdetail.getDetailCode()));              executor.insert("ZcEbProj.insertZcEbReqDetail", requdetail);            }          }       /*   List supplierList = pack.getSupplierList();          for (int m = 0; m < supplierList.size(); m++) {            ZcEbPackSupplier sup = (ZcEbPackSupplier) supplierList.get(m);            sup.setProjCode(proj.getProjCode());            sup.setProviderCode(sup.getZcEbSupplier().getCode());            executor.insert("ZcEbProj.insertZcEbPackSupplier", sup);          }*/          List bidConLst = pack.getBidConditions();          for (int k = 0; k < bidConLst.size(); k++) {            ZcEbBidCondition con = (ZcEbBidCondition) pack.getBidConditions().get(k);            con.setProjCode(proj.getProjCode());            executor.insert("ZcEbProj.insertBidCondition", con);          }          // 询价          if (ZcSettingConstants.PITEM_OPIWAY_XJ.equals(pack.getPurType())) {            for (int j = 0; j < packReqList.size(); j++) {              ZcEbPackReq packReq = (ZcEbPackReq) packReqList.get(j);              ZcEbRequirementDetail requdetail = packReq.getRequirementDetail();              ZcEbXunJia xj = new ZcEbXunJia();              xj.setXjCode(requdetail.getDetailCode().toString());              xj.setProjCode(proj.getProjCode());              xj.setPackCode(pack.getPackCode());              xj.setSpBrand(requdetail.getSpBrand());              xj.setSpName(requdetail.getName());              xj.setSpTech(requdetail.getBaseReq());              xj.setSpTechFileName(requdetail.getItemAttach());              xj.setSpTechFileId(requdetail.getItemAttachBlobid());              xj.setSpNum(requdetail.getNum() == null ? 0 : requdetail.getNum().intValue());              xj.setUnit(requdetail.getSpUnit());              xj.setGongHuoDate(requdetail.getArrDate());              executor.insert("ZcEbXunJia.insertXunJia", xj);            }          }        /*  List packQua = pack.getPackQua();          for (int j = 0; j < packQua.size(); j++) {            ZcEbPackQua qua = (ZcEbPackQua) packQua.get(j);            qua.setProjCode(proj.getProjCode());            executor.insert("ZcEbRequirement.addPackQua", qua);          }*/        }        executor.executeBatch();        return null;      }    });  }  public void insertZcEbProj(ZcEbProj proj) {    this.getSqlMapClientTemplate().insert("ZcEbProj.insertZcEbProj", proj);  }  public void updateZcEbProj(ZcEbProj proj) {    this.getSqlMapClientTemplate().update("ZcEbProj.updateZcEbProj", proj);  }  public void deleteZcEbProjByProjCode(String projCode) {    this.getSqlMapClientTemplate().delete("ZcEbProj.deleteZcEbProjByProjCode", projCode);  }  public void upZcEbPack(ZcEbPack pack) {    this.getSqlMapClientTemplate().update("ZcEbProj.updateZcEbPack", pack);  }  public List getBidConditions(String projCode) {    return this.getSqlMapClientTemplate().queryForList("ZcEbProj.getBidConditions", projCode);  }  public void deleteBidConditionByProjCode(String projCode) {    this.getSqlMapClientTemplate().delete("ZcEbProj.deleteBidConditionByProjCode", projCode);  }  public List getXunJia(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbXunJia.getXunJia", dto);  }  public void deleteZcEbXunJia(final ZcEbProj proj) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < proj.getPackList().size(); i++) {          ZcEbPack pack = (ZcEbPack) proj.getPackList().get(i);          ElementConditionDto dto = new ElementConditionDto();          dto.setZcText0(proj.getProjCode());          dto.setZcText1(pack.getPackCode());          executor.delete("ZcEbXunJia.deleteXunJia", dto);        }        executor.executeBatch();        return null;      }    });  }  public void deleteZcEbXunJiaByProjCode(String projCode) {    this.getSqlMapClientTemplate().delete("ZcEbXunJia.deleteXunJiaByProjCode", projCode);  }  public List getBidConditions(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbProj.getBidConditions", dto);  }  public void insertZcEbProjFile(final ZcEbProj proj) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        List fileList = proj.getProjFileList();        ZcEbProjZbFile file;        for (int i = 0; i < fileList.size(); i++) {          file = (ZcEbProjZbFile) fileList.get(i);          file.setProjCode(proj.getProjCode());          executor.insert("ZcEbProjZbFile.insertZcEbProjFile", file);        }        executor.executeBatch();        return null;      }    });  }  public List getProjXunJia(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbProj.getProjXunJia", dto);  }  public ZcEbPack getZcEbPackByPackCode(String packCode) {    return (ZcEbPack) this.getSqlMapClientTemplate().queryForObject("ZcEbProj.getZcEbPackForPrintByPackCode", packCode);  }  public List getZcEbProjForDecoded(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbProj.getZcEbProjForDecoded", dto);  }  public ZcEbProj getZcEbProjByProjCode(Map para) {    return (ZcEbProj) this.getSqlMapClientTemplate().queryForObject("ZcEbProj.readByProjCode", para);  }  public Map getProjInfoWithView(String projCode) {    return (Map) this.getSqlMapClientTemplate().queryForObject("ZcEbProj.getProjInfoWithView", projCode);  }  public List getPackesInfoWithView(String projCode) {    return this.getSqlMapClientTemplate().queryForList("ZcEbProj.getPackesInfoWithView", projCode);  }  public List getProjListWithView(Map paras) {    return this.getSqlMapClientTemplate().queryForList("ZcEbProj.getProjListWithView", paras);  }  public Map getProjPackDetailsWithView(Map paras) {    return (Map) this.getSqlMapClientTemplate().queryForObject("ZcEbProj.getProjPackDetailsWithView", paras);  }  public List getProjPackReqDetailFileInfoWithView(Map paras) {    return (List) this.getSqlMapClientTemplate().queryForObject("ZcEbProj.getProjPackReqDetailFileInfoWithView", paras);  }  public String getZcEbXiebanPerson(String projCode) {    return (String) this.getSqlMapClientTemplate().queryForObject("ZcEbProj.getXiebanPerson", projCode);  }  public ZcEbPackReqDetail getZcEbPackReqDetailByKey(String detailCode) {    return (ZcEbPackReqDetail) this.getSqlMapClientTemplate().queryForObject("ZcEbProj.getZcEbPackReqDetailByKey", detailCode);  }  public List getZcEbSignupProj(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbProj.getZcEbProjBid", dto);  }  public List getZcEbPackSupListByProjCode(String projCode) {    return this.getSqlMapClientTemplate().queryForList("ZcEbProj.getZcEbPackSupListByProjCode", projCode);  }     public List getProjFileByProjCode(String projCode) {    // TODO Auto-generated method stub    return this.getSqlMapClientTemplate().queryForList("ZcEbProjZbFile.getZcEbProjFileByeProjCode", projCode);  }}