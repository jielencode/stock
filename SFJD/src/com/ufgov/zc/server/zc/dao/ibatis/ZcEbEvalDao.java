/**   * @(#) project: GK* @(#) file: ZcEbEvalDaoImpl.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.server.zc.dao.ibatis;import com.ibatis.sqlmap.client.SqlMapExecutor;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.UUID;import com.ufgov.zc.common.zc.model.EvalExpert;import com.ufgov.zc.common.zc.model.ZcEbCalWay;import com.ufgov.zc.common.zc.model.ZcEbEvalBidTeamMember;import com.ufgov.zc.common.zc.model.ZcEbEvalItemResult;import com.ufgov.zc.common.zc.model.ZcEbEvalPack;import com.ufgov.zc.common.zc.model.ZcEbEvalParam;import com.ufgov.zc.common.zc.model.ZcEbEvalReport;import com.ufgov.zc.common.zc.model.ZcEbFormula;import com.ufgov.zc.common.zc.model.ZcEbPackEvalResult;import com.ufgov.zc.server.zc.dao.IZcEbEvalDao;import java.math.BigDecimal;import java.sql.SQLException;import java.util.List;import java.util.Map;import org.apache.log4j.Logger;import org.springframework.orm.ibatis.SqlMapClientCallback;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;/*** @ClassName: ZcEbEvalDaoImpl* @Description: 评标模块取数接口ibatis实现类。* @date: 2010-4-21 下午03:44:09* @version: V1.0 * @since: 1.0* @author: tianly1* @modify: */public class ZcEbEvalDao extends SqlMapClientDaoSupport implements IZcEbEvalDao {  public List getZcEbEvalPackList(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbEval.getZcEbEvalPackList", dto);  }  private static final Logger log = Logger.getLogger(ZcEbEvalDao.class);  public List getZcEbEvalRecordList(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbEval.getZcEbEvalRecordList", dto);  }  public List getZcEbEvalReportList(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbEval.getZcEbEvalReportList", dto);  }  public List getZcEbEvalItemResultList(Map map) {    return this.getSqlMapClientTemplate().queryForList("ZcEbEval.getZcEbEvalItemResultList", map);  }  public List getZcEbEvalFormulaItemList(Map map) {    return this.getSqlMapClientTemplate().queryForList("ZcEbEval.getZcEbEvalFormulaItemList", map);  }  public ZcEbEvalItemResult getZcEbEvalItemResult(Map map) {    return (ZcEbEvalItemResult) this.getSqlMapClientTemplate().queryForObject("ZcEbEval.getZcEbEvalItemResult", map);  }  public void updateExpertEvalHuizongResult(final Map paramMap) {    this.getSqlMapClientTemplate().update("ZcEbEval.updateExpertEvalHuizongResult", paramMap);  }  public List getListEvalPackProvider(Map map) {    return this.getSqlMapClientTemplate().queryForList("ZcEbEval.getEvalPackProvider", map);  }  public List getZcEbEvalPackSumResult(Map map) {    return this.getSqlMapClientTemplate().queryForList("ZcEbEval.getZcEbEvalPackSumResult", map);  }  public List getEvalParamList(Map map) {    return this.getSqlMapClientTemplate().queryForList("ZcEbEval.getZcEbEvalParamList", map);  }  public List getEvalParamResultList(Map map) {    return this.getSqlMapClientTemplate().queryForList("ZcEbEval.getZcEbEvalResultParamList", map);  }  public void insertEvalParamResultList(final List list) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          ZcEbEvalParam result = (ZcEbEvalParam) list.get(i);          executor.delete("ZcEbEval.deleteZcEbEvalParam", result);          executor.insert("ZcEbEval.insertZcEbEvalParam", result);        }        executor.executeBatch();        return null;      }    });  }  public void updateEvalParamResultList(final List list) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          ZcEbEvalParam result = (ZcEbEvalParam) list.get(i);          executor.delete("ZcEbEval.deleteZcEbEvalParam", result);          executor.insert("ZcEbEval.insertZcEbEvalParam", result);        }        executor.executeBatch();        return null;      }    });  }  public List getZcEbExpertEvalResultList(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbEval.getZcEbExpertEvalResultList", dto);  }  public List getZcEbPackEvalList(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbPackResult.getZcEbPackEvalResultList", dto);  }  public void insertZcEbEvalReport(ZcEbEvalReport zcEbEvalReport) {    this.getSqlMapClientTemplate().insert("ZcEbEval.insertZcEbEvalReport", zcEbEvalReport);  }  public void updateZcEbEvalReport(ZcEbEvalReport zcEbEvaReport) {    this.getSqlMapClientTemplate().update("ZcEbEval.updateZcEbEvalReport", zcEbEvaReport);  }  public int deleteZcEbEvalReport(ZcEbEvalReport zcEbEvaReport) {    String reportCode = zcEbEvaReport.getReportCode();    return this.getSqlMapClientTemplate().delete("ZcEbEval.deleteZcEbEvalReport", reportCode);  }  public ZcEbEvalReport getZcEbEvalReport(String reportCode) {    return (ZcEbEvalReport) this.getSqlMapClientTemplate().queryForObject("ZcEbEval.getZcEbEvalReport", reportCode);  }  public EvalExpert getEvalExpertByToken(Map map) {    return (EvalExpert) this.getSqlMapClientTemplate().queryForObject("ZcEbEval.getEvalExpertByToken", map);  }  public String genExpertSumResult(Map map) {    map.put("rtnStr", "");    this.getSqlMapClientTemplate().queryForObject("ZcEbEval.genExpertSumResult", map);    return (String) map.get("rtnStr");  }  public List getExpertEvalPackResList(Map map) {    return getSqlMapClientTemplate().queryForList("ZcEbEval.getZcEbExpertEvalPackResultList", map);  }  public void insertParckFinalSumResult(ZcEbPackEvalResult result) {    this.getSqlMapClientTemplate().insert("ZcEbEval.insertZcEbPackEvalFinalSumResult", result);  }  public ZcEbCalWay getCalculatorWay(String calWayID) {    return (ZcEbCalWay) this.getSqlMapClientTemplate().queryForObject("ZcEbEval.getCalculatorClass", calWayID);  }  public int deleteZcEbPackSumRes(Map map) {    return this.getSqlMapClientTemplate().delete("ZcEbEval.deleteZcEbPackSumRes", map);  }  public ZcEbFormula getZcEbFormula(String formulaCode) {    return (ZcEbFormula) this.getSqlMapClientTemplate().queryForObject("ZcEbFormula.getZcEbFormula", formulaCode);  }  public void updateZcEbPackEvalFinalSumResult(final List list) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          ZcEbPackEvalResult result = (ZcEbPackEvalResult) list.get(i);          executor.update("ZcEbEval.updateZcEbPackEvalFinalSumResult", result);        }        executor.executeBatch();        return null;      }    });  }  public void deleteZcEbPackEvalFinalSumResult(Map map) {    this.getSqlMapClientTemplate().delete("ZcEbEval.deleteZcEbPackEvalFinalSumResult", map);  }  public ZcEbPackEvalResult getZcEbProviderPackEvalResult(Map map) {    return (ZcEbPackEvalResult) this.getSqlMapClientTemplate().queryForObject("ZcEbEval.getZcEbProviderPackEvalResult", map);  }  public BigDecimal getLowerItemValue(Map map) {    return (BigDecimal) this.getSqlMapClientTemplate().queryForObject("ZcEbEval.getZcEbProviderLowerPrice", map);  }  public boolean isExisParentResult(Map map) {    List list = getSqlMapClientTemplate().queryForList("ZcEbEval.getParentResult", map);    if (list.size() > 0) {      return true;    }    return false;  }  public List getZcEbEvalResult(Map map) {    return getSqlMapClientTemplate().queryForList("ZcEbEval.getParentResult", map);  }  public List getZcEbPackList(ElementConditionDto dto) {    return getSqlMapClientTemplate().queryForList("ZcEbEval.getZcEbPackList", dto);  }  public List getZcEbEvalFormulaItemReportList(Map map) {    return getSqlMapClientTemplate().queryForList("ZcEbEval.getZcEbEvalFormulaItemReportList", map);  }  public ZcEbEvalBidTeamMember getZcEbEvalMemer(ZcEbEvalPack evalPack) {    List list = getSqlMapClientTemplate().queryForList("ZcEbEvalBidTeam.getZcEbEvalMember", evalPack);    if (list.size() > 0) {      return (ZcEbEvalBidTeamMember) list.get(0);    } else {      return null;    }  }  public void insertEvalItemResultList(final List list) {    try {      if (list != null) {        this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {          public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {            executor.startBatch();            for (int i = 0; i < list.size(); i++) {              ZcEbEvalItemResult item = (ZcEbEvalItemResult) list.get(i);              item.setResultCode(UUID.randomUUID().toString());              executor.insert("ZcEbEval.insertZcEbEvalItemResult", list.get(i));            }            executor.executeBatch();            return null;          }        });      }    } catch (Exception e) {      if (log.isDebugEnabled()) {        e.printStackTrace();        log.debug("batchInsert error: id [" + "ZcEbEval.insertZcEbEvalItemResult" + "], parameterObject [" + list + "].  Cause: " + e.getMessage());      }    }  }}