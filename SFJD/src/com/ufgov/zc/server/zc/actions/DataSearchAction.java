package com.ufgov.zc.server.zc.actions;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.zc.model.ZcEbFormula;import com.ufgov.zc.common.zc.model.ZcEbProjZbFile;import com.ufgov.zc.common.zc.model.ZcEbReqFile;import com.ufgov.zc.common.zc.model.ZcZBFileTemplate;import com.ufgov.zc.server.system.SpringContext;import com.ufgov.zc.server.system.service.IAsFileService;import com.ufgov.zc.server.zc.service.IZcEbFormulaService;import com.ufgov.zc.server.zc.service.IZcEbProjService;import com.ufgov.zc.server.zc.service.IZcEbRequirementService;import com.ufgov.zc.server.zc.service.IZcEbSignupService;import com.ufgov.zc.server.zc.service.IZcEbZbFileService;public class DataSearchAction {  private Map parameterMap = new HashMap();  private Map returnMap = new HashMap();  private String functionDo;  private String operationName;  private IZcEbProjService zcEbProjService = null;  private IZcEbSignupService zcEbSignupService = null;  private IZcEbRequirementService zcEbRequirementService = null;  private IAsFileService asFileService = null;  private IZcEbZbFileService zcEbZbFileService = null;  private IZcEbFormulaService zcEbFormulaService = null;  public Map getParameterMap() {    return parameterMap;  }  public void setParameterMap(Map parameterMap) {    this.parameterMap = parameterMap;  }  public Map getReturnMap() {    return returnMap;  }  public void setReturnMap(Map returnMap) {    this.returnMap = returnMap;  }  public String getFunctionDo() {    return functionDo;  }  public void setFunctionDo(String functionDo) {    this.functionDo = functionDo;  }  public String getOperationName() {    return operationName;  }  public void setOperationName(String operationName) {    this.operationName = operationName;  }  public DataSearchAction(Map paras, String functionDo) {    setParameterMap(paras);    setOperationName((String) paras.get("OPERATIONNAME"));    setFunctionDo(functionDo);  }  public void start() {    initService();    if ("searchprojbyprojcode".equals(this.getOperationName())) {//只需要projcode一个参数      doExecuteProjInfoWithView();    } else if ("searchpackesbyprojcode".equals(this.getOperationName())) {//只需要projcode一个参数      doExecutePackesInfoWithView();    } else if ("searchprojlistshouldzbf".equals(this.getOperationName())) {//只需一个projstatus参数      doExecuteProjListWithView();    } else if ("searchsignupprojlist".equals(this.getOperationName())) {//无需参数      doExecuteSignupProjListForToubiao();    } else if ("searchecbjprojlist".equals(this.getOperationName())) {//暂无需参数      doExecutorEcbjProjListForQuotation();    } else if ("searchprojdetailforfillmold".equals(this.getOperationName())) {//需要projcode和packcode参数      doExecuteProjPackDetailsWithView();    } else if ("searchprojpackrequiredetails".equals(this.getOperationName())) {//根据projcode和packcode查询需求明细      doExecuteProjPackReqDetailSearching();    } else if ("uploadzbfile".equals(this.getOperationName())) {//需要projcode和packcode参数      doExecuteZBFileUpload();    } else if ("readfilecontentfromasfile".equals(this.getOperationName())) {      doExecuteAsFileSearching();    } else if ("uploadtplfile".equals(this.getOperationName())) {      doExecuteTplFileUpload();    } else if ("searchtemplateisexist".equals(this.getOperationName())) {      doExecuteTplExistCheck();    } else if ("deletetemplatefile".equals(this.getOperationName())) {      doExecuteTplDeleting();    } else if ("searchtemplatelistbyway".equals(this.getOperationName())) {      doExecuteTplListSearching();    } else if ("searchformuladescbyprojpackcode".equals(this.getOperationName())) {      doExecuteFormulaDescByProjPackCodeSearching();    } else if ("tosearchzbfilebyprojcode".equals(this.getOperationName())) {      doExecuteZBFileSearching();    } else if ("totestlink".equals(this.getOperationName())) {      doExecuteLinkTesting();    } else if ("tosearchprojinfobyuserid".equals(this.getOperationName())) {      doExecuteProjInfoSearchingByUserID();    } else if ("getReqFileFromZcEbReqFile".equals(this.getOperationName())) {      doExecuteGetReqFileFromZcEbReqFile();    }    else {      this.returnMap.put("SEARCHRESULT", "fail");      this.returnMap.put("FAILREASON", "服务器端没有相应的功能类，请检查服务器GB.war包的版本...");    }  }  private void doExecuteGetReqFileFromZcEbReqFile() {    System.out.println("doExecuteGetReqFileFromZcEbReqFile()-------");    System.out.println(this.getParameterMap());    String entrustCode = (String) this.getParameterMap().get("ENTRUSTCODE");    if (entrustCode == null || "".equals(entrustCode)) {      this.returnMap.put("SEARCHREASULT", "noexist");      this.returnMap.put("FAILREASON", "缺少必要的参数entrustCode!");      return;    }    ZcEbReqFile zcEbReqFile = zcEbRequirementService.getZcEReqFileByEntrustCode(entrustCode);    if (zcEbReqFile == null) {      this.returnMap.put("SEARCHREASULT", "noexist");      this.returnMap.put("FAILREASON", "服务器端不存在项目编号为[" + entrustCode + "]的需求文件.");    } else {      this.returnMap.put("SEARCHREASULT", "exist");      this.returnMap.put("ZCEBREQFILE", zcEbReqFile);      this.returnMap.put("FAILREASON", "");    }  }  private void doExecuteProjInfoSearchingByUserID() {    String userID = (String) this.getParameterMap().get("USERID");    if (userID == null || "".equals(userID)) {      this.returnMap.put("SEARCHREASULT", "noexist");      this.returnMap.put("FAILREASON", "缺少必要的参数USERID!");      return;    }    Map result = zcEbSignupService.getSignupProjList(userID);    if (result == null) {      result = new HashMap();    }    this.returnMap.putAll(result);  }  private void doExecuteLinkTesting() {    this.returnMap.put("RESULT", "OK");  }  /**   * 根据项目编号查询服务器端招标书   */  private void doExecuteZBFileSearching() {    System.out.println("tosearchzbfilebyprojcode()-------");    String projCode = (String) this.getParameterMap().get("PROJCODE");    if (projCode == null || "".equals(projCode)) {      this.returnMap.put("SEARCHREASULT", "noexist");      this.returnMap.put("FAILREASON", "缺少必要的参数PROJCODE!");      return;    }    ZcEbProjZbFile pjZbFile = this.zcEbZbFileService.getZcebZbFileByProjCode(projCode, null);    if (pjZbFile == null) {      this.returnMap.put("SEARCHREASULT", "noexist");      this.returnMap.put("FAILREASON", "服务器端不存在项目编号为[" + projCode + "]的招标文件.");    } else {      this.returnMap.put("SEARCHREASULT", "exist");      this.returnMap.put("ZCEBPROJZBFILE", pjZbFile);      this.returnMap.put("FAILREASON", "");    }  }  /**   * 根据项目编号查询项目信息   */  private void doExecuteProjInfoWithView() {    System.out.println("doExecuteProjInfoWithView()-------");    String projCode = (String) this.getParameterMap().get("PROJCODE");    if (projCode == null || "".equals(projCode)) {      this.returnMap.put("SEARCHREASULT", "noexist");      this.returnMap.put("FAILREASON", "缺少必要的参数PROJCODE!");      return;    }    Map map = this.zcEbProjService.getProjInfoWithView(projCode);    if (map == null) {      map = new HashMap();      this.returnMap.put("SEARCHREASULT", "noexist");      this.returnMap.put("FAILREASON", "服务器端没有找到编号为【" + projCode + "】项目及相关的执行计划的信息！");    }    System.out.println("根据项目[" + projCode + "]编号查询结果：" + map.size());    this.returnMap.put("RESULTMAP", map);  }  /**   * 根据项目编号查询项目下的标段   */  private void doExecutePackesInfoWithView() {    System.out.println("doExecutePackesInfoWithView()-------");    String projCode = (String) this.getParameterMap().get("PROJCODE");    if (projCode == null || "".equals(projCode)) {      this.returnMap.put("SEARCHREASULT", "noexist");      this.returnMap.put("FAILREASON", "缺少必要的参数PROJCODE!");      return;    }    List list = this.zcEbProjService.getPackesInfoWithView(projCode);    this.returnMap.put("RESULTMAPLIST", list);  }  /**   * 查询所有待做标书的项目   */  private void doExecuteProjListWithView() {    System.out.println("doExecuteProjListWithView()-------");    List list = this.zcEbProjService.getProjListWithView(this.getParameterMap());    this.returnMap.put("RESULTMAPLIST", list);  }  /**   * 查询可投标的已报名项目   */  private void doExecuteSignupProjListForToubiao() {    System.out.println("doExecuteSignupProjListForToubiao()-------");    List list = this.zcEbSignupService.getSignupProjListForToubiao(this.getParameterMap());    this.returnMap.put("RESULTMAPLIST", list);  }  /**   * 查询可二次报价项目   */  private void doExecutorEcbjProjListForQuotation() {    System.out.println("doExecutorEcbjProjListForQuotation()-------");    List list = this.zcEbSignupService.getEcbjProjListForQuotation(this.getParameterMap());    this.returnMap.put("RESULTMAPLIST", list);  }  /**   * 查询项目/标段详细信息   */  private void doExecuteProjPackDetailsWithView() {    System.out.println("doExecuteProjPackDetailsWithView()-------");    Map data = this.zcEbProjService.getProjPackDetailsWithView(this.getParameterMap());    if (data == null) {      data = new HashMap();      String projCode = (String) this.getParameterMap().get("PROJCODE");      String packCode = (String) this.getParameterMap().get("PACKCODE");      this.returnMap.put("SEARCHREASULT", "noexist");      this.returnMap.put("FAILREASON", "服务器端没有找到编号为【PROJCODE=" + projCode + "和PACKCODE=" + packCode + "】项目的信息！");    }    System.out.println("查询项目/标段的详细信息[projcode:" + this.getParameterMap().get("PROJCODE") + ",packcode:" + this.getParameterMap().get("PACKCODE")    + "]结果：" + data.size());    this.returnMap.put("RESULTMAP", data);  }  /**   * 上传招标文件   */  private void doExecuteZBFileUpload() {    System.out.println("doExecuteZBFileUpload()-------");    String fileID = null;    String wordFileId = null;    String projCode = (String) this.getParameterMap().get("PROJCODE");    String projName = (String) this.getParameterMap().get("PROJNAME");    String fileName = projCode + ".ztb";    String fileType = (String) this.getParameterMap().get("FILETYPE");    String managerCode = (String) this.getParameterMap().get("MANAGERCODE");    String managerName = (String) this.getParameterMap().get("MANAGERNAME");    Integer flowingNO = (Integer) this.getParameterMap().get("FLOWINGNO");    byte[] fileContent = (byte[]) this.getParameterMap().get("FILECONTENT");    byte[] wordFileContent = (byte[]) this.getParameterMap().get("WORDFILECONTENT");    String optFlag = "update";    ZcEbProjZbFile projZBFile = this.zcEbZbFileService.getZcebZbFileByProjCode(projCode, null);    if (projZBFile == null) {      fileID = Guid.genID();      if (wordFileContent != null) {        wordFileId = Guid.genID();      }      optFlag = "insert";      projZBFile = new ZcEbProjZbFile();    } else {      if (projZBFile.getStatus() != null && !"".equals(projZBFile.getStatus()) && !"0".equals(projZBFile.getStatus())) {        this.returnMap.put("UPDATESTATUS", "fail");        this.returnMap.put("FAILREASON", "该项目的招标书已经进入审批流程，不能覆盖！");        return;      }      fileID = projZBFile.getFileId();      wordFileId = projZBFile.getWordFileId();    }    try {      //上传压缩文件      AsFile asFile = new AsFile();      asFile.setFileId(fileID);      asFile.setFileName(fileName);      asFile.setFileContent(fileContent);      asFile.setMimeType(fileType);      //word版的招标文件      if (wordFileContent != null) {        AsFile wordFile = new AsFile();        wordFile.setFileId(wordFileId);        wordFile.setFileName("招标文件" + "(" + projCode + ")" + ".doc");        wordFile.setFileContent(wordFileContent);        this.asFileService.uploadFile(wordFile);      }      this.asFileService.uploadFile(asFile);    } catch (Exception e) {      e.printStackTrace();      this.returnMap.put("UPDATESTATUS", "fail");      this.returnMap.put("FAILREASON", "招标文件保存失败！\n" + e.getMessage());      return;    }    projZBFile.setFileId(fileID);    projZBFile.setWordFileId(wordFileId);    projZBFile.setUploadTime(new Date());    projZBFile.setProjCode(projCode);    projZBFile.setCreator(managerName);    projZBFile.setProjName(projName);    projZBFile.setUploader(managerCode);    projZBFile.setFileName(fileName);    projZBFile.setFlowingNO(flowingNO);    String data = null;    try {      System.out.println(projZBFile.getWordFileId());      data = this.zcEbZbFileService.insertOrUpdateZcEbProjZBFile(projZBFile, optFlag);      System.out.println("上传招标书[projcode:" + this.getParameterMap().get("PROJCODE") + "]结果：" + data);      this.returnMap.put("UPDATESTATUS", "success");    } catch (Exception e) {      e.printStackTrace();      this.returnMap.put("UPDATESTATUS", "fail");      this.returnMap.put("FAILREASON", "招标文件保存失败！\n" + e.getMessage());      return;    }  }  /**   * 查询项目标段需求明细   */  private void doExecuteProjPackReqDetailSearching() {    System.out.println("doExecuteProjPackReqDetailSearching()-------");    List list = null;    try {      list = this.zcEbProjService.getProjPackReqDetailFileInfoWithView(parameterMap);      this.returnMap.put("RESULTMAPLIST", list);    } catch (Exception e) {      e.printStackTrace();      this.returnMap.put("SEARCHREASULT", "fail");      this.returnMap.put("FAILREASON", "数据查询失败！\n" + e.getMessage());      return;    }  }  /**   * 根据fileID查询asFile   */  private void doExecuteAsFileSearching() {    System.out.println("doExecuteReqDetailWordSearching()-------");    String fileID = (String) this.getParameterMap().get("FILEID");    if (fileID == null || "".equals(fileID)) {      this.returnMap.put("SEARCHREASULT", "fail");      this.returnMap.put("FAILREASON", "没有传入key为fileid的参数...");      return;    }    AsFile asFile = this.asFileService.getAsFileById(fileID);    if (asFile == null) {      this.returnMap.put("SEARCHREASULT", "fail");      this.returnMap.put("FAILREASON", "在AS_FILE表中没有找到对应的明细文件...");      return;    } else {      this.returnMap.put("SEARCHREASULT", "success");      this.returnMap.put("FILECONTENT", asFile.getFileContent());      this.returnMap.put("FILENAME", asFile.getFileName());    }  }  /**   * 查询标书模板   */  private void doExecuteTplFileUpload() {    System.out.println("doExecuteTplFileUpload()-------");    byte[] fileContent = (byte[]) this.parameterMap.get("FILECONTENT");    String fileName = (String) this.parameterMap.get("FILENAME");    String fileID = (String) this.parameterMap.get("FILEID");    String fileType = (String) this.parameterMap.get("FILETYPE");    AsFile asFile = new AsFile();    asFile.setFileContent(fileContent);    asFile.setFileId(fileID);    asFile.setFileName(fileName);    asFile.setMimeType(fileType);    try {      this.asFileService.uploadFile(asFile);    } catch (Exception e) {      e.printStackTrace();      this.returnMap.put("UPLOADSTATUS", "fail");      this.returnMap.put("FAILREASON", "模板文件保存失败！\n" + e.getMessage());      return;    }    String tplID = (String) this.getParameterMap().get("TEMPLATE_ID");    String tplNO = (String) this.getParameterMap().get("TPLNO");    String tplType = (String) this.getParameterMap().get("TPLAPPTYPE");    String tplWay = (String) this.getParameterMap().get("TPLBELONGBIDWAY");    String projName = (String) this.getParameterMap().get("PROJNAME");    String fileID2 = (String) this.getParameterMap().get("FILEID");    String projNO = (String) this.getParameterMap().get("PROJNO");    String desc = (String) this.getParameterMap().get("DESCRIPTION");    String lastestUsed = (String) this.getParameterMap().get("LASTESTUSED");    ZcZBFileTemplate tpl = new ZcZBFileTemplate();    tpl.setFileId(fileID2);    tpl.setDescription(desc);    tpl.setProjName(projName);    tpl.setProjNo(projNO);    tpl.setTemplateID(tplID);    tpl.setTplNo(tplNO);    tpl.setTplAppType(tplType);    tpl.setTplBelongBidWay(tplWay);    SimpleDateFormat sdf = new SimpleDateFormat(ZcSettingConstants.SIMPLE_DATE_FORMAT_DATE_ONLY);    try {      if (lastestUsed == null || "".equals(lastestUsed)) {        tpl.setLatestUsed(new Date());      } else {        tpl.setLatestUsed(sdf.parse(lastestUsed));      }    } catch (Exception e) {    }    String opt = null;    try {      opt = this.zcEbZbFileService.insertOrUpdateZcZBFileTemplate(tpl, "insert");      this.returnMap.put("UPLOADSTATUS", "success");      if ("update".equals(opt)) {        this.returnMap.put("UPLOADRESULT", "模板信息更新成功！");      } else {        this.returnMap.put("UPLOADRESULT", "模板信息插入成功！");      }    } catch (Exception e) {      e.printStackTrace();      this.returnMap.put("UPLOADSTATUS", "fail");      this.returnMap.put("FAILREASON", "模板信息保存失败！\n" + e.getMessage());    }  }  /**   * 根据tplNo检查模板是否存在   */  private void doExecuteTplExistCheck() {    System.out.println("doExecuteTplExistCheck()-------");    ZcZBFileTemplate tpl = new ZcZBFileTemplate();    tpl.setTplNo((String) this.getParameterMap().get("TPLNO"));    List list = zcEbZbFileService.queryTplFileList(tpl);    if (list.size() == 0) {      this.returnMap.put("SEARCHREASULT", "N");    } else {      this.returnMap.put("SEARCHREASULT", "Y");    }  }  /**   * 删除模板   */  private void doExecuteTplDeleting() {    System.out.println("doExecuteTplDeleting()-------");    ZcZBFileTemplate tpl = new ZcZBFileTemplate();    tpl.setTemplateID((String) this.getParameterMap().get("TEMPLATEID"));    try {      this.zcEbZbFileService.deleteZbFileTemplate(tpl);      this.returnMap.put("UPDATESTATUS", "success");    } catch (Exception e) {      e.printStackTrace();      this.returnMap.put("UPDATESTATUS", "fail" + e.getMessage());    }  }  /**   * 查询模板列表   */  private void doExecuteTplListSearching() {    System.out.println("doExecuteTplListSearching()-------");    ZcZBFileTemplate tpl = new ZcZBFileTemplate();    tpl.setTplBelongBidWay((String) this.getParameterMap().get("TPLBELONGBIDWAY"));    try {      List list = zcEbZbFileService.queryTplFileList(tpl);      this.returnMap.put("SEARCHREASULT", "success");      this.returnMap.put("RESULTLIST", list);    } catch (Exception e) {      this.returnMap.put("SEARCHREASULT", "success");      this.returnMap.put("FAILREASON", "查询模板列表出错,原因：\n" + e.getMessage());    }  }  private void doExecuteFormulaDescByProjPackCodeSearching() {    System.out.println("doExecuteFormulaDescByProjPackCodeSearching()-------");    String projCode = (String) this.getParameterMap().get("PROJCODE");    String packCode = (String) this.getParameterMap().get("PACKCODE");    ElementConditionDto dto = new ElementConditionDto();    dto.setStatus("pp");    dto.setProjCode(projCode);    dto.setPackCode(packCode);    try {      List list = zcEbFormulaService.getZcEbFormulaListWithoutDetail(dto);      if (list.size() > 0) {        this.returnMap.put("SEARCHREASULT", "success");        this.returnMap.put("FORMULADESC", ((ZcEbFormula) list.get(0)).getFormulaDescription());      }    } catch (Exception e) {      this.returnMap.put("SEARCHREASULT", "fail");      this.returnMap.put("FAILREASON", "查询评标规则出错,原因：\n" + e.getMessage());    }  }  private void initService() {    if (zcEbProjService == null) {      zcEbProjService = (IZcEbProjService) SpringContext.getBean("zcEbProjService");    }    if (zcEbSignupService == null) {      zcEbSignupService = (IZcEbSignupService) SpringContext.getBean("zcEbSignupService");    }    if (asFileService == null) {      asFileService = (IAsFileService) SpringContext.getBean("asFileService");    }    if (zcEbZbFileService == null) {      zcEbZbFileService = (IZcEbZbFileService) SpringContext.getBean("zcEbZbFileService");    }    if (zcEbFormulaService == null) {      zcEbFormulaService = (IZcEbFormulaService) SpringContext.getBean("zcEbFormulaService");    }    if (zcEbRequirementService == null) {      zcEbRequirementService = (IZcEbRequirementService) SpringContext.getBean("zcEbRequirementService");    }  }}