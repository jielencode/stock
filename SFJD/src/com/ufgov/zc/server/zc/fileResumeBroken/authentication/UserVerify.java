package com.ufgov.zc.server.zc.fileResumeBroken.authentication;import java.util.List;import com.ufgov.zc.common.console.model.AsEmp;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.User;import com.ufgov.zc.common.zc.model.ZcEbSupplier;import com.ufgov.zc.server.console.service.IAsEmpService;import com.ufgov.zc.server.system.SpringContext;import com.ufgov.zc.server.system.service.IUserService;import com.ufgov.zc.server.zc.service.IZcEbSupplierService;import com.ufgov.zc.server.zc.util.GeneralFunc;public class UserVerify {  private String userId;  private String userName;  private String password;  private boolean ifPass;  private String providerId;  private String providerName;  private String verifyId;  private String userType;  private IAsEmpService asEmpService;  private String failReason;  public String getFailReason() {    return failReason;  }  public void setFailReason(String failReason) {    this.failReason = failReason;  }  public String getVerifyId() {    return verifyId;  }  public void setVerifyId(String verifyId) {    this.verifyId = verifyId;  }  private IZcEbSupplierService zcEbSupplierSerivce;  public String getProviderName() {    return providerName;  }  public void setProviderName(String providerName) {    this.providerName = providerName;  }  public String getProviderId() {    return providerId;  }  public void setProviderId(String providerId) {    this.providerId = providerId;  }  private IUserService userService;  public boolean isIfPass() {    return ifPass;  }  public void setIfPass(boolean ifPass) {    this.ifPass = ifPass;  }  public String getUserId() {    return userId;  }  public void setUserId(String userId) {    this.userId = userId;  }  public String getUserName() {    return userName;  }  public void setUserName(String userName) {    this.userName = userName;  }  public String getPassword() {    return password;  }  public void setPassword(String password) {    this.password = password;  }  public String getUserType() {    return userType;  }  public void setUserType(String userType) {    this.userType = userType;  }  public UserVerify(String userId, String password, String verifyId) {    setUserId(userId);    setPassword(password);    setVerifyId(verifyId);  }  public void startVerify() {    System.out.println("开始执行具体的身份校验..." + verifyId);    if (verifyId.equals("NOID")) {      userService = (IUserService) SpringContext.getBean("userService");      System.out.println("userid="+userId);      User user = userService.getUserById(userId);      //供应的加解密分两次解密：第一次解密传输过程的密文，第二次对解密后的密码进行加密和数据库中的密文比较      if (user != null) {        if (user.getPassword() != null) {          //服务器上用户的密码存放的是密文，先要进行解密          String str = GeneralFunc.recodePwd(password);          String miwen = GeneralFunc.encodePwd(str);          if (miwen.equals(user.getPassword())) {            setIfPass(true);          } else {            this.setFailReason("【" + userId + "】的用户密码不正确...");            setIfPass(false);          }        } else {          if ("".equals(password)) {            setIfPass(true);          } else {            this.setFailReason("【" + userId + "】的用户密码不正确...");            setIfPass(false);          }        }        this.setUserName(user.getUserName());      } else {        this.setFailReason("没有找到ID为【" + userId + "】的用户...");        setIfPass(false);      }      //查找供应商信息      if (isIfPass() && !"master".equals(userType)) {//"supplier".equals(userType)) {        zcEbSupplierSerivce = (IZcEbSupplierService) SpringContext.getBean("zcEbSupplierService");        ElementConditionDto dto = new ElementConditionDto();        dto.setExtField1(getUserId());        List list = zcEbSupplierSerivce.getZcEbSupplier(dto, null);        if (list != null && list.size() > 0) {          ZcEbSupplier zcEbSupplier = (ZcEbSupplier) list.get(0);          setProviderId(zcEbSupplier.getCode());          setProviderName(zcEbSupplier.getName());          setUserName(zcEbSupplier.getName());        } else {          this.setIfPass(false);          this.setFailReason("供应商" + getUserId() + "在供应商基础信息库中不存在，或者数据有误，请检查【登录名】是否一致...");        }      } else if (isIfPass() && "master".equals(userType)) {      } else {      }    } else {      System.out.println("身份校验依据为CA证书客服信任号...");      //增加代码 验证过程：根据验证码查询as_emp是否能得到一条记录；若存在，设置验证通过，根据emp_code查询供应商信息，不 存在，设置验证不通过；      asEmpService = (IAsEmpService) SpringContext.getBean("asEmpService");      ElementConditionDto dto = new ElementConditionDto();      dto.setExtField1(getVerifyId());      AsEmp asEmp = null;      try {        asEmp = asEmpService.getProviderInfoByCA(dto);      } catch (Exception e) {        e.printStackTrace();        if (e.getMessage().replaceAll(" ", "").indexOf("returnedtoomanyresults") != -1) {          this.setFailReason("根据CA_SERIAL查询到多个供应商，ca_sericl:" + getVerifyId());          setIfPass(false);          return;        } else {          this.setFailReason("根据CA_SERIAL查询供应商时出错，原因:" + e.getMessage());          setIfPass(false);          return;        }      }      if (asEmp != null) {        setIfPass(true);        setProviderId(asEmp.getEmpCode());        setProviderName(asEmp.getEmpName());        setUserId(asEmp.getUserId());        setUserName(asEmp.getEmpName());      } else {        this.setFailReason("根据CA_SERIAL查询供应商时，没有找到对应的用户，ca_sericl:[" + getVerifyId() + "]");        setIfPass(false);      }      System.out.println("------------从查询AS_EMP方法返回-----------");    }  }}