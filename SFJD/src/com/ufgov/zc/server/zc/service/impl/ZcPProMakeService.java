package com.ufgov.zc.server.zc.service.impl;import java.math.BigDecimal;import java.sql.SQLException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import org.apache.log4j.Logger;import com.ufgov.zc.common.commonbiz.model.Company;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.dto.MainSubBill;import com.ufgov.zc.common.system.dto.PrintObject;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.common.zc.exception.ZcBudgetInterfaceException;import com.ufgov.zc.common.zc.model.ApArticle;import com.ufgov.zc.common.zc.model.ApArticlePortlet;import com.ufgov.zc.common.zc.model.DataExchangeRedo;import com.ufgov.zc.common.zc.model.ZcBMerchandise;import com.ufgov.zc.common.zc.model.ZcEbAuditSheet;import com.ufgov.zc.common.zc.model.ZcEbEntrust;import com.ufgov.zc.common.zc.model.ZcEbSupplier;import com.ufgov.zc.common.zc.model.ZcPProBaoJia;import com.ufgov.zc.common.zc.model.ZcPProMake;import com.ufgov.zc.common.zc.model.ZcPProMakeShow;import com.ufgov.zc.common.zc.model.ZcPProMitem;import com.ufgov.zc.common.zc.model.ZcPProMitemBaoJia;import com.ufgov.zc.common.zc.model.ZcPProMitemBi;import com.ufgov.zc.common.zc.model.ZcPProMitemBiExample;import com.ufgov.zc.common.zc.model.ZcPProMitemExample;import com.ufgov.zc.common.zc.model.ZcPProMitemMer;import com.ufgov.zc.server.budget.dao.IVwBudgetGpDao;import com.ufgov.zc.server.budget.util.BudgetUtil;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.print.PrintManager;import com.ufgov.zc.server.system.util.AsOptionUtil;import com.ufgov.zc.server.system.util.NumUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.ZcSUtil;import com.ufgov.zc.server.zc.dao.IApArticleDao;import com.ufgov.zc.server.zc.dao.IBaseDao;import com.ufgov.zc.server.zc.dao.IDataExchangeDao;import com.ufgov.zc.server.zc.dao.IZcBCatalogueDao;import com.ufgov.zc.server.zc.dao.IZcBMerchandiseDao;import com.ufgov.zc.server.zc.dao.IZcEbEntrustDao;import com.ufgov.zc.server.zc.dao.IZcPProMakeDao;import com.ufgov.zc.server.zc.dao.IZcPProMitemBiDao;import com.ufgov.zc.server.zc.dao.IZcPProMitemDao;import com.ufgov.zc.server.zc.dao.IZcPProMitemMerDao;import com.ufgov.zc.server.zc.service.IZcEbBaseService;import com.ufgov.zc.server.zc.service.IZcPProMakeService;public class ZcPProMakeService implements IZcPProMakeService {  private IZcPProMakeDao zcPProMakeDao;  private IZcPProMitemDao zcPProMitemDao;  private IZcPProMitemBiDao zcPProMitemBiDao;  private WFEngineAdapter wfEngineAdapter;  private IZcEbEntrustDao zcEbEntrustDao;  private IDataExchangeDao dataExchangeDao;  private IBaseDao baseDao;  private IZcPProMitemMerDao zcPProMitemMerDao;  private IZcBMerchandiseDao zcBMerchandiseDao;  private IApArticleDao apArticleDao;  private IZcEbBaseService zcEbBaseServiceF3;  private IZcBCatalogueDao catalogueDao;  private IVwBudgetGpDao budgetGpDao;  public IVwBudgetGpDao getBudgetGpDao() {    return budgetGpDao;  }  public void setBudgetGpDao(IVwBudgetGpDao budgetGpDao) {    this.budgetGpDao = budgetGpDao;  }  public IApArticleDao getApArticleDao() {    return apArticleDao;  }  public void setApArticleDao(IApArticleDao apArticleDao) {    this.apArticleDao = apArticleDao;  }  public IZcPProMitemMerDao getZcPProMitemMerDao() {    return zcPProMitemMerDao;  }  public void setZcPProMitemMerDao(IZcPProMitemMerDao zcPProMitemMerDao) {    this.zcPProMitemMerDao = zcPProMitemMerDao;  }  public IBaseDao getBaseDao() {    return baseDao;  }  public void setBaseDao(IBaseDao baseDao) {    this.baseDao = baseDao;  }  public IDataExchangeDao getDataExchangeDao() {    return dataExchangeDao;  }  public void setDataExchangeDao(IDataExchangeDao dataExchangeDao) {    this.dataExchangeDao = dataExchangeDao;  }  public IZcEbEntrustDao getZcEbEntrustDao() {    return zcEbEntrustDao;  }  public void setZcEbEntrustDao(IZcEbEntrustDao zcEbEntrustDao) {    this.zcEbEntrustDao = zcEbEntrustDao;  }  private IWorkflowDao workflowDao;  public IZcPProMakeDao getZcPProMakeDao() {    return zcPProMakeDao;  }  public void setZcPProMakeDao(IZcPProMakeDao zcPProMakeDao) {    this.zcPProMakeDao = zcPProMakeDao;  }  /**   *    * @param zcPProMitemDao   *            the zcPProMitemDao to set   */  public void setZcPProMitemDao(IZcPProMitemDao zcPProMitemDao) {    this.zcPProMitemDao = zcPProMitemDao;  }  /**   *    * @return the zcPProMitemDao   */  public IZcPProMitemDao getZcPProMitemDao() {    return zcPProMitemDao;  }  /**   *    * @param zcPProMitemBiDao   *            the zcPProMitemBiDao to set   */  public void setZcPProMitemBiDao(IZcPProMitemBiDao zcPProMitemBiDao) {    this.zcPProMitemBiDao = zcPProMitemBiDao;  }  /**   *    * @return the zcPProMitemBiDao   */  public IZcPProMitemBiDao getZcPProMitemBiDao() {    return zcPProMitemBiDao;  }  public IZcBMerchandiseDao getZcBMerchandiseDao() {    return zcBMerchandiseDao;  }  public void setZcBMerchandiseDao(IZcBMerchandiseDao zcBMerchandiseDao) {    this.zcBMerchandiseDao = zcBMerchandiseDao;  }  public List getZcPProMake(ElementConditionDto dto, RequestMeta meta) throws SQLException {    List list = zcPProMakeDao.selectByExample(dto, meta);    ZcSUtil.setBillDBDigest(list);    return list;  }  public List getZcPProMakeXieYi(ElementConditionDto dto, RequestMeta meta) throws SQLException {    List list = zcPProMakeDao.selectByExampleXieYi(dto, meta);    ZcSUtil.setBillDBDigest(list);    return list;  }  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  public void setWorkflowDao(IWorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  public IWorkflowDao getWorkflowDao() {    return workflowDao;  }  public ZcPProMake updateZcPProMake(ZcPProMake zcPProMake, String serverAdd, boolean flag, RequestMeta requestMeta) throws Exception {    String code = "";    String temp_code = "";    BudgetUtil bu = new BudgetUtil();    List biList = zcPProMake.getBiList();    if (biList == null || biList.size() == 0)      throw new RuntimeException("资金构成不可为空");    List itemList = zcPProMake.getItemList();    if (itemList == null || itemList.size() == 0)      throw new RuntimeException("计划明细不可为空");    String userId = requestMeta.getSvUserID();    String compoId = requestMeta.getCompoId();    boolean isDraft = false;    if (zcPProMake.getProcessInstId() == null || zcPProMake.getProcessInstId().longValue() == -1) {      Long draftid = workflowDao.createDraftId();      zcPProMake.setProcessInstId(draftid);      isDraft = true;    }    Map map = null;    if ("".equals(ZcSUtil.safeString(zcPProMake.getZcMakeCode())) || zcPProMake.getZcMakeCode().equals("自动编号")) {      zcPProMake.setZcInputCode(userId);      zcPProMake.setZcInputDate(requestMeta.getSysDate());      // add by wangkewei start      // 当新建项目的时候，项目编码不进行正式编码，首先创建一个临时编码，等提交送审之后，进行正式编码      temp_code = NumUtil.getInstance().getNo("ZC_P_PRO_MAKE", "ZC_TEMP_MAKE_CODE", zcPProMake);      code = temp_code;      zcPProMake.setZcMakeCode(code);      zcPProMake.setZcTempMakeCode(temp_code);      // add by wangkewei end      zcPProMakeDao.insert(zcPProMake);      // 如果是协议供货项目，那么因为需要导出，所以需要插入导出数据记录      if (ZcPProMake.CAIGOU_TYPE_XIEYI.equals(zcPProMake.getZcFukuanType())) {        createExchangeDataForXieyiGonghuo(zcPProMake);      }      map = bu.getSaveBudgetByZcpproMake(zcPProMitemBiDao, baseDao, flag, code, biList);      for (int i = 0; i < biList.size(); i++) {        ZcPProMitemBi bi = (ZcPProMitemBi) biList.get(i);        bi.setZcMakeCode(code);        zcPProMitemBiDao.insert(bi);      }      insertMitem(itemList, code);      for (int i = 0; i < zcPProMake.getBaoJiaList().size(); i++) {        ZcPProMitemBaoJia bj = (ZcPProMitemBaoJia) zcPProMake.getBaoJiaList().get(i);        insertMitem(bj.getBaoJiaDetailList(), code);      }    } else {      code = zcPProMake.getZcMakeCode();      // ZcPProMake originalBean = this.selectByPrimaryKey(code);      //      // ZcSUtil.checkDigest(zcPProMake, originalBean,      // "zcMakeCode");//一致性校验      zcPProMakeDao.updateByPrimaryKey(zcPProMake);      zcPProMakeDao.updateAttrsByPrimaryKey(zcPProMake);      ZcPProMitemBiExample bi = new ZcPProMitemBiExample();      bi.createCriteria().andZcMakeCodeEqualTo(code);      ZcPProMitemExample item = new ZcPProMitemExample();      item.createCriteria().andZcMakeCodeEqualTo(code);      map = bu.getSaveBudgetByZcpproMake(zcPProMitemBiDao, baseDao, flag, code, biList);      zcPProMitemBiDao.deleteByExample(bi);      zcPProMitemDao.deleteByExample(item);      zcPProMitemMerDao.deleteJingJiaMerByKey(item);      for (int i = 0; i < biList.size(); i++) {        ZcPProMitemBi mbi = (ZcPProMitemBi) biList.get(i);        mbi.setZcMakeCode(code);        zcPProMitemBiDao.insert(mbi);      }      insertMitem(itemList, code);      for (int i = 0; i < zcPProMake.getBaoJiaList().size(); i++) {        ZcPProMitemBaoJia bj = (ZcPProMitemBaoJia) zcPProMake.getBaoJiaList().get(i);        insertMitem(bj.getBaoJiaDetailList(), code);      }      if (ZcPProMake.CAIGOU_TYPE_XIEYI_ECTP.equals(zcPProMake.getZcFukuanType()) && !"jingjiaycj".equals(zcPProMake.getZcMakeStatus())) {        createExchangeDataForJinjiaGonggao(zcPProMake);      }    }    if (isDraft) {      AsWfDraft asWfDraft = new AsWfDraft();      asWfDraft.setCompoId(compoId);      asWfDraft.setWfDraftName(zcPProMake.getZcMakeCode());      asWfDraft.setUserId(userId);      asWfDraft.setMasterTabId(compoId);      asWfDraft.setWfDraftId(BigDecimal.valueOf(zcPProMake.getProcessInstId().longValue()));      workflowDao.insertAsWfdraft(asWfDraft);    }    bu.callService(map, requestMeta.getSvNd());    return zcPProMake;  }  public ZcPProMake updateZcPProMakeCode(ZcPProMake zcPProMake, RequestMeta requestMeta) throws Exception {    String code = "";    if (ZcPProMake.CAIGOU_TYPE_XIANGMU.equals(zcPProMake.getZcFukuanType())) { // 项目采购      code = NumUtil.getInstance().getNo("ZC_P_PRO_MAKE", "ZC_MAKE_CODE", zcPProMake);    }    if (ZcPProMake.CAIGOU_TYPE_XIEYI.equals(zcPProMake.getZcFukuanType())) { // 协议供货      code = NumUtil.getInstance().getNo("ZC_P_PRO_MAKE", "ZC_MAKE_CODE_XY", zcPProMake);    }    if (ZcPProMake.CAIGOU_TYPE_DZJJ.equals(zcPProMake.getZcFukuanType())) { // 电子竞价      code = NumUtil.getInstance().getNo("ZC_P_PRO_MAKE", "ZC_MAKE_CODE_DZJJ", zcPProMake);    }    zcPProMake.setZcMakeCode(code);    zcPProMakeDao.updatePrimaryKeyByTempCode(zcPProMake);    zcPProMitemBiDao.updateMitemBiPrimaryKeyByTempCode(zcPProMake);    zcPProMitemDao.updateMitemPrimaryKeyByTempCode(zcPProMake);    zcPProMitemMerDao.updateMitemMerPrimaryKeyByTempCode(zcPProMake);    return selectByPrimaryKey(code);  }  // 协议供应商update方法  public ZcPProMake updateXYZcPProMake(ZcPProMake zcPProMake, RequestMeta requestMeta) throws Exception {    List biList = zcPProMake.getBiList();    // if (biList == null || biList.size() == 0)    // throw new RuntimeException("资金构成不可为空");    // List itemList = zcPProMake.getItemList();    // if (itemList == null || itemList.size() == 0)    // throw new RuntimeException("项目构成不可为空");    String userId = requestMeta.getSvUserID();    String compoId = requestMeta.getCompoId();    boolean isDraft = false;    if (zcPProMake.getProcessInstId() == null || zcPProMake.getProcessInstId().longValue() == -1) {      Long draftid = workflowDao.createDraftId();      zcPProMake.setProcessInstId(draftid);      isDraft = true;    }    if ("".equals(ZcSUtil.safeString(zcPProMake.getZcMakeCode())) || zcPProMake.getZcMakeCode().equals("自动编号")) {      zcPProMake.setZcInputCode(userId);      zcPProMake.setZcInputDate(requestMeta.getSysDate());      String code = NumUtil.getInstance().getNo("ZC_P_PRO_MAKE", "ZC_MAKE_CODE", zcPProMake);      zcPProMake.setZcMakeCode(code);      zcPProMakeDao.insert(zcPProMake);      for (int i = 0; i < biList.size(); i++) {        ZcPProMitemBi bi = (ZcPProMitemBi) biList.get(i);        bi.setZcMakeCode(code);        zcPProMitemBiDao.insert(bi);      }      // insertMitem(itemList, code);      for (int i = 0; i < zcPProMake.getBaoJiaList().size(); i++) {        ZcPProMitemBaoJia bj = (ZcPProMitemBaoJia) zcPProMake.getBaoJiaList().get(i);        insertMitem(bj.getBaoJiaDetailList(), code);      }    } else {      String code = zcPProMake.getZcMakeCode();      ZcPProMake originalBean = this.selectByPrimaryKey(code);      // ZcSUtil.checkDigest(zcPProMake, originalBean,      // "zcMakeCode");//一致性校验      zcPProMakeDao.updateByPrimaryKey(zcPProMake);      zcPProMakeDao.updateAttrsByPrimaryKey(zcPProMake);    }    if (isDraft) {      AsWfDraft asWfDraft = new AsWfDraft();      asWfDraft.setCompoId(compoId);      asWfDraft.setWfDraftName(zcPProMake.getZcMakeCode());      asWfDraft.setUserId(userId);      asWfDraft.setMasterTabId(compoId);      asWfDraft.setWfDraftId(BigDecimal.valueOf(zcPProMake.getProcessInstId().longValue()));      workflowDao.insertAsWfdraft(asWfDraft);    }    return zcPProMake;  }  private void insertMitem(List itemList, String makeCode) {    for (int i = 0; i < itemList.size(); i++) {      ZcPProMitem item = (ZcPProMitem) itemList.get(i);      item.setZcMakeCode(makeCode);      if (item.getZcPitemCode() == null) {        item.setZcPitemCode(new BigDecimal(ZcSUtil.getSequenceNextVal(ZcSettingConstants.SEQUENCE_PRO_MITEM)));      }      zcPProMitemDao.insert(item);      if (item.getZcIsSuJinJia() == null) {        List merList = item.getMerList();        for (int j = 0; j < merList.size(); j++) {          ZcPProMitem braItem = (ZcPProMitem) merList.get(j);          zcPProMitemMerDao.insert(convert(braItem, item));        }      }    }  }  private ZcPProMitemMer convert(ZcPProMitem braItem, ZcPProMitem item) {    ZcPProMitemMer merItem = new ZcPProMitemMer();    merItem.setZcYear(item.getZcYear());    merItem.setZcSuName(braItem.getZcSuName());    merItem.setZcSuCode(braItem.getZcSuCode());    merItem.setZcPitemCode(item.getZcPitemCode());    merItem.setZcPitemAttachBlobid(braItem.getZcPitemAttachBlobid());    merItem.setZcPitemAttach(braItem.getZcPitemAttach());    merItem.setZcMakeCode(item.getZcMakeCode());    merItem.setZcPitemArrDate(braItem.getZcPitemArrDate());    merItem.setZcPinmuCtlg(braItem.getZcPinmuCtlg());    merItem.setZcCatalogueName(item.getZcCatalogueName());    merItem.setZcCatalogueCode(item.getZcCatalogueCode());    merItem.setZcBraName(item.getZcBraName());    merItem.setZcBraCode(item.getZcBraCode());    merItem.setZcSuName(braItem.getZcSuName());    merItem.setZcSuCode(braItem.getZcSuCode());    merItem.setZcNoGongHuoReason(braItem.getZcNoGongHuoReason());    merItem.setZcMerPrice(braItem.getZcMerPrice());    merItem.setZcMerName(braItem.getZcMerName());    merItem.setZcMerCode(braItem.getZcMerCode());    merItem.setZcMakeCode(item.getZcMakeCode());    merItem.setZcItemSum(braItem.getZcItemSum());    merItem.setZcIsGongHuo(braItem.getZcIsGongHuo());    merItem.setZcCatalogueName(item.getZcCatalogueName());    merItem.setZcCatalogueCode(item.getZcCatalogueCode());    merItem.setZcCaigNum(new Integer(braItem.getZcCaigNum().intValue()));    merItem.setZcBraName(item.getZcBraName());    merItem.setZcBraCode(item.getZcBraCode());    merItem.setZcBaseGgyq(braItem.getZcBaseGgyq());    return merItem;  }  public List getZcPProMitem(String zcMakeCode) {    ZcPProMitemExample item = new ZcPProMitemExample();    item.createCriteria().andZcMakeCodeEqualTo(zcMakeCode);    return zcPProMitemDao.selectByExample(item);  }  public List getZcPProMitemMer(ZcPProMitem mItem) {    List merList = zcPProMitemMerDao.selectByBrand(mItem);    return merList;  }  public List getZcPProMitemBi(String zcMakeCode, boolean flag) {    ZcPProMitemBiExample bi = new ZcPProMitemBiExample();    bi.createCriteria().andZcMakeCodeEqualTo(zcMakeCode);    if (flag) {      return zcPProMitemBiDao.getMitemBiBudget(zcMakeCode);    }    return zcPProMitemBiDao.selectByExample(bi);  }  public ZcPProMake selectByPrimaryKey(String zcMakeCode) {    ZcPProMitemBiExample bi = new ZcPProMitemBiExample();    bi.createCriteria().andZcMakeCodeEqualTo(zcMakeCode);    ZcPProMake zcPProMake = (ZcPProMake) zcPProMakeDao.selectByPrimaryKey(zcMakeCode);    zcPProMake.setBiList(zcPProMitemBiDao.selectByExample(bi));    // 获取全部的明细信息，如果是竞价的话，包括供应商的报价信息    List allItems = getAllMitems(zcMakeCode);    zcPProMake.setItemList(getCaiGouItems(allItems));    zcPProMake.setBaoJiaList(getJinJiaBaoJiaItems(allItems));    zcPProMake.setDbDigest(null);    zcPProMake.setDbDigest(zcPProMake.digest());// 统一入口    return zcPProMake;  }  /*   *    * 获取所有供应商的竞价信息   */  private List getJinJiaBaoJiaItems(List allItems) {    // TODO Auto-generated method stub    List rtn = new ArrayList();    LinkedHashMap suMap = new LinkedHashMap();    if (allItems == null)      return rtn;    for (int i = 0; i < allItems.size(); i++) {      ZcPProMitem mi = (ZcPProMitem) allItems.get(i);      if (mi.getZcIsSuJinJia() != null && mi.getZcIsSuJinJia().equals(ZcPProMitem.IS_SU_JIN_JIA_Y)) {        ZcPProMitemBaoJia bj = new ZcPProMitemBaoJia();        if (suMap.containsKey(mi.getZcSuCode())) {          bj = (ZcPProMitemBaoJia) suMap.get(mi.getZcSuCode());          bj.getBaoJiaDetailList().add(mi);        } else {          bj.getBaoJiaDetailList().add(mi);          suMap.put(mi.getZcSuCode(), bj);        }      }    }    Iterator keys = suMap.keySet().iterator();    while (keys.hasNext()) {      ZcPProMitemBaoJia bj = (ZcPProMitemBaoJia) suMap.get(keys.next());      rtn.add(bj);    }    return rtn;  }  /*   *    * 获取供应商的竞价信息   */  private ZcPProMitemBaoJia getBaoJiaDetailBySuCode(List allItems, String suCode) {    // TODO Auto-generated method stub    List bjDetailList = new ArrayList();    if (allItems == null)      return null;    // 筛选    for (int i = 0; i < allItems.size(); i++) {      ZcPProMitem mi = (ZcPProMitem) allItems.get(i);      if (mi.getZcIsSuJinJia() != null && mi.getZcIsSuJinJia().equals(ZcPProMitem.IS_SU_JIN_JIA_Y)) {        if (suCode.equals(mi.getZcSuCode())) {          bjDetailList.add(mi);        }      }    }    if (bjDetailList.size() == 0)      return null;    ZcPProMitemBaoJia bj = new ZcPProMitemBaoJia();    bj.setBaoJiaDetailList(bjDetailList);    return bj;  }  /*   *    * 获取采购计划明细，不包括供应商的竞价信息   */  private List getCaiGouItems(List allItems) {    List items = new ArrayList();    if (allItems == null)      return items;    for (int i = 0; i < allItems.size(); i++) {      ZcPProMitem mi = (ZcPProMitem) allItems.get(i);      if (mi.getZcIsSuJinJia() == null || mi.getZcIsSuJinJia().equals(ZcPProMitem.IS_SU_JIN_JIA_N)) {        items.add(mi);      }      // 获得协议商品信息      List merList = zcPProMitemMerDao.selectByBrand(mi);      mi.setMerList(merList);    }    return items;  }  /*   *    * 获取全部的采购明细信息，如果是竞价的话，包括供应商的报价信息   */  private List getAllMitems(String zcMakeCode) {    ZcPProMitemExample item = new ZcPProMitemExample();    item.createCriteria().andZcMakeCodeEqualTo(zcMakeCode);    return zcPProMitemDao.selectByExample(item);  }  public void deleteByPrimaryKey(String zcMakeCode, boolean flag, String serverAdd, RequestMeta meta) throws Exception {    toDeleteExchangeData(zcMakeCode);    BudgetUtil bu = new BudgetUtil();    Map map = bu.getDelBudget(zcPProMitemBiDao, flag, zcMakeCode);    zcPProMakeDao.deleteByPrimaryKey(zcMakeCode);    ZcPProMitemBiExample bi = new ZcPProMitemBiExample();    bi.createCriteria().andZcMakeCodeEqualTo(zcMakeCode);    ZcPProMitemExample item = new ZcPProMitemExample();    item.createCriteria().andZcMakeCodeEqualTo(zcMakeCode);    zcPProMitemBiDao.deleteByExample(bi);    zcPProMitemDao.deleteByExample(item);    zcPProMitemMerDao.deleteJingJiaMerByKey(item);    if (flag) {      bu.callService(map, meta.getSvNd());    }  }  public ZcPProMake newCommitFN(ZcPProMake currentObject, String serverAdd, boolean flag, RequestMeta requestMeta) throws Exception {    if (currentObject.getZcMakeStatus().equals("0") && currentObject.getProcessInstId() != null && currentObject.getProcessInstId().longValue() < 0) {// 替换为正式编号      currentObject = updateZcPProMakeCode(currentObject, requestMeta);    }    this.updateZcPProMake(currentObject, serverAdd, flag, requestMeta);    wfEngineAdapter.newCommit(currentObject.getComment(), currentObject, requestMeta);    return selectByPrimaryKey(currentObject.getZcMakeCode());  }  public ZcPProMake auditFN(ZcPProMake make, RequestMeta requestMeta) {    zcPProMakeDao.updateAttrsByPrimaryKey(make);    wfEngineAdapter.commit(make.getComment(), make, requestMeta);    return make;  }  public ZcPProMake callbackFN(ZcPProMake make, RequestMeta requestMeta) {    wfEngineAdapter.callback(make.getComment(), make, requestMeta);    return make;  }  public ZcPProMake unAuditFN(ZcPProMake make, RequestMeta requestMeta) {    ZcEbEntrust zcEbEntrust = zcEbEntrustDao.getZcEbEntrustByMakeCode(make.getZcMakeCode());    // 判断任务单的状态    if (zcEbEntrust == null || "0".equals(zcEbEntrust.getStatus()) || "1".equals(zcEbEntrust.getStatus())) {      // 删除任务单      // add shijia 20111031      String ProcessInstId = zcPProMakeDao.getWfActionLastUser(make.getProcessInstId().toString());      if (!ProcessInstId.equals(requestMeta.getSvUserID())) {        throw new RuntimeException("该单据不是本人审批，您不能进行销审，请联系具体审核人！");      }      requestMeta.getSvUserID();      // -------      zcEbEntrustDao.deleteByMakeCode(make.getZcMakeCode());      wfEngineAdapter.rework(make.getComment(), make, requestMeta);    } else {      throw new RuntimeException("对应的采购任务单已经处理，不能销审采购计划！");    }    return make;  }  public ZcPProMake untreadFN(ZcPProMake make, RequestMeta requestMeta) {    wfEngineAdapter.untread(make.getComment(), make, requestMeta);    return make;  }  public ZcPProMake selectXyByKey(ElementConditionDto dto, RequestMeta meta) {    ZcPProMake zcPProMake = (ZcPProMake) zcPProMakeDao.selectByPrimaryKey(dto.getZcText0());    if (zcPProMake == null) {      return null;    }    // 获取全部的明细信息，如果是竞价的话，包括供应商的报价信息    List allItems = getAllMitems(dto.getZcText0());    zcPProMake.setItemList(getCaiGouItems(allItems));    List baoJiaList = new ArrayList();    baoJiaList.add(getBaoJiaDetailBySuCode(allItems, dto.getZcText1()));    zcPProMake.setBaoJiaList(baoJiaList);    zcPProMake.setDbDigest(null);    zcPProMake.setDbDigest(zcPProMake.digest());// 统一入口    return zcPProMake;  }  public void updateBaoJia(ZcPProMake make, RequestMeta meta) {    zcPProMitemDao.updateBaoJia(make);    createExchangeDataForBaojia(make, meta);  }  /**   *    * 如果删除协议供货项目，那么需要将redo表的相关数据也删除掉   *    * @param zcMakeCode   */  public void toDeleteExchangeData(String zcMakeCode) {    ZcPProMake zcPProMake = (ZcPProMake) zcPProMakeDao.selectByPrimaryKey(zcMakeCode);    if (zcPProMake == null) {      return;    }    if (ZcPProMake.CAIGOU_TYPE_XIEYI.equals(zcPProMake.getZcFukuanType())) {      this.deleteExchangeData(zcMakeCode, "ZC_EB_XIEYI_GONGHUO");    }  }  public void deleteExchangeData(String recordID, String dataTypeID) {    DataExchangeRedo redo = new DataExchangeRedo();    redo.setDataTypeID(dataTypeID);    redo.setRecordID(recordID);    dataExchangeDao.deleteByRecordIDAndDataTypeID(redo);  }  public void createExchangeDataForXieyiGonghuo(ZcPProMake make) {    if (make != null) {      DataExchangeRedo redo = new DataExchangeRedo();      redo.setDataTypeID("ZC_EB_XIEYI_GONGHUO");      redo.setDataTypeName("协议供货项目");      redo.setRecordID(make.getZcMakeCode());      redo.setRecordName(make.getZcMakeName());      redo.setMasterTableName("ZC_P_PRO_MAKE");      redo.setIsExported("0");      redo.setGenerateDate(new Date());      dataExchangeDao.deleteByRecordIDAndDataTypeID(redo);      dataExchangeDao.saveRedo(redo);    }  }  public void createExchangeDataForJinjiaGonggao(ZcPProMake make) {    if (make != null) {      DataExchangeRedo redo = new DataExchangeRedo();      redo.setDataTypeID("ZC_EB_ETC_BULLETIN");      // redo.setDataTypeName("电子竞价公告发布");      redo.setDataTypeName("电子竞价项目");      ElementConditionDto dto = new ElementConditionDto();      dto.setZcText0(make.getZcMakeCode());      ApArticle atc = this.apArticleDao.getArticleByZcMakeCode(dto);      if (atc == null) {        return;      }      String atcID = atc.getId();      redo.setRecordID(atcID);      redo.setRecordName(make.getZcMakeName());      redo.setMasterTableName("AP_ARTICLE");      redo.setIsExported("0");      redo.setGenerateDate(new Date());      dataExchangeDao.deleteByRecordIDAndDataTypeID(redo);      dataExchangeDao.saveRedo(redo);    }  }  public void createExchangeDataForBaojia(ZcPProMake make, RequestMeta requestMeta) {    if (make != null && make.getBaoJiaList() != null && make.getBaoJiaList().size() > 0) {      for (int i = 0; i < make.getBaoJiaList().size(); i++) {        ZcPProMitemBaoJia bj = (ZcPProMitemBaoJia) make.getBaoJiaList().get(i);        DataExchangeRedo redo = new DataExchangeRedo();        redo.setDataTypeID("ZC_EB_JINJIA");        redo.setDataTypeName("电子竞价报价");        redo.setRecordID(make.getZcMakeCode() + "@" + bj.getSuCode());        redo.setRecordName(bj.getSuName() + "报价");        redo.setMasterTableName("ZC_P_PRO_MAKE");        redo.setIsExported("0");        redo.setGenerateDate(new Date());        dataExchangeDao.deleteByRecordIDAndDataTypeID(redo);        // 如果是取消报价，那么只删除不插入，如果是报价，则删除后还需要插入        if (ZcPProMitemBaoJia.BAO_JIA_STATUS_SUBMIT.equals(bj.getBaoJiaStatus())) {          dataExchangeDao.saveRedo(redo);        }      }    }  }  public List findTransData(ElementConditionDto dto, RequestMeta meta) {    List l = new ArrayList();    if (dto.getPmAdjustCodeList() == null) {      return l;    }    for (int i = 0; i < dto.getPmAdjustCodeList().size(); i++) {      String id = (String) dto.getPmAdjustCodeList().get(i);      String[] c = id.split("@");      dto.setZcText0(c[0]);      dto.setZcText1(c[1]);      ZcPProMake make = selectXyByKey(dto, meta);      l.add(make);    }    return l;  }  public String importJingJiaTransData(ZcPProMake make, RequestMeta meta) {    Map m = new HashMap();    if (make != null && make.getBaoJiaList() != null) {      for (int i = 0; i < make.getBaoJiaList().size(); i++) {        ZcPProMitem bj = (ZcPProMitem) make.getBaoJiaList().get(i);        m.put("ZC_MAKE_CODE", make.getZcMakeCode());        m.put("ZC_SU_CODE", bj.getZcSuCode());        baseDao.delete("deleteByMakeCodeAndSuCode", m);        zcPProMitemDao.insert(bj);      }    }    return null;  }  public List getMitemBiWithHtBi(ElementConditionDto dto) {    return zcPProMitemBiDao.getMitemBiWithHtBi(dto);  }  public ZcPProMake updateZcPProMakeWithStatus(ZcPProMake make) {    zcPProMakeDao.updateByPrimaryKey(make);    return make;  }  public void updateZcPProMitem(ZcPProMitem mitem) {    zcPProMitemDao.updateByPrimaryKey(mitem);  }  public void interruptZcPProMake(ZcPProMake make, RequestMeta meta) {    wfEngineAdapter.interrupt(null, make, meta);  }  public ZcPProMake CancelMake(ZcPProMake make, RequestMeta meta) throws ZcBudgetInterfaceException {    BudgetUtil bu = new BudgetUtil();    boolean flag = "Y".equalsIgnoreCase(AsOptionUtil.getInstance().getOptionVal(ZcSettingConstants.OPT_ZC_USE_BUDGET_INTERFACE));    Map map = bu.getDelBudget(zcPProMitemBiDao, true, make.getZcMakeCode());    if (flag) {      bu.callService(map, meta.getSvNd());    }    interruptZcPProMake(make, meta);    make.setZcMakeStatus("cancel");    return updateZcPProMakeWithStatus(make);  }  public PrintObject genZcPProMakePrintObject(ZcPProMake make) {    MainSubBill mainSubBill = new MainSubBill();    mainSubBill.setMainBill(make);    mainSubBill.setSubBillList(make.getItemList());    return PrintManager.genMainSubPrintObject(mainSubBill);  }  public List getWfActionDescription(Long id) {    return zcPProMakeDao.getWfActionDescription(id);  }  public ZcPProMake selectXyByKeyForProvider(ElementConditionDto dto, RequestMeta requestMeta) {    ZcPProMake zcPProMake = (ZcPProMake) zcPProMakeDao.selectByPrimaryKey(dto.getZcText0());    // 获取全部的明细信息，如果是竞价的话，包括供应商的报价信息    List allItems = getAllJingJiaMitems(dto);    zcPProMake.setItemList(getCaiGouItemsForProvider(allItems));    List baoJiaList = new ArrayList();    baoJiaList.add(getBaoJiaDetailBySuCode(allItems, dto.getZcText1()));    zcPProMake.setBaoJiaList(baoJiaList);    zcPProMake.setDbDigest(null);    zcPProMake.setDbDigest(zcPProMake.digest());// 统一入口    return zcPProMake;  }  /*   *    * 获取竞价的项目明细   */  private List getAllJingJiaMitems(ElementConditionDto dto) {    List allItems = zcPProMitemDao.selectJingJiaItem(dto);    return allItems;  }  private List getCaiGouItemsForProvider(List allItems) {    List items = new ArrayList();    if (allItems == null)      return items;    for (int i = 0; i < allItems.size(); i++) {      ZcPProMitem mi = (ZcPProMitem) allItems.get(i);      if (mi.getZcIsSuJinJia() == null || mi.getZcIsSuJinJia().equals(ZcPProMitem.IS_SU_JIN_JIA_N)) {        List merList = zcPProMitemMerDao.selectByBrand(mi);        if (merList.size() == 0)          items.addAll(allItems);        else          items.addAll(merList);      }    }    return items;  }  // public boolean outputJJGonggaoP(ApArticle article) {  // boolean flag = true;  // try {  // String articleId = apArticleDao.insertAutoKey(article);  // createExchangeDataForJinjiaGonggao(articleId, article.getTitle(),  // article.getZcMakeCode(), "ZC_EB_ETC_BULLETIN");  // Map paraMap_1 = new HashMap();  // paraMap_1.put("pageId", "403");  // paraMap_1.put("articleId", articleId);  // apArticleDao.insertArticlePortlet(paraMap_1);  // Map paraMap_2 = new HashMap();  // paraMap_2.put("pageId", "347");  // paraMap_2.put("articleId", articleId);  // apArticleDao.insertArticlePortlet(paraMap_2);  // } catch (Exception e) {  // e.printStackTrace();  // flag = false;  // }  // return flag;  // }  //  // public boolean outputJJGonggaoC(ApArticle article) {  // boolean flag = true;  // try {  // String articleId = apArticleDao.insertAutoKey(article);  // createExchangeDataForJinjiaGonggao(articleId, article.getTitle(),  // article.getZcMakeCode(), "ZC_EB_CHJ_BULLETIN");  // Map paraMap_1 = new HashMap();  // paraMap_1.put("pageId", "406");  // paraMap_1.put("articleId", articleId);  // apArticleDao.insertArticlePortlet(paraMap_1);  // Map paraMap_2 = new HashMap();  // paraMap_2.put("pageId", "349");  // paraMap_2.put("articleId", articleId);  // apArticleDao.insertArticlePortlet(paraMap_2);  // } catch (Exception e) {  // e.printStackTrace();  // flag = false;  // }  // return flag;  // }  // public boolean outputJJGonggaoP(ZcPProMake make) {  // boolean flag = true;  // Map map = new HashMap();  // Date sysdate = new Date();  // SimpleDateFormat formatShort = new SimpleDateFormat("yyyy年MM月dd日");  // SimpleDateFormat formatLong = new  // SimpleDateFormat("yyyy年MM月dd日   HH:mm:ss");  //  // make.setZcAttr5(formatShort.format(sysdate));//公告时间  // make.setZcAttr4(formatLong.format(make.getZcXieYiEndDate()));//竞价截止时间  // map.put("make", make);  //  // try {  // FreeMarkerTemplateUtils utils = new FreeMarkerTemplateUtils();  // String content = utils.process("jingJiaYugao.ftl", map);  //  // ApArticle apArticle = new ApArticle();  //  // StringBuffer title = new StringBuffer();  // title.append(make.getCoName()).append(make.getZcMakeName()).append("电子竞价公告");  // StringBuffer review = new StringBuffer();  // review.append(make.getZcMakeCode()).append("陕西省财政厅关于").append(make.getZcMakeName()).append("电子竞价采购项目");  // apArticle.setTitle(title.toString());  // apArticle.setContent(content);  // apArticle.setCreator(make.getZcAttr3());  // apArticle.setType("01");  // apArticle.setAuthor(make.getZcAttr3());  // apArticle.setReview(review.toString());  // apArticle.setVisitCapacity(0);  //  // String articleId = apArticleDao.insertAutoKey(apArticle);  // Map paraMap_1 = new HashMap();  // paraMap_1.put("pageId", "403");  // paraMap_1.put("articleId", articleId);  // apArticleDao.insertArticlePortlet(paraMap_1);  // Map paraMap_2 = new HashMap();  // paraMap_2.put("pageId", "347");  // paraMap_2.put("articleId", articleId);  // apArticleDao.insertArticlePortlet(paraMap_2);  // } catch (Exception e) {  // // TODO: handle exception  // e.printStackTrace();  // flag = false;  // }  // return flag;  // }  /**   *    * 获取电子竞价公告相关的所有数据   */  public List findBulletinRelationTransData(ElementConditionDto dto) {    if (dto == null) {      dto = new ElementConditionDto();    }    List result = new ArrayList();    List tmp = dto.getPmAdjustCodeList();    for (int i = 0; i < tmp.size(); i++) {      // 串由zcMakeCode@articleID拼接而成      String ids = (String) tmp.get(i);      if (null == ids || "".equals(ids)) {        continue;      }      if (ids.split("@").length < 2) {        continue;      }      String zcMakeCode = ids.split("@")[0];      dto.setZcText0(ids.split("@")[1]);      ApArticle atc = apArticleDao.getArticleByArticleID(dto);      if (atc == null) {        return result;      }      ZcPProMake make = this.selectByZcMakeCode(zcMakeCode);      atc.setZcPProMake(make);      dto.setZcText0(atc.getId());      List portletList = this.apArticleDao.getApArticlePortletByArticleID(dto);      atc.setApArticlePortlet(portletList);      result.add(atc);    }    return result;  }  public ZcPProMake selectByZcMakeCode(String zcMakeCode) {    ZcPProMitemBiExample bi = new ZcPProMitemBiExample();    bi.createCriteria().andZcMakeCodeEqualTo(zcMakeCode);    ZcPProMake zcPProMake = (ZcPProMake) zcPProMakeDao.selectByPrimaryKey(zcMakeCode);    zcPProMake.setBiList(zcPProMitemBiDao.selectByExample(bi));    zcPProMake.setItemList(getCaiGouItems(getAllMitems(zcMakeCode)));    return zcPProMake;  }  public String insertApArticleWithID(ApArticle record, RequestMeta meta) {    Map para1 = new HashMap();    para1.put("articleId", record.getId());    try {      this.deleteByPrimaryKey(record.getZcPProMake().getZcMakeCode(), false, "", meta);    } catch (Exception e) {      // TODO Auto-generated catch block      e.printStackTrace();    }    this.insertZcPProMake(record.getZcPProMake());    this.apArticleDao.deleteApArticleWithID(para1);    this.apArticleDao.insertApArticleWithID(record);    for (int i = 0; i < record.getApArticlePortlet().size(); i++) {      ApArticlePortlet portlet = ((ApArticlePortlet) record.getApArticlePortlet().get(i));      Map para = new HashMap();      para.put("pageId", portlet.getApArticleProtletID());      para.put("articleId", portlet.getApArticleID());      this.apArticleDao.deleteApArticlePortlet(para);      this.apArticleDao.insertArticlePortlet(para);    }    return "电子竞价公告内容插入成功...";  }  /**   *    * 数据导入导出时插入数据库专用   *    * @param zcPProMake   *    * @return   *    * @throws Exception   */  private ZcPProMake insertZcPProMake(ZcPProMake zcPProMake) {    List biList = zcPProMake.getBiList();    List itemList = zcPProMake.getItemList();    String code = zcPProMake.getZcMakeCode();    zcPProMakeDao.insert(zcPProMake);    for (int i = 0; i < biList.size(); i++) {      ZcPProMitemBi bi = (ZcPProMitemBi) biList.get(i);      bi.setZcMakeCode(code);      zcPProMitemBiDao.insert(bi);    }    insertMitem(itemList, code);    return zcPProMake;  }  /**   *    * 查找所有电子竞价成交相关的数据，主要包括zc_p_pro_make表和供应商的报价表   */  public List findResultRelationTransData(ElementConditionDto dto) {    if (dto == null) {      dto = new ElementConditionDto();    }    List result = new ArrayList();    List tmp = dto.getPmAdjustCodeList();    for (int i = 0; i < tmp.size(); i++) {      // 串由zcMakeCode@articleID拼接而成      String ids = (String) tmp.get(i);      if (null == ids || "".equals(ids)) {        continue;      }      if (ids.split("@").length < 2) {        continue;      }      String zcMakeCode = ids.split("@")[0];      dto.setZcText0(ids.split("@")[1]);      ApArticle atc = apArticleDao.getArticleByArticleID(dto);      if (atc == null) {        return result;      }      ZcPProMake make = this.selectChengjiaoItemsByZcMakeCode(zcMakeCode);      atc.setZcPProMake(make);      dto.setZcText0(atc.getId());      List portletList = this.apArticleDao.getApArticlePortletByArticleID(dto);      atc.setApArticlePortlet(portletList);      result.add(atc);    }    return result;  }  public ZcPProMake selectChengjiaoItemsByZcMakeCode(String zcMakeCode) {    ZcPProMake zcPProMake = (ZcPProMake) zcPProMakeDao.selectByPrimaryKey(zcMakeCode);    zcPProMake.setBaoJiaList(getJinJiaBaoJiaItems(getAllMitems(zcMakeCode)));    return zcPProMake;  }  public String insertResultRelationTransData(ApArticle record) {    Map para1 = new HashMap();    para1.put("articleId", record.getId());    this.updateZcPProMakeForChengjiao(record.getZcPProMake());    this.apArticleDao.deleteApArticleWithID(para1);    this.apArticleDao.insertApArticleWithID(record);    for (int i = 0; i < record.getApArticlePortlet().size(); i++) {      ApArticlePortlet portlet = ((ApArticlePortlet) record.getApArticlePortlet().get(i));      Map para = new HashMap();      para.put("pageId", portlet.getApArticleProtletID());      para.put("articleId", portlet.getApArticleID());      this.apArticleDao.deleteApArticlePortlet(para);      this.apArticleDao.insertArticlePortlet(para);    }    return "电子竞价成交公告内容插入成功...";  }  private void updateZcPProMakeForChengjiao(ZcPProMake make) {    // update zc_p_pro_make 表中的ZcMakeStatus字段为"jingjiaycj"    zcPProMakeDao.updateByPrimaryKey(make);    // 修改中标供应商报价为“ChengJiao”    zcPProMitemDao.updateBaoJia(make);  }  public List findTransDataForXieyiGongHuo(ElementConditionDto dto, RequestMeta meta) {    List l = new ArrayList();    if (dto.getPmAdjustCodeList() == null) {      return l;    }    for (int i = 0; i < dto.getPmAdjustCodeList().size(); i++) {      String id = (String) dto.getPmAdjustCodeList().get(i);      dto.setZcText0(id.trim());      ZcPProMake zcPProMake = selectByZcMakeCode(id.trim());      l.add(zcPProMake);    }    return l;  }  private ZcPProMake loadMakeInfor(String makeCode) {    ZcPProMake make = zcPProMakeDao.selectByPrimaryKey(makeCode);    return make;  }  private List loadMakeDetailInfor(String makeCode) {    HashMap para = new HashMap();    para.put("zcMakeCode", makeCode);    List spList = baseDao.query("ZC_P_PRO_MAKE.findMakeByCode", para);    return spList;  }  private Map getJingJiaBidData(String makeCode, boolean isWaitFrelease, int nd) {    Map jingjia = new HashMap();    ZcPProMake make = loadMakeInfor(makeCode);    jingjia.put("make", make);    List spList = loadMakeDetailInfor(makeCode);    jingjia.put("spList", spList);    SimpleDateFormat simFormat = new SimpleDateFormat("yyyy年MM月dd日");    if (make.getZcXieYiEndDate() != null) {      jingjia.put("endDate", simFormat.format(make.getZcXieYiEndDate()));    } else {      jingjia.put("endDate", "");    }    if (isWaitFrelease) {// 如果是待发布状态则填充发布时间      jingjia.put("exportDate", simFormat.format(new Date()));// 待以后有工作流了      // 得改改    } else {      jingjia.put("exportDate", simFormat.format(new Date()));    }    Map paraCompany = new HashMap();    paraCompany.put("nd", new Integer(nd));    paraCompany.put("coCode", make.getCoCode());    Company asCompany = (Company) baseDao.read("Company.getCompanyByCoCode", paraCompany);    jingjia.put("zcCoName", asCompany.getName());    // jingjia.put("exportDate", "");    return jingjia;  }  public AsFile getJingJiaBidWordContent(String makeCode, String templeId, boolean isWaitFrelease, RequestMeta requestMeta) {    AsFile template = getAsFileById(templeId);    AsFile fileContent = new AsFile();    Map jingjia = getJingJiaBidData(makeCode, isWaitFrelease, requestMeta.getSvNd());    byte[] protocolByte = null;    try {      protocolByte = evaluateFileContext(jingjia, template.getFileContent());    } catch (Exception e) {      e.printStackTrace();    }    fileContent.setFileId(Guid.genID());    fileContent.setFileContent(protocolByte);    return fileContent;  }  private AsFile getAsFileById(String templeId) {    List templateList = baseDao.query("AsFile.getAsFileById", templeId);    AsFile template = new AsFile();    if (templateList != null && templateList.size() > 0) {      template = (AsFile) templateList.get(0);    }    return template;  }  private byte[] evaluateFileContext(Map jingjia, byte[] fileContent) throws Exception {    Map contextMap = new HashMap();    contextMap.put("jingjia", jingjia);    return ZcSUtil.evaluate(contextMap, fileContent, "jingjia", ZcSUtil.ENCODING_DEFAULT);  }  public AsFile getJingJiaWidWordContent(String makeCode, String templeId, RequestMeta requestMeta) {    AsFile template = getAsFileById(templeId);    AsFile fileContent = new AsFile();    Map jingjia = getJingJiaBidData(makeCode, true, requestMeta.getSvNd());    List supSpList = (List) jingjia.get("spList");    jingjia.put("supSpList", supSpList);    if (supSpList != null && supSpList.size() > 0) {      ZcPProMakeShow item = (ZcPProMakeShow) supSpList.get(0);      if (item.getZcSuCode() != null) {        ZcEbSupplier supp = (ZcEbSupplier) baseDao.read("ZcEbSupplier.getZcEbSupplierById", item.getZcSuCode());        if (supp != null) {          jingjia.put("zcSuName", supp.getName());        } else {          jingjia.put("zcSuName", "");        }      } else {        jingjia.put("zcSuName", "");      }      BigDecimal sum = new BigDecimal("0");      for (Iterator iterator = supSpList.iterator(); iterator.hasNext();) {        ZcPProMakeShow te = (ZcPProMakeShow) iterator.next();        sum = sum.add(te.getZcItemSum() == null ? new BigDecimal("0") : te.getZcItemSum());      }      jingjia.put("zcItemSum", sum);    } else {      jingjia.put("zcSuName", "");      jingjia.put("zcItemSum", "");    }    byte[] protocolByte = null;    try {      protocolByte = evaluateFileContext(jingjia, template.getFileContent());    } catch (Exception e) {      e.printStackTrace();    }    fileContent.setFileContent(protocolByte);    return fileContent;  }  // 添加供应商报价记录信息 guoss  public void addBaojia(ZcPProBaoJia baojia, RequestMeta meta) {    this.zcPProMitemDao.addBaojia(baojia);  }  /*   *    * 查询商品信息   */  public ZcBMerchandise getMerchandiseInfo(String zcMerCode) {    return zcBMerchandiseDao.getMerchandiseInfo(zcMerCode);  }  public String chackBiMoney(ZcPProMake make)  {    return zcEbBaseServiceF3.chackBiMoney(make);  }  public IZcEbBaseService getZcEbBaseServiceF3() {    return zcEbBaseServiceF3;  }  public void setZcEbBaseServiceF3(IZcEbBaseService zcEbBaseServiceF3) {    this.zcEbBaseServiceF3 = zcEbBaseServiceF3;  }  public int getJjPinPNum(String catalogue, ElementConditionDto dto, RequestMeta meta) {    // TODO Auto-generated method stub    return catalogueDao.getJjPinPNum(catalogue, dto);  }  public IZcBCatalogueDao getCatalogueDao() {    return catalogueDao;  }  public void setCatalogueDao(IZcBCatalogueDao catalogueDao) {    this.catalogueDao = catalogueDao;  }  public BigDecimal getJjPricQuota(ElementConditionDto dto, RequestMeta requestMeta) {    // TODO Auto-generated method stub    return catalogueDao.getJjPricQuota(dto);  }  public List getZcPProMakeNoHt(ElementConditionDto dto) {    // TODO Auto-generated method stub    try {      return baseDao.query("ZC_P_PRO_MAKE.getZcPProMakeNoHtList", dto);    } catch (Exception e) {      Logger.getLogger(getClass()).error(e.getMessage());    }    return null;  }  public List queryExportsDatas(ElementConditionDto dto, RequestMeta meta) {    // TODO Auto-generated method stub    List makeLst = zcPProMakeDao.queryExportsDatas(dto);    List biLst = zcPProMitemBiDao.queryExportsDatas(dto);    List itemLst = zcPProMitemDao.queryExportsDatas(dto);    makeLst = makeLst == null ? new ArrayList() : makeLst;    biLst = biLst == null ? new ArrayList() : biLst;    itemLst = itemLst == null ? new ArrayList() : itemLst;    for (int i = 0; i < makeLst.size(); i++) {      ZcPProMake make = (ZcPProMake) makeLst.get(i);      make.setBiList(new ArrayList());      make.setItemList(new ArrayList());      for (int j = 0; j < biLst.size(); j++) {        ZcPProMitemBi bi = (ZcPProMitemBi) biLst.get(j);        if (make.getZcMakeCode().equals(bi.getZcMakeCode())) {          make.getBiList().add(bi);        }      }      for (int k = 0; k < itemLst.size(); k++) {        ZcPProMitem item = (ZcPProMitem) itemLst.get(k);        if (make.getZcMakeCode().equals(item.getZcMakeCode())) {          make.getItemList().add(item);        }      }    }    return makeLst;  }  public String importTransDatasFN(ZcPProMake make, RequestMeta meta) {    // TODO Auto-generated method stub            ZcPProMitemBiExample ex = new ZcPProMitemBiExample();    ex.createCriteria().andZcMakeCodeEqualTo(make.getZcMakeCode());    zcPProMitemBiDao.deleteByExample(ex);    if (make.getBiList() != null) {      for (int i = 0; i < make.getBiList().size(); i++) {        zcPProMitemBiDao.insert((ZcPProMitemBi) make.getBiList().get(i));      }    }    ZcPProMitemExample ex2 = new ZcPProMitemExample();    ex2.createCriteria().andZcMakeCodeEqualTo(make.getZcMakeCode());    zcPProMitemDao.deleteByExample(ex2);    if (make.getItemList() != null) {      for (int i = 0; i < make.getItemList().size(); i++) {        zcPProMitemDao.insert((ZcPProMitem) make.getItemList().get(i));      }    }    //必须放在最后执行，因为主表上有触发器(TRIGGER_ZC_P_PRO_MAKE)，按理应该整个事务提交后才执行触发器，但好像有问题，所以先执行上面的子表操作，然后执行下面的主表    //操作，这样先保证子表先哟数据，触发器正常执行 --chenjl 20130926    zcPProMakeDao.deleteByPrimaryKey(make.getZcMakeCode());    zcPProMakeDao.insert(make);    return "导入成功";  }  /**   * 丹徒使用：将批办单直接送审到主任审核，   * 因为采购计划导出到外网后，通过触发器，自动生成已受理的采购任务，草稿状态的批办单。   * 但为了方便客户使用，将批办单直接送到主任审核，这里没有采用触发器，使用代码，调用工作流引擎，实现送审动作，后续可以考虑改成触发器。   *    */  private void _sendToZhuren(ZcPProMake make, RequestMeta meta) {    // TODO Auto-generated method stub    //获取触发器产生的批办单    Map paramMap=new HashMap();    paramMap.put("SN", make.getZcMakeCode());    ZcEbAuditSheet sheet=(ZcEbAuditSheet)baseDao.read("ZcEbAuditSheet.read", paramMap);    if(sheet==null)return;    meta.setCompoId("ZC_EB_AUDIT_SHEET");    String draftUserId=AsOptionUtil.getInstance().getOptionVal("ZC_OPTION_ADUITSHEET_DRAFT_EXCUTOR");    draftUserId=draftUserId==null?"sa":draftUserId;    String draftUser=AsOptionUtil.getInstance().getOptionVal("ZC_OPTION_ADUITSHEET_DRAFT_EXCUTOR_NAME");    draftUser=draftUser==null?"sa":draftUser;    meta.setSvUserID(draftUserId);    meta.setSvUserName(draftUser);        wfEngineAdapter.newCommit(sheet.getComment(), sheet, meta);//    sheet=(ZcEbAuditSheet)baseDao.read("ZcEbAuditSheet.read", paramMap);//    wfEngineAdapter.commit("请审核", sheet, meta);  }     public void sendToZhuren(ZcPProMake make, RequestMeta meta) {    // TODO Auto-generated method stub    _sendToZhuren(make, meta);  }}