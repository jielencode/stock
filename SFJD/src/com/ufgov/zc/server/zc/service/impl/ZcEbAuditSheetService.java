package com.ufgov.zc.server.zc.service.impl;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import com.kingdrive.workflow.context.WorkflowContext;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.DataExchangeRedo;import com.ufgov.zc.common.zc.model.ZcEbAuditSheet;import com.ufgov.zc.server.system.dao.ibatis.WorkflowDao;import com.ufgov.zc.server.system.util.AsOptionUtil;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.dao.IBaseDao;import com.ufgov.zc.server.zc.service.IZcEbAuditSheetService;public class ZcEbAuditSheetService implements IZcEbAuditSheetService {  private IBaseDao baseDao;  private WorkflowDao workflowDao;  private WFEngineAdapter wfEngineAdapter;  public List getList(ElementConditionDto dto, RequestMeta requestMeta) {    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getWfcompoId(), NumLimConstants.FWATCH));    return baseDao.query("ZcEbAuditSheet.list", dto);  }  public void delete(Map map, RequestMeta requestMeta) {    baseDao.delete("ZcEbAuditSheet.delete", map);  }  public Object read(Map map, RequestMeta requestMeta) {    return baseDao.read("ZcEbAuditSheet.read", map);  }  public void save(Object o, RequestMeta requestMeta) {    ZcEbAuditSheet auditSheet = (ZcEbAuditSheet) o;    if (auditSheet.getSheetId() == null || "".equals(auditSheet.getSheetId())) {      baseDao.insert("ZcEbAuditSheet.insert", o);    } else {      baseDao.update("ZcEbAuditSheet.update", o);    }  }  public void saveXbPersoin(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    baseDao.insert("ZcEbAuditSheet.insertXbPersion", elementConditionDto);  }  public void delXbPersoin(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    baseDao.delete("ZcEbAuditSheet.deleteXbPersion", elementConditionDto);  }  public List getEntrustDetailList(Map m, RequestMeta requestMeta) {    return baseDao.query("ZcEbEntrust.queryBySN", m);  }  public List getXbDetailList(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    return baseDao.query("ZcEbAuditSheet.getXbPersion", elementConditionDto);  }  public ZcEbAuditSheet newCommitFN(ZcEbAuditSheet currSheet, boolean isFromList, RequestMeta requestMeta) throws Exception {    if (!isFromList) {      baseDao.update("ZcEbAuditSheet.update", currSheet);    }    wfEngineAdapter.newCommit(currSheet.getComment(), currSheet, requestMeta);    Map map = new HashMap();    map.put("sheetId", currSheet.getSheetId());    return (ZcEbAuditSheet) baseDao.read("ZcEbAuditSheet.queryByID", map);  }  public ZcEbAuditSheet auditFN(ZcEbAuditSheet sheet, boolean isFromList, RequestMeta requestMeta) {    if (!isFromList) {      baseDao.update("ZcEbAuditSheet.update", sheet);    }    WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(sheet.getComment(), sheet, requestMeta);    AsOptionUtil optionIns = AsOptionUtil.getInstance();    String sendToFzrJs = optionIns.getOptionVal("OPT_ZC_EB_SHEET_SEND_TO_ZR_JS");//送业务主任角色    String sendToJbrJs = optionIns.getOptionVal("ZC_EB_SHEET_SEND_TO_JBR_JS");//送经办人角色    //    if (sendToFzrJs.indexOf(requestMeta.getSvRoleId()) > -1) {    //    //    //    //      // 送分管主任    //      List result = new ArrayList();    //    //      result.add(sheet.getZcFzrUserId());    //    //      workflowContext.setNextExecutor(result);    //    //    } else if (sendToJbrJs.indexOf(requestMeta.getSvPoCode()) > -1) {    //    //      ElementConditionDto dto = new ElementConditionDto();    //    //      dto.setDattr1(sheet.getSn());    //    //      List xiebanren = getXbDetailList(dto, null);    //    //    //    //    //    //      // 设置经办人    //      List result = new ArrayList();    //    //      result.add(sheet.getSuperintendent());    //    //      for (Iterator iterator = xiebanren.iterator(); iterator.hasNext();) {    //    //        User user = (User) iterator.next();    //    //        if (!result.contains(user.getUserId())) {    //    //          result.add(user.getUserId());    //    //        }    //    //      }    //    //      workflowContext.setNextExecutor(result);    //    //    }    wfEngineAdapter.commit(workflowContext);    Map map = new HashMap();    map.put("sheetId", sheet.getSheetId());    if (isFromList) {      return sheet;    }    return (ZcEbAuditSheet) baseDao.read("ZcEbAuditSheet.queryByID", map);  }  public ZcEbAuditSheet auditSetNextExecutorFN(ZcEbAuditSheet sheet, List nextExecutor, boolean isFromList, RequestMeta requestMeta) {    if (!isFromList) {      baseDao.update("ZcEbAuditSheet.update", sheet);    }    WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(sheet.getComment(), sheet, requestMeta);    if (nextExecutor != null && nextExecutor.size() > 0) {      workflowContext.setNextExecutor(nextExecutor);    }    wfEngineAdapter.commit(workflowContext);    Map map = new HashMap();    map.put("sheetId", sheet.getSheetId());    if (isFromList) {      return sheet;    }    return (ZcEbAuditSheet) baseDao.read("ZcEbAuditSheet.queryByID", map);  }  public ZcEbAuditSheet callbackFN(ZcEbAuditSheet sheet, boolean isFromList, RequestMeta requestMeta) {    if (!isFromList) {      baseDao.update("ZcEbAuditSheet.update", sheet);    }    wfEngineAdapter.callback(sheet.getComment(), sheet, requestMeta);    Map map = new HashMap();    map.put("sheetId", sheet.getSheetId());    if (isFromList) {      return sheet;    }    return (ZcEbAuditSheet) baseDao.read("ZcEbAuditSheet.queryByID", map);  }  public ZcEbAuditSheet unAuditFN(ZcEbAuditSheet sheet, boolean isFromList, RequestMeta requestMeta) {    if (!isFromList) {      baseDao.update("ZcEbAuditSheet.update", sheet);    }    wfEngineAdapter.rework(sheet.getComment(), sheet, requestMeta);    Map map = new HashMap();    map.put("sheetId", sheet.getSheetId());    if (isFromList) {      return sheet;    }    return (ZcEbAuditSheet) baseDao.read("ZcEbAuditSheet.queryByID", map);  }  public ZcEbAuditSheet untreadFN(ZcEbAuditSheet sheet, boolean isFromList, RequestMeta requestMeta) {    if (!isFromList) {      baseDao.update("ZcEbAuditSheet.update", sheet);    }    AsOptionUtil optionIns = AsOptionUtil.getInstance();    String sendToJbrJs = optionIns.getOptionVal("ZC_EB_SHEET_SEND_TO_JBR_JS");//送经办人角色    //    if (sendToJbrJs.indexOf(requestMeta.getSvPoCode()) > -1) {//如果是送经办人的角色，即业务副主任退回则退回至第一岗    //    //      wfEngineAdapter.untreadToFirst(sheet.getComment(), sheet);    //    //    } else {    //    //      wfEngineAdapter.untread(sheet.getComment(), sheet);    //    //    }    wfEngineAdapter.untread(sheet.getComment(), sheet, requestMeta);    Map map = new HashMap();    map.put("sheetId", sheet.getSheetId());    if (isFromList) {      return sheet;    }    return (ZcEbAuditSheet) baseDao.read("ZcEbAuditSheet.queryByID", map);  }  public IBaseDao getBaseDao() {    return baseDao;  }  public void setBaseDao(IBaseDao baseDao) {    this.baseDao = baseDao;  }  public WorkflowDao getWorkflowDao() {    return workflowDao;  }  public void setWorkflowDao(WorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public List findTransData(ElementConditionDto dto, RequestMeta meta) {    List list = new ArrayList();    if (dto.getPmAdjustCodeList() == null) {      return list;    }    List pmlist = dto.getPmAdjustCodeList();    for (Iterator iterator = pmlist.iterator(); iterator.hasNext();) {      DataExchangeRedo redo = (DataExchangeRedo) iterator.next();      String id = redo.getRecordID();      Map map = new HashMap();      map.put("sheetId", id);      list.add(baseDao.read("ZcEbAuditSheet.queryByID", map));    }    return list;  }  public void insert(ZcEbAuditSheet zeas, RequestMeta meta) {    // TODO Auto-generated method stub    baseDao.insert("ZcEbAuditSheet.insert", zeas);  }     public List getAuditSheetExportData(List dutySheetIdLst, RequestMeta meta) {    // TODO Auto-generated method stub    ElementConditionDto dto=new ElementConditionDto();    dto.setPmAdjustCodeList(dutySheetIdLst);    return baseDao.query("ZcEbAuditSheet.getAuditSheetExportData", dto);  }     public String importTransDatasFN(ZcEbAuditSheet bill, RequestMeta meta) {    // TODO Auto-generated method stub    Map map=new HashMap();    map.put("sn", bill.getSn());    baseDao.delete("ZcEbAuditSheet.deleteBySn", map);    baseDao.insert("ZcEbAuditSheet.insertZcEbAuditSheet", bill);    return "导入批办单成功";  }}