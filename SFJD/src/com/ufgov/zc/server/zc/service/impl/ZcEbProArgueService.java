package com.ufgov.zc.server.zc.service.impl;import java.math.BigDecimal;import java.util.Iterator;import java.util.List;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.common.zc.model.ZcEbProArgue;import com.ufgov.zc.common.zc.model.ZcEbProArgueDetail;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.dao.IBaseDao;import com.ufgov.zc.server.zc.dao.IZcEbProArgueDao;import com.ufgov.zc.server.zc.dao.IZcEbProArgueDetailDao;import com.ufgov.zc.server.zc.service.IZcEbProArgueService;public class ZcEbProArgueService implements IZcEbProArgueService {  private IZcEbProArgueDao zcEbProArgueDao;  private IZcEbProArgueDetailDao zcEbProArgueDetailDao;  private WFEngineAdapter wfEngineAdapter;  private IWorkflowDao workflowDao;  private IBaseDao baseDao;  public void deleteZcEbProArgueById(String id) {    zcEbProArgueDetailDao.deleteZcEbProArgueDetailByArgueId(id);    zcEbProArgueDao.deleteZcEbProArgueById(id);  }  public void deleteZcEbProArgueByIds(String[] id) {    if (id == null)      return;    for (int i = 0; i < id.length; i++) {      deleteZcEbProArgueById(id[i]);    }  }  public List getZcEbProArgueByCondition(ElementConditionDto condition, RequestMeta requestMeta) {    // TODO Auto-generated method stub    condition.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(condition.getWfcompoId(), NumLimConstants.FWATCH));    return zcEbProArgueDao.getZcEbProArgueByCondition(condition);  }  public ZcEbProArgue getZcEbProArgueById(String id) {    ZcEbProArgue po = zcEbProArgueDao.getZcEbProArgueById(id);    if (po == null)      return null;    ElementConditionDto condition = new ElementConditionDto();    condition.setZcText0(po.getArgueId());    List detail = zcEbProArgueDetailDao.getZcEbProArgueDetailList(condition);    po.setDetail(detail);    return po;  }  public void insertZcEbProArgue(ZcEbProArgue po, RequestMeta requestMeta) {    // TODO Auto-generated method stub    boolean isDraft = false;    if (po.getProcessInstId() == null || po.getProcessInstId().longValue() == -1) {      Long draftid = workflowDao.createDraftId();      po.setProcessInstId(draftid);      isDraft = true;    }    String userId = requestMeta.getSvUserID();    String compoId = requestMeta.getCompoId();    if (isDraft) {      AsWfDraft asWfDraft = new AsWfDraft();      asWfDraft.setCompoId(compoId);      asWfDraft.setWfDraftName(po.getProName());      asWfDraft.setUserId(userId);      asWfDraft.setMasterTabId(compoId);      asWfDraft.setWfDraftId(BigDecimal.valueOf(po.getProcessInstId().longValue()));      workflowDao.insertAsWfdraft(asWfDraft);    }    zcEbProArgueDao.insertZcEbProArgue(po);    if (po.getDetail() != null) {      List list = po.getDetail();      for (Iterator iterator = list.iterator(); iterator.hasNext();) {        ZcEbProArgueDetail d = (ZcEbProArgueDetail) iterator.next();        d.setArgueId(po.getArgueId());        zcEbProArgueDetailDao.insertZcEbProArgueDetail(d);      }      po.setDetail(list);    }  }  public void updateZcEbProArgue(ZcEbProArgue po) {    // TODO Auto-generated method stub    zcEbProArgueDao.updateZcEbProArgue(po);    zcEbProArgueDetailDao.deleteZcEbProArgueDetailByArgueId(po.getArgueId());    if (po.getDetail() != null) {      List list = po.getDetail();      for (Iterator iterator = list.iterator(); iterator.hasNext();) {        ZcEbProArgueDetail d = (ZcEbProArgueDetail) iterator.next();        d.setArgueId(po.getArgueId());        zcEbProArgueDetailDao.insertZcEbProArgueDetail(d);      }    }  }  public IZcEbProArgueDao getZcEbProArgueDao() {    return zcEbProArgueDao;  }  public void setZcEbProArgueDao(IZcEbProArgueDao zcEbProArgueDao) {    this.zcEbProArgueDao = zcEbProArgueDao;  }  public IZcEbProArgueDetailDao getZcEbProArgueDetailDao() {    return zcEbProArgueDetailDao;  }  public void setZcEbProArgueDetailDao(IZcEbProArgueDetailDao zcEbProArgueDetailDao) {    this.zcEbProArgueDetailDao = zcEbProArgueDetailDao;  }  public void interruptZcPProMake(ZcEbProArgue make, RequestMeta requestMeta) {    wfEngineAdapter.interrupt(null, make, requestMeta);  }  public ZcEbProArgue CancelMake(ZcEbProArgue currentObject, RequestMeta requestMeta) {    interruptZcPProMake(currentObject, requestMeta);    this.updateZcEbProArgue(currentObject);    return this.getZcEbProArgueById(currentObject.getArgueId());  }  public ZcEbProArgue auditFN(ZcEbProArgue currentObject, RequestMeta requestMeta) {    zcEbProArgueDao.updateZcEbProArgue(currentObject);    //    String zhuren = AsOptionUtil.getInstance().getOptionById("AUDIT_CGZX_ZR").getOptVal();//采购中心主任角色    //    String fuzhuren = AsOptionUtil.getInstance().getOptionById("AUDIT_CGZX_FZR").getOptVal();//采购中心副主任角色    //    String currentRoleId = requestMeta.getSvPoCode();    //    if (currentRoleId.equals(zhuren) || (currentRoleId.equals(fuzhuren) && !new Integer(1).equals(currentObject.getIsGoonAudit()))) {    //      String userId = (String) baseDao.read("ZcEbRequirement.getNodeCgzxUserId", currentObject.getProcessInstId());    //      WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(currentObject.getComment(), currentObject);    //      List result = new ArrayList();    //      result.add(userId);    //      workflowContext.setNextExecutor(result);    //      wfEngineAdapter.commit(workflowContext);    //      return this.getZcEbProArgueById(currentObject.getArgueId());    //    }    wfEngineAdapter.commit(currentObject.getComment(), currentObject, requestMeta);    return this.getZcEbProArgueById(currentObject.getArgueId());  }  public ZcEbProArgue callbackFN(ZcEbProArgue currentObject, RequestMeta requestMeta) {    wfEngineAdapter.callback(currentObject.getComment(), currentObject, requestMeta);    return this.getZcEbProArgueById(currentObject.getArgueId());  }  public ZcEbProArgue newCommitFN(ZcEbProArgue currentObject, RequestMeta requestMeta) {    wfEngineAdapter.newCommit(currentObject.getComment(), currentObject, requestMeta);    return this.getZcEbProArgueById(currentObject.getArgueId());  }  public ZcEbProArgue unAuditFN(ZcEbProArgue currentObject, RequestMeta requestMeta) {    wfEngineAdapter.rework(currentObject.getComment(), currentObject, requestMeta);    return this.getZcEbProArgueById(currentObject.getArgueId());  }  public ZcEbProArgue untreadFN(ZcEbProArgue currentObject, RequestMeta requestMeta) {    wfEngineAdapter.untread(currentObject.getComment(), currentObject, requestMeta);    return this.getZcEbProArgueById(currentObject.getArgueId());  }  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public IWorkflowDao getWorkflowDao() {    return workflowDao;  }  public void setWorkflowDao(IWorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  public IBaseDao getBaseDao() {    return baseDao;  }  public void setBaseDao(IBaseDao baseDao) {    this.baseDao = baseDao;  }}