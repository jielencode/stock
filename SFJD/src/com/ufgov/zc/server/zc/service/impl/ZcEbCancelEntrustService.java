package com.ufgov.zc.server.zc.service.impl;import java.math.BigDecimal;import java.util.HashMap;import java.util.List;import java.util.Map;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.common.zc.model.ZcEbCancelEntrust;import com.ufgov.zc.common.zc.model.ZcEbEntrust;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.dao.IZcEbCancelEntrustDao;import com.ufgov.zc.server.zc.dao.ibatis.BaseDao;import com.ufgov.zc.server.zc.service.IZcEbCancelEntrustService;public class ZcEbCancelEntrustService implements IZcEbCancelEntrustService {  private WFEngineAdapter wfEngineAdapter;  private IWorkflowDao workflowDao;  private IZcEbCancelEntrustDao zcEbCancelEntrustDao;  private BaseDao baseDao;  //到了标段  public final static int TO_PACK_YES = 1;  //未到标段  public final static int TO_PACK_NO = 0;  //终止  public final static String ENTRUST_END = "END";  //暂停  public final static String ENTRUST_PAUSE = "PAUSE";  public ZcEbCancelEntrust callbackFN(ZcEbCancelEntrust zcEbCancelEntrust, RequestMeta meta) {    wfEngineAdapter.callback(zcEbCancelEntrust.getComment(), zcEbCancelEntrust, meta);    return getZcEbCancelEntrustByProcessInstId(zcEbCancelEntrust);  }  public ZcEbCancelEntrust deleteZcEbCancelEntrust(ZcEbCancelEntrust zcEbCancelEntrust, RequestMeta requestMeta) {    zcEbCancelEntrustDao.deleteZcEbCancelEntrustFN(zcEbCancelEntrust, requestMeta);    return null;  }  public List getZcEbCancelEntrustList(ElementConditionDto dto, RequestMeta meta) {    return zcEbCancelEntrustDao.getZcEbCancelEntrustListFN(dto, meta);  }  public ZcEbCancelEntrust newCommitFN(ZcEbCancelEntrust zcEbCancelEntrust, RequestMeta meta) {    //送审的时候生成正式的编号    //暂停所有任务、送审过程完成项目终止    //送审    // wfEngineAdapter.newCommit(zcEbCancelEntrust.getComment(), zcEbCancelEntrust);    createWfDraft(zcEbCancelEntrust, meta);    updateData(zcEbCancelEntrust, this.ENTRUST_PAUSE);    return getZcEbCancelEntrustByProcessInstId(zcEbCancelEntrust);  }  private void createWfDraft(ZcEbCancelEntrust cancelEntrust, RequestMeta meta) {    Long draftid = workflowDao.createDraftId();    cancelEntrust.setProcessInstId(draftid);    AsWfDraft asWfDraft = new AsWfDraft();    asWfDraft.setCompoId(meta.getCompoId());    asWfDraft.setWfDraftName(cancelEntrust.getTitleField());    asWfDraft.setUserId(meta.getSvUserID());    asWfDraft.setMasterTabId("ZC_EB_NOTICE");    asWfDraft.setWfDraftId(BigDecimal.valueOf(draftid.longValue()));    workflowDao.insertAsWfdraft(asWfDraft);  }  /**   * update 数据   */  public void updateData(ZcEbCancelEntrust zcEbCancelEntrust, String status) {    //获取项目的进度如果到标段获取项目、未到标段返回查询批办单    if (getProjPosition(zcEbCancelEntrust) == this.TO_PACK_YES) {      //      ZcEbProj proj = (ZcEbProj) baseDao.read("", zcEbCancelEntrust.getZcEbEntrust().getSn());      updateProjStatus(proj, status);    }    updateEntrustStatus(zcEbCancelEntrust.getZcEbEntrust(), status);  }  /**   * 更新标段前数据、包括委托协议、采购需求、采购批办单、采购任务   * 不取项目到哪个环节的状态判定、都进行数据更新、没有记录数据多执行几个无效的sql而已   * @param zcEbCancelEntrust   * @param entrustPAUSE   */  private void updateEntrustStatus(ZcEbEntrust ebEntrust, String status) {    Map map = new HashMap();    map.put("entrustSn", ebEntrust.getSn());    map.put("status", status);    //更新采购任务表    baseDao.update("ZcEbCancelEntrust.updateZcEbEntrust", map);    //更新批办单表    baseDao.update("ZcEbCancelEntrust.updateZcEbAuditSheet", map);    //更新采购需求表    baseDao.update("ZcEbCancelEntrust.updateZcEbReqirement", map);    //更新委托协议表    baseDao.update("ZcEbCancelEntrust.updateZcEbProtocol", map);    //更新采购计划表    Map data = new HashMap();    data.put("makeCode", ebEntrust.getZcMakeCode());    data.put("status", status);  }  /**   * 根据项目信息更新后面项目数据状态   * 送审后数据处于暂停状态、如果是结束审批更新状态为终止状态   * 需要更新的表   * 项目表、标段表、   * 后面的数据和项目编号关联、因此使用项目编号去更新、传入状态值在不同的过程中都可以使用   * @param proj   */  private void updateProjStatus(ZcEbProj proj, String status) {    Map map = new HashMap();    map.put("projCode", proj.getProjCode());    map.put("status", status);    //更新项目表    baseDao.update("ZcEbCancelEntrust.updateZcEbProj", map);    //更新标段表    baseDao.update("ZcEbCancelEntrust.updateZcEbPack", map);    //更新公告    baseDao.update("ZcEbCancelEntrust.updateZcEbBulletin", map);    //更新报名    baseDao.update("ZcEbCancelEntrust.updateZcEbSignupPack", map);  }  /**   * 或者是直接更新只获取到项目就行按照此方法做比较简单   */  private int getProjPosition(ZcEbCancelEntrust zcEbCancelEntrust) {    //查询标段看是否存在信息    ZcEbPack pack = (ZcEbPack) baseDao.read("", zcEbCancelEntrust.getZcEbEntrust().getSn());    if (pack == null) {      return this.TO_PACK_NO;    } else {      return this.TO_PACK_YES;    }  }  public ZcEbCancelEntrust suggestPassFN(ZcEbCancelEntrust zcEbCancelEntrust, RequestMeta meta) {    wfEngineAdapter.commit(zcEbCancelEntrust.getComment(), zcEbCancelEntrust, meta);    ZcEbCancelEntrust retCancelEntrust = getZcEbCancelEntrustByProcessInstId(zcEbCancelEntrust);    if ("exec".equals(retCancelEntrust.getStatus())) {      updateData(zcEbCancelEntrust, this.ENTRUST_END);    }    return retCancelEntrust;  }  public ZcEbCancelEntrust unAuditFN(ZcEbCancelEntrust zcEbCancelEntrust, RequestMeta meta) {    wfEngineAdapter.unAudit(zcEbCancelEntrust.getComment(), zcEbCancelEntrust, meta);    return getZcEbCancelEntrustByProcessInstId(zcEbCancelEntrust);  }  public ZcEbCancelEntrust unTreadFN(ZcEbCancelEntrust zcEbCancelEntrust, RequestMeta meta) {    wfEngineAdapter.untread(zcEbCancelEntrust.getComment(), zcEbCancelEntrust, meta);    return getZcEbCancelEntrustByProcessInstId(zcEbCancelEntrust);  }  public ZcEbCancelEntrust updateZcEbCancelEntrust(ZcEbCancelEntrust zcEbCancelEntrust, RequestMeta requestMeta) {    if (zcEbCancelEntrust.getProcessInstId() == null) {      //或者取      this.requestMeta.setFuncId("fnew");      Long draftid = workflowDao.createDraftId();      zcEbCancelEntrust.setProcessInstId(draftid);      zcEbCancelEntrustDao.addZcEbCancelEntrustFN(zcEbCancelEntrust, requestMeta);    } else {      zcEbCancelEntrustDao.updateZcEbCancelEntrustFN(zcEbCancelEntrust, requestMeta);    }    return getZcEbCancelEntrustByProcessInstId(zcEbCancelEntrust);  }  //获取单个终止任务计划数据  public ZcEbCancelEntrust getZcEbCancelEntrustByProcessInstId(ZcEbCancelEntrust zcEbCancelEntrust) {    return zcEbCancelEntrustDao.getZcEbCancelEntrustByProcessInstIdFN(zcEbCancelEntrust);  }  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public IWorkflowDao getWorkflowDao() {    return workflowDao;  }  public void setWorkflowDao(IWorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  public IZcEbCancelEntrustDao getZcEbCancelEntrustDao() {    return zcEbCancelEntrustDao;  }  public void setZcEbCancelEntrustDao(IZcEbCancelEntrustDao zcEbCancelEntrustDao) {    this.zcEbCancelEntrustDao = zcEbCancelEntrustDao;  }  public BaseDao getBaseDao() {    return baseDao;  }  public void setBaseDao(BaseDao baseDao) {    this.baseDao = baseDao;  }}