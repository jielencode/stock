package com.ufgov.zc.server.zc.service.impl;import java.math.BigDecimal;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import com.ufgov.zc.common.zc.model.Menugoods;import com.ufgov.zc.common.zc.model.ZcBCatalogue;import com.ufgov.zc.common.zc.model.ZcBMerDiscount;import com.ufgov.zc.common.zc.model.ZcBMerDiscountWeb;import com.ufgov.zc.common.zc.model.ZcBMerPic;import com.ufgov.zc.common.zc.model.ZcBMerPrice;import com.ufgov.zc.common.zc.model.ZcBMerchandise;import com.ufgov.zc.server.zc.dao.IZcBCatalogueDao;import com.ufgov.zc.server.zc.dao.IZcBMerchandiseDao;import com.ufgov.zc.server.zc.dao.IZcBrandDao;import com.ufgov.zc.server.zc.service.IMenuGoodsService;import com.ufgov.zc.server.zc.web.form.MerchandiseForm;public class MenuGoodsService implements IMenuGoodsService {  private IZcBCatalogueDao zcBCatalogueDao;  private IZcBrandDao zcBrandDao;  private IZcBMerchandiseDao zcBMerchandiseDao;  public IZcBMerchandiseDao getZcBMerchandiseDao() {    return zcBMerchandiseDao;  }  public void setZcBMerchandiseDao(IZcBMerchandiseDao zcBMerchandiseDao) {    this.zcBMerchandiseDao = zcBMerchandiseDao;  }  public IZcBCatalogueDao getZcBCatalogueDao() {    return zcBCatalogueDao;  }  public void setZcBCatalogueDao(IZcBCatalogueDao zcBCatalogueDao) {    this.zcBCatalogueDao = zcBCatalogueDao;  }  public IZcBrandDao getZcBrandDao() {    return zcBrandDao;  }  public void setZcBrandDao(IZcBrandDao zcBrandDao) {    this.zcBrandDao = zcBrandDao;  }  public List getMerchandise(Map parameterObject) {    return zcBMerchandiseDao.getMerchandise(parameterObject);  }  public void addMerchandise(MerchandiseForm merchandiseForm) {    zcBMerchandiseDao.addMerchandise(merchandiseForm.getZcBMerchandise());    ZcBMerPrice zcBMerPrice = merchandiseForm.getZcBMerPrice();    zcBMerPrice.setZC_MER_CODE(merchandiseForm.getZcBMerchandise().getZcMerCode());//同一个商品    zcBMerchandiseDao.addMerchPrice(zcBMerPrice);    ZcBMerDiscount zcBMerDiscount = merchandiseForm.getZcBMerDiscount();    zcBMerDiscount.setZcMerCode(merchandiseForm.getZcBMerchandise().getZcMerCode());//同一商品    zcBMerchandiseDao.addMerchDiscount(zcBMerDiscount);  }  public void addMerchandiseNW(MerchandiseForm merchandiseForm) {    zcBMerchandiseDao.addMerchandiseNW(merchandiseForm.getZcBMerchandise());//商品的基本信息      }  public void updateMerchandiseNW(MerchandiseForm merchandiseForm) {    zcBMerchandiseDao.updateMerchandiseNW(merchandiseForm.getZcBMerchandise());  }  public void addZcMerPic(ZcBMerPic zcBMerPic) {    zcBMerchandiseDao.addZcMerPic(zcBMerPic);//商品和图片关系表信息     }  public void deleteZcMerPic(String zcMerCode) { //修改商品和图片关系表的信息    zcBMerchandiseDao.deleteZcMerPicByMerCode(zcMerCode); //删除原有信息  }  public void addMerchandiseNWForCataProp(MerchandiseForm merchandiseForm) {    zcBMerchandiseDao.addMerchandiseNWForCataProp(merchandiseForm.getZcBMerCatalogueProp());//商品品目的基本属性  }  public void updateMerchandiseNWForCataProp(MerchandiseForm merchandiseForm) {    zcBMerchandiseDao.updateMerchandiseNWForCataProp(merchandiseForm.getZcBMerCatalogueProp());//修改商品品目的基本属性  }  public void EditMerchandise(MerchandiseForm merchandiseForm) {    BigDecimal price = merchandiseForm.getZC_MER_CG_PRICE();    BigDecimal price_new = merchandiseForm.getZcBMerPrice().getZC_MER_CG_PRICE();    int a = price.compareTo(price_new);    if (price.compareTo(price_new) >= 0) {//保存在原表中      //  zcBMerchandiseDao.editMerchandise(merchandiseForm.getZcBMerchandise());      zcBMerchandiseDao.editMerchandisePrice(merchandiseForm.getZcBMerPrice());      zcBMerchandiseDao.editMerchandiseDiscount(merchandiseForm.getZcBMerDiscount());    } else {//修改的价格偏大，保存在备份表中待审核,只保存最新的，所以实际是新增操作      //  zcBMerchandiseDao.editWebMerchandise( merchandiseForm.getZcBMerchandise());      zcBMerchandiseDao.deleteWebMerchandisePrice(merchandiseForm.getZcBMerPrice());      zcBMerchandiseDao.deleteWebMerchandiseDiscount(merchandiseForm.getZcBMerDiscount());      zcBMerchandiseDao.editWebMerchandisePrice(merchandiseForm.getZcBMerPrice());      zcBMerchandiseDao.editWebMerchandiseDiscount(merchandiseForm.getZcBMerDiscount());    }  }  public MerchandiseForm findMerchanDiseBy(String zcMerCode) {    MerchandiseForm merchandiseForm = new MerchandiseForm();    zcBMerchandiseDao.findMerchanDiseBy(zcMerCode);    ZcBMerchandise zcBMerchandise = zcBMerchandiseDao.findMerchanDiseBy(zcMerCode);    ZcBMerPrice zcBMerPrice = zcBMerchandiseDao.findMerchanDisePriceBy(zcMerCode);    ZcBMerDiscount zcBMerDiscount = zcBMerchandiseDao.findMerchanDiseDiscountBy(zcMerCode);    merchandiseForm.setZcBMerchandise(zcBMerchandise);    merchandiseForm.setZcBMerDiscount(zcBMerDiscount);    merchandiseForm.setZcBMerPrice(zcBMerPrice);    return merchandiseForm;  }  public List getMerchandiseBySupplier(Map parameterObject) {    List list = new ArrayList();    list = zcBMerchandiseDao.getMerchandiseBySupplier(parameterObject);    return list;  }  public Integer getCountNum(Map parameterObject) {    return zcBMerchandiseDao.getMerchandiseCount(parameterObject);  }  public Integer getCountNumWebBySupplier(Map parameterObject) {    return zcBMerchandiseDao.getMerchandiseCountWebBySup(parameterObject);  }  public Integer getGoodsNumBySup(Map parameterObject) {    return zcBMerchandiseDao.getSupGoodsCount(parameterObject);  }  public Menugoods getMenuGoodsInfo(String catalogueId, String brandId) {    Menugoods menugoods = new Menugoods();    List catalogueList = this.zcBCatalogueDao.getCatalogueForMenuGoods();    Map catalogues = new LinkedHashMap();    List catalogueGroup = null;    List catalogueTitle = null;    for (int i = 0; i < catalogueList.size(); i++) {      ZcBCatalogue catalogue = (ZcBCatalogue) catalogueList.get(i);      if (catalogue.getLevels() == 1) {        catalogueGroup = new ArrayList();        catalogues.put(catalogue.getZcTypeName(), catalogueGroup);      } else {        if (catalogueId.equals(catalogue.getZcCatalogueCode())) {          catalogueTitle = catalogueGroup;        }        catalogueGroup.add(catalogue);      }    }    menugoods.setCatalogues(catalogues);    menugoods.setCataloguesTitle(catalogueTitle);    menugoods.setBrands(this.zcBrandDao.getBrandsForMenuGoods(catalogueId));    return menugoods;  }  public ZcBMerchandise getZcBMerchandise(String zcMerCode) {    return zcBMerchandiseDao.getMerchandiseInfo(zcMerCode);  }  public void deleteMerchandise(String[] ids) {    for (int i = 0; i < ids.length; i++) {      zcBMerchandiseDao.deleteMerchandise(ids[i]);    }  }  public List getMerchandiseWebBySupplier(Map parameterObject) {    return zcBMerchandiseDao.getMerchandiseWebBySupplier(parameterObject);  }  public List getZcMerPicID(String zcMerCode) {    return zcBMerchandiseDao.getZcMerPicID(zcMerCode);  }  public ZcBMerchandise getZcBMerchandiseNW(String zcMerCode) {    return zcBMerchandiseDao.getMerchandiseInfoWeb(zcMerCode);  }  public void deleteZcMerPicByMerCodeAndImgID(Map parameterObject) {    zcBMerchandiseDao.deleteZcMerPicByMerCodeAndImgID(parameterObject);  }  public List getZcBMerDiscountWebListByMerCode(String zcMerCode) {    return zcBMerchandiseDao.getZcBMerDiscountWebListByMerCode(zcMerCode);  }  public void addZcBMerDiscountWeb(ZcBMerDiscountWeb zcBMerDiscountWeb) {    zcBMerchandiseDao.addZcBMerDiscountWeb(zcBMerDiscountWeb);  }  public List getZcBMerDiscountListByMerCode(String zcMerCode) {    return zcBMerchandiseDao.getZcBMerDiscountListByMerCode(zcMerCode);  }  public void deleteZcBMerDiscountWeb(String zcMerCode) {    zcBMerchandiseDao.deleteZcBMerDiscountWeb(zcMerCode); //先将表中关于该商品的折扣率信息全部删除，然后再插入新的  }  public void deleteMerDiscountByProperty(Map parameterObject) {    zcBMerchandiseDao.deleteMerDiscountByProperty(parameterObject);  }}