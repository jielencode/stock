package com.ufgov.zc.server.zc.service.impl;import java.math.BigDecimal;import java.util.Date;import java.util.List;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.common.zc.model.ZcEbProCompletion;import com.ufgov.zc.common.zc.model.ZcEbProCompletionExample;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.dao.IBaseDao;import com.ufgov.zc.server.zc.dao.IZcEbProCompletionDAO;import com.ufgov.zc.server.zc.dao.IZcXmcgHtDao;import com.ufgov.zc.server.zc.service.IZcEbProCompletionService;public class ZcEbProCompletionService implements IZcEbProCompletionService {  private IZcEbProCompletionDAO zcEbProCompletionDAO;  private IZcXmcgHtDao zcXmcgHtDao;  private WFEngineAdapter wfEngineAdapter;  private IWorkflowDao workflowDao;  private IBaseDao baseDao;  public void deleteZcEbProCompletionById(String id) {    // TODO Auto-generated method stub    zcEbProCompletionDAO.deleteByPrimaryKey(id);  }  public void deleteZcEbProCompletionByIds(String[] id) {    // TODO Auto-generated method stub    for (int i = 0; i < id.length; i++) {      this.deleteZcEbProCompletionById(id[i]);    }  }  public List getZcEbProCompletionByCondition(ElementConditionDto condition, RequestMeta requestMeta) {    condition.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(condition.getWfcompoId(), NumLimConstants.FWATCH));    return zcEbProCompletionDAO.selectByExample(condition);  }  public ZcEbProCompletion getZcEbProCompletionById(String id) {    // TODO Auto-generated method stub    return zcEbProCompletionDAO.selectByPrimaryKey(id);  }  public ZcEbProCompletion insertZcEbProCompletione(ZcEbProCompletion po, RequestMeta requestMeta) {    boolean isDraft = false;    if (po.getProcessInstId() == null || po.getProcessInstId().longValue() == -1) {      Long draftid = workflowDao.createDraftId();      po.setProcessInstId(draftid);      isDraft = true;    }    String userId = requestMeta.getSvUserID();    String compoId = requestMeta.getCompoId();    if (isDraft) {      AsWfDraft asWfDraft = new AsWfDraft();      asWfDraft.setCompoId(compoId);      asWfDraft.setWfDraftName(po.getCompletionCode());      asWfDraft.setUserId(userId);      asWfDraft.setMasterTabId(compoId);      asWfDraft.setWfDraftId(BigDecimal.valueOf(po.getProcessInstId().longValue()));      workflowDao.insertAsWfdraft(asWfDraft);    }    int id = zcEbProCompletionDAO.getNewId();    po.setCompletionId(String.valueOf(id));    po.setReportDate(new Date());    po.setChengbanStatus("0");    zcEbProCompletionDAO.insert(po);    return po;  }  public void updateZcEbProCompletion(ZcEbProCompletion po) {    // TODO Auto-generated method stub    zcEbProCompletionDAO.updateByPrimaryKeySelective(po);  }  public IZcEbProCompletionDAO getZcEbProCompletionDAO() {    return zcEbProCompletionDAO;  }  public void setZcEbProCompletionDAO(IZcEbProCompletionDAO zcEbProCompletionDAO) {    this.zcEbProCompletionDAO = zcEbProCompletionDAO;  }  public List getTenderDepartsByEntrustSn(String sn) {    // TODO Auto-generated method stub    return zcEbProCompletionDAO.getTenderDepartsByEntrustSn(sn);  }  public void interruptZcPProMake(ZcEbProCompletion make, RequestMeta requestMeta) {    wfEngineAdapter.interrupt(null, make, requestMeta);  }  public ZcEbProCompletion CancelMake(ZcEbProCompletion currentObject, RequestMeta requestMeta) {    // TODO Auto-generated method stub    interruptZcPProMake(currentObject, requestMeta);    updateZcEbProCompletion(currentObject);    return null;  }  public ZcEbProCompletion auditFN(ZcEbProCompletion currentObject, RequestMeta requestMeta) {    zcEbProCompletionDAO.updateByPrimaryKey(currentObject);    //    String zhuren = AsOptionUtil.getInstance().getOptionById("AUDIT_CGZX_ZR").getOptVal();//采购中心主任角色    //    String fuzhuren = AsOptionUtil.getInstance().getOptionById("AUDIT_CGZX_FZR").getOptVal();//采购中心副主任角色    //    String currentRoleId = requestMeta.getSvPoCode();    //    if (currentRoleId.equals(zhuren) || (currentRoleId.equals(fuzhuren) && !new Integer(1).equals(currentObject.getIsGoonAudit()))) {    //      String userId = (String) baseDao.read("ZcEbRequirement.getNodeCgzxUserId", currentObject.getProcessInstId());    //      WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(currentObject.getComment(), currentObject);    //      List result = new ArrayList();    //      result.add(userId);    //      workflowContext.setNextExecutor(result);    //      wfEngineAdapter.commit(workflowContext);    //      return currentObject;    //    }    wfEngineAdapter.commit(currentObject.getComment(), currentObject, requestMeta);    return currentObject;  }  public ZcEbProCompletion newCommitFN(ZcEbProCompletion currentObject, boolean isFromList, RequestMeta requestMeta) {    if (isFromList) {      zcEbProCompletionDAO.updateByPrimaryKeySelective(currentObject);    }    //    if ("CGZX_KY_CG".equals(requestMeta.getSvPoCode())) {    //      WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(currentObject.getComment(), currentObject);    //      HashMap para = new HashMap();    //      para.put("ND", String.valueOf(requestMeta.getSvNd()));    //      para.put("POSI_CODE", "CGZX_KZ_CG");    //      para.put("ORG_CODE", requestMeta.getSvOrgCode());    //      String cgcfzr = zcXmcgHtDao.getCgzxzrUserId(para);    //      List result = new ArrayList();    //      result.add(cgcfzr);    //      workflowContext.setNextExecutor(result);    //      wfEngineAdapter.commit(workflowContext);    //      return currentObject;    //    }    wfEngineAdapter.newCommit(currentObject.getComment(), currentObject, requestMeta);    return currentObject;  }  public ZcEbProCompletion callbackFN(ZcEbProCompletion currentObject, RequestMeta requestMeta) {    wfEngineAdapter.callback(currentObject.getComment(), currentObject, requestMeta);    return null;  }  public ZcEbProCompletion newCommitFN(RequestMeta requestMeta, ZcEbProCompletion currentObject, boolean isFromList) {    if (!isFromList) {      //this.updateZcEbProCompletion(currentObject);    }    wfEngineAdapter.newCommit(currentObject.getComment(), currentObject, requestMeta);    return this.getZcEbProCompletionById(currentObject.getId());  }  public ZcEbProCompletion unAuditFN(ZcEbProCompletion currentObject, RequestMeta requestMeta) {    wfEngineAdapter.rework(currentObject.getComment(), currentObject, requestMeta);    return currentObject;  }  public ZcEbProCompletion untreadFN(ZcEbProCompletion currentObject, RequestMeta requestMeta) {    wfEngineAdapter.untread(currentObject.getComment(), currentObject, requestMeta);    return currentObject;  }  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public IWorkflowDao getWorkflowDao() {    return workflowDao;  }  public void setWorkflowDao(IWorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  public IZcXmcgHtDao getZcXmcgHtDao() {    return zcXmcgHtDao;  }  public void setZcXmcgHtDao(IZcXmcgHtDao zcXmcgHtDao) {    this.zcXmcgHtDao = zcXmcgHtDao;  }  public void deleteZcEbProCompletionByCode(String completionCode) {    ZcEbProCompletionExample example = new ZcEbProCompletionExample();    example.createCriteria().andCompletionCodeEqualTo(completionCode);    zcEbProCompletionDAO.deleteByExample(example);  }  public IBaseDao getBaseDao() {    return baseDao;  }  public void setBaseDao(IBaseDao baseDao) {    this.baseDao = baseDao;  }}