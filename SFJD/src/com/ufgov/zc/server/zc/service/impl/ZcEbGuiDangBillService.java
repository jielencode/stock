/**   * @(#) project: ZFCG* @(#) file: ZcEbGuiDangBillService.java* * Copyright 2011 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.server.zc.service.impl;import java.math.BigDecimal;import java.util.List;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.common.zc.model.ZcEbGuiDangBill;import com.ufgov.zc.common.zc.model.ZcEbGuiDangItem;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.system.util.NumUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.ZcSUtil;import com.ufgov.zc.server.zc.dao.ibatis.BaseDao;import com.ufgov.zc.server.zc.service.IZcEbGuiDangBillService;/*** @ClassName: ZcEbGuiDangBillService* @Description: TODO(这里用一句话描述这个类的作用)* @date: 2011-5-12 上午11:33:25* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class ZcEbGuiDangBillService implements IZcEbGuiDangBillService {  private BaseDao baseDao;  private WFEngineAdapter wfEngineAdapter;  private IWorkflowDao workflowDao;  public BaseDao getBaseDao() {    return baseDao;  }  public void setBaseDao(BaseDao baseDao) {    this.baseDao = baseDao;  }  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public IWorkflowDao getWorkflowDao() {    return workflowDao;  }  public void setWorkflowDao(IWorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  public ZcEbGuiDangBill auditFN(ZcEbGuiDangBill zcEbGuiDangBill, RequestMeta requestMeta) {    //    String zhuren = AsOptionUtil.getInstance().getOptionById("AUDIT_CGZX_ZR").getOptVal();//采购中心主任角色    //    String fuzhuren = AsOptionUtil.getInstance().getOptionById("AUDIT_CGZX_FZR").getOptVal();//采购中心副主任角色    //    String currentRoleId = requestMeta.getSvPoCode();    //    if (currentRoleId.equals(zhuren) || (currentRoleId.equals(fuzhuren) && !new Integer(1).equals(zcEbGuiDangBill.getIsGoonAudit()))) {    //      String userId = (String) baseDao.read("ZcEbRequirement.getNodeCgzxUserId", zcEbGuiDangBill.getProcessInstId());    //      WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(zcEbGuiDangBill.getComment(), zcEbGuiDangBill);    //      List result = new ArrayList();    //      result.add(userId);    //      workflowContext.setNextExecutor(result);    //      wfEngineAdapter.commit(workflowContext);    //      return zcEbGuiDangBill;    //    }    wfEngineAdapter.commit(zcEbGuiDangBill.getComment(), zcEbGuiDangBill, requestMeta);    return zcEbGuiDangBill;  }  public ZcEbGuiDangBill callbackFN(ZcEbGuiDangBill zcEbGuiDangBill, RequestMeta requestMeta) {    wfEngineAdapter.callback(zcEbGuiDangBill.getComment(), zcEbGuiDangBill, requestMeta);    return zcEbGuiDangBill;  }  public void deleteZcEbGuiDangBill(ZcEbGuiDangBill zcEbGuiDangBill) {    baseDao.delete("ZcEbGuiDang.deleteZcEbGuiDangBillById", zcEbGuiDangBill.getGuiDangId());    baseDao.delete("ZcEbGuiDang.deleteZcEbGuiDangItemByGuiDangId", zcEbGuiDangBill.getGuiDangId());  }  public void deleteZcEbGuiDangBill(List zcEbGuiDangBillList) {    for (int i = 0; i < zcEbGuiDangBillList.size(); i++) {      ZcEbGuiDangBill bill = (ZcEbGuiDangBill) zcEbGuiDangBillList.get(i);      baseDao.delete("ZcEbGuiDang.deleteZcEbGuiDangBillById", bill.getGuiDangId());      baseDao.delete("ZcEbGuiDang.deleteZcEbGuiDangItemByGuiDangId", bill.getGuiDangId());    }  }  public List getZcEbGuiDangBillList(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    elementConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(elementConditionDto.getWfcompoId(), NumLimConstants.FWATCH));    List list = baseDao.query("ZcEbGuiDang.getZcEbGuiDangBillList", elementConditionDto);    for (int i = 0; i < list.size(); i++) {      ZcEbGuiDangBill bill = (ZcEbGuiDangBill) list.get(i);      List itemList = baseDao.query("ZcEbGuiDang.getZcEbGuiDangItemList", bill.getGuiDangId());      bill.setItemList(itemList);    }    ZcSUtil.setBillDBDigest(list);    return list;  }  public ZcEbGuiDangBill getZcEbGuiDangBill(String guiDangId) {    ZcEbGuiDangBill bill = (ZcEbGuiDangBill) baseDao.read("ZcEbGuiDang.getZcEbGuiDongBillById", guiDangId);    List itemList = baseDao.query("ZcEbGuiDang.getZcEbGuiDangItemList", bill.getGuiDangId());    bill.setItemList(itemList);    bill.setDbDigest(bill.digest());    return bill;  }  public ZcEbGuiDangBill newCommitFN(ZcEbGuiDangBill zcEbGuiDangBill, RequestMeta requestMeta) {    wfEngineAdapter.newCommit(zcEbGuiDangBill.getComment(), zcEbGuiDangBill, requestMeta);    return zcEbGuiDangBill;  }  public ZcEbGuiDangBill saveZcEbGuiDangBill(ZcEbGuiDangBill zcEbGuiDangBill, RequestMeta requestMeta) {    List biList = zcEbGuiDangBill.getItemList();    if (biList == null || biList.size() == 0)      throw new RuntimeException("归档资料清单不能为空");    String userId = requestMeta.getSvUserID();    String compoId = requestMeta.getCompoId();    boolean isDraft = false;    if (zcEbGuiDangBill.getProcessInstId() == null || zcEbGuiDangBill.getProcessInstId().longValue() == -1) {      Long draftid = workflowDao.createDraftId();      zcEbGuiDangBill.setProcessInstId(draftid);      isDraft = true;    }    if ("".equals(ZcSUtil.safeString(zcEbGuiDangBill.getGuiDangId())) || zcEbGuiDangBill.getGuiDangId().equals("自动编号")) {      String code = NumUtil.getInstance().getNo(compoId, "GUIDANG_ID", zcEbGuiDangBill);      zcEbGuiDangBill.setGuiDangId(code);      baseDao.insert("ZcEbGuiDang.insertEbGuiDangBill", zcEbGuiDangBill);      for (int i = 0; i < biList.size(); i++) {        ZcEbGuiDangItem bi = (ZcEbGuiDangItem) biList.get(i);        bi.setGuiDangId(zcEbGuiDangBill.getGuiDangId());        baseDao.insert("ZcEbGuiDang.insertZcEbGuiDangItem", bi);      }    } else {      String guiDangId = zcEbGuiDangBill.getGuiDangId();      ZcEbGuiDangBill originalBean = getZcEbGuiDangBill(guiDangId);      ZcSUtil.checkDigest(zcEbGuiDangBill, originalBean, "guiDangId");//一致性校验      baseDao.update("ZcEbGuiDang.updateEbGuiDangBill", zcEbGuiDangBill);      baseDao.delete("ZcEbGuiDang.deleteZcEbGuiDangItemByGuiDangId", zcEbGuiDangBill.getGuiDangId());      for (int i = 0; i < biList.size(); i++) {        ZcEbGuiDangItem bi = (ZcEbGuiDangItem) biList.get(i);        bi.setGuiDangId(zcEbGuiDangBill.getGuiDangId());        baseDao.insert("ZcEbGuiDang.insertZcEbGuiDangItem", bi);      }    }    if (isDraft) {      AsWfDraft asWfDraft = new AsWfDraft();      asWfDraft.setCompoId(compoId);      asWfDraft.setWfDraftName(zcEbGuiDangBill.getGuiDangId());      asWfDraft.setUserId(userId);      asWfDraft.setMasterTabId(compoId);      asWfDraft.setWfDraftId(BigDecimal.valueOf(zcEbGuiDangBill.getProcessInstId().longValue()));      workflowDao.insertAsWfdraft(asWfDraft);    }    return getZcEbGuiDangBill(zcEbGuiDangBill.getGuiDangId());  }  public ZcEbGuiDangBill unAuditFN(ZcEbGuiDangBill ZcEbGuiDangBill, RequestMeta requestMeta) {    wfEngineAdapter.rework(ZcEbGuiDangBill.getComment(), ZcEbGuiDangBill, requestMeta);    return ZcEbGuiDangBill;  }  public ZcEbGuiDangBill untreadFN(ZcEbGuiDangBill ZcEbGuiDangBill, RequestMeta requestMeta) {    wfEngineAdapter.untread(ZcEbGuiDangBill.getComment(), ZcEbGuiDangBill, requestMeta);    return ZcEbGuiDangBill;  }}