package com.ufgov.zc.server.zc.service.impl;import java.math.BigDecimal;import java.util.List;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.common.zc.model.EmFundPayBill;import com.ufgov.zc.common.zc.model.EmFundPayBillDetail;import com.ufgov.zc.common.zc.model.EmFundPayReport;import com.ufgov.zc.server.system.dao.ibatis.WorkflowDao;import com.ufgov.zc.server.system.util.NumUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.ZcSUtil;import com.ufgov.zc.server.zc.dao.IBaseDao;import com.ufgov.zc.server.zc.service.IZcEmFundPayService;public class ZcEmFundPayService implements IZcEmFundPayService {  private IBaseDao baseDao;  private WorkflowDao workflowDao;  private WFEngineAdapter wfEngineAdapter;  public IBaseDao getBaseDao() {    return baseDao;  }  public void setBaseDao(IBaseDao baseDao) {    this.baseDao = baseDao;  }  public WorkflowDao getWorkflowDao() {    return workflowDao;  }  public void setWorkflowDao(WorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public EmFundPayBill auditFN(EmFundPayBill emFundPayBill, RequestMeta requestMeta) {    wfEngineAdapter.commit(emFundPayBill.getComment(), emFundPayBill, requestMeta);    return emFundPayBill;  }  public EmFundPayReport auditFN(EmFundPayReport emFundPayReport, RequestMeta requestMeta) {    wfEngineAdapter.commit(emFundPayReport.getComment(), emFundPayReport, requestMeta);    return emFundPayReport;  }  public EmFundPayBill callbackFN(EmFundPayBill emFundPayBill, RequestMeta requestMeta) {    wfEngineAdapter.callback(emFundPayBill.getComment(), emFundPayBill, requestMeta);    return emFundPayBill;  }  public EmFundPayReport callbackFN(EmFundPayReport emFundPayReport, RequestMeta requestMeta) {    wfEngineAdapter.callback(emFundPayReport.getComment(), emFundPayReport, requestMeta);    return emFundPayReport;  }  public void deleteEmFundPayBill(EmFundPayBill emFundPayBill, RequestMeta requestMeta) {    baseDao.delete("EmFundPay.deleteEmFundPayBillById", emFundPayBill.getBillId());    baseDao.delete("EmFundPay.deleteEmFundPayBillDetailById", emFundPayBill.getBillId());  }  public void deleteEmFundPayReport(EmFundPayReport emFundPayReport, RequestMeta requestMeta) {    baseDao.delete("EmFundPay.deleteEmFundPayReportById", emFundPayReport.getFundReportId());  }  public EmFundPayBill getEmFundPayBill(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    EmFundPayBill bill = (EmFundPayBill) baseDao.read("EmFundPay.getEmFundPayBIllById", elementConditionDto    .getZcText0());    ElementConditionDto dto1 = new ElementConditionDto();    dto1.setZcText1(bill.getBillId());    bill.setDetailList(baseDao.query("getEmFundPayBillDetailList", dto1));    bill.setDbDigest(bill.digest());    return bill;  }  public List getEmFundPayBillList(ElementConditionDto dto, RequestMeta requestMeta) {    //getNumLimCondOrigin方法在吉林代码里，后续进行调整    //    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondOrigin(requestMeta.getSvUserID(),    //    //    dto.getWfcompoId(), NumLimConstants.FWATCH, "USE_ID", requestMeta.getSvRoleId(), requestMeta));    List list = baseDao.query("EmFundPay.getEmFundPayBillList", dto);    for (int i = 0; i < list.size(); i++) {      EmFundPayBill bill = (EmFundPayBill) list.get(i);      ElementConditionDto dto1 = new ElementConditionDto();      dto1.setZcText1(bill.getBillId());      bill.setDetailList(baseDao.query("EmFundPay.getEmFundPayBillDetailList", dto1));    }    ZcSUtil.setBillDBDigest(list);    return list;  }  public EmFundPayReport getEmFundPayReport(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    return (EmFundPayReport) baseDao.read("EmFundPay.getEmFundPayReportById", elementConditionDto    .getZcText0());  }  public List getEmFundPayReportList(ElementConditionDto dto, RequestMeta requestMeta) {    //getNumLimCondOrigin方法在吉林代码里，后续进行调整    //    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondOrigin(requestMeta.getSvUserID(),    //    //    dto.getWfcompoId(), NumLimConstants.FWATCH, "USE_ID", requestMeta.getSvRoleId(), requestMeta));    List list = baseDao.query("EmFundPay.getEmFundPayReportList", dto);    ZcSUtil.setBillDBDigest(list);    return list;  }  public EmFundPayBill newCommitFN(EmFundPayBill emFundPayBill, RequestMeta requestMeta) {    wfEngineAdapter.newCommit(emFundPayBill.getComment(), emFundPayBill, requestMeta);    return emFundPayBill;  }  public EmFundPayReport newCommitFN(EmFundPayReport emFundPayReport, RequestMeta requestMeta) {    wfEngineAdapter.newCommit(emFundPayReport.getComment(), emFundPayReport, requestMeta);    return emFundPayReport;  }  public EmFundPayBill saveEmFundPayBill(EmFundPayBill emFundPayBill, RequestMeta requestMeta) {    List biList = emFundPayBill.getDetailList();    if (biList == null || biList.size() == 0)      throw new RuntimeException("经费开支明细不能为空");    String userId = requestMeta.getSvUserID();    String compoId = requestMeta.getCompoId();    boolean isDraft = false;    if (emFundPayBill.getProcessInstId() == null || emFundPayBill.getProcessInstId().longValue() == -1) {      Long draftid = workflowDao.createDraftId();      emFundPayBill.setProcessInstId(draftid);      isDraft = true;    }    if ("".equals(ZcSUtil.safeString(emFundPayBill.getBillId())) || emFundPayBill.getBillId().equals("自动编号")) {      String code = NumUtil.getInstance().getNo(compoId, "BILL_ID", emFundPayBill);      emFundPayBill.setBillId(code);      baseDao.insert("EmFundPay.insertEmFundPayBill", emFundPayBill);      for (int i = 0; i < biList.size(); i++) {        EmFundPayBillDetail bi = (EmFundPayBillDetail) biList.get(i);        bi.setBillId(emFundPayBill.getBillId());        bi.setDetailId(i + 1 + "");        baseDao.insert("EmFundPay.insertEmFundPayBillDetail", bi);      }    } else {      String billId = emFundPayBill.getBillId();      ElementConditionDto dto = new ElementConditionDto();      dto.setZcText1(billId);      EmFundPayBill originalBean = (EmFundPayBill) getEmFundPayBill(dto, requestMeta);      ZcSUtil.checkDigest(emFundPayBill, originalBean, "billId");//一致性校验      baseDao.update("EmFundPay.updateEmFundPayReport", emFundPayBill);      baseDao.delete("EmFundPay.insertEmFundPayBillDetail", billId);      for (int i = 0; i < biList.size(); i++) {        EmFundPayBillDetail bi = (EmFundPayBillDetail) biList.get(i);        bi.setBillId(emFundPayBill.getBillId());        bi.setDetailId(i + 1 + "");        baseDao.insert("EmFundPay.insertEmFundPayBillDetail", bi);      }    }    if (isDraft) {      AsWfDraft asWfDraft = new AsWfDraft();      asWfDraft.setCompoId(compoId);      asWfDraft.setWfDraftName(emFundPayBill.getBillId());      asWfDraft.setUserId(userId);      asWfDraft.setMasterTabId(compoId);      asWfDraft.setWfDraftId(BigDecimal.valueOf(emFundPayBill.getProcessInstId().longValue()));      workflowDao.insertAsWfdraft(asWfDraft);    }    return emFundPayBill;  }  public EmFundPayReport saveEmFundPayReport(EmFundPayReport emFundPayReport, RequestMeta requestMeta) {    String userId = requestMeta.getSvUserID();    String compoId = requestMeta.getCompoId();    boolean isDraft = false;    if (emFundPayReport.getProcessInstId() == null || emFundPayReport.getProcessInstId().longValue() == -1) {      Long draftid = workflowDao.createDraftId();      emFundPayReport.setProcessInstId(draftid);      isDraft = true;    }    if ("".equals(ZcSUtil.safeString(emFundPayReport.getFundReportId()))    || emFundPayReport.getFundReportId().equals("自动编号")) {      String reportId = NumUtil.getInstance().getNo(compoId, "FUND_REPORT_ID", emFundPayReport);      emFundPayReport.setFundReportId(reportId);      baseDao.insert("EmFundPay.insertEmFundPayReport", emFundPayReport);    } else {      String reportId = emFundPayReport.getFundReportId();      EmFundPayReport originalBean = (EmFundPayReport) baseDao.read("EmFundPay.getEmFundPayReportById",      reportId);      originalBean.setDbDigest(originalBean.digest());      ZcSUtil.checkDigest(emFundPayReport, originalBean, "fundReportId");//一致性校验      baseDao.update("EmFundPay.updateEmFundPayReport", emFundPayReport);    }    if (isDraft) {      AsWfDraft asWfDraft = new AsWfDraft();      asWfDraft.setCompoId(compoId);      asWfDraft.setWfDraftName(emFundPayReport.getFundReportId());      asWfDraft.setUserId(userId);      asWfDraft.setMasterTabId(compoId);      asWfDraft.setWfDraftId(BigDecimal.valueOf(emFundPayReport.getProcessInstId().longValue()));      workflowDao.insertAsWfdraft(asWfDraft);    }    return emFundPayReport;  }  public EmFundPayBill unAuditFN(EmFundPayBill emFundPayBill, RequestMeta requestMeta) {    wfEngineAdapter.rework(emFundPayBill.getComment(), emFundPayBill, requestMeta);    return emFundPayBill;  }  public EmFundPayReport unAuditFN(EmFundPayReport emFundPayReport, RequestMeta requestMeta) {    wfEngineAdapter.rework(emFundPayReport.getComment(), emFundPayReport, requestMeta);    return emFundPayReport;  }  public EmFundPayBill untreadFN(EmFundPayBill emFundPayBill, RequestMeta requestMeta) {    wfEngineAdapter.untread(emFundPayBill.getComment(), emFundPayBill, requestMeta);    return emFundPayBill;  }  public EmFundPayReport untreadFN(EmFundPayReport emFundPayReport, RequestMeta requestMeta) {    wfEngineAdapter.untread(emFundPayReport.getComment(), emFundPayReport, requestMeta);    return emFundPayReport;  }}