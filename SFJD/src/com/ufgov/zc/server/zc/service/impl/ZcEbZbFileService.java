/**   * @(#) project: ZFCG* @(#) file: ZcEbZbFileService.java* * Copyright 2011 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.server.zc.service.impl;import java.math.BigDecimal;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import com.kingdrive.workflow.context.WorkflowContext;import com.ufgov.zc.common.commonbiz.model.Position;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcEbProjZbFile;import com.ufgov.zc.common.zc.model.ZcZBFileTemplate;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.dao.ibatis.AsOptionDao;import com.ufgov.zc.server.system.util.AsOptionUtil;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.dao.IBaseDao;import com.ufgov.zc.server.zc.service.IZcEbZbFileService;/*** @ClassName: ZcEbZbFileService* @Description: TODO(这里用一句话描述这个类的作用)* @date: 2011-3-17 下午05:13:30* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class ZcEbZbFileService implements IZcEbZbFileService {  private IBaseDao baseDao;  private IWorkflowDao workflowDao;  private WFEngineAdapter wfEngineAdapter;  private AsOptionDao asOptionDao;  public IBaseDao getBaseDao() {    return baseDao;  }  public void setBaseDao(IBaseDao baseDao) {    this.baseDao = baseDao;  }  public IWorkflowDao getWorkflowDao() {    return workflowDao;  }  public void setWorkflowDao(IWorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  public AsOptionDao getAsOptionDao() {    return asOptionDao;  }  public void setAsOptionDao(AsOptionDao asOptionDao) {    this.asOptionDao = asOptionDao;  }  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public ZcEbProjZbFile auditFN(ZcEbProjZbFile zcEbProjZbFile, RequestMeta requestMeta) {    //    String zhuren = asOptionDao.getAsOption("AUDIT_CGZX_ZR").getOptVal();//采购中心主任角色    //    String fuzhuren = asOptionDao.getAsOption("AUDIT_CGZX_FZR").getOptVal();//采购中心副主任角色    //    String ysdwcg = asOptionDao.getAsOption("AUDIT_YSDW_JB_ROLE_STRING").getOptVal();    //    String currentJs = requestMeta.getSvPoCode();    //    //    //主任审批，或者副主任审批，不送主任审批，则送中心经办人    //    if (currentJs.equalsIgnoreCase(zhuren)    //      || (currentJs.equalsIgnoreCase(fuzhuren) && (zcEbProjZbFile.getIsGoonAudit() == null || 1 != (zcEbProjZbFile.getIsGoonAudit().intValue())))) {    //      commitToZxjb(zcEbProjZbFile);    //      return zcEbProjZbFile;    //    } else if (ysdwcg.equalsIgnoreCase(requestMeta.getSvPoCode())) {    //      //如果采购单位要送采购中心经办人审核    //      commitToZxjb(zcEbProjZbFile);    //      return zcEbProjZbFile;    //    }    wfEngineAdapter.commit(zcEbProjZbFile.getComment(), zcEbProjZbFile, requestMeta);    return zcEbProjZbFile;  }  /**   * 送采购单位经办人   * @param zcEbProjZbFile   */  private void sendYsdwJb(ZcEbProjZbFile zcEbProjZbFile, RequestMeta requestMeta) {    WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(zcEbProjZbFile.getComment(), zcEbProjZbFile, requestMeta);    List result = new ArrayList();    result.add(getYsdwcg(zcEbProjZbFile));//    workflowContext.setNextExecutor(result);    wfEngineAdapter.commit(workflowContext);  }  /**   * 送采购中心经办人   */  private void commitToZxjb(ZcEbProjZbFile zcEbProjZbFile, RequestMeta requestMeta) {    WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(zcEbProjZbFile.getComment(), zcEbProjZbFile, requestMeta);    List result = new ArrayList();    ZcEbProj proj = (ZcEbProj) baseDao.read("ZcEbProj.getOriginalZcEbProjByProjCode", zcEbProjZbFile.getProjCode());    result.add(proj.getManagerCode());//    workflowContext.setNextExecutor(result);    wfEngineAdapter.commit(workflowContext);  }  public ZcEbProjZbFile callbackFN(ZcEbProjZbFile zcEbProjZbFile, RequestMeta requestMeta) {    wfEngineAdapter.callback(zcEbProjZbFile.getComment(), zcEbProjZbFile, requestMeta);    return zcEbProjZbFile;  }  public void deleteZcEbProjZbFileByProjCode(String projCode, RequestMeta requestMeta) {    baseDao.delete("ZcEbProjZbFile.deleteZcEbProjFileByProjCode", projCode);  }  public ZcEbProjZbFile getZcebZbFileByProjCode(String projCode, RequestMeta meta) {    return (ZcEbProjZbFile) baseDao.read("ZcEbProjZbFile.getZcEbProjZbFileByProjCode", projCode);  }  public List getZcebZbFileList(ElementConditionDto dto, RequestMeta meta) {    //添加数值权限    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getWfcompoId(), NumLimConstants.FWATCH));    return baseDao.query("ZcEbProjZbFile.getZcebZbFileList", dto);  }  public ZcEbProjZbFile newCommitFN(ZcEbProjZbFile zcEbProjZbFile, RequestMeta requestMeta) {    ZcEbProjZbFile afterSaveBill = saveZcEbProjZbFile(zcEbProjZbFile, requestMeta);    wfEngineAdapter.newCommit(afterSaveBill.getComment(), afterSaveBill, requestMeta);    return afterSaveBill;  }  public ZcEbProjZbFile saveZcEbProjZbFile(ZcEbProjZbFile zcEbProjZbFile, RequestMeta meta) {    String userId = meta.getSvUserID();    String compoId = meta.getCompoId();    boolean isDraft = false;    if (zcEbProjZbFile.getProcessInstId() == null || zcEbProjZbFile.getProcessInstId().longValue() == -1) {      Long draftid = workflowDao.createDraftId();      zcEbProjZbFile.setProcessInstId(draftid);      isDraft = true;    }    //    String projCode = zcEbProjZbFile.getProjCode();    //    ZcEbProjZbFile originalBean = (ZcEbProjZbFile) baseDao.read("ZcEbProjZbFile.getZcEbProjZbFileByProjCode", projCode);    //    originalBean.setDbDigest(originalBean.digest());    //    zcEbProjZbFile.setDbDigest(zcEbProjZbFile.digest());    //    ZcSUtil.checkDigest(zcEbProjZbFile, originalBean, "projCode");//一致性校验    baseDao.update("ZcEbProjZbFile.updateZcebZbFile", zcEbProjZbFile);    if (isDraft) {      AsWfDraft asWfDraft = new AsWfDraft();      asWfDraft.setCompoId(compoId);      asWfDraft.setWfDraftName(zcEbProjZbFile.getId());      asWfDraft.setUserId(userId);      asWfDraft.setMasterTabId(compoId);      asWfDraft.setWfDraftId(BigDecimal.valueOf(zcEbProjZbFile.getProcessInstId().longValue()));      workflowDao.insertAsWfdraft(asWfDraft);    }    return zcEbProjZbFile;  }  public ZcEbProjZbFile unAuditFN(ZcEbProjZbFile zcEbProjZbFile, RequestMeta requestMeta) {    wfEngineAdapter.unAudit(zcEbProjZbFile.getComment(), zcEbProjZbFile, requestMeta);    return zcEbProjZbFile;  }  public ZcEbProjZbFile untreadFN(ZcEbProjZbFile zcEbProjZbFile, RequestMeta requestMeta) {    wfEngineAdapter.untread(zcEbProjZbFile.getComment(), zcEbProjZbFile, requestMeta);    return zcEbProjZbFile;  }  public String getSession(RequestMeta requestMeta) {    return "---------------------------getSession--------------------";  }  public String getYsdwcg(ZcEbProjZbFile zcEbProjZbFile) {    //获取对应分包对应的采购任务单，通过任务单得到采购单位负责人:暂不考虑捆绑采购问题，默认一个采购项目对应一个预算单位。    ZcEbProj proj = (ZcEbProj) baseDao.read("ZcEbProj.getOriginalZcEbProjByProjCode", zcEbProjZbFile.getProjCode());    List packList = baseDao.query("ZcEbProj.getZcEbPackListByProjCode", proj.getProjCode());    ZcEbPack pack = (ZcEbPack) packList.get(0);    String ysdwcg;    HashMap para = new HashMap();    para.put("POSI_CODE", AsOptionUtil.getInstance().getOptionVal("CG_HT_AUDIT_YSDW_JB_ROLE_STRING_for_all"));    para.put("CO_CODE", pack.getEntrust().getCoCode());    para.put("ND", pack.getEntrust().getNd());    Position po = (Position) this.baseDao.read("User.getAsEmpPosiByEmpCode", para);    if (po == null) {      return null;    }    return po.getEmpCode();  }  public ZcEbProjZbFile sendToProcurementUnit(ZcEbProjZbFile zcEbProjZbFile, RequestMeta requestMeta) {    sendYsdwJb(zcEbProjZbFile, requestMeta);    return zcEbProjZbFile;  }  public String insertOrUpdateZcEbProjZBFile(ZcEbProjZbFile projZBFile, String flag) {    if ("insert".equals(flag)) {      baseDao.insert("ZcEbProjZbFile.insertZcebZbFile", projZBFile);      return "insert";    } else {      baseDao.update("ZcEbProjZbFile.updateZcebZbFile", projZBFile);      return "update";    }  }  public String insertOrUpdateZcZBFileTemplate(ZcZBFileTemplate tpl, String flag) {    if ("insert".equals(flag)) {      baseDao.insert("ZcEbProjZbFile.insertZcebZbFileTemplate", tpl);      return "insert";    } else {      baseDao.update("ZcEbProjZbFile.updateZcebZbFileTemplate", tpl);      return "update";    }  }  public List queryTplFileList(ZcZBFileTemplate tpl) {    return baseDao.query("ZcEbProjZbFile.selectZcebZbFileTemplate", tpl);  }  public void deleteZbFileTemplate(ZcZBFileTemplate tpl) {    this.baseDao.delete("ZcEbProjZbFile.deleteZcebZbFileTemplate", tpl);  }}