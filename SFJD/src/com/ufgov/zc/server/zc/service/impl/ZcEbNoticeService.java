package com.ufgov.zc.server.zc.service.impl;import java.math.BigDecimal;import java.util.List;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.common.zc.model.ZcEbNotice;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.dao.IBaseDao;import com.ufgov.zc.server.zc.dao.IZcEbNoticeDao;import com.ufgov.zc.server.zc.service.IZcEbNoticeService;public class ZcEbNoticeService implements IZcEbNoticeService {  private IZcEbNoticeDao zcEbNoticeDao;  private WFEngineAdapter wfEngineAdapter;  private IWorkflowDao workflowDao;  private IBaseDao baseDao;  public IZcEbNoticeDao getZcEbNoticeDao() {    return zcEbNoticeDao;  }  public void setZcEbNoticeDao(IZcEbNoticeDao zcEbNoticeDao) {    this.zcEbNoticeDao = zcEbNoticeDao;  }  public List getZcEbNotice(ElementConditionDto dto, RequestMeta meta) {    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getWfcompoId(), NumLimConstants.FWATCH));    return zcEbNoticeDao.getZcEbNotice(dto);  }  public int audit(ZcEbNotice zcEbNotice) {    int rows = zcEbNoticeDao.updateSelectNotice(zcEbNotice);    return rows;  }  public int delete(ZcEbNotice zcEbNotice) {    int rows = zcEbNoticeDao.delete(zcEbNotice);    return rows;  }  public void newCommit(ZcEbNotice zcEbNotice, RequestMeta requestMeta) {    wfEngineAdapter.newCommit(zcEbNotice.getComment(), zcEbNotice, requestMeta);  }  public void commit(ZcEbNotice zcEbNotice, RequestMeta requestMeta) {    wfEngineAdapter.commit(zcEbNotice.getComment(), zcEbNotice, requestMeta);  }  public void unAudit(ZcEbNotice zcEbNotice, RequestMeta requestMeta) {    wfEngineAdapter.unAudit(zcEbNotice.getComment(), zcEbNotice, requestMeta);  }  public ZcEbNotice insert(ZcEbNotice zcEbNotice, RequestMeta meta) {    createWfDraft(zcEbNotice, meta);    return (ZcEbNotice) zcEbNoticeDao.insert(zcEbNotice);  }  public int update(ZcEbNotice zcEbNotice) {    int rows = zcEbNoticeDao.updateSelectNotice(zcEbNotice);    return rows;  }  private void createWfDraft(ZcEbNotice zcEbNotice, RequestMeta meta) {    Long draftid = workflowDao.createDraftId();    zcEbNotice.setProcessInstId(draftid);    AsWfDraft asWfDraft = new AsWfDraft();    asWfDraft.setCompoId(meta.getCompoId());    asWfDraft.setWfDraftName(zcEbNotice.getTitleField());    asWfDraft.setUserId(meta.getSvUserID());    asWfDraft.setMasterTabId("ZC_EB_NOTICE");    asWfDraft.setWfDraftId(BigDecimal.valueOf(draftid.longValue()));    workflowDao.insertAsWfdraft(asWfDraft);  }  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public IWorkflowDao getWorkflowDao() {    return workflowDao;  }  public void setWorkflowDao(IWorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  public void interruptZcPProMake(ZcEbNotice make, RequestMeta requestMeta) {    wfEngineAdapter.interrupt(null, make, requestMeta);  }  public ZcEbNotice CancelMake(ZcEbNotice currentObject, RequestMeta requestMeta) {    interruptZcPProMake(currentObject, requestMeta);    this.update(currentObject);    ZcEbNotice bu = (ZcEbNotice) zcEbNoticeDao.getZcEbNoticeById(currentObject.getNoticeID());    return bu;  }  public ZcEbNotice auditFN(ZcEbNotice zcEbNotice, RequestMeta requestMeta) {    this.update(zcEbNotice);    // String zhuren =    // AsOptionUtil.getInstance().getOptionById("AUDIT_CGZX_ZR").getOptVal();//采购中心主任角色    // String fuzhuren =    // AsOptionUtil.getInstance().getOptionById("AUDIT_CGZX_FZR").getOptVal();//采购中心副主任角色    // String currentRoleId = requestMeta.getSvPoCode();    // if (currentRoleId.equals(zhuren) || (currentRoleId.equals(fuzhuren)    // && !new Integer(1).equals(zcEbNotice.getIsGoonAudit()))) {    // String userId = (String)    // baseDao.read("ZcEbRequirement.getNodeCgzxUserId",    // zcEbNotice.getProcessInstId());    // WorkflowContext workflowContext =    // wfEngineAdapter.genCommonWFC(zcEbNotice.getComment(), zcEbNotice);    // List result = new ArrayList();    // result.add(userId);    // workflowContext.setNextExecutor(result);    // wfEngineAdapter.commit(workflowContext);    // ZcEbNotice bu = (ZcEbNotice)    // zcEbNoticeDao.getZcEbNoticeById(zcEbNotice.getNoticeID());    // return bu;    // }    wfEngineAdapter.commit(zcEbNotice.getComment(), zcEbNotice, requestMeta);    ZcEbNotice bu = (ZcEbNotice) zcEbNoticeDao.getZcEbNoticeById(zcEbNotice.getNoticeID());    return bu;  }  public ZcEbNotice callbackFN(ZcEbNotice bulletin, RequestMeta requestMeta) {    wfEngineAdapter.callback(bulletin.getComment(), bulletin, requestMeta);    ZcEbNotice bu = (ZcEbNotice) zcEbNoticeDao.getZcEbNoticeById(bulletin.getNoticeID());    return bu;  }  public ZcEbNotice unAuditFN(ZcEbNotice bulletin, RequestMeta requestMeta) {    wfEngineAdapter.rework(bulletin.getComment(), bulletin, requestMeta);    ZcEbNotice bu = (ZcEbNotice) zcEbNoticeDao.getZcEbNoticeById(bulletin.getNoticeID());    return bu;  }  public ZcEbNotice untreadFN(ZcEbNotice bulletin, RequestMeta requestMeta) {    wfEngineAdapter.untread(bulletin.getComment(), bulletin, requestMeta);    ZcEbNotice bu = (ZcEbNotice) zcEbNoticeDao.getZcEbNoticeById(bulletin.getNoticeID());    return bu;  }  public ZcEbNotice getZcEbNoticeById(String noticeID) {    // TODO Auto-generated method stub    return zcEbNoticeDao.getZcEbNoticeById(noticeID);  }  public IBaseDao getBaseDao() {    return baseDao;  }  public void setBaseDao(IBaseDao baseDao) {    this.baseDao = baseDao;  }  public void isCheck(String noticeID) throws Exception {    // TODO Auto-generated method stub    Integer temp = (Integer) baseDao.read("ZcEbNotice.getNoticeCounts", noticeID);    int i = temp == null ? 0 : temp.intValue();    if (i > 0) {      throw new Exception("成交通知书已随合同送审，不能删除");    }  }}