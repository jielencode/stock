package com.ufgov.zc.server.zc.web.action.auction;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import org.springframework.web.struts.ActionSupport;import com.ufgov.zc.common.zc.model.ZcAuctionInfo;import com.ufgov.zc.common.zc.model.ZcAuctionRecord;import com.ufgov.zc.common.zc.model.ZcBMerchandise;import com.ufgov.zc.server.zc.service.IZcAuctionInfoService;import com.ufgov.zc.server.zc.web.form.AuctionInfoForm;public class AuctionAction extends ActionSupport {  private final static Log log = LogFactory.getLog(AuctionAction.class);  public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {    AuctionInfoForm auctionForm = (AuctionInfoForm) form;    IZcAuctionInfoService zcAuctionInfoService = (IZcAuctionInfoService) this.getWebApplicationContext().getBean("zcAuctionInfoService");    ZcBMerchandise zcBMerchandise = zcAuctionInfoService.getMerchandiseInfo(request.getParameter("code_array"));    ZcAuctionInfo zcAuctionInfo = zcAuctionInfoService.getAuctionInfo(request.getParameter("auctionId"));    ZcAuctionRecord lowestPriceRecord = zcAuctionInfoService.getLowerAuctionPrice(request.getParameter("auctionId"));    List zcAuctionRecord = zcAuctionInfoService.getAuctionRecord(request.getParameter("auctionId"));    String lowestBidPrice = lowestPriceRecord.getZcAuctionBidPrice();    String lowestBidUser = lowestPriceRecord.getZcAuctionBidUserid();    String forward = "success";    Date sysDate = new Date();    if (sysDate.after(zcAuctionInfo.getZcAuctionStarttime()) && sysDate.before(zcAuctionInfo.getZcAuctionEndtime())) {      auctionForm.setBidStatus(1);      auctionForm.setAuctionStatus("拍卖中");    } else if (sysDate.before(zcAuctionInfo.getZcAuctionStarttime())) {      auctionForm.setBidStatus(0);      auctionForm.setAuctionStatus("等待拍卖");    } else if (sysDate.after(zcAuctionInfo.getZcAuctionEndtime())) {      auctionForm.setBidStatus(2);      auctionForm.setAuctionStatus("拍卖结束");    }    auctionForm.setZcAuctionStarttime(new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(zcAuctionInfo.getZcAuctionStarttime()));    auctionForm.setZcAuctionEndtime(new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(zcAuctionInfo.getZcAuctionEndtime()));    auctionForm.setZcBMerchandise(zcBMerchandise);    auctionForm.setZcAuctionInfo(zcAuctionInfo);    auctionForm.setZcAuctionRecord(zcAuctionRecord);    String starttimeInterval = String.valueOf(zcAuctionInfo.getZcAuctionStarttime().getTime() - new Date().getTime());    request.setAttribute("zcAuctionRecord", zcAuctionRecord);    request.setAttribute("lowestBidPrice", lowestBidPrice);    request.setAttribute("lowestBidUser", lowestBidUser);    request.setAttribute("auctionForm", auctionForm);    request.setAttribute("mimimumBid", zcAuctionInfo.getZcAuctionMinimumBid().toString());    request.setAttribute("starttime", zcAuctionInfo.getZcAuctionStarttime());    request.setAttribute("starttimeInterval", starttimeInterval);    request.setAttribute("zcBMerchandise", zcBMerchandise);    request.setAttribute("auctionStarttime", new SimpleDateFormat("yyyy/MM/dd hh:mm:ss").format(zcAuctionInfo.getZcAuctionStarttime()));    request.setAttribute("auctionEndtime", new SimpleDateFormat("yyyy/MM/dd hh:mm:ss").format(zcAuctionInfo.getZcAuctionEndtime()));    request.setAttribute("auctionId", request.getParameter("auctionId"));    return mapping.findForward(forward);  }}