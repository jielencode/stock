package com.ufgov.zc.server.zc.web.form;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpSession;import org.apache.struts.action.ActionMessage;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsVal;import com.ufgov.zc.common.system.model.User;import com.ufgov.zc.common.zc.model.ZcEbSupBsType;import com.ufgov.zc.common.zc.model.ZcEbSupplier;import com.ufgov.zc.common.zc.model.ZcEbSupplierQualify;import com.ufgov.zc.common.zc.pagination.WebPagination;import com.ufgov.zc.server.system.SpringContext;import com.ufgov.zc.server.system.service.IAsValService;import com.ufgov.zc.server.zc.service.IZcEbSupplierService;import com.ufgov.zc.server.zc.util.GeneralFunc;import com.ufgov.zc.server.zc.web.OptionItem;public class SupplierFormBean extends AbstractActionForm {  private static final long serialVersionUID = -127040804047344129L;  private User user = new User();  private ZcEbSupplier supplier = new ZcEbSupplier();  private IZcEbSupplierService zcEbSupplierService;  IAsValService asValService = null;  private List scaleList = new ArrayList();  private List gnwList = new ArrayList();  private List snwList = new ArrayList();  private List zstList = new ArrayList();  private List zskList = new ArrayList();  private List bsList = new ArrayList();  private List cardNoList = new ArrayList();  private List list = new ArrayList();  private String[] bsTypes;  private String feedbackInfo = "";  private List auditedList = new ArrayList();  private List notAuditedList = new ArrayList();  private List suList = new ArrayList();  private List zyxmList = new ArrayList();  private List qualifyList = new ArrayList();  private WebPagination pagination;  private Integer countNum;  private Integer countTotalNum;  private Integer countAuditNum;  private Integer countNotAuditNum;  public SupplierFormBean() {    //		scaleList.add(new OptionItem("1", "大型企业"));    //		scaleList.add(new OptionItem("2", "中型企业"));    //		scaleList.add(new OptionItem("3", "小型企业"));    this.list.add(new ZcEbSupplierQualify());  }  public void initService() {    Object obj = SpringContext.getBean("zcEbSupplierService");    if (obj instanceof IZcEbSupplierService) {      zcEbSupplierService = (IZcEbSupplierService) obj;    }    obj = SpringContext.getBean("asValService");    if (obj instanceof IAsValService) {      asValService = (IAsValService) obj;    }    List list = asValService.getAsVal("ZC_VS_YN");    for (int i = 0; i < list.size(); i++) {      AsVal val1 = (AsVal) list.get(i);      scaleList.add(new OptionItem(val1.getValId(), val1.getVal()));    }    List gList = asValService.getAsVal("ZC_VS_GNW");    for (int i = 0; i < gList.size(); i++) {      AsVal val2 = (AsVal) gList.get(i);      gnwList.add(new OptionItem(val2.getValId(), val2.getVal()));    }    List sList = asValService.getAsVal("ZC_VS_SNW");    for (int i = 0; i < sList.size(); i++) {      AsVal val3 = (AsVal) sList.get(i);      snwList.add(new OptionItem(val3.getValId(), val3.getVal()));    }    List tList = asValService.getAsVal("ZC_SUPPLIER_TYPE");    for (int i = 0; i < tList.size(); i++) {      AsVal val3 = (AsVal) tList.get(i);      zstList.add(new OptionItem(val3.getValId(), val3.getVal()));    }    List kList = asValService.getAsVal("ZC_SUPPLIER_KIND");    for (int i = 0; i < kList.size(); i++) {      AsVal val3 = (AsVal) kList.get(i);      zskList.add(new OptionItem(val3.getValId(), val3.getVal()));    }    List bList = asValService.getAsVal("ZC_EB_SUP_BS_TYPE");    for (int i = 0; i < bList.size(); i++) {      AsVal val3 = (AsVal) bList.get(i);      bsList.add(new OptionItem(val3.getValId(), val3.getVal()));    }    List cNoList = asValService.getAsVal("ZC_EB_SUP_LEGAL_CARD_TYPE");    for (int i = 0; i < cNoList.size(); i++) {      AsVal val3 = (AsVal) cNoList.get(i);      cardNoList.add(new OptionItem(val3.getValId(), val3.getVal()));    }  }  public String gotoReq() {    return SUCCESS;  }  public String regSupplier() {    //user.setUserId("hy_" + user.getUserId());    printNameValues();    if (zcEbSupplierService.checkAsUser(user)) {      addMessage("errors", new ActionMessage("组织机构代码" + user.getUserId() + "已经存在！", false));      return FAILURE;    }    if (zcEbSupplierService.checkDupleteSupplier(supplier)) {      addMessage("errors", new ActionMessage("企业名称" + user.getUserId() + "已经存在！", false));      return FAILURE;    }    try {      addUser();    } catch (Exception e) {      log.error(e.getMessage());      addMessage("errors", new ActionMessage("系统错误：供应商注册操作失败！", false));      e.printStackTrace();      return FAILURE;    }    return SUCCESS;  }  private void addSupplierQualifies() {    ZcEbSupplierQualify qualify = null;    ZcEbSupBsType bsType = null;    List typeList = new ArrayList();    Map nvMap = this.getRequest().getParameterMap();    HttpServletRequest request = this.getRequest();    // 设置供应商机构代码    this.supplier.setCode(user.getUserId());    this.supplier.setEstablishDate(getDateFromString(request.getParameter("establishDate")));    this.supplier.setLicenseTimeStart(getDateFromString(request.getParameter("licenseTimeStart")));    this.supplier.setLicenseTimeEnd(getDateFromString(request.getParameter("licenseTimeEnd")));    this.supplier.setStateTaxRegDate(getDateFromString(request.getParameter("stateTaxRegDate")));    this.supplier.setLocalTaxRegDate(getDateFromString(request.getParameter("localTaxRegDate")));    this.list.clear();    Object obj = nvMap.get("licenseName");    if (bsTypes != null) {      for (int i = 0; i < bsTypes.length; i++) {        bsType = new ZcEbSupBsType();        bsType.setSuCode(supplier.getCode());        String val = (String) bsTypes[i];        bsType.setSupBsVal(val);        if ("99".equals(val)) {          bsType.setDome(request.getParameter("typeDome"));        }        typeList.add(bsType);      }    }    supplier.setBsTypeList(typeList);    if (obj != null) {      if (obj instanceof String) {        qualify = new ZcEbSupplierQualify();        qualify.setSeqNum(1);        qualify.setLicenseName((String) nvMap.get("licenseName"));        qualify.setLicenseNO((String) nvMap.get("licenseNO"));        qualify.setEffectStartTime(getDateFromString((String) nvMap.get("effectStartTime")));        qualify.setEffectEndTime(getDateFromString((String) nvMap.get("effectEndTime")));        qualify.setLicenseIssuingAuthority((String) nvMap.get("licenseIssuingAuthority"));        qualify.setRemark((String) nvMap.get("remark"));        qualify.setSupplierCode(supplier.getCode());        this.list.add(qualify);      } else {        String[] data = (String[]) obj;        for (int i = 0; i < data.length; i++) {          qualify = new ZcEbSupplierQualify();          qualify.setSeqNum(i + 1);          qualify.setLicenseName(((String[]) nvMap.get("licenseName"))[i]);          qualify.setLicenseNO(((String[]) nvMap.get("licenseNO"))[i]);          qualify.setEffectStartTime(getDateFromString(((String[]) nvMap.get("effectStartTime"))[i]));          qualify.setEffectEndTime(getDateFromString(((String[]) nvMap.get("effectEndTime"))[i]));          qualify.setLicenseIssuingAuthority(((String[]) nvMap.get("licenseIssuingAuthority"))[i]);          qualify.setRemark(((String[]) nvMap.get("remark"))[i]);          qualify.setSupplierCode(supplier.getCode());          this.list.add(qualify);        }      }    }    this.supplier.getQualifyList().addAll(this.list);  }  private void printNameValues() {    String key = null;    Map nvMap = this.getRequest().getParameterMap();    Iterator it = nvMap.keySet().iterator();    while (it.hasNext()) {      key = it.next().toString();      print(key + ":" + nvMap.get(key));    }  }  public String preRegSupplier() {    return SUCCESS;  }  public String updateSupplier() {    print("updateSupplier() working...");    try {      addSupplierQualifies();      zcEbSupplierService.updateZcEbSupplier(supplier, null);    } catch (Exception e) {      log.error(e.getMessage());      addMessage("errors", new ActionMessage(e.getMessage(), false));      return FAILURE;    }    return SUCCESS;  }  public void addUser() throws Exception {    print("addUser() working...");    user.setPassword(GeneralFunc._encodePwd(ZcSettingConstants.SUPPLIER_INIT_PASSWORD));//外网供应商默认密码    supplier.setLoginName(user.getUserId());// 供应商表中插入登陆用户名    supplier.setCoCode(user.getUserId());    user.setUserName(supplier.getName());    supplier.setStatus(ZcSettingConstants.SUPPLIER_INIT_STATUS);    addSupplierQualifies();    this.zcEbSupplierService.addSupplier(supplier);  }  private void print(String msg) {    System.out.println("----------------HELLO-----------------" + msg);  }  public Date getDateFromString(String dString) {    if (dString == null || "".equals(dString)) {      return null;    }    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");    try {      return dateFormat.parse(dString);    } catch (ParseException ex) {      ex.printStackTrace();    }    return null;  }  public void setEstablishDate(String establishDate) {    if (establishDate == null || "".equals(establishDate)) {      return;    }    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");    try {      Date date = dateFormat.parse(establishDate);      supplier.setEstablishDate(date);    } catch (ParseException ex) {      ex.printStackTrace();    }  }  public String getEstablishDate() {    Date establishDate = supplier.getEstablishDate();    if (establishDate != null) {      SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");      return dateFormat.format(establishDate);    }    return "";  }  public String indexListSupplier() {    zcEbSupplierService = (IZcEbSupplierService) SpringContext.getBean("zcEbSupplierService");    ElementConditionDto dto = new ElementConditionDto();    RequestMeta mt = new RequestMeta();    if (mt.getTransDate() == null) {      mt.setTransDate(new Date());    }    HttpSession sessions = getRequest().getSession();    String nd = (String) sessions.getAttribute("svNd");    try {      mt.getTransDate().setYear(Integer.parseInt(nd));    } catch (Exception e) {    }    mt.setSvCoCode((String) sessions.getAttribute("svCoCode"));    mt.setSvOrgCode((String) sessions.getAttribute("svOrgCode"));    mt.setSvPoCode((String) sessions.getAttribute("svPoCode"));    mt.setAccountId((String) sessions.getAttribute("svAccountId"));    mt.setSvUserID((String) sessions.getAttribute("svUserID"));//    mt.setSvRoleId((String) sessions.getAttribute("svRoleId"));    dto.setZcText3("Y");    auditedList = zcEbSupplierService.getZcEbSupplier(dto, mt);    ElementConditionDto dto1 = new ElementConditionDto();    dto1.setZcText4("Y");    notAuditedList = zcEbSupplierService.getZcEbSupplier(dto1, mt);    Map parameterObject = new HashMap();    parameterObject.put("status", "0");    countNotAuditNum = zcEbSupplierService.getSupplierCount(parameterObject);    parameterObject.put("status", "2");    countAuditNum = zcEbSupplierService.getSupplierCount(parameterObject);    parameterObject.put("status", "");    countTotalNum = zcEbSupplierService.getSupplierCount(parameterObject);    return SUCCESS;  }  public String supplierDetails() {    zcEbSupplierService = (IZcEbSupplierService) SpringContext.getBean("zcEbSupplierService");    String zcSuCode = this.getRequest().getParameter("zcSuCode");    ZcEbSupplier supplier = zcEbSupplierService.getSupplierById(zcSuCode, null);    ZcEbSupplier temp = zcEbSupplierService.getZcEbSupplierDetailList(zcSuCode, null);    zyxmList = temp.getZyxmList();    qualifyList = temp.getQualifyList();    for (int i = 0; i < scaleList.size(); i++) {      OptionItem option = (OptionItem) scaleList.get(i);      if (option.getId().equals(supplier.getIsZxqy()))        supplier.setIsZxqy(option.getLabel());      if (option.getId().equals(supplier.getIsXysu()))        supplier.setIsXysu(option.getLabel());    }    for (int i = 0; i < gnwList.size(); i++) {      OptionItem option = (OptionItem) gnwList.get(i);      if (option.getId().equals(supplier.getGnw()))        supplier.setGnw(option.getLabel());    }    for (int i = 0; i < snwList.size(); i++) {      OptionItem option = (OptionItem) snwList.get(i);      if (option.getId().equals(supplier.getSnw()))        supplier.setSnw(option.getLabel());    }    for (int i = 0; i < zstList.size(); i++) {      OptionItem option = (OptionItem) zstList.get(i);      if (option.getId().equals(supplier.getZcSupplierType()))        supplier.setZcSupplierType(option.getLabel());    }    for (int i = 0; i < zskList.size(); i++) {      OptionItem option = (OptionItem) zskList.get(i);      if (option.getId().equals(supplier.getZcSupplierKind()))        supplier.setZcSupplierKind(option.getLabel());    }    for (int i = 0; i < cardNoList.size(); i++) {      OptionItem option = (OptionItem) cardNoList.get(i);      if (option.getId().equals(supplier.getLegalCardType()))        supplier.setLegalCardType(option.getLabel());    }    suList.add(supplier);    return SUCCESS;  }  public User getUser() {    return user;  }  public void setUser(User user) {    this.user = user;  }  public ZcEbSupplier getSupplier() {    return supplier;  }  public void setSupplier(ZcEbSupplier supplier) {    this.supplier = supplier;  }  public List getScaleList() {    return scaleList;  }  public void setScaleList(List scaleList) {    this.scaleList = scaleList;  }  public List getList() {    return list;  }  public void setList(List list) {    this.list = list;  }  public String getFeedbackInfo() {    return feedbackInfo;  }  public void setFeedbackInfo(String feedbackInfo) {    this.feedbackInfo = feedbackInfo;  }  public List getGnwList() {    return gnwList;  }  public void setGnwList(List gnwList) {    this.gnwList = gnwList;  }  public List getSnwList() {    return snwList;  }  public void setSnwList(List snwList) {    this.snwList = snwList;  }  public List getZstList() {    return zstList;  }  public void setZstList(List zstList) {    this.zstList = zstList;  }  public List getZskList() {    return zskList;  }  public void setZskList(List zskList) {    this.zskList = zskList;  }  public List getBsList() {    return bsList;  }  public void setBsList(List bsList) {    this.bsList = bsList;  }  public String[] getBsTypes() {    return bsTypes;  }  public void setBsTypes(String[] bsTypes) {    this.bsTypes = bsTypes;  }  public List getCardNoList() {    return cardNoList;  }  public void setCardNoList(List cardNoList) {    this.cardNoList = cardNoList;  }  public List getAuditedList() {    return auditedList;  }  public void setAuditedList(List auditedList) {    this.auditedList = auditedList;  }  public List getNotAuditedList() {    return notAuditedList;  }  public void setNotAuditedList(List notAuditedList) {    this.notAuditedList = notAuditedList;  }  public List getSuList() {    return suList;  }  public void setSuList(List suList) {    this.suList = suList;  }  public List getZyxmList() {    return zyxmList;  }  public void setZyxmList(List zyxmList) {    this.zyxmList = zyxmList;  }  public List getQualifyList() {    return qualifyList;  }  public void setQualifyList(List qualifyList) {    this.qualifyList = qualifyList;  }  public WebPagination getPagination() {    return pagination;  }  public void setPagination(WebPagination pagination) {    this.pagination = pagination;  }  public Integer getCountNum() {    return countNum;  }  public void setCountNum(Integer countNum) {    this.countNum = countNum;  }  public Integer getCountAuditNum() {    return countAuditNum;  }  public void setCountAuditNum(Integer countAuditNum) {    this.countAuditNum = countAuditNum;  }  public Integer getCountNotAuditNum() {    return countNotAuditNum;  }  public void setCountNotAuditNum(Integer countNotAuditNum) {    this.countNotAuditNum = countNotAuditNum;  }  public Integer getCountTotalNum() {    return countTotalNum;  }  public void setCountTotalNum(Integer countTotalNum) {    this.countTotalNum = countTotalNum;  }}