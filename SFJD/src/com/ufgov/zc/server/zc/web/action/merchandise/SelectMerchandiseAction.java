package com.ufgov.zc.server.zc.web.action.merchandise;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import com.ufgov.zc.common.zc.model.ZcBCatalogueProp;import com.ufgov.zc.common.zc.model.ZcBMerCatalogueProp;import com.ufgov.zc.common.zc.model.ZcBMerPic;import com.ufgov.zc.common.zc.model.ZcBMerchandise;import com.ufgov.zc.common.zc.model.ZcXyghZbjg;import com.ufgov.zc.server.zc.service.IMenuGoodsService;import com.ufgov.zc.server.zc.service.IMerCatalogueService;import com.ufgov.zc.server.zc.service.IZcEbSupplierService;import com.ufgov.zc.server.zc.web.action.StrutsAction;import com.ufgov.zc.server.zc.web.form.SpForm;public class SelectMerchandiseAction extends StrutsAction {  private final static Log log = LogFactory.getLog(SelectMerchandiseAction.class);  public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,  HttpServletResponse response) throws Exception {    SpForm spForm = (SpForm) form;    String forward = "success";    String index = request.getParameter("index");    try {      IMerCatalogueService merCatalogueService = (IMerCatalogueService) this.getWebApplicationContext().getBean("merCatalogueService");      //获取品目列表      List catalogueList = merCatalogueService.getCatalogueForNW();      spForm.setCatalogueList(catalogueList);      //获取批次列表      List zcXyghZbjgList = merCatalogueService.getZcXyghZbjgList();      spForm.setZcXyghZbjgList(zcXyghZbjgList);      String poCode = (String) request.getSession().getAttribute("svPoCode");//用户角色      String zcMerCode = request.getParameter("id");      IMenuGoodsService menuGoodsService = (IMenuGoodsService) this.getWebApplicationContext().getBean("menuGoodsService");      ZcBMerchandise zcBMerchandise = new ZcBMerchandise(); //查询改商品现有供应商的折扣信息      List zcBMerDiscountWebList = new ArrayList();      if ("GYS_XIEYI".equals(poCode)) {        zcBMerchandise = menuGoodsService.getZcBMerchandise(zcMerCode);        zcBMerDiscountWebList = menuGoodsService.getZcBMerDiscountListByMerCode(zcMerCode);      } else {        zcBMerDiscountWebList = menuGoodsService.getZcBMerDiscountWebListByMerCode(zcMerCode);        zcBMerchandise = menuGoodsService.getZcBMerchandiseNW(zcMerCode);      }      request.setAttribute("zcBMerchandise", zcBMerchandise);      spForm.setZcBMerchandise(zcBMerchandise);      spForm.setZcBMerDiscountWebList(zcBMerDiscountWebList);      //根据批次编号获取批次的名称      ZcXyghZbjg zcXyghZbjg = merCatalogueService.getZcXyghZbjgByID(zcBMerchandise.getZcProjId());      if (zcXyghZbjg != null) {        request.setAttribute("zcXyghZbjg", zcXyghZbjg);      }      //获取品目属性列表以及其值      List cataloguePropValue = merCatalogueService.getMerCataloguePeopValueForID(zcBMerchandise);      List catalogueProp = merCatalogueService.getCataloguePeopForID(zcBMerchandise.getZcCatalogueCode());      List cataloguePropShow = new ArrayList();      for (int i = 0; i < cataloguePropValue.size(); i++) {        ZcBMerCatalogueProp zcBMerCatalogueProp = (ZcBMerCatalogueProp) cataloguePropValue.get(i);        for (int j = 0; j < cataloguePropValue.size(); j++) {          ZcBCatalogueProp zcBCatalogueProp = (ZcBCatalogueProp) catalogueProp.get(j);          if (zcBCatalogueProp.getZcCatalogueCode().equals(zcBMerCatalogueProp.getZcCatalogueCode())            && zcBCatalogueProp.getZcCataPropEnName().equals(zcBMerCatalogueProp.getZcCataPropEnName())) {            zcBMerCatalogueProp.setZcCataPropChName(zcBCatalogueProp.getZcCataPropChName());          }        }        cataloguePropShow.add(zcBMerCatalogueProp);      }      spForm.setZcCatalogueProp(cataloguePropShow);      //图片      List asFileList = new ArrayList();      List zcMerPicIDList = menuGoodsService.getZcMerPicID(zcMerCode);      Iterator iter = zcMerPicIDList.iterator();      while (iter.hasNext()) {        ZcBMerPic zcMerPic = (ZcBMerPic) iter.next();        asFileList.add(zcMerPic);      }      spForm.setAsFileList(asFileList);      request.setAttribute("asFileList", asFileList);      IZcEbSupplierService zcEbSupplierService = (IZcEbSupplierService) this.getWebApplicationContext().getBean("zcEbSupplierService");      //获取供应商列表,点击新增的时候，产生的供应商列表      List zcEbSupplierList = zcEbSupplierService.getZcEbSupplierList();      spForm.setZcEbSupplierList(zcEbSupplierList);    } catch (Exception e) {      log.error(e);      throw e;    }    if ("1".equals(index)) {      return mapping.findForward(forward);    } else {      return mapping.findForward("success1");    }  }}