package com.ufgov.zc.server.zc.web.action.merchandise;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Collection;import java.util.Enumeration;import java.util.Hashtable;import java.util.Iterator;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import org.apache.struts.upload.FormFile;import org.apache.struts.upload.MultipartRequestHandler;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.zc.model.ZcBMerDiscountWeb;import com.ufgov.zc.common.zc.model.ZcBMerPic;import com.ufgov.zc.server.system.SpringContext;import com.ufgov.zc.server.system.service.IAsFileService;import com.ufgov.zc.server.system.util.NumUtil;import com.ufgov.zc.server.zc.service.IMenuGoodsService;import com.ufgov.zc.server.zc.service.IZcBrandService;import com.ufgov.zc.server.zc.web.action.StrutsAction;import com.ufgov.zc.server.zc.web.form.MerchandiseForm;public class AddMerchandiseAction extends StrutsAction {  private final static Log log = LogFactory.getLog(AddMerchandiseAction.class);  public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,  HttpServletResponse response) throws Exception {    String forword = "success";    try {      request.setCharacterEncoding("UTF-8");      Map map = request.getParameterMap();      MerchandiseForm merchandiseForm = (MerchandiseForm) form;      IMenuGoodsService menuGoodsService = (IMenuGoodsService) this.getWebApplicationContext().getBean("menuGoodsService");      IAsFileService asFileService = (IAsFileService) SpringContext.getBean("asFileService");      //进行商品编码      String code = NumUtil.getInstance().getNo("ZC_B_MERCHANDISE", "ZC_MER_CODE", merchandiseForm.getZcBMerchandise());      merchandiseForm.getZcBMerchandise().setZcMerCode(code);      merchandiseForm.getZcBMerchandise().setZcMerStatus("0"); //商品状态      merchandiseForm.getZcBMerchandise().setZcMdType("1");      merchandiseForm.getZcBMerchandise().setZcCatalogueYear("2011");      //根据品牌编码查找品牌名称      IZcBrandService zcBrandService = (IZcBrandService) this.getWebApplicationContext().getBean("zcBrandService");      String zcBraName = zcBrandService.getBrandInfoByBrandId(merchandiseForm.getZcBMerchandise()).getZcBraName();      merchandiseForm.getZcBMerchandise().setZcBraName(zcBraName);      //jdk1.4对map的循环，并向商品品目属性表中插入数据      Iterator it = map.entrySet().iterator();      ZcBMerDiscountWeb zcBMerDiscount = new ZcBMerDiscountWeb();      List indexList = new ArrayList();      while (it.hasNext()) {        Map.Entry entry = (Map.Entry) it.next();        String key = entry.getKey().toString();        if ("zcBMerchandise.zcMerCollocate".equals(key)) {          if (entry.getValue() instanceof String[]) {            String[] values = (String[]) entry.getValue();            for (int i = 0; i < values.length; i++) {              merchandiseForm.getZcBMerchandise().setZcMerCollocate(values[i]);            }          }        }        if (key.length() > 16) {          if (key.substring(0, 16).equals("zcBCatalogueProp") && !key.substring(17).equals("zcCatalogueCode")) {            if (entry.getValue() instanceof String[]) {              String[] values = (String[]) entry.getValue();              for (int i = 0; i < values.length; i++) {                String cataPropEnName = key.substring(17);                merchandiseForm.getZcBMerCatalogueProp().setZcMerCode(code);                merchandiseForm.getZcBMerCatalogueProp().setZcCatalogueCode(merchandiseForm.getZcBMerchandise().getZcCatalogueCode());                merchandiseForm.getZcBMerCatalogueProp().setZcCataPropEnName(cataPropEnName);                merchandiseForm.getZcBMerCatalogueProp().setZcCataPropValue(values[i]);                if (merchandiseForm.getZcBMerCatalogueProp().getZcCataPropValue() != null                  && !"".equals(merchandiseForm.getZcBMerCatalogueProp().getZcCataPropValue())) {                  menuGoodsService.addMerchandiseNWForCataProp(merchandiseForm);                }              }            }          }          if (key.substring(0, 12).equals("zcEbSupplier")) {            if (indexList.size() <= 0) {              indexList.add(key.substring(13, 14));            } else {              if (!key.substring(13, 14).equals("-") && !indexList.contains(key.substring(13, 14))) {                indexList.add(key.substring(13, 14));              }            }          }        }      }      for (int a = 0; a < indexList.size(); a++) {        Enumeration test = request.getParameterNames();        String name = null;        while (test.hasMoreElements()) {          name = (String) test.nextElement();          if (name.length() > 16) {            if (name.substring(13, 14).equals(indexList.get(a).toString())) {              zcBMerDiscount.setZcMerCode(merchandiseForm.getZcBMerchandise().getZcMerCode());              if (name.substring(16).equals("supplierCode")) {                zcBMerDiscount.setZcSuCode(request.getParameter(name));              }              if (name.substring(16).equals("lower")) {                zcBMerDiscount.setZcTreatyLowerLimit(Integer.parseInt(request.getParameter(name)));              }              if (name.substring(16).equals("upper")) {                zcBMerDiscount.setZcTreatyUpperLimit(Integer.parseInt(request.getParameter(name)));              }              if (name.substring(16).equals("discount")) {                zcBMerDiscount.setZcTreatyDiscountRate(new BigDecimal(request.getParameter(name)));              }              if (name.substring(16).equals("memo")) {                zcBMerDiscount.setZcTreatyMemo(request.getParameter(name));              }            }          }        }        System.out.println("--a-" + a + "-----mercode-[" + zcBMerDiscount.getZcMerCode() + "]-lower-[" + zcBMerDiscount.getZcTreatyLowerLimit()          + "]-sucode-[" + zcBMerDiscount.getZcSuCode() + "]-upper-[" + zcBMerDiscount.getZcTreatyUpperLimit());        if (zcBMerDiscount.getZcSuCode() != null && zcBMerDiscount.getZcTreatyLowerLimit() != 0 && zcBMerDiscount.getZcTreatyUpperLimit() != 0          && zcBMerDiscount.getZcTreatyDiscountRate() != null) {          menuGoodsService.addZcBMerDiscountWeb(zcBMerDiscount);        }      }      MultipartRequestHandler multipartRequestHandler = form.getMultipartRequestHandler();      Hashtable elements = multipartRequestHandler.getFileElements();      Collection values = elements.values();      for (java.util.Iterator i = values.iterator(); i.hasNext();) {        FormFile file = (org.apache.struts.upload.FormFile) i.next();// 取得上传的文件        if ("" != file.toString() && !"".equals(file.getFileName())) {          AsFile asFile = new AsFile();          ZcBMerPic zcBMerPic = new ZcBMerPic();          String fname = file.getFileName();// 获取文件名          //String type = file.getContentType(); //获取文件类型          byte[] fileContent = file.getFileData();          String fileID = Guid.genID();          asFile.setFileId(fileID);          asFile.setFileName(fname);          asFile.setFileContent(fileContent);          asFile.setMimeType("application/octet-stream");          asFileService.uploadFile(asFile); //将图片插入到asfile表中          zcBMerPic.setZcMerCode(code);          zcBMerPic.setZcPicID(fileID);          menuGoodsService.addZcMerPic(zcBMerPic); //插入商品与asfile表的关联表        }      }      menuGoodsService.addMerchandiseNW(merchandiseForm);    } catch (Exception e) {      log.error(e);      throw e;    }    return mapping.findForward(forword);  }}