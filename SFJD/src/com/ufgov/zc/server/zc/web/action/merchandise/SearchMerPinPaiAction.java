package com.ufgov.zc.server.zc.web.action.merchandise;import java.io.PrintWriter;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import org.springframework.web.struts.ActionSupport;import com.ufgov.zc.common.zc.model.ZcBBrand;import com.ufgov.zc.common.zc.model.ZcBCatalogueProp;import com.ufgov.zc.server.zc.service.IMerCatalogueService;import com.ufgov.zc.server.zc.service.IZcBrandService;public class SearchMerPinPaiAction extends ActionSupport {  private final static Log log = LogFactory.getLog(SearchMerPinPaiAction.class);  public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,  HttpServletResponse response) throws Exception {    HttpSession session = request.getSession();    //SpForm spForm = (SpForm) form;    try {      response.setContentType("text/xml; charset=UTF-8");      PrintWriter out = response.getWriter();      out.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");      out.println("<options>");      Map parameterObject = new HashMap();      String key = request.getParameter("key");      parameterObject.put("zcCatalogue", key);      String userId = (String) request.getSession().getAttribute("svUserID");      parameterObject.put("zcSuCode", userId);      System.out.println("*****************进入品牌查询方法****************");      IZcBrandService zcBrandService = (IZcBrandService) this.getWebApplicationContext().getBean("zcBrandService");      List Brands = zcBrandService.getBrandsForMenuGoods(parameterObject);      IMerCatalogueService merCatalogueService = (IMerCatalogueService) this.getWebApplicationContext().getBean("merCatalogueService");      //String key = request.getParameter("key");      //获取品目属性列表      List catalogueProp = merCatalogueService.getCataloguePeopForID(key);      if (!catalogueProp.isEmpty()) {        for (Iterator iterator = catalogueProp.iterator(); iterator        .hasNext();) {          ZcBCatalogueProp zcBCatalogueProp = (ZcBCatalogueProp) iterator.next();          out.println("<value1>" + zcBCatalogueProp.getZcCataPropChName() + "</value1>");          out.println("<text1>" + zcBCatalogueProp.getZcCataPropEnName() + "</text1>");        }      }      if (!Brands.isEmpty()) {        for (Iterator iterator = Brands.iterator(); iterator        .hasNext();) {          ZcBBrand brand = (ZcBBrand) iterator.next();          out.println("<value>" + brand.getZcBraCode() + "</value>");          out.println("<text>" + brand.getZcBraName() + "</text>");        }      }      out.println("</options>");      out.flush();      out.close();    } catch (Exception e) {      log.error(e);      throw e;    }    return mapping.findForward("");  }}