package com.ufgov.zc.server.zc.web.action.merchandise;import java.util.List;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import org.springframework.web.struts.ActionSupport;import com.ufgov.zc.server.zc.service.IMerCatalogueService;import com.ufgov.zc.server.zc.service.IZcEbSupplierService;import com.ufgov.zc.server.zc.web.form.SpForm;public class SearchMerCatalogueAction extends ActionSupport {  private final static Log log = LogFactory.getLog(SearchMerCatalogueAction.class);  public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,  HttpServletResponse response) throws Exception {    String forword = "success";    SpForm spForm = (SpForm) form;    try {      IMerCatalogueService merCatalogueService = (IMerCatalogueService) this.getWebApplicationContext().getBean("merCatalogueService");      //获取品目列表,直接查询zc_portal_catalogue的末级品目      /*       *因为商品需要总代来进行录入，需要对该总代可维护的品目及品牌进行过滤，       *所以直接修改sqlmap来查询zc_zb_pinp表，通过zc_su_code进行过滤,增加参数zcSuCode。       */      String zcSuCode = (String) request.getSession().getAttribute("svUserID");      List catalogueList = merCatalogueService.getCatalogueForNW(zcSuCode);      spForm.setCatalogueList(catalogueList);      //获取批次列表      List zcXyghZbjgList = merCatalogueService.getZcXyghZbjgList();      spForm.setZcXyghZbjgList(zcXyghZbjgList);      IZcEbSupplierService zcEbSupplierService = (IZcEbSupplierService) this.getWebApplicationContext().getBean("zcEbSupplierService");      //			Map parameterObject = new HashMap();      //			parameterObject.put("", "");      //获取供应商列表      List zcEbSupplierList = zcEbSupplierService.getZcEbSupplierList();      spForm.setZcEbSupplierList(zcEbSupplierList);    } catch (Exception e) {      log.error(e);      throw e;    }    return mapping.findForward(forword);  }}