package com.ufgov.zc.server.console.dao.ibatis;import java.sql.SQLException;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.orm.ibatis.SqlMapClientCallback;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;import com.ibatis.sqlmap.client.SqlMapExecutor;import com.ufgov.zc.common.console.model.AsGrantedRole;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.server.console.dao.IAsRoleGrantedDao;public class AsRoleGrantedDao extends SqlMapClientDaoSupport implements IAsRoleGrantedDao {  public AsRoleGrantedDao() {    super();  }  public void deleteGrantedRoleById(String id) {    // TODO Auto-generated method stub    this.getSqlMapClientTemplate().delete("AsRoleGranted.deleteGrantedRoleById", id);  }  public List getUserGrantedRole(ElementConditionDto condition) {    // TODO Auto-generated method stub    return this.getSqlMapClientTemplate().queryForList("AsRoleGranted.getUserGrantedRole", condition);  }  public void insertGrantedRole(AsGrantedRole grantedRole) {    // TODO Auto-generated method stub    this.getSqlMapClientTemplate().insert("AsRoleGranted.insertGrantedRole", grantedRole);  }  public void deleteGrantedRoleByGrant(ElementConditionDto condition) {    // TODO Auto-generated method stub    this.getSqlMapClientTemplate().delete("AsRoleGranted.deleteGrantedRoleByGrant", condition);  }  public void deleteGrantedRoleByGranted(ElementConditionDto condition) {    // TODO Auto-generated method stub    this.getSqlMapClientTemplate().delete("AsRoleGranted.deleteGrantedRoleByGranted", condition);  }  public void deleteGrantedRoles(final List roles) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        AsGrantedRole role = null;        executor.startBatch();        for (int i = 0; i < roles.size(); i++) {          role = (AsGrantedRole) roles.get(i);          deleteGrantedRoleById(role.getId());        }        executor.executeBatch();        return null;      }    });  }  public void insertGrantedRoles(final List roles) {    // TODO Auto-generated method stub    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        AsGrantedRole role = null;        executor.startBatch();        for (int i = 0; i < roles.size(); i++) {          role = (AsGrantedRole) roles.get(i);          deleteGrantedRoleById(role.getId());          insertGrantedRole(role);        }        executor.executeBatch();        return null;      }    });  }  public void deleteAllGrantedTask(String granter) {    this.getSqlMapClientTemplate().delete("AsRoleGranted.deleteAllGrantedTask", granter);  }  public void deleteSelectedGrantedTask(final String granter, final String granterInfo, final String granted) {    Map param = new HashMap();    param.put("granter", granter);    param.put("granterInfo", granterInfo);    param.put("granted", granted);    this.getSqlMapClientTemplate().delete("AsRoleGranted.deleteSelectedGrantedTask", param);  }}