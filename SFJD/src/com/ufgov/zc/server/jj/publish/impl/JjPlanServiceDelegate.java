package com.ufgov.zc.server.jj.publish.impl;import java.util.List;import com.ufgov.zc.common.jj.model.JjPlan;import com.ufgov.zc.common.jj.publish.IJjPlanServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.dto.PrintObject;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.util.ExceptionUtil;import com.ufgov.zc.server.jj.service.IJjPlanService;public class JjPlanServiceDelegate implements IJjPlanServiceDelegate {  private IJjPlanService jjPlanService;  public IJjPlanService getJjPlanService() {    return jjPlanService;  }  public void setJjPlanService(IJjPlanService jjPlanService) {    this.jjPlanService = jjPlanService;  }  public List getJjPlan(ElementConditionDto dto, RequestMeta meta) {    return this.jjPlanService.getJjPlan(dto);  }  public List getJjPlanForEdit(ElementConditionDto dto, RequestMeta meta) {    return this.jjPlanService.getJjPlanForEdit(dto);  }  public List getJjPlanForAudit(ElementConditionDto dto, RequestMeta meta) {    return this.jjPlanService.getJjPlanForAudit(dto);  }  public void saveJjPlanFN(JjPlan jjPlan, boolean createDraft, RequestMeta meta) {    this.jjPlanService.saveJjPlan(jjPlan, createDraft);  }  public void editJjPlanFN(JjPlan jjPlan, boolean createDraft, RequestMeta meta) {    this.jjPlanService.editJjPlan(jjPlan, createDraft);  }  public JjPlan getJjPlanWithDetail(String oid, RequestMeta meta) {    return this.jjPlanService.getJjPlanWithDetail(oid);  }  public void deleteJjPlanDetail(List jjPlanDetail, RequestMeta meta) {    this.jjPlanService.deleteJjPlanDetail(jjPlanDetail);  }  public String deleteJjPlan(List jjPlanList, RequestMeta meta) {    return this.jjPlanService.deleteJjPlan(jjPlanList);  }  public List getJjPlan(String projectName, String coCode, RequestMeta meta) {    return this.jjPlanService.getJjPlan(projectName, coCode);  }  public PrintObject genMainSubPrintObjectFN(List jjPlanList, RequestMeta meta) {    return this.jjPlanService.genMainSubPrintObject(jjPlanList);  }  public void increasePrintTimes(List IdList, RequestMeta meta) {    this.jjPlanService.increasePrintTimes(IdList);  }  public void updateJjPlanFinishStatus(JjPlan jjPlan, RequestMeta meta) {    this.jjPlanService.updateJjPlanFinishStatus(jjPlan);  }  public PrintObject genSumMainSubPrintObjectFN(List jjPlanList,  boolean isPrintSumDetail, RequestMeta meta) {    return this.jjPlanService.genSumMainSubPrintObject(jjPlanList, isPrintSumDetail);  }  public void effectJjPlanFN(JjPlan jjPlan, RequestMeta meta) {    this.jjPlanService.effectJjPlan(jjPlan);  }  public void sendFN(JjPlan jjPlan, RequestMeta requestMeta) {    this.jjPlanService.send(jjPlan);  }  public void auditFN(JjPlan jjPlan, RequestMeta requestMeta) {    this.jjPlanService.audit(jjPlan);  }  public void untreadFN(JjPlan jjPlan, RequestMeta requestMeta) {    this.jjPlanService.untread(jjPlan);  }  public void unauditFN(JjPlan jjPlan, RequestMeta requestMeta) {    this.jjPlanService.unaudit(jjPlan);  }  public void unauditFN(List jjPlanList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("编号为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < jjPlanList.size(); i++) {      JjPlan v = (JjPlan) jjPlanList.get(i);      try {        jjPlanService.unaudit(v);      } catch (Exception ex) {        errorInfo.append(v.getJjPlanCode() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的数据处理失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void sendFN(List jjPlanList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("编号为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < jjPlanList.size(); i++) {      JjPlan v = (JjPlan) jjPlanList.get(i);      try {        jjPlanService.send(v);      } catch (Exception ex) {        errorInfo.append(v.getJjPlanCode() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的数据处理失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void auditFN(List jjPlanList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("编号为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < jjPlanList.size(); i++) {      JjPlan v = (JjPlan) jjPlanList.get(i);      try {        jjPlanService.audit(v);      } catch (Exception ex) {        errorInfo.append(v.getJjPlanCode() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的数据处理失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void untreadFN(List jjPlanList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("编号为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < jjPlanList.size(); i++) {      JjPlan v = (JjPlan) jjPlanList.get(i);      try {        jjPlanService.untread(v);      } catch (Exception ex) {        errorInfo.append(v.getJjPlanCode() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的数据处理失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }}