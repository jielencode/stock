package com.ufgov.zc.client.console;import java.awt.BorderLayout;import java.awt.Container;import java.awt.Dialog;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.List;import java.util.Vector;import javax.swing.JButton;import javax.swing.JPanel;import javax.swing.table.DefaultTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.util.GkPreferencesStore;import com.ufgov.zc.common.console.model.GkCompoNewToOld;import com.ufgov.zc.common.console.publish.IConsoleServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;public class CompareOldOrNewCompoDialog extends GkBaseDialog {  private IConsoleServiceDelegate consoleServiceDelegate;  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();;  private DataEditArea editArea = new DataEditArea("", "");  private JButton okBtn = new JButton("确定");  private JButton cancelBtn = new JButton("关闭");  public CompareOldOrNewCompoDialog(Window window, String title) {    super(window, Dialog.ModalityType.APPLICATION_MODAL);    this.setTitle(title);    this.setSize(new Dimension(660, 500));    this.moveToScreenCenter();    initService();    initGUI();  }  public void initService() {    String consoleServiceDelegateName = "consoleServiceDelegate";    consoleServiceDelegate = (IConsoleServiceDelegate) ServiceFactory.create(IConsoleServiceDelegate.class,    consoleServiceDelegateName);  }  public void initGUI() {    Container container = this.getContentPane();    container.setLayout(new BorderLayout());    JPanel commandPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));    commandPanel.add(okBtn);    okBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        close();      }    });    commandPanel.add(cancelBtn);    cancelBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        close();      }    });    this.editArea.setPreferencesKey(this.getClass().getName() + "_GkCompoOldOrNew_table");    this.editArea.setTableModel(getTableModel());    this.add(this.editArea, BorderLayout.CENTER);    this.add(commandPanel, BorderLayout.SOUTH);  }  public void close() {    this.closeDialog();  }  private DefaultTableModel getTableModel() {    DefaultTableModel defaultMode = null;    final Vector names = new Vector();    names.add("新部件ID");    names.add("新部件名称");    names.add("旧部件ID");    names.add("旧部件名称");    names.add("类型");    final Vector data = new Vector();    List dataList = consoleServiceDelegate.getGkCompoNewToOld(requestMeta);    if (dataList != null && dataList.size() > 0) {      for (int i = 0; i < dataList.size(); i++) {        GkCompoNewToOld rowData = (GkCompoNewToOld) dataList.get(i);        Vector row = new Vector();        row.add(rowData.getNewCompoId());        row.add(rowData.getNewCompoName());        row.add(rowData.getOldCompoId());        row.add(rowData.getOldCompoName());        row.add(rowData.getToType());        data.add(row);      }    }    defaultMode = new DefaultTableModel(data, names) {      @Override      public boolean isCellEditable(int row, int colum) {        return false;      }    };    return defaultMode;  }}