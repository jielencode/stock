package com.ufgov.zc.client.console;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.ArrayList;import java.util.Enumeration;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JFrame;import javax.swing.JTree;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.DefaultTreeModel;import javax.swing.tree.DefaultTreeSelectionModel;import javax.swing.tree.TreePath;import javax.swing.tree.TreeSelectionModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.common.console.model.AsOrg;import com.ufgov.zc.common.console.publish.IConsoleServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;public class AsOrgTree extends JTree {  private List asOrgList;  private IConsoleServiceDelegate consoleServiceDelegate;  private String serviceName = "consoleServiceDelegate";  private Map asOrgMap;  private RequestMeta requestMeta;  /**   * @param showData 是否打开时就显示数据   */  public AsOrgTree(boolean showData) {    super();    init();    if (showData) {      refreshAsOrgList();      createTree();    }  }  public AsOrgTree(boolean showData, String child) {    super();    init();    if (showData) {      refreshAsOrgChildList();      createTree();    }  }  private void init() {    consoleServiceDelegate = (IConsoleServiceDelegate) ServiceFactory.create(IConsoleServiceDelegate.class,    serviceName);    // 设置树的选择模式：只能单选    DefaultTreeSelectionModel selectionModel = new DefaultTreeSelectionModel();    selectionModel.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);    this.setSelectionModel(selectionModel);  }  /**   * 刷新单位数据   */  public void refreshAsOrgList() {    int nd = WorkEnv.getInstance().getTransNd();    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    asOrgList = consoleServiceDelegate.getAsOrg(nd, requestMeta);    for (int i = 0; i < asOrgList.size(); i++) {      AsOrg asOrg = (AsOrg) asOrgList.get(i);    }  }  public void refreshAsOrgChildList() {    int nd = WorkEnv.getInstance().getTransNd();    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    String coCode = WorkEnv.getInstance().getCurrCoCode();    asOrgList = consoleServiceDelegate.getAsOrg(nd, coCode, requestMeta);  }  protected Map<Object, DefaultMutableTreeNode> treeNodeMap = new HashMap<Object, DefaultMutableTreeNode>();  /**   * 构建单位树   */  public void createTree() {    //创建根节点    AsOrg asOrgRoot = new AsOrg();    asOrgRoot.setCode("");    asOrgRoot.setName("组织结构");    DefaultMutableTreeNode root = new DefaultMutableTreeNode(asOrgRoot);    List asOrgTreeList = genTreeData();    treeNodeMap.clear();    for (int i = 0; i < asOrgTreeList.size(); i++) {      AsOrg asOrg = (AsOrg) asOrgTreeList.get(i);      DefaultMutableTreeNode node = new DefaultMutableTreeNode(asOrg);      root.add(node);      treeNodeMap.put(asOrg, node);      this.setChildNode(asOrg, node);    }    this.setModel(new DefaultTreeModel(root));  }  private List genTreeData() {    List rootAsOrgList = new ArrayList();    List childrenAsOrgList = new ArrayList();    Map dataMap = new HashMap();    for (int i = 0; i < asOrgList.size(); i++) {      AsOrg allAsorg = (AsOrg) asOrgList.get(i);      dataMap.put(allAsorg.getCode(), allAsorg);    }    for (Object o : asOrgList) {      AsOrg asorg = (AsOrg) o;      if (dataMap.get(asorg.getParentCode()) == null) {        rootAsOrgList.add(asorg);      } else {        childrenAsOrgList.add(asorg);      }    }    Map childrenMap = new HashMap();    for (int i = 0; i < childrenAsOrgList.size(); i++) {      AsOrg child = (AsOrg) childrenAsOrgList.get(i);      List childrenList = (List) childrenMap.get(child.getParentCode());      if (childrenList != null) {        childrenList.add(child);      } else {        List tempList = new ArrayList();        tempList.add(child);        childrenMap.put(child.getParentCode(), tempList);      }    }    for (int i = 0; i < rootAsOrgList.size(); i++) {      AsOrg asOrg = (AsOrg) rootAsOrgList.get(i);      this.setAsOrgChildren(asOrg, childrenMap);    }    return rootAsOrgList;  }  private void setAsOrgChildren(AsOrg asOrg, Map childrenMap) {    List childrenList = (List) childrenMap.get(asOrg.getCode());    if (childrenList != null) {      asOrg.setChildren(childrenList);      for (int i = 0; i < childrenList.size(); i++) {        AsOrg c = (AsOrg) childrenList.get(i);        setAsOrgChildren(c, childrenMap);      }    }  }  private void setChildNode(AsOrg asOrg, DefaultMutableTreeNode node) {    if (asOrg.getChildren().size() > 0) {      for (Object o : asOrg.getChildren()) {        AsOrg c = (AsOrg) o;        DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(c);        node.add(childNode);        treeNodeMap.put(c, childNode);        setChildNode(c, childNode);      }    }  }  public void expandAll(boolean expand) {    DefaultMutableTreeNode root = (DefaultMutableTreeNode) this.getModel().getRoot();    expandAll(new TreePath(root), expand);  }  public Map getAsOrgMap() {    asOrgMap = new HashMap();    for (int i = 0; i < asOrgList.size(); i++) {      AsOrg asOrg = (AsOrg) asOrgList.get(i);      asOrgMap.put(asOrg.getCode(), asOrg);    }    return asOrgMap;  }  /**   * 遍历parent的所有子节点并展开   * @param parent   * @param expand   */  public void expandAll(TreePath parent, boolean expand) {    DefaultMutableTreeNode node = (DefaultMutableTreeNode) parent.getLastPathComponent();    if (node.getChildCount() >= 0) {      for (Enumeration e = node.children(); e.hasMoreElements();) {        DefaultMutableTreeNode n = (DefaultMutableTreeNode) e.nextElement();        TreePath path = parent.pathByAddingChild(n);        expandAll(path, expand);      }    }    if (expand) {      this.expandPath(parent);    } else {      this.collapsePath(parent);    }  }  public static void main(String[] args) {    AsOrgTree tree = new AsOrgTree(true);    tree.expandAll(true);    JFrame f = new JFrame();    f.getContentPane().add(tree);    f.setSize(400, 300);    f.setLocationRelativeTo(null);    f.setVisible(true);    f.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent e) {        System.exit(0);      }    });  }  public Map<Object, DefaultMutableTreeNode> getTreeNodeMap() {    return treeNodeMap;  }  public void setTreeNodeMap(Map<Object, DefaultMutableTreeNode> treeNodeMap) {    this.treeNodeMap = treeNodeMap;  }  public List getAsOrgList() {    return asOrgList;  }  public void setAsOrgList(List asOrgList) {    this.asOrgList = asOrgList;  }}