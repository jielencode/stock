package com.ufgov.zc.client.console;import java.awt.BorderLayout;import java.awt.Container;import java.awt.Dialog;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Vector;import javax.swing.DefaultCellEditor;import javax.swing.JButton;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTable;import javax.swing.event.ListSelectionEvent;import javax.swing.event.ListSelectionListener;import javax.swing.table.DefaultTableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.component.table.JGroupableTable;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.OrderSelectStringField;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.model.AsCompo;public class OrderFieldSettingDialog extends GkBaseDialog {  private static final Logger logger = Logger.getLogger(OrderFieldSettingDialog.class);  private IBaseDataServiceDelegate baseDataServiceDelegate;  private RequestMeta requestMeta;  private Map<String, AsCompo> updateDataMap = new HashMap<String, AsCompo>();  private DataEditArea editArea = new DataEditArea("", "");  private List<AsCompo> dataList;  private JButton okBtn = new JButton("确定");  private JButton cancelBtn = new JButton("关闭");  public OrderFieldSettingDialog(Window window, String title) {    super(window, Dialog.ModalityType.APPLICATION_MODAL);    this.setTitle(title);    this.setSize(new Dimension(660, 500));    this.moveToScreenCenter();    requestMeta = WorkEnv.getInstance().getRequestMeta();    initService();    initGUI();  }  public void initService() {    LangTransMeta.init("GK%");    String baseDataServiceDelegateName = "baseDataServiceDelegate";    baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(    IBaseDataServiceDelegate.class, baseDataServiceDelegateName);  }  public void initGUI() {    Container container = this.getContentPane();    container.setLayout(new BorderLayout());    JPanel commandPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));    commandPanel.add(okBtn);    okBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        editArea.stopDataEditArea();        saveDataProcess();      }    });    commandPanel.add(cancelBtn);    cancelBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        close();      }    });    container.add(editArea, BorderLayout.CENTER);    container.add(commandPanel, BorderLayout.SOUTH);    refreshData();    final JGroupableTable editTable = editArea.getTable();    editTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {      public void valueChanged(ListSelectionEvent e) {        if (e.getValueIsAdjusting()) {          return;        }        editArea.stopDataEditArea();        int curRow = editTable.getSelectedRow();        int selRow = editTable.convertRowIndexToView(curRow);        AsCompo asCompo = dataList.get(selRow);        OrderSelectStringField orderTxt = new OrderSelectStringField(asCompo);        orderTxt.setText(asCompo.getOrderColumns());        SwingUtil.setTableCellEditor(editTable, "排序字段", new DefaultCellEditor(orderTxt));      }    });  }  private void refreshData() {    editArea.setPreferencesKey(this.getClass().getName() + "_CompoFunc_Edit_Table");    editArea.setTableModel(getTableModel(editArea.getTable()));  }  public void saveDataProcess() {    try {      Iterator itr = updateDataMap.keySet().iterator();      while (itr.hasNext()) {        Object key = itr.next();        AsCompo asCompo = (AsCompo) updateDataMap.get(key);        //        String orderColumn = asCompo.getOrderField() + " " + asCompo.getOrder();        //        asCompo.setOrderColumns(orderColumn);        baseDataServiceDelegate.updateAsCompo(asCompo, requestMeta);      }      JOptionPane.showMessageDialog(this, "排序字段设置更新成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "排序字段设置更新失败！", "错误", JOptionPane.ERROR_MESSAGE);    }  }  public void close() {    this.closeDialog();  }  private DefaultTableModel getTableModel(JTable table) {    DefaultTableModel defaultMode = null;    dataList = this.baseDataServiceDelegate.getAllAsCompo(requestMeta);    final Vector names = new Vector();    final Map fieldMap = new HashMap();    names.add("部件ID");    names.add("部件名称");    names.add("表名称");    names.add("排序字段");    fieldMap.put("部件ID", "compoId");    fieldMap.put("部件名称", "compoName");    fieldMap.put("表名称", "masterTabId");    fieldMap.put("排序字段", "orderColumns");    final Vector data = new Vector();    data.addAll(dataList);    defaultMode = new OrderFieldTableModel(data, names, fieldMap, updateDataMap, table);    return defaultMode;  }}