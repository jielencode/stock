package com.ufgov.zc.client.console;import java.lang.reflect.Method;import java.util.List;import java.util.Map;import java.util.Vector;import javax.swing.JTable;import javax.swing.table.DefaultTableModel;import com.ufgov.zc.common.system.model.AsCompo;public class OrderFieldTableModel extends DefaultTableModel {  private JTable table;  private Map updateDataMap;  private Map fieldMap;  private int cnt = 0;  public OrderFieldTableModel(List dataList, List headerName, Map fieldMap, Map updateDataMap, JTable table) {    this.dataVector = new Vector();    dataVector.addAll(dataList);    this.columnIdentifiers = (Vector) headerName;    this.fieldMap = fieldMap;    this.updateDataMap = updateDataMap;    this.table = table;  }  @Override  public int getColumnCount() {    if (columnIdentifiers != null) {      return columnIdentifiers.size();    } else {      return 0;    }  }  @Override  public int getRowCount() {    if (dataVector != null) {      return dataVector.size();    } else {      return 0;    }  }  @Override  public void setValueAt(Object aValue, int row, int column) {    Object oldValue = getValueAt(row, column);    AsCompo asCompo = (AsCompo) dataVector.elementAt(row);    if ((oldValue != null && !oldValue.toString().equals(aValue.toString()))    || (oldValue == null && aValue != null)) {      asCompo.setOrderColumns(aValue.toString());      updateDataMap.put(asCompo.getCompoId(), asCompo);    }    fireTableCellUpdated(row, column);  }  @Override  public Object getValueAt(int rowIndex, int columnIndex) {    AsCompo asCompo = (AsCompo) dataVector.get(rowIndex);    String colName = columnIdentifiers.get(columnIndex).toString();    String key = fieldMap.get(colName).toString();    //    if (colName.equals("排序字段")) {    //      TableColumn column = table.getColumn("排序字段");    //      OrderSelectStringField orderTxt = new OrderSelectStringField(asCompo);    //      orderTxt.setText(asCompo.getOrderColumns());    //      cnt++;    //      System.out.println("======>" + cnt + asCompo.getCompoName());    //      column.setCellEditor(new DefaultCellEditor(orderTxt));    //    }    Class beanClass = asCompo.getClass();    Method method = null;    Object result = null;    try {      method = beanClass.getMethod(getMethodName(key, "get"), new Class[] {});      result = method.invoke(asCompo, new Object[] {});    } catch (Exception e) {      e.printStackTrace();    }    return result;  }  @Override  public boolean isCellEditable(int row, int column) {    String colName = columnIdentifiers.get(column).toString();    if (colName.equals("排序字段")) {      return true;    }    return false;  }  public Object getRowObject(int rowIndex) {    return dataVector.get(rowIndex);  }  private String getMethodName(String property, String prefix) {    String prop = Character.toUpperCase(property.charAt(0)) + property.substring(1);    String methodName = prefix + prop;    return methodName;  }}