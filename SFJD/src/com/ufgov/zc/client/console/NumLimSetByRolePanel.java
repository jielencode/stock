package com.ufgov.zc.client.console;import java.awt.BorderLayout;import java.awt.Component;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.GridLayout;import java.awt.Insets;import java.awt.Point;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyAdapter;import java.awt.event.KeyEvent;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.ButtonGroup;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JList;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JRadioButton;import javax.swing.JScrollBar;import javax.swing.JScrollPane;import javax.swing.JTabbedPane;import javax.swing.JTextArea;import javax.swing.JTextField;import javax.swing.ListSelectionModel;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.event.ChangeEvent;import javax.swing.event.ChangeListener;import javax.swing.event.ListSelectionEvent;import javax.swing.event.ListSelectionListener;import org.apache.log4j.Logger;import com.ufgov.smartclient.component.JClassifyList;import com.ufgov.smartclient.component.JComboBoxEx;import com.ufgov.smartclient.plaf.GrayLookAndFeel;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.BAccCheckTree;import com.ufgov.zc.client.component.CompanyCheckTree;import com.ufgov.zc.client.component.JSaveableSplitPane;import com.ufgov.zc.client.component.NumLimCompoTreeSelectField;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.datacache.BalModeDataCache;import com.ufgov.zc.client.datacache.BankDataCache;import com.ufgov.zc.client.datacache.DAttrDataCache;import com.ufgov.zc.client.datacache.FundDataCache;import com.ufgov.zc.client.datacache.ManageDataCache;import com.ufgov.zc.client.datacache.OperationTypeDataCache;import com.ufgov.zc.client.datacache.OrgDataCache;import com.ufgov.zc.client.datacache.OriginDataCache;import com.ufgov.zc.client.datacache.PayoutDataCache;import com.ufgov.zc.client.datacache.PaytypeDataCache;import com.ufgov.zc.common.commonbiz.model.BAcc;import com.ufgov.zc.common.commonbiz.model.BalMode;import com.ufgov.zc.common.commonbiz.model.Company;import com.ufgov.zc.common.commonbiz.model.DAttr;import com.ufgov.zc.common.commonbiz.model.Fund;import com.ufgov.zc.common.commonbiz.model.MaBank;import com.ufgov.zc.common.commonbiz.model.Manage;import com.ufgov.zc.common.commonbiz.model.NumLimCompo;import com.ufgov.zc.common.commonbiz.model.OperationType;import com.ufgov.zc.common.commonbiz.model.Org;import com.ufgov.zc.common.commonbiz.model.Origin;import com.ufgov.zc.common.commonbiz.model.Payout;import com.ufgov.zc.common.commonbiz.model.Paytype;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.console.model.AsRole;import com.ufgov.zc.common.console.model.AsRoleNumLim;import com.ufgov.zc.common.console.model.MaRoleNumLim;import com.ufgov.zc.common.console.publish.IConsoleServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;public class NumLimSetByRolePanel extends JPanel implements ParentWindowAware {  private static final Logger logger = Logger.getLogger(NumLimSetByRolePanel.class);  private static final long serialVersionUID = 7892613035639056023L;  private Window parentWindow;  private JSaveableSplitPane splitPane = new JSaveableSplitPane();  private JPanel asRolePanel = new JPanel();  private JScrollPane asRolePane = new JScrollPane();  private JList asRoleList = new JList();  private AsRole asRole;  private boolean envIsProper = false; // 标志当前角色、部件环境是否可用  private int nd;  private RequestMeta requestMeta;  private JPanel setPanel = new JPanel();  private JPanel numLimCompoPanel = new JPanel();  private NumLimCompoTreeSelectField numLimCompoTf = new NumLimCompoTreeSelectField(50);  private JTabbedPane itemPane = new JTabbedPane();  private JPanel sqlPanel = new JPanel();  private JTextArea sqlTa;  private JButton checkSqlButton = new JButton("sql语句校验");  private JButton saveSqlButton = new JButton("保存sql");  private String sqlCondition;  private JPanel companyPanel = new JPanel();  private CompanyCheckTree companyTree = new CompanyCheckTree(true);  private JRadioButton enableCompanyButton = new JRadioButton("启用");  private JRadioButton disableCompanyButton = new JRadioButton("禁用");  private JButton saveCompanyButton = new JButton("保存单位");  private List companyList;  private Map<String, Company> companyMap = new HashMap<String, Company>();  List<Company> selectedCompanyList = new ArrayList<Company>();  private List<Company> unSelectedCompanyList = new ArrayList<Company>();  private boolean companyBuffer = false; // 标志当前要素是否已经取过数  private JPanel baccPanel = new JPanel();  private BAccCheckTree baccTree = new BAccCheckTree(true);  private JRadioButton enableBAccButton = new JRadioButton("启用");  private JRadioButton disableBAccButton = new JRadioButton("禁用");  private JButton saveBAccButton = new JButton("保存功能分类");  private List baccList;  private Map<String, BAcc> baccMap = new HashMap<String, BAcc>();  List<BAcc> selectedBAccList = new ArrayList<BAcc>();  private List<BAcc> unSelectedBAccList = new ArrayList<BAcc>();  private boolean baccBuffer = false; // 标志当前要素是否已经取过数  private JPanel fundPanel = new JPanel();  private JClassifyList fundClassifyList = new JClassifyList();  private JButton saveFundButton = new JButton("保存资金性质");  private List fundList;  private Map<String, Fund> fundMap = new HashMap<String, Fund>();  private List<Fund> selectedFundList = new ArrayList<Fund>();  private boolean fundBuffer = false;  private JPanel payoutPanel = new JPanel();  private JClassifyList payoutClassifyList = new JClassifyList();  private JButton savePayoutButton = new JButton("保存支出类型");  private List payoutList;  private Map<String, Payout> payoutMap = new HashMap<String, Payout>();  private List<Payout> selectedPayoutList = new ArrayList<Payout>();  private boolean payoutBuffer = false;  private JPanel originPanel = new JPanel();  private JClassifyList originClassifyList = new JClassifyList();  private JButton saveOriginButton = new JButton("保存指标来源");  private List originList;  private Map<String, Origin> originMap = new HashMap<String, Origin>();  private List<Origin> selectedOriginList = new ArrayList<Origin>();  private boolean originBuffer = false;  private JPanel orgPanel = new JPanel();  private JClassifyList orgClassifyList = new JClassifyList();  private JButton saveOrgButton = new JButton("保存科室");  private List orgList;  private Map<String, Org> orgMap = new HashMap<String, Org>();  private List<Org> selectedOrgList = new ArrayList<Org>();  private boolean orgBuffer = false;  private JPanel bankPanel = new JPanel();  private JClassifyList bankClassifyList = new JClassifyList();  private JButton saveBankButton = new JButton("保存银行");  private List bankList;  private Map<String, MaBank> bankMap = new HashMap<String, MaBank>();  private List<MaBank> selectedBankList = new ArrayList<MaBank>();  private boolean bankBuffer = false;  private JPanel operationtypePanel = new JPanel();  private JClassifyList operationtypeClassifyList = new JClassifyList();  private JButton saveOperationtypeButton = new JButton("保存业务类型");  private List operationtypeList;  private Map<String, OperationType> operationtypeMap = new HashMap<String, OperationType>();  private List<OperationType> selectedOperationtypeList = new ArrayList<OperationType>();  private boolean operationtypeBuffer = false;  private Map<String, String> compoOperationtypeMap = new HashMap<String, String>();  private JPanel otherItemPanel = new JPanel();  private JClassifyList otherItemClassifyList = new JClassifyList();  private List<String> otherItemCodeList = new ArrayList<String>();  private JComboBoxEx otherItemComboBox = new JComboBoxEx();  private JButton saveOtherItemButton = new JButton("保存要素");  private List itemDataList = new ArrayList();  private Map itemDataMap = new HashMap();  private List selectedItemDataList = new ArrayList();  private IConsoleServiceDelegate consoleServiceDelegate;  private List asRoleNumLimList = new ArrayList();  private IBaseDataServiceDelegate baseDataServiceDelegate;  public NumLimSetByRolePanel() {    initService();    initData();    initInterface();  }  /**   * 初始化service   */  private void initService() {    consoleServiceDelegate = (IConsoleServiceDelegate) ServiceFactory.create(IConsoleServiceDelegate.class,    "consoleServiceDelegate");    baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(    IBaseDataServiceDelegate.class, "baseDataServiceDelegate");  }  /**   * 初始化数据，取出list并将list加到map里   */  private void initData() {    nd = WorkEnv.getInstance().getTransNd();    requestMeta = WorkEnv.getInstance().getRequestMeta();    ElementConditionDto dto = new ElementConditionDto();    dto.setNd(nd);    asRoleList.setListData(consoleServiceDelegate.getAsRole(nd, requestMeta).toArray());    companyList = companyTree.getCompanyList();    for (Object o : companyList) {      Company c = (Company) o;      companyMap.put(c.getCode(), c);    }    baccList = baccTree.getBAccList();    for (Object o : baccList) {      BAcc c = (BAcc) o;      baccMap.put(c.getCode(), c);    }    fundList = FundDataCache.getFund();    for (Object o : fundList) {      Fund f = (Fund) o;      fundMap.put(f.getCode(), f);    }    payoutList = PayoutDataCache.getPayout();    for (Object o : payoutList) {      Payout p = (Payout) o;      payoutMap.put(p.getCode(), p);    }    originList = OriginDataCache.getOrigin();    for (Object o : originList) {      Origin origin = (Origin) o;      originMap.put(origin.getCode(), origin);    }    orgList = OrgDataCache.getOrg();    for (Object o : orgList) {      Org org = (Org) o;      orgMap.put(org.getCode(), org);    }    bankList = BankDataCache.getBank();    for (Object o : bankList) {      MaBank bank = (MaBank) o;      bankMap.put(bank.getCode(), bank);    }    operationtypeList = OperationTypeDataCache.getOperationType();    for (Object o : operationtypeList) {      OperationType ot = (OperationType) o;      operationtypeMap.put(ot.getCode(), ot);    }    // 初始化部件菜单的业务类型，格式为：%菜单前缀%:#code1#code2#...#    for (String str : NumLimConstants.COMPO_OPERATIONTYPE_CODE) {      int i = str.indexOf(":");      if (i != -1)        compoOperationtypeMap.put(str.substring(0, i), str.substring(i + 1));    }  }  /**   * 初始化界面   */  private void initInterface() {    initAsRolePanel();    initNumLimCompoPanel();    initItemPane();    initSqlPanel();    setPanel.setLayout(new BorderLayout());    setPanel.add(numLimCompoPanel, BorderLayout.NORTH);    setPanel.add(itemPane, BorderLayout.CENTER);    setPanel.add(sqlPanel, BorderLayout.SOUTH);    splitPane.setOneTouchExpandable(true);    splitPane.setContinuousLayout(true);    splitPane.setOrientation(JSaveableSplitPane.HORIZONTAL_SPLIT);    splitPane.setDividerSize(5);    splitPane.setDividerDefaultLocation(this.getClass().getName() + "_splitPane_dividerLocation", 200);    asRolePanel.setMinimumSize(new Dimension(0, 0));    setPanel.setMinimumSize(new Dimension(0, 0));    splitPane.setLeftComponent(asRolePanel);    splitPane.setRightComponent(setPanel);    this.setLayout(new BorderLayout());    this.add(splitPane, BorderLayout.CENTER);  }  /**   * 初始化角色list，带搜索   */  private void initAsRolePanel() {    final JTextField searchTf = new JTextField(20);    searchTf.addKeyListener(new KeyAdapter() {      public void keyPressed(KeyEvent e) {        if (e.getKeyCode() == KeyEvent.VK_ENTER) {          doSearch(searchTf.getText());        }      }    });    JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));    searchPanel.add(new JLabel("查找："));    searchPanel.add(searchTf);    asRoleList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);    asRoleList.addListSelectionListener(new ListSelectionListener() {      public void valueChanged(ListSelectionEvent e) {        asRole = (AsRole) asRoleList.getSelectedValue();        refreshData();      }    });    asRolePane.getViewport().add(asRoleList);    asRolePanel.setLayout(new BorderLayout());    asRolePanel.add(searchPanel, BorderLayout.NORTH);    asRolePanel.add(asRolePane, BorderLayout.CENTER);  }  // 搜索角色  private void doSearch(String str) {    if (str.equals(""))      return;    int rowCount = asRoleList.getModel().getSize();    int currentRow = asRoleList.getSelectedIndex() == -1 ? 0 : asRoleList.getSelectedIndex();    int i;    // 从当前行开始一直遍历到最后    for (i = currentRow + 1; i < rowCount; i++) {      AsRole asRole = (AsRole) asRoleList.getModel().getElementAt(i);      if (asRole.toString().indexOf(str) >= 0) {        asRoleList.setSelectedIndex(i);        break;      }    }    // 从第一行开始遍历到之前的行    if (i == rowCount) {      for (i = 0; i < currentRow; i++) {        AsRole asRole = (AsRole) asRoleList.getModel().getElementAt(i);        if (asRole.toString().indexOf(str) >= 0) {          asRoleList.setSelectedIndex(i);          break;        }      }    }    // 自动滚动    Point p = asRoleList.indexToLocation(i);    JScrollBar bar = asRolePane.getVerticalScrollBar();//获得垂直滚动条    if (bar.getValue() + bar.getSize().getHeight() - 50 < p.y || bar.getValue() > p.y)      bar.setValue(p.y);  }  /**   * 初始化设置权限菜单面板   */  private void initNumLimCompoPanel() {    numLimCompoTf.setEditable(false);    numLimCompoTf.addValueChangeListener(new ValueChangeListener() {      public void valueChanged(ValueChangeEvent e) {        // 判断是否显示业务类型页签        String compoId = numLimCompoTf.getNumLimCompo().getCompoId();        String compoPrefix = compoId;        int i = compoId.indexOf("_");        if (i != -1)          compoPrefix = compoId.substring(0, i);        if (compoOperationtypeMap.get(compoPrefix) == null)          itemPane.remove(operationtypePanel);        else {          boolean hasOperationtype = false;          for (Component component : itemPane.getComponents()) {            if (component == operationtypePanel) {              hasOperationtype = true;              break;            }          }          if (!hasOperationtype)            itemPane.insertTab("业务类型", null, operationtypePanel, null, itemPane.getComponentCount() - 1);        }        // 获取当前菜单的要素列表        otherItemCodeList.clear();        otherItemComboBox.removeAllItems();        String billTypeCode = numLimCompoTf.getNumLimCompo().getBillTypeCode();        BillElementMeta bem = BillElementMeta.getBillElementMeta(billTypeCode);        for (String elementCode : NumLimConstants.otherItemCodes) {          if (bem.hasElement(elementCode)) {            otherItemCodeList.add(elementCode);            otherItemComboBox.addItem(elementCode);            otherItemComboBox.addItemDisplaLable(elementCode, bem.getElementName(elementCode));            //otherItemComboBox.addItem(bem.getElementName(elementCode));          }        }        refreshData();      }    });    numLimCompoPanel.setLayout(new FlowLayout(FlowLayout.LEFT));    numLimCompoPanel.add(new JLabel("设置权限菜单"));    numLimCompoPanel.add(numLimCompoTf);  }  /**   * 初始化需要控制的字段的页签   */  private void initItemPane() {    initCompanyPanel();    initBAccPanel();    initFundPanel();    initPayoutPanel();    initOriginPanel();    initOrgPanel();    initBankPanel();    initOperationtypePanel();    initOtherItemPanel();    itemPane.add("单位", companyPanel);    itemPane.add("功能分类", baccPanel);    itemPane.add("资金性质", fundPanel);    itemPane.add("支出类型", payoutPanel);    itemPane.add("指标来源", originPanel);    itemPane.add("科室", orgPanel);    itemPane.add("业务类型", operationtypePanel);    itemPane.add("银行", bankPanel);    itemPane.insertTab("其他要素", null, otherItemPanel, "其他要素（支付方式、管理类型、扩展要素...）", itemPane.getComponentCount());    itemPane.addChangeListener(new ChangeListener() {      public void stateChanged(ChangeEvent e) {        showCurrentTabData();      }    });  }  /**   * 初始化sql条件面板   */  private void initSqlPanel() {    sqlTa = new JTextArea(4, 40);    sqlTa.setLineWrap(true);    JScrollPane tmpPane = new JScrollPane(sqlTa);    checkSqlButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doCheckSqlCondition();      }    });    saveSqlButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSaveSqlCondition();      }    });    JPanel buttonPanel = new JPanel();    GridLayout g = new GridLayout(2, 1);    g.setVgap(10);    buttonPanel.setLayout(g);    saveSqlButton.setText("保存sql");    buttonPanel.add(checkSqlButton);    buttonPanel.add(saveSqlButton);    JPanel tmpPanel = new JPanel(new GridBagLayout());    GridBagConstraints gbc = new GridBagConstraints();    gbc.insets = new Insets(20, 5, 20, 5);    tmpPanel.add(buttonPanel, gbc);    sqlPanel.setLayout(new BorderLayout());    sqlPanel.add(tmpPane, BorderLayout.CENTER);    sqlPanel.add(tmpPanel, BorderLayout.EAST);    sqlPanel.setBorder(BorderFactory.createTitledBorder("sql条件"));  }  private void initCompanyPanel() {    saveCompanyButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSaveSelectedCompany();      }    });    ButtonGroup companyBG = new ButtonGroup();    companyBG.add(enableCompanyButton);    companyBG.add(disableCompanyButton);    JPanel tmpPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));    tmpPanel.add(enableCompanyButton);    tmpPanel.add(disableCompanyButton);    tmpPanel.add(saveCompanyButton);    companyTree.expandRow(1);    companyPanel.setLayout(new BorderLayout());    companyPanel.add(tmpPanel, BorderLayout.NORTH);    companyPanel.add(new JScrollPane(companyTree), BorderLayout.CENTER);  }  private void initBAccPanel() {    saveBAccButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSaveSelectedBAcc();      }    });    ButtonGroup baccBG = new ButtonGroup();    baccBG.add(enableBAccButton);    baccBG.add(disableBAccButton);    JPanel tmpPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));    tmpPanel.add(enableBAccButton);    tmpPanel.add(disableBAccButton);    tmpPanel.add(saveBAccButton);    baccPanel.setLayout(new BorderLayout());    baccPanel.add(tmpPanel, BorderLayout.NORTH);    baccPanel.add(new JScrollPane(baccTree), BorderLayout.CENTER);  }  private void initFundPanel() {    fundClassifyList.setLeftObjects(fundList.toArray());    fundClassifyList.setRightObjects(null);    saveFundButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSaveSelectedFund();      }    });    JPanel tmpPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));    tmpPanel.add(saveFundButton);    fundPanel.setLayout(new BorderLayout());    fundPanel.add(tmpPanel, BorderLayout.NORTH);    fundPanel.add(fundClassifyList, BorderLayout.CENTER);  }  private void initPayoutPanel() {    payoutClassifyList.setLeftObjects(payoutList.toArray());    payoutClassifyList.setRightObjects(null);    savePayoutButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSaveSelectedPayout();      }    });    JPanel tmpPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));    tmpPanel.add(savePayoutButton);    payoutPanel.setLayout(new BorderLayout());    payoutPanel.add(tmpPanel, BorderLayout.NORTH);    payoutPanel.add(payoutClassifyList, BorderLayout.CENTER);  }  private void initOriginPanel() {    originClassifyList.setLeftObjects(originList.toArray());    originClassifyList.setRightObjects(null);    saveOriginButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSaveSelectedOrigin();      }    });    JPanel tmpPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));    tmpPanel.add(saveOriginButton);    originPanel.setLayout(new BorderLayout());    originPanel.add(tmpPanel, BorderLayout.NORTH);    originPanel.add(originClassifyList, BorderLayout.CENTER);  }  private void initBankPanel() {    bankClassifyList.setLeftObjects(bankList.toArray());    bankClassifyList.setRightObjects(null);    saveBankButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSaveSelectedBank();      }    });    JPanel tmpPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));    tmpPanel.add(saveBankButton);    bankPanel.setLayout(new BorderLayout());    bankPanel.add(tmpPanel, BorderLayout.NORTH);    bankPanel.add(bankClassifyList, BorderLayout.CENTER);  }  private void initOrgPanel() {    orgClassifyList.setLeftObjects(orgList.toArray());    orgClassifyList.setRightObjects(null);    saveOrgButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSaveSelectedOrg();      }    });    JPanel tmpPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));    tmpPanel.add(saveOrgButton);    orgPanel.setLayout(new BorderLayout());    orgPanel.add(tmpPanel, BorderLayout.NORTH);    orgPanel.add(orgClassifyList, BorderLayout.CENTER);  }  private void initOperationtypePanel() {    operationtypeClassifyList.setLeftObjects(operationtypeList.toArray());    operationtypeClassifyList.setRightObjects(null);    saveOperationtypeButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSaveSelectedOperationtype();      }    });    JPanel tmpPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));    tmpPanel.add(saveOperationtypeButton);    operationtypePanel.setLayout(new BorderLayout());    operationtypePanel.add(tmpPanel, BorderLayout.NORTH);    operationtypePanel.add(operationtypeClassifyList, BorderLayout.CENTER);  }  private void initOtherItemPanel() {    otherItemClassifyList.setLeftObjects(itemDataList.toArray());    otherItemClassifyList.setRightObjects(null);    otherItemComboBox.setPreferredSize(new Dimension(150, 20));    otherItemComboBox.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        initItemData();        showCurrentTabData();      }    });    saveOtherItemButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSaveSelectedOtherItem();      }    });    JPanel tmpPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));    tmpPanel.add(otherItemComboBox);    tmpPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));    tmpPanel.add(saveOtherItemButton);    otherItemPanel.setLayout(new BorderLayout());    otherItemPanel.add(tmpPanel, BorderLayout.NORTH);    otherItemPanel.add(otherItemClassifyList, BorderLayout.CENTER);  }  /**   * 初始化当前选中的要素列表   */  private void initItemData() {    int index = otherItemComboBox.getSelectedIndex();    if (index == -1)      return;    //itemDataList.clear();    itemDataMap.clear();    selectedItemDataList.clear();    String itemCode = otherItemCodeList.get(index);    if (itemCode.equals(NumLimConstants.PAYTYPE_CODE)) {      itemDataList = PaytypeDataCache.getPaytype();      for (Object o : itemDataList) {        Paytype item = (Paytype) o;        itemDataMap.put(item.getCode(), item);      }    } else if (itemCode.equals(NumLimConstants.MANAGE_CODE)) {      itemDataList = ManageDataCache.getManage();      for (Object o : itemDataList) {        Manage item = (Manage) o;        itemDataMap.put(item.getCode(), item);      }    } else if (itemCode.equals(NumLimConstants.BAL_MODE_CODE)) {      itemDataList = BalModeDataCache.getBalMode();      for (Object o : itemDataList) {        BalMode item = (BalMode) o;        itemDataMap.put(item.getBalModeCode(), item);      }    } else if (itemCode.equals(NumLimConstants.D_ATTR1)) {      itemDataList = DAttrDataCache.getDAttr(DAttr.D_ATTR1_TYPE);      for (Object o : itemDataList) {        DAttr item = (DAttr) o;        itemDataMap.put(item.getCode(), item);      }    } else if (itemCode.equals(NumLimConstants.D_ATTR2)) {      itemDataList = DAttrDataCache.getDAttr(DAttr.D_ATTR2_TYPE);      for (Object o : itemDataList) {        DAttr item = (DAttr) o;        itemDataMap.put(item.getCode(), item);      }    } else if (itemCode.equals(NumLimConstants.D_ATTR3)) {      itemDataList = DAttrDataCache.getDAttr(DAttr.D_ATTR3_TYPE);      for (Object o : itemDataList) {        DAttr item = (DAttr) o;        itemDataMap.put(item.getCode(), item);      }    } else if (itemCode.equals(NumLimConstants.D_ATTR4)) {      itemDataList = DAttrDataCache.getDAttr(DAttr.D_ATTR4_TYPE);      for (Object o : itemDataList) {        DAttr item = (DAttr) o;        itemDataMap.put(item.getCode(), item);      }    } else if (itemCode.equals(NumLimConstants.D_ATTR5)) {      itemDataList = DAttrDataCache.getDAttr(DAttr.D_ATTR5_TYPE);      for (Object o : itemDataList) {        DAttr item = (DAttr) o;        itemDataMap.put(item.getCode(), item);      }    }  }  /**   * 当组织机构所选节点更改时，刷新显示当前所选节点已设置的数据限制   */  private void refreshData() {    resetAll();    if (asRole == null || numLimCompoTf.getNumLimCompo() == null)      envIsProper = false;    else      envIsProper = true;    if (envIsProper) {      // 取出当前职员当前部件的所有查看权限      String roleId = asRole.getRoleId();      String compoId = numLimCompoTf.getNumLimCompo().getCompoId();      String funcId = NumLimConstants.FWATCH;      asRoleNumLimList = consoleServiceDelegate.getAsRoleNumLim(roleId, compoId, funcId, null, requestMeta);      // 根据当前职员当前部件的查看权限，设置当前界面      AsRoleNumLim sqlCondNumLim = getAsRoleNumLim(NumLimConstants.SQL_CONDITION);      sqlCondition = sqlCondNumLim == null ? "" : sqlCondNumLim.getGranRange();    }    sqlTa.setText(sqlCondition);    showCurrentTabData();  }  /**   * 所有变量重置到初始状态   */  private void resetAll() {    companyBuffer = false;    baccBuffer = false;    fundBuffer = false;    payoutBuffer = false;    originBuffer = false;    orgBuffer = false;    bankBuffer = false;    operationtypeBuffer = false;    asRoleNumLimList.clear();    selectedCompanyList.clear();    unSelectedCompanyList.clear();    selectedBAccList.clear();    unSelectedBAccList.clear();    selectedFundList.clear();    selectedPayoutList.clear();    selectedOriginList.clear();    selectedBankList.clear();    selectedOrgList.clear();    selectedOperationtypeList.clear();    selectedItemDataList.clear();    sqlCondition = "";  }  /**   * 获取当前人员当前要素设置的取权限sql   * @param ctrlField   * @return   */  private AsRoleNumLim getAsRoleNumLim(String ctrlField) {    if (!envIsProper)      return null;    for (Object o : asRoleNumLimList) {      AsRoleNumLim asRoleNumLim = (AsRoleNumLim) o;      if (asRoleNumLim.getCtrlField() != null && asRoleNumLim.getCtrlField().equals(ctrlField))        return asRoleNumLim;    }    return null;  }  /**   * 获取当前用户当前要素设置的限制列表   * @param map   * @param ctrlField   * @return   */  private List getItemLimitListFromTable(Map map, String ctrlField) {    // 从ma_role_num_lim表中取出限制codes列表    String roleId = asRole.getRoleId();    String compoId = numLimCompoTf.getNumLimCompo().getCompoId();    String funcId = NumLimConstants.FWATCH;    List maRoleNumLimList = consoleServiceDelegate.getMaRoleNumLim(roleId, compoId, funcId, ctrlField,    requestMeta);    // 根据code从map里取出相应的要素列表    List tmpList = new ArrayList();    for (Object o : maRoleNumLimList) {      MaRoleNumLim maRoleNumLim = (MaRoleNumLim) o;      tmpList.add(map.get(maRoleNumLim.getCode()));    }    return tmpList;  }  /**   * 直接取出限制列表   * @param map   * @param codes 格式为：'code1','code2'...   * @return   */  private List getItemLimitList(Map map, String codes) {    List tmpList = new ArrayList();    String[] codeArray = codes.replaceAll("'", "").split(",");    for (String code : codeArray) {      tmpList.add(map.get(code));    }    return tmpList;  }  /**   * 显示当前页签上选择的数据   */  private void showCurrentTabData() {    if (itemPane.getSelectedComponent() == companyPanel)      showCompanyData();    if (itemPane.getSelectedComponent() == baccPanel)      showBAccData();    else if (itemPane.getSelectedComponent() == fundPanel)      showFundData();    else if (itemPane.getSelectedComponent() == payoutPanel)      showPayoutData();    else if (itemPane.getSelectedComponent() == originPanel)      showOriginData();    else if (itemPane.getSelectedComponent() == bankPanel)      showBankData();    else if (itemPane.getSelectedComponent() == orgPanel)      showOrgData();    else if (itemPane.getSelectedComponent() == operationtypePanel)      showOperationtypeData();    else if (itemPane.getSelectedComponent() == otherItemPanel)      showOtherItemData();  }  /**   * 显示单位界面数据   */  private void showCompanyData() {    if (!envIsProper) {      companyTree.setSelectedLeafCompanyList(null, true);      return;    }    if (companyBuffer)      return;    // 单位数据未曾取过，则从ma_role_num_lim里取数    String ctrlField = NumLimConstants.CO_CODE;    AsRoleNumLim companyNumLim = getAsRoleNumLim(ctrlField);    if (companyNumLim != null) {      List limitList = getItemLimitListFromTable(companyMap, ctrlField);      if (companyNumLim.getIsGran().equals(NumLimConstants.GRAN))        selectedCompanyList.addAll(limitList);      else        unSelectedCompanyList.addAll(limitList);    }    companyBuffer = true;    // 设置显示数据    if (unSelectedCompanyList.size() > 0) {      disableCompanyButton.setSelected(true);      companyTree.setSelectedLeafCompanyList(unSelectedCompanyList, true);    } else {      enableCompanyButton.setSelected(true);      companyTree.setSelectedLeafCompanyList(selectedCompanyList, true);    }  }  /**   * 显示功能分类界面数据   */  private void showBAccData() {    if (!envIsProper) {      baccTree.setSelectedLeafBAccList(null, true);      return;    }    if (baccBuffer)      return;    // 功能分类数据未曾取过，则从ma_role_num_lim里取数    String ctrlField = NumLimConstants.B_ACC_CODE;    AsRoleNumLim baccNumLim = getAsRoleNumLim(ctrlField);    if (baccNumLim != null) {      List limitList = getItemLimitListFromTable(baccMap, ctrlField);      if (baccNumLim.getIsGran().equals(NumLimConstants.GRAN))        selectedBAccList.addAll(limitList);      else        unSelectedBAccList.addAll(limitList);    }    baccBuffer = true;    // 设置显示数据    if (unSelectedBAccList.size() > 0) {      disableBAccButton.setSelected(true);      baccTree.setSelectedLeafBAccList(unSelectedBAccList, true);    } else {      enableBAccButton.setSelected(true);      baccTree.setSelectedLeafBAccList(selectedBAccList, true);    }  }  private void showFundData() {    if (!envIsProper) {      setClassifyList(fundClassifyList, fundList, null);      return;    }    if (fundBuffer)      return;    String ctrlField = NumLimConstants.FUND_CODE;    AsRoleNumLim fundNumLim = getAsRoleNumLim(ctrlField);    if (fundNumLim != null) {      List limitList = getItemLimitList(fundMap, fundNumLim.getGranRange());      selectedFundList.addAll(limitList);    }    fundBuffer = true;    setClassifyList(fundClassifyList, fundList, selectedFundList);  }  private void showPayoutData() {    if (!envIsProper) {      setClassifyList(payoutClassifyList, payoutList, null);      return;    }    if (payoutBuffer)      return;    String ctrlField = NumLimConstants.PAYOUT_CODE;    AsRoleNumLim payoutNumLim = getAsRoleNumLim(ctrlField);    if (payoutNumLim != null) {      List limitList = getItemLimitList(payoutMap, payoutNumLim.getGranRange());      selectedPayoutList.addAll(limitList);    }    payoutBuffer = true;    setClassifyList(payoutClassifyList, payoutList, selectedPayoutList);  }  private void showOriginData() {    if (!envIsProper) {      setClassifyList(originClassifyList, originList, null);      return;    }    if (originBuffer)      return;    String ctrlField = NumLimConstants.ORIGIN_CODE;    AsRoleNumLim originNumLim = getAsRoleNumLim(ctrlField);    if (originNumLim != null) {      List limitList = getItemLimitList(originMap, originNumLim.getGranRange());      selectedOriginList.addAll(limitList);    }    originBuffer = true;    setClassifyList(originClassifyList, originList, selectedOriginList);  }  private void showBankData() {    if (!envIsProper) {      setClassifyList(bankClassifyList, bankList, null);      return;    }    if (bankBuffer)      return;    NumLimCompo numLimCompo = numLimCompoTf.getNumLimCompo();    String ctrlField = NumLimConstants.PAY_BANK_CODE;    if (!"CP_VOUCHER".equalsIgnoreCase(numLimCompo.getTableId())) {      ctrlField = NumLimConstants.AGENT_BANK_CODE;    }    AsRoleNumLim bankNumLim = getAsRoleNumLim(ctrlField);    if (bankNumLim != null) {      List limitList = getItemLimitList(bankMap, bankNumLim.getGranRange());      selectedBankList.addAll(limitList);    }    bankBuffer = true;    setClassifyList(bankClassifyList, bankList, selectedBankList);  }  private void showOrgData() {    if (!envIsProper) {      setClassifyList(orgClassifyList, orgList, null);      return;    }    if (orgBuffer)      return;    String ctrlField = NumLimConstants.ORG_CODE;    AsRoleNumLim orgNumLim = getAsRoleNumLim(ctrlField);    if (orgNumLim != null) {      List limitList = getItemLimitList(orgMap, orgNumLim.getGranRange());      selectedOrgList.addAll(limitList);    }    orgBuffer = true;    setClassifyList(orgClassifyList, orgList, selectedOrgList);  }  /**   * 获取当前部件可设置的业务类型列表   * @return   */  private List getCompoOperationtypeList() {    if (!envIsProper || operationtypeList == null || operationtypeList.size() == 0)      return null;    // 从map中取出当前部件对应的业务类型代码集    String compoId = numLimCompoTf.getNumLimCompo().getCompoId();    String compoPrefix = compoId;    int i = compoId.indexOf("_");    if (i != -1)      compoPrefix = compoId.substring(0, i);    String codes = compoOperationtypeMap.get(compoPrefix);    if (codes == null)      return null;    // 取出可用的列表    List tmpList = new ArrayList();    for (Object o : operationtypeList) {      OperationType operationtype = (OperationType) o;      if (codes.indexOf("#" + operationtype.getFlowCode() + "#") != -1)        tmpList.add(operationtype);    }    return tmpList;  }  private void showOperationtypeData() {    if (!envIsProper) {      setClassifyList(operationtypeClassifyList, operationtypeList, null);      return;    }    if (operationtypeBuffer)      return;    String ctrlField = NumLimConstants.OPERATIONTYPE_CODE;    AsRoleNumLim operationtypeNumLim = getAsRoleNumLim(ctrlField);    if (operationtypeNumLim != null) {      List limitList = getItemLimitList(operationtypeMap, operationtypeNumLim.getGranRange());      selectedOperationtypeList.addAll(limitList);    }    operationtypeBuffer = true;    setClassifyList(operationtypeClassifyList, getCompoOperationtypeList(), selectedOperationtypeList);  }  private void showOtherItemData() {    if (!envIsProper) {      setClassifyList(otherItemClassifyList, itemDataList, null);      return;    }    int index = otherItemComboBox.getSelectedIndex();    if (index == -1)      return;    String itemCode = otherItemCodeList.get(index);    AsRoleNumLim itemNumLim = getAsRoleNumLim(itemCode);    if (itemNumLim != null) {      selectedItemDataList.clear();      List limitList = getItemLimitList(itemDataMap, itemNumLim.getGranRange());      selectedItemDataList.addAll(limitList);    }    setClassifyList(otherItemClassifyList, itemDataList, selectedItemDataList);  }  /**   * 设置classifyList的左右列表   * @param classifyList   * @param allList   * @param selectedList   */  private void setClassifyList(JClassifyList classifyList, List allList, List selectedList) {    if (allList == null) {      classifyList.setLeftObjects(null);      classifyList.setRightObjects(null);    } else if (selectedList == null) {      classifyList.setLeftObjects(allList.toArray());      classifyList.setRightObjects(null);    } else {      List<Object> tmpList = new ArrayList<Object>();      for (Object o : allList) {        if (!selectedList.contains(o))          tmpList.add(o);      }      classifyList.setLeftObjects(tmpList.toArray());      classifyList.setRightObjects(selectedList.toArray());    }  }  private boolean saveCheck() {    if (asRole == null) {      JOptionPane.showMessageDialog(this, "角色为空，无法保存！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    if (numLimCompoTf.getNumLimCompo() == null) {      JOptionPane.showMessageDialog(this, "部件菜单为空，无法保存！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    if (numLimCompoTf.getNumLimCompo() != null) {      NumLimCompo numlim = (NumLimCompo) numLimCompoTf.getNumLimCompo();      if (numlim.getCompoId() == null || "".equals(numlim.getCompoId()) || numlim.getParentCompoId() == null      || "".equals(numlim.getParentCompoId())) {        JOptionPane.showMessageDialog(this, "部件菜单选择错误(不能选择根结点和一级系统菜单)，无法保存！", "提示",        JOptionPane.INFORMATION_MESSAGE);        return false;      }    }    return true;  }  /**   * 根据要素获取需插入的sql   * @param ctrlField   * @return   */  private String getItemSql(String ctrlField) {    if (!envIsProper)      return null;    String roleId = asRole.getRoleId();    String compoId = numLimCompoTf.getNumLimCompo().getCompoId();    String funcId = NumLimConstants.FWATCH;    String selectSql = "select code from " + NumLimConstants.ROLE_NUMLIM_TABLE + " where role_id='" + roleId    + "' and compo_id='" + compoId + "'" + " and func_id='" + funcId + "' and ctrl_field='" + ctrlField    + "'";    return selectSql;  }  /**   * 获取需要更新的权限设置   * @param ctrlField   * @param sql   * @param isGran   * @return   */  private AsRoleNumLim getUpdateAsRoleNumLim(String ctrlField, String sql, String isGran) {    if (!envIsProper)      return null;    String roleId = asRole.getRoleId();    String compoId = numLimCompoTf.getNumLimCompo().getCompoId();    String funcId = NumLimConstants.FWATCH;    AsRoleNumLim asRoleNumLim = new AsRoleNumLim();    asRoleNumLim.setRoleId(roleId);    asRoleNumLim.setCompoId(compoId);    asRoleNumLim.setFuncId(funcId);    asRoleNumLim.setCtrlField(ctrlField);    asRoleNumLim.setIsGran(isGran);    asRoleNumLim.setIsRelation(NumLimConstants.IS_NOT_RELATION); // 默认为'N'    if (isGran.equals(NumLimConstants.GRAN))      asRoleNumLim.setGranRange(sql);    else if (isGran.equals(NumLimConstants.REVO))      asRoleNumLim.setRevoRange(sql);    return asRoleNumLim;  }  /**   * 检查设置的sql是否是合法语句   * @return   */  private boolean checkSql(String sql) {    try {      consoleServiceDelegate.checkSelectSql(sql, requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      String message = e.getMessage();      JOptionPane.showMessageDialog(this, "Sql错误，信息：\n" + message, "错误", JOptionPane.ERROR_MESSAGE);      return false;    }    return true;  }  private boolean checkSqlCondition() {    String sql = "";    NumLimCompo numLimCompo = numLimCompoTf.getNumLimCompo();    if (numLimCompo.getTableId() != null) {      sql = numLimCompo.getTableId() + " where " + sqlTa.getText();      if (!checkSql(sql))        return false;    } else if (numLimCompo.getParentCompoId() == null) {      List childs = baseDataServiceDelegate.getNumLimCompoByParentCompoId(numLimCompo.getCompoId(),      requestMeta);      if (childs.isEmpty()) {        JOptionPane.showMessageDialog(this, "部件信息描述错误！子部件页面表为空！", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }      for (int i = 0; i < childs.size(); i++) {        NumLimCompo child = (NumLimCompo) childs.get(i);        sql = child.getTableId() + " where " + sqlTa.getText();        if (!checkSql(sql))          return false;      }    } else {      JOptionPane.showMessageDialog(this, "部件信息描述错误！子部件页面表为空！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    return true;  }  private void doCheckSqlCondition() {    if (!saveCheck() || sqlTa.getText().equalsIgnoreCase(""))      return;    if (checkSqlCondition())      JOptionPane.showMessageDialog(this, "Sql校验成功！", "提示", JOptionPane.INFORMATION_MESSAGE);  }  /**   * 保存设置的sql条件   */  private void doSaveSqlCondition() {    if (!saveCheck())      return;    sqlCondition = sqlTa.getText();    String ctrlField = NumLimConstants.SQL_CONDITION;    AsRoleNumLim asRoleNumLim = getUpdateAsRoleNumLim(ctrlField, sqlCondition, NumLimConstants.GRAN);    // 为空，则删除已设置的sqlCondition    if (sqlCondition.equalsIgnoreCase("")) {      try {        consoleServiceDelegate.deleteAsRoleNumLim(asRoleNumLim.getRoleId(), asRoleNumLim.getCompoId(),        asRoleNumLim.getFuncId(), ctrlField, requestMeta);        JOptionPane.showMessageDialog(this, "保存sql条件成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      } catch (Exception e) {        logger.error(e.getMessage(), e);        JOptionPane.showMessageDialog(this, "保存sql条件失败！", "错误", JOptionPane.ERROR_MESSAGE);      }      return;    }    if (!checkSqlCondition())      return;    // 更新sql条件设置    try {      consoleServiceDelegate.updateAsRoleNumLim(asRoleNumLim, requestMeta);      JOptionPane.showMessageDialog(this, "保存sql条件成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "保存sql条件失败！", "错误", JOptionPane.ERROR_MESSAGE);    }  }  /**   * 保存设置的单位   */  private void doSaveSelectedCompany() {    if (!saveCheck())      return;    String roleId = asRole.getRoleId();    String compoId = numLimCompoTf.getNumLimCompo().getCompoId();    String funcId = NumLimConstants.FWATCH;    String ctrlField = NumLimConstants.CO_CODE;    String sql = getItemSql(ctrlField);    String isGran = "";    // 启用    if (enableCompanyButton.isSelected())      isGran = NumLimConstants.GRAN;    // 禁用    else if (disableCompanyButton.isSelected())      isGran = NumLimConstants.REVO;    AsRoleNumLim asRoleNumLim = getUpdateAsRoleNumLim(ctrlField, sql, isGran);    // 取出勾选的单位    List selectedList = companyTree.getSelectedLeafCompanyList();    List<MaRoleNumLim> maRoleNumLimList = new ArrayList<MaRoleNumLim>();    for (Object o : selectedList) {      Company c = (Company) o;      MaRoleNumLim maRoleNumLim = new MaRoleNumLim();      maRoleNumLim.setRoleId(roleId);      maRoleNumLim.setCompoId(compoId);      maRoleNumLim.setFuncId(funcId);      maRoleNumLim.setCtrlField(ctrlField);      maRoleNumLim.setCode(c.getCode());      maRoleNumLimList.add(maRoleNumLim);    }    // 更新单位权限    try {      if (maRoleNumLimList.isEmpty())        consoleServiceDelegate.deleteAsRoleNumLim(roleId, compoId, funcId, ctrlField, requestMeta);      else        consoleServiceDelegate.updateAsRoleNumLim(asRoleNumLim, requestMeta);      consoleServiceDelegate.updateMaRoleNumLimList(roleId, compoId, funcId, ctrlField, maRoleNumLimList,      requestMeta);      JOptionPane.showMessageDialog(this, "保存单位权限成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "保存单位权限失败！", "错误", JOptionPane.ERROR_MESSAGE);    }  }  /**   * 保存设置的功能分类   */  private void doSaveSelectedBAcc() {    if (!saveCheck())      return;    String roleId = asRole.getRoleId();    String compoId = numLimCompoTf.getNumLimCompo().getCompoId();    String funcId = NumLimConstants.FWATCH;    String ctrlField = NumLimConstants.B_ACC_CODE;    String sql = getItemSql(ctrlField);    String isGran = "";    // 启用    if (enableBAccButton.isSelected())      isGran = NumLimConstants.GRAN;    // 禁用    else if (disableBAccButton.isSelected())      isGran = NumLimConstants.REVO;    AsRoleNumLim asRoleNumLim = getUpdateAsRoleNumLim(ctrlField, sql, isGran);    // 取出勾选的功能分类    List selectedList = baccTree.getSelectedLeafBAccList();    List<MaRoleNumLim> maRoleNumLimList = new ArrayList<MaRoleNumLim>();    for (Object o : selectedList) {      BAcc c = (BAcc) o;      MaRoleNumLim maRoleNumLim = new MaRoleNumLim();      maRoleNumLim.setRoleId(roleId);      maRoleNumLim.setCompoId(compoId);      maRoleNumLim.setFuncId(funcId);      maRoleNumLim.setCtrlField(ctrlField);      maRoleNumLim.setCode(c.getCode());      maRoleNumLimList.add(maRoleNumLim);    }    // 更新功能分类权限    try {      if (maRoleNumLimList.isEmpty())        consoleServiceDelegate.deleteAsRoleNumLim(roleId, compoId, funcId, ctrlField, requestMeta);      else        consoleServiceDelegate.updateAsRoleNumLim(asRoleNumLim, requestMeta);      consoleServiceDelegate.updateMaRoleNumLimList(roleId, compoId, funcId, ctrlField, maRoleNumLimList,      requestMeta);      JOptionPane.showMessageDialog(this, "保存功能分类权限成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "保存功能分类权限失败！", "错误", JOptionPane.ERROR_MESSAGE);    }  }  /**   * 保存设置的资金性质   */  private void doSaveSelectedFund() {    if (!saveCheck())      return;    String roleId = asRole.getRoleId();    String compoId = numLimCompoTf.getNumLimCompo().getCompoId();    String funcId = NumLimConstants.FWATCH;    String ctrlField = NumLimConstants.FUND_CODE;    // 取出已选的资金性质    Object[] funds = fundClassifyList.getRightObjects();    String codes = "";    for (Object o : funds) {      Fund f = (Fund) o;      codes += ",'" + f.getCode() + "'";    }    // 更新资金性质权限    try {      if (codes.equals(""))        consoleServiceDelegate.deleteAsRoleNumLim(roleId, compoId, funcId, ctrlField, requestMeta);      else {        codes = codes.substring(1);        AsRoleNumLim asRoleNumLim = getUpdateAsRoleNumLim(ctrlField, codes, NumLimConstants.GRAN);        consoleServiceDelegate.updateAsRoleNumLim(asRoleNumLim, requestMeta);      }      JOptionPane.showMessageDialog(this, "保存资金性质权限成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "保存资金性质权限失败！", "错误", JOptionPane.ERROR_MESSAGE);    }  }  /**   * 保存设置的支出类型   */  private void doSaveSelectedPayout() {    if (!saveCheck())      return;    String roleId = asRole.getRoleId();    String compoId = numLimCompoTf.getNumLimCompo().getCompoId();    String funcId = NumLimConstants.FWATCH;    String ctrlField = NumLimConstants.PAYOUT_CODE;    // 取出已选的支出类型    Object[] payouts = payoutClassifyList.getRightObjects();    String codes = "";    for (Object o : payouts) {      Payout p = (Payout) o;      codes += ",'" + p.getCode() + "'";    }    // 更新支出类型权限    try {      if (codes.equals(""))        consoleServiceDelegate.deleteAsRoleNumLim(roleId, compoId, funcId, ctrlField, requestMeta);      else {        codes = codes.substring(1);        AsRoleNumLim asRoleNumLim = getUpdateAsRoleNumLim(ctrlField, codes, NumLimConstants.GRAN);        consoleServiceDelegate.updateAsRoleNumLim(asRoleNumLim, requestMeta);      }      JOptionPane.showMessageDialog(this, "保存支出类型权限成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "保存支出类型权限失败！", "错误", JOptionPane.ERROR_MESSAGE);    }  }  /**   * 保存设置的指标来源   */  private void doSaveSelectedOrigin() {    if (!saveCheck())      return;    String roleId = asRole.getRoleId();    String compoId = numLimCompoTf.getNumLimCompo().getCompoId();    String funcId = NumLimConstants.FWATCH;    String ctrlField = NumLimConstants.ORIGIN_CODE;    // 取出已选的指标来源    Object[] origins = originClassifyList.getRightObjects();    String codes = "";    for (Object o : origins) {      Origin f = (Origin) o;      codes += ",'" + f.getCode() + "'";    }    // 更新资金指标来源    try {      if (codes.equals(""))        consoleServiceDelegate.deleteAsRoleNumLim(roleId, compoId, funcId, ctrlField, requestMeta);      else {        codes = codes.substring(1);        AsRoleNumLim asRoleNumLim = getUpdateAsRoleNumLim(ctrlField, codes, NumLimConstants.GRAN);        consoleServiceDelegate.updateAsRoleNumLim(asRoleNumLim, requestMeta);      }      JOptionPane.showMessageDialog(this, "保存指标来源权限成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "保存指标来源权限失败！", "错误", JOptionPane.ERROR_MESSAGE);    }  }  /**   * 保存设置的银行   */  private void doSaveSelectedBank() {    if (!saveCheck())      return;    String roleId = asRole.getRoleId();    NumLimCompo numLimCompo = numLimCompoTf.getNumLimCompo();    String compoId = numLimCompo.getCompoId();    String funcId = NumLimConstants.FWATCH;    String ctrlField = NumLimConstants.PAY_BANK_CODE;    if (!"CP_VOUCHER".equalsIgnoreCase(numLimCompo.getTableId())) {      ctrlField = NumLimConstants.AGENT_BANK_CODE;    }    // 取出已选的银行    Object[] banks = bankClassifyList.getRightObjects();    String codes = "";    for (Object o : banks) {      MaBank bank = (MaBank) o;      codes += ",'" + bank.getCode() + "'";    }    // 更新银行权限    try {      if (codes.equals(""))        consoleServiceDelegate.deleteAsRoleNumLim(roleId, compoId, funcId, ctrlField, requestMeta);      else {        codes = codes.substring(1);        AsRoleNumLim asRoleNumLim = getUpdateAsRoleNumLim(ctrlField, codes, NumLimConstants.GRAN);        consoleServiceDelegate.updateAsRoleNumLim(asRoleNumLim, requestMeta);      }      JOptionPane.showMessageDialog(this, "保存银行权限成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "保存银行权限失败！", "错误", JOptionPane.ERROR_MESSAGE);    }  }  /**   * 保存设置的科室   */  private void doSaveSelectedOrg() {    if (!saveCheck())      return;    String roleId = asRole.getRoleId();    String compoId = numLimCompoTf.getNumLimCompo().getCompoId();    String funcId = NumLimConstants.FWATCH;    String ctrlField = NumLimConstants.ORG_CODE;    // 取出已选的科室    Object[] orgs = orgClassifyList.getRightObjects();    String codes = "";    for (Object o : orgs) {      Org org = (Org) o;      codes += ",'" + org.getCode() + "'";    }    // 更新科室权限    try {      if (codes.equals(""))        consoleServiceDelegate.deleteAsRoleNumLim(roleId, compoId, funcId, ctrlField, requestMeta);      else {        codes = codes.substring(1);        AsRoleNumLim asRoleNumLim = getUpdateAsRoleNumLim(ctrlField, codes, NumLimConstants.GRAN);        consoleServiceDelegate.updateAsRoleNumLim(asRoleNumLim, requestMeta);      }      JOptionPane.showMessageDialog(this, "保存科室权限成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "保存科室权限失败！", "错误", JOptionPane.ERROR_MESSAGE);    }  }  /**   * 保存设置的业务类型   */  private void doSaveSelectedOperationtype() {    if (!saveCheck())      return;    String roleId = asRole.getRoleId();    String compoId = numLimCompoTf.getNumLimCompo().getCompoId();    String funcId = NumLimConstants.FWATCH;    String ctrlField = NumLimConstants.OPERATIONTYPE_CODE;    // 取出已选的业务类型    Object[] operationtypes = operationtypeClassifyList.getRightObjects();    String codes = "";    for (Object o : operationtypes) {      OperationType operation = (OperationType) o;      codes += ",'" + operation.getCode() + "'";    }    // 更新业务类型权限    try {      if (codes.equals(""))        consoleServiceDelegate.deleteAsRoleNumLim(roleId, compoId, funcId, ctrlField, requestMeta);      else {        codes = codes.substring(1);        AsRoleNumLim asRoleNumLim = getUpdateAsRoleNumLim(ctrlField, codes, NumLimConstants.GRAN);        consoleServiceDelegate.updateAsRoleNumLim(asRoleNumLim, requestMeta);      }      JOptionPane.showMessageDialog(this, "保存业务类型权限成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "保存业务类型权限失败！", "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doSaveSelectedOtherItem() {    if (!saveCheck())      return;    int index = otherItemComboBox.getSelectedIndex();    if (index == -1)      return;    String roleId = asRole.getRoleId();    String compoId = numLimCompoTf.getNumLimCompo().getCompoId();    String funcId = NumLimConstants.FWATCH;    String itemCode = otherItemCodeList.get(index);    // 取出已选的要素    Object[] selectedItemDatas = otherItemClassifyList.getRightObjects();    String codes = "";    for (Object o : selectedItemDatas) {      if (itemCode.equals(NumLimConstants.PAYTYPE_CODE)) {        Paytype item = (Paytype) o;        codes += ",'" + item.getCode() + "'";      } else if (itemCode.equals(NumLimConstants.MANAGE_CODE)) {        Manage item = (Manage) o;        codes += ",'" + item.getCode() + "'";      } else if (itemCode.equals(NumLimConstants.BAL_MODE_CODE)) {        BalMode item = (BalMode) o;        codes += ",'" + item.getBalModeCode() + "'";      } else if (itemCode.equals(NumLimConstants.D_ATTR1) || itemCode.equals(NumLimConstants.D_ATTR2)      || itemCode.equals(NumLimConstants.D_ATTR3) || itemCode.equals(NumLimConstants.D_ATTR4)      || itemCode.equals(NumLimConstants.D_ATTR5)) {        DAttr item = (DAttr) o;        codes += ",'" + item.getCode() + "'";      }    }    // 更新要素权限    try {      if (codes.equals("")) {        consoleServiceDelegate.deleteAsRoleNumLim(roleId, compoId, funcId, itemCode, requestMeta);      } else {        codes = codes.substring(1);        AsRoleNumLim asRoleNumLim = getUpdateAsRoleNumLim(itemCode, codes, NumLimConstants.GRAN);        consoleServiceDelegate.updateAsRoleNumLim(asRoleNumLim, requestMeta);      }      refreshData();      JOptionPane.showMessageDialog(this, "保存" + otherItemComboBox.getSelectedItem() + "权限成功！", "提示",      JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "保存" + otherItemComboBox.getSelectedItem() + "权限失败！", "错误",      JOptionPane.ERROR_MESSAGE);    }  }  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window window) {    parentWindow = window;  }  /**   * @param args   */  public static void main(String[] args) throws Exception {    UIManager.setLookAndFeel(new GrayLookAndFeel());    SwingUtilities.invokeLater(new Runnable() {      public void run() {        NumLimSetByRolePanel panel = new NumLimSetByRolePanel();        JFrame f = new JFrame();        f.getContentPane().add(panel);        f.setSize(800, 600);        f.setLocationRelativeTo(null);        f.setVisible(true);        f.addWindowListener(new WindowAdapter() {          public void windowClosing(WindowEvent e) {            System.exit(0);          }        });      }    });  }}