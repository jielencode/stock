package com.ufgov.zc.client.console;import java.awt.BorderLayout;import java.awt.FlowLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.List;import java.util.Vector;import javax.swing.JButton;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTabbedPane;import javax.swing.event.ChangeEvent;import javax.swing.event.ChangeListener;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.JListSelectDialog;import com.ufgov.zc.common.commonbiz.model.SearchCondition;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;public class SearchConditionListPanel extends JPanel {  private static final Logger logger = Logger.getLogger(SearchConditionListPanel.class);  private String pageKey;  private IBaseDataServiceDelegate baseDataServiceDelegate;  private RequestMeta requestMeta;  private DataEditArea orgBtnPanel;//页签名称  private DataEditArea fieldsPanel;//默认页签  private List editBeforeList = new ArrayList();  private JTabbedPane tabPane = new JTabbedPane();  private JButton okBtn = new JButton("确定");  private JButton cancelBtn = new JButton("关闭");  private JButton setTab = new JButton("页签管理");  private String conditionId;  public String getConditionId() {    return conditionId;  }  public void setConditionId(String conditionId) {    this.conditionId = conditionId;  }  public SearchConditionListPanel(String name, String id) {    setName(name);    this.conditionId = id;    initService();    initGUI();  }  public void initService() {    requestMeta = WorkEnv.getInstance().getRequestMeta();    String baseDataServiceDelegateName = "baseDataServiceDelegate";    baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(    IBaseDataServiceDelegate.class, baseDataServiceDelegateName);  }  public void initGUI() {    this.setLayout(new BorderLayout());    orgBtnPanel = new DataEditArea("页签名称修改", "pname");    fieldsPanel = new DataEditArea("默认页签管理", "pmanage", false) {      public void addComponentToPanel() {        searchPanel.add(setTab);      }    };    setTab.addActionListener(new ActionListener() {      public void actionPerformed(final ActionEvent e) {        openPageDialog();      }    });    tabPane.add(orgBtnPanel);    tabPane.add(fieldsPanel);    tabPane.setSelectedComponent(orgBtnPanel);    this.add(tabPane, BorderLayout.CENTER);    tabPane.addChangeListener(new ChangeListener() {      public void stateChanged(ChangeEvent e) {        initEditData();      }    });    JPanel commandPane = new JPanel(new FlowLayout(FlowLayout.RIGHT));    commandPane.add(okBtn);    okBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        final DataEditArea panel = (DataEditArea) tabPane.getSelectedComponent();        final String editKey = panel.getDataAreaKey();        if (editKey.equalsIgnoreCase("pname")) {          orgBtnPanel.stopDataEditArea();        } else {          fieldsPanel.stopDataEditArea();        }        savaDataProcess();      }    });    commandPane.add(cancelBtn);    cancelBtn.addActionListener(new ActionListener() {      public void actionPerformed(final ActionEvent e) {        close();      }    });    this.add(commandPane, BorderLayout.SOUTH);  }  public void openPageDialog() {    if (conditionId == null) {      JOptionPane.showMessageDialog(this, "请您选择一个页签组名称 ！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    doOpenPageDialog(conditionId);  }  //页签管理方法  private JListSelectDialog tabSettingDialog;  private void doOpenPageDialog(String conditionId) {    List allTabList = this.baseDataServiceDelegate.getSearchTypeCondition(conditionId, "tab", requestMeta);    List seletedTabList = baseDataServiceDelegate.getUserSearchCondition(conditionId, "*", requestMeta);    tabSettingDialog = new JListSelectDialog(null, true, "设置页签") {      public void doOk() {        doUpdateTabSetting();        this.close();      }    };    tabSettingDialog.setLeftList(allTabList);    tabSettingDialog.setRightList(seletedTabList);    tabSettingDialog.setVisible(true);  }  private void doUpdateTabSetting() {    List searchConditionList = tabSettingDialog.getSelectedItem();    this.baseDataServiceDelegate.updateUserSearchCondition("*",    conditionId, searchConditionList, requestMeta);    initEditData();  }  public void initEditData() {    DataEditArea panel = (DataEditArea) tabPane.getSelectedComponent();    String editKey = panel.getDataAreaKey();    String resId = this.getConditionId();    if (editKey.equalsIgnoreCase("pname")) {      orgBtnPanel.setPreferencesKey(this.getClass().getName() + "Tab_Name_Edit");      orgBtnPanel.setTableModel(getCurTableModel(resId));    } else {      fieldsPanel.setPreferencesKey(this.getClass().getName() + "Tab_Default_Edit");      fieldsPanel.setTableModel(getDefaultTableModel(resId));    }  }  //处理应该保存的数据  private void savaDataProcess() {    try {      TableModel tableModel = null;      DataEditArea panel = (DataEditArea) tabPane.getSelectedComponent();      if (panel.getDataAreaKey().equals("pname")) {        tableModel = orgBtnPanel.getTable().getModel();      } else {        tableModel = fieldsPanel.getTable().getModel();      }      List searchConditionList = new ArrayList();      for (int i = 0; i < tableModel.getRowCount(); i++) {        SearchCondition searchCondition = new SearchCondition();        searchCondition.setConditionId((String) tableModel.getValueAt(i, 0));        searchCondition.setConditionFieldCode((String) tableModel.getValueAt(i, 1));        searchCondition.setConditionFieldName((String) tableModel.getValueAt(i, 2));        searchConditionList.add(searchCondition);      }      baseDataServiceDelegate.updateSearchCondition(searchConditionList, requestMeta);      JOptionPane.showMessageDialog(this, "页签设置更新成功 ！", "提示", JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "页签设置更新失败 ！", "错误", JOptionPane.ERROR_MESSAGE);    }  }  public String getActiveKey() {    return "";  }  public void close() {  }  public DefaultTableModel getCurTableModel(String conditionId) {    DefaultTableModel defaultMode = null;    List beforeList = this.baseDataServiceDelegate.getSearchTypeCondition(conditionId, "tab", requestMeta);    final Vector names = new Vector();    names.add("页签组ID");    names.add("页签代码");    names.add("页签名称");    final Vector data = new Vector();    if (beforeList != null && beforeList.size() > 0) {      for (int i = 0; i < beforeList.size(); i++) {        final Vector row = new Vector();        final SearchCondition rowData = (SearchCondition) beforeList.get(i);        row.add(rowData.getConditionId());        row.add(rowData.getConditionFieldCode());        row.add(rowData.getConditionFieldName());        data.add(row);      }    }    defaultMode = new DefaultTableModel(data, names) {      @Override      public int getColumnCount() {        return names.size();      }      @Override      public int getRowCount() {        return data.size();      }      @Override      public void setValueAt(final Object aValue, final int row, final int column) {        final Object oldValue = getValueAt(row, column);        final Vector rowVector = (Vector) dataVector.elementAt(row);        final String key = rowVector.get(0).toString() + rowVector.get(1).toString();        rowVector.setElementAt(aValue, column);        if (oldValue != null && !oldValue.toString().equals(aValue.toString())) {        }        fireTableCellUpdated(row, column);      }      public boolean isCellEditable(int row, int col) {        if (col < 2) {          return false;        } else {          return true;        }      }    };    return defaultMode;  }  /*   * 默认页签设定   */  public DefaultTableModel getDefaultTableModel(String conditionId) {    DefaultTableModel defaultMode = null;    List beforeList = this.baseDataServiceDelegate.getUserSearchCondition(conditionId, "*", requestMeta);    final Vector names = new Vector();    names.add("页签组ID");    names.add("页签代码");    names.add("页签名称");    final Vector data = new Vector();    if (beforeList != null && beforeList.size() > 0) {      for (int i = 0; i < beforeList.size(); i++) {        final Vector row = new Vector();        final SearchCondition rowData = (SearchCondition) beforeList.get(i);        row.add(rowData.getConditionId());        row.add(rowData.getConditionFieldCode());        row.add(rowData.getConditionFieldName());        data.add(row);      }    }    defaultMode = new DefaultTableModel(data, names) {      @Override      public int getColumnCount() {        return names.size();      }      @Override      public int getRowCount() {        return data.size();      }      @Override      public void setValueAt(final Object aValue, final int row, final int column) {        final Object oldValue = getValueAt(row, column);        final Vector rowVector = (Vector) dataVector.elementAt(row);        final String key = rowVector.get(0).toString() + rowVector.get(1).toString();        rowVector.setElementAt(aValue, column);        if (oldValue != null && !oldValue.toString().equals(aValue.toString())) {        }        fireTableCellUpdated(row, column);      }      public boolean isCellEditable(int row, int col) {        if (col < 2) {          return false;        } else {          return true;        }      }    };    return defaultMode;  }}