package com.ufgov.zc.client.console;import java.awt.BorderLayout;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyAdapter;import java.awt.event.KeyEvent;import java.awt.event.MouseAdapter;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Vector;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTable;import javax.swing.JTextField;import javax.swing.JToolBar;import javax.swing.UIManager;import javax.swing.UnsupportedLookAndFeelException;import javax.swing.border.EmptyBorder;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableRowSorter;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.UIConstants;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.ComponentSelectField;import com.ufgov.zc.client.component.JBasePanel;import com.ufgov.zc.client.component.SimpleRowFilter;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.common.console.model.Component;import com.ufgov.zc.common.console.publish.IConsoleServiceDelegate;public class CompoSet extends JPanel {  private static final long serialVersionUID = 1L;  private BillElementMeta cpVoucherBem;  private CompoSet self = this;  //toolbar  private JToolBar toolBar = new JToolBar();// 工具条  private SaveButton saveButton = new SaveButton(); // 保存  private ExitButton exitButton = new ExitButton(); // 退出  //panel  private JPanel workPanel = new JPanel();  private JPanel compoSetPanel = new JPanel();  private JBasePanel compoTablePanel;  private JTable compoTable;  //data List and hashMap  List compoDataList = null;  Map<String, JBasePanel> compoSetTabMap = new HashMap<String, JBasePanel>();  //Label and Field  private String compoName = "CS";  private JLabel compoSearchLbl = new JLabel("搜索条件:");  private JTextField compoSearchTxt = new JTextField("模糊查询");  private ComponentSelectField searchField = new ComponentSelectField(20);  //other  private String searchCompoId;  private TableRowSorter compoTableSorter = new TableRowSorter();  //service  IConsoleServiceDelegate consoleServiceDelegate;  String componentServiceName = "consoleServiceDelegate";  public CompoSet() {    super();    this.init();  }  public void init() {    initService();    LangTransMeta.init("CP%");    BillElementMeta.getBillElementMeta("024");    this.setLayout(new BorderLayout());    initToolBar();    this.initWorkPanel();    this.add(this.toolBar, BorderLayout.NORTH);    this.add(this.workPanel, BorderLayout.CENTER);  }  /**   * 初始化service   */  private void initService() {    this.consoleServiceDelegate = (IConsoleServiceDelegate) ServiceFactory.create(    IConsoleServiceDelegate.class, "consoleServiceDelegate");  }  /**   * 初始化工具条   */  private void initToolBar() {    toolBar.add(saveButton);    toolBar.add(exitButton);    toolBar.setFloatable(false);    initActionListen();    initBarButtonCompoId();  }  /**   * 初始化按钮的action事件   */  private void initActionListen() {    // 添加ActionListener    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doSave();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doExit();      }    });  }  /**   * 初始化按钮的compoid   */  private void initBarButtonCompoId() {    saveButton.setCompoId(this.compoName);//    exitButton.setCompoId(this.compoName);//  }  /**   * 初始化工作区   */  private void initWorkPanel() {    this.workPanel.setLayout(new BorderLayout());    initCompoSetPanel();    workPanel.setBorder(new EmptyBorder(10, 0, 5, 0));    this.workPanel.add(compoSetPanel, BorderLayout.CENTER);//跟随页面一起变大变小  }  /**   * 初始化CompoSetpanel   */  private void initCompoSetPanel() {    this.compoSetPanel.setLayout(new BorderLayout());    //初始化审核的查询条件    initCompoSetSearchBar();    //用来显示查询数据的pane    JScrollPane scrollPane = new JScrollPane();    scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);    scrollPane    .setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);    scrollPane.getViewport().setPreferredSize(new Dimension(0, 30));    scrollPane.getHorizontalScrollBar().setPreferredSize(new Dimension(0, UIConstants.HORIZONTAL_SCROLLBAR__HEIGHT));    scrollPane.setBorder(new EmptyBorder(1, 0, 5, 0));    scrollPane.getViewport().add(compoSetSearchBar);    initCompoSetTabbedPane();    this.compoSetPanel.add(scrollPane, BorderLayout.NORTH);    this.compoSetPanel.add(compoTablePanel, BorderLayout.CENTER);  }  /*   * 初始化table Panel   */  private void initTablePanel() {    compoTablePanel = new JBasePanel() {      public void refreshData() {        self.refreshCompoTableData(searchCompoId);      }    };    initCompoTablePanel();    compoTablePanel.setPanelId("compo");    compoSetTabMap.put(compoTablePanel.getPanelId(), compoTablePanel);  }  private void initTable() {    compoTable = SwingUtil.createTable(JPageableFixedTable.class);    compoTable.addMouseListener(new MouseAdapter() {    });  }  /**   * 初始化工作区上的待审审核数据panel   */  private void initCompoTablePanel() {    this.initTable();    //模糊查询    JPanel compoSearchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));    compoSearchPanel.add(compoSearchLbl);    compoSearchTxt.setColumns(16);    compoSearchTxt.addKeyListener(new KeyAdapter() {      public void keyReleased(KeyEvent e) {        compoTableSorter.setRowFilter(new SimpleRowFilter(compoSearchTxt.getText()));        compoTable.repaint();      }    });    compoSearchPanel.add(compoSearchTxt);    refreshCompoTableData(searchCompoId);    compoTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);    compoTable.setPreferredScrollableViewportSize(new Dimension(700, 150));    this.compoTablePanel.setLayout(new BorderLayout());    this.compoTablePanel.add(compoSearchPanel, BorderLayout.NORTH);    this.compoTablePanel.add(new JScrollPane(compoTable), BorderLayout.CENTER);  }  /**  * 刷新数据  * @param co_code  */  protected void refreshCompoTableData(String searchCompoId) {    compoDataList = null;    int nd = WorkEnv.getInstance().getTransNd();    //数据库缺少是否永久使用字段，故此处脚本未放开    //compoDataList = componentService.getFunctionList(searchCompoId);    //  co_code);    Vector names = new Vector();    names.add("功能id");    names.add("功能名");    names.add("功能写日志");    names.add("功能永远不同");    final Vector values = new Vector();    Vector row1 = new Vector();    Vector row2 = new Vector();    Vector row3 = new Vector();    row1.add("Compo1");    row1.add("Compo****1");    row1.add(new Boolean(true));    row1.add(new Boolean(false));    row2.add("Compo2");    row2.add("Compo****2");    row2.add(new Boolean(false));    row2.add(new Boolean(true));    row3.add("Compo3");    row3.add("Compo****3");    row3.add(new Boolean(true));    row3.add(new Boolean(true));    values.add(row1);    values.add(row2);    values.add(row3);    List changeList = new ArrayList();    DefaultTableModel model = new DefaultTableModel(values, names) {      public boolean isCellEditable(int row, int colum) {        if (colum <= 1)          return false;        return true;      }      public Class getColumnClass(int c) {        return getValueAt(0, c).getClass();      }      public void fireTableCellUpdated(int row, int column) {      }      @Override      public void setValueAt(Object value, int row, int column) {        super.setValueAt(value, row, column);      }    };    //DefaultTableModel model = ConvertCpVoucherToTableModel(biDataList);    compoTableSorter = new TableRowSorter(model);    compoTable.setModel(model);    compoTable.setRowSorter(compoTableSorter);  }  /**   * 定义查询工具条   */  private JToolBar compoSetSearchBar = new JToolBar() {    {      this.setFloatable(false);      this.setLayout(new FlowLayout(FlowLayout.LEFT));    }  };  /**   * 初始化查询bar   */  private void initCompoSetSearchBar() {    compoSetSearchBar.removeAll();    compoSetSearchBar.invalidate();    compoSetSearchBar.validate();/*                                 searchField.addItem("指标控制拨款计划");                                 searchField.addItem("授权支付凭证");                                 searchField.addItem("计划控制直接支付申请");*/    searchField.addValueChangeListener(new ValueChangeListener() {      public void valueChanged(ValueChangeEvent e) {        Component Component = searchField.getCompo();        String text = searchField.getText();        if (Component == null) {          searchField.setText("");          searchField.setToolTipText(null);          searchField.setText("");          searchField.setToolTipText(null);          searchCompoId = "";        } else {          searchField.setText(Component.getCompoName());          searchField.setToolTipText("[" + Component.getCompoCode() + "]"          + Component.getCompoName());          searchField.setText(Component.getCompoName());          searchField.setToolTipText("[" + Component.getCompoCode() + "]"          + Component.getCompoName());          searchCompoId = Component.getCompoCode();        }        compoTablePanel.refreshData();      }    });    compoSetSearchBar.add(searchField);    compoSetSearchBar.revalidate();    compoSetSearchBar.repaint();  }  /**   * 初始化审核面板   */  private void initCompoSetTabbedPane() {    this.initTablePanel();  }  public static void main(String[] args) throws ClassNotFoundException,  InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());    CompoSet panel = new CompoSet();    JFrame f = new JFrame();    f.getContentPane().add(panel);    f.setSize(800, 600);    f.setVisible(true);    f.setLocationRelativeTo(null);    f.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent e) {        System.exit(0);      }    });  }  private void doExit() {  }  private void doSave() {  }}