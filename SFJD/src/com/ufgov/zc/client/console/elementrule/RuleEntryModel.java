package com.ufgov.zc.client.console.elementrule;import java.util.List;import javax.swing.event.EventListenerList;import com.ufgov.zc.client.console.elementrule.event.ElementRelationEvent;import com.ufgov.zc.client.console.elementrule.event.ElementRelationListener;import com.ufgov.zc.client.console.elementrule.event.RuleModelEvent;import com.ufgov.zc.client.console.elementrule.event.RuleModelListener;import com.ufgov.zc.common.commonbiz.model.MaElementRelationRuleDetail;import com.ufgov.zc.common.commonbiz.model.MaElementRelationRuleEntry;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;public class RuleEntryModel {  private EventListenerList listenerList = new EventListenerList();  private MaElementRelationRuleEntry ruleEntry;  private MaElementRelationRuleEntry _orgiRuleEntry;  public RuleEntryModel() {  }  public RuleEntryModel(MaElementRelationRuleEntry data) {    setRuleEntry(data);  }  public void restored() {    this.setRuleEntry(this._orgiRuleEntry);  }  public void updateOrgiRuleEntry() {    this._orgiRuleEntry = (MaElementRelationRuleEntry) ObjectUtil.deepCopy(this.ruleEntry);  }  /**   * @return the ruleData   */  public MaElementRelationRuleEntry getRuleEntry() {    return ruleEntry;  }  /**   * @param ruleData the ruleData to set   */  public void setRuleEntry(MaElementRelationRuleEntry ruleEntry) {    this.ruleEntry = ruleEntry;    this._orgiRuleEntry = (MaElementRelationRuleEntry) ObjectUtil.deepCopy(ruleEntry);    fireRuleChanged();  }  public boolean ruleEntryHasChanged() {    String dige1 = DigestUtil.digest(this._orgiRuleEntry);    String dige2 = DigestUtil.digest(this.ruleEntry);    return (!dige1.equals(dige2));  }  public void addSrcElementRelation(MaElementRelationRuleDetail relation) {    List srcRelationList = this.ruleEntry.getSrcElementList();    removeRelationFromList(srcRelationList, relation);    srcRelationList.add(relation);    fireAddSrcElementRelatioin(relation);  }  public void removeSrcElementRelation(String elementCode) {    MaElementRelationRuleDetail relation = (MaElementRelationRuleDetail) this.ruleEntry.getSrcElementMap().get(    elementCode);    List srcRelationList = this.ruleEntry.getSrcElementList();    removeRelationFromList(srcRelationList, relation);    fireRemoveSrcElementRelatioin(relation);  }  public void addDesElementRelation(MaElementRelationRuleDetail relation) {    List desRelationList = this.ruleEntry.getDestElementList();    removeRelationFromList(desRelationList, relation);    desRelationList.add(relation);    fireAddDesElementRelatioin(relation);  }  public void removeDesElementRelation(String elementCode) {    MaElementRelationRuleDetail relation = (MaElementRelationRuleDetail) this.ruleEntry.getDestElementMap().get(    elementCode);    List desRelationList = this.ruleEntry.getDestElementList();    removeRelationFromList(desRelationList, relation);    fireRemoveDesElementRelatioin(relation);  }  public void modifySrcElementRelation(String elementCode, Object value, String operator) {    value = value == null ? "" : value;    MaElementRelationRuleDetail relation = (MaElementRelationRuleDetail) this.ruleEntry.getSrcElementMap().get(    elementCode);    if (relation == null) {      relation = new MaElementRelationRuleDetail();      relation.setElement(elementCode);      relation.setDirection(MaElementRelationRuleDetail.DIRECTION_SRC);      relation.setOperator(operator);      relation.setRelationRuleId(ruleEntry.getRelationRuleId());      relation.setEntryId(ruleEntry.getEntryId());      this.ruleEntry.getSrcElementList().add(relation);    }    if (relation != null) {      String oldValue = relation.getElementValue();      if (!value.equals(oldValue)) {        relation.setElementValue(value.toString());        fireModifySrcElementRelation(relation, value);      }    }  }  public void modifyDesElementRelation(String elementCode, String value, String operator) {    value = value == null ? "" : value;    MaElementRelationRuleDetail relation = (MaElementRelationRuleDetail) this.ruleEntry.getDestElementMap().get(    elementCode);    if (relation == null) {      relation = new MaElementRelationRuleDetail();      relation.setElement(elementCode);      relation.setOperator(operator);      relation.setDirection(MaElementRelationRuleDetail.DIRECTION_DEST);      relation.setRelationRuleId(ruleEntry.getRelationRuleId());      relation.setEntryId(ruleEntry.getEntryId());      this.ruleEntry.getDestElementList().add(relation);    }    if (relation != null) {      String oldValue = relation.getElementValue();      if (!value.equals(oldValue)) {        relation.setElementValue(value);        fireModifyDesElementRelation(relation, value);      }    }  }  public void addRuleModelListener(RuleModelListener l) {    this.removeRuleModelListener(l);    this.listenerList.add(RuleModelListener.class, l);  }  public void removeRuleModelListener(RuleModelListener l) {    this.listenerList.remove(RuleModelListener.class, l);  }  public void addElementRelationListener(ElementRelationListener l) {    this.removeElementRelationListener(l);    this.listenerList.add(ElementRelationListener.class, l);  }  public void removeElementRelationListener(ElementRelationListener l) {    this.listenerList.remove(ElementRelationListener.class, l);  }  protected void fireRuleChanged() {    RuleModelEvent e = null;    RuleModelListener[] listeners = listenerList.getListeners(RuleModelListener.class);    for (RuleModelListener l : listeners) {      if (e == null) {        e = new RuleModelEvent(this);      }      l.ruleChanged(e);    }  }  protected void fireAddSrcElementRelatioin(MaElementRelationRuleDetail relation) {    ElementRelationEvent event = null;    ElementRelationListener[] listeners = listenerList.getListeners(ElementRelationListener.class);    for (ElementRelationListener l : listeners) {      if (event == null) {        event = new ElementRelationEvent(relation);      }      l.addedSrcElementRelation(event);    }  }  protected void fireRemoveSrcElementRelatioin(MaElementRelationRuleDetail relation) {    ElementRelationEvent event = null;    ElementRelationListener[] listeners = listenerList.getListeners(ElementRelationListener.class);    for (ElementRelationListener l : listeners) {      if (event == null) {        event = new ElementRelationEvent(relation);      }      l.removedSrcElementRelation(event);    }  }  protected void fireAddDesElementRelatioin(MaElementRelationRuleDetail relation) {    ElementRelationEvent event = null;    ElementRelationListener[] listeners = listenerList.getListeners(ElementRelationListener.class);    for (ElementRelationListener l : listeners) {      if (event == null) {        event = new ElementRelationEvent(relation);      }      l.addedDesElementRelation(event);    }  }  protected void fireRemoveDesElementRelatioin(MaElementRelationRuleDetail relation) {    ElementRelationEvent event = null;    ElementRelationListener[] listeners = listenerList.getListeners(ElementRelationListener.class);    for (ElementRelationListener l : listeners) {      if (event == null) {        event = new ElementRelationEvent(relation);      }      l.removedDesElementRelation(event);    }  }  protected void fireModifySrcElementRelation(MaElementRelationRuleDetail relation, Object oldValue) {    ElementRelationEvent event = null;    ElementRelationListener[] listeners = listenerList.getListeners(ElementRelationListener.class);    for (ElementRelationListener l : listeners) {      if (event == null) {        event = new ElementRelationEvent(relation);      }      l.modefiedSrcElementRelation(event, oldValue);    }  }  protected void fireModifyDesElementRelation(MaElementRelationRuleDetail relation, String oldValue) {    ElementRelationEvent event = null;    ElementRelationListener[] listeners = listenerList.getListeners(ElementRelationListener.class);    for (ElementRelationListener l : listeners) {      if (event == null) {        event = new ElementRelationEvent(relation);      }      l.modefiedDesElementRelation(event, oldValue);    }  }  private void removeRelationFromList(List source, MaElementRelationRuleDetail relation) {    if (relation == null)      return;    MaElementRelationRuleDetail rela = null;    for (int i = 0; i < source.size(); i++) {      rela = (MaElementRelationRuleDetail) source.get(i);      if (rela.getElement().equals(relation.getElement())) {        source.remove(i);        break;      }    }  }}