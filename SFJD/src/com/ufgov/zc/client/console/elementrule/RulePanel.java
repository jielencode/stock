package com.ufgov.zc.client.console.elementrule;import java.awt.BorderLayout;import java.awt.Dimension;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.List;import javax.swing.JButton;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTree;import javax.swing.SwingUtilities;import javax.swing.text.Position;import javax.swing.tree.DefaultTreeModel;import javax.swing.tree.TreeNode;import javax.swing.tree.TreePath;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JSaveableSplitPane;import com.ufgov.zc.client.console.elementrule.dialog.EditRuleDialog;import com.ufgov.zc.client.console.elementrule.dialog.NewRuleDialog;import com.ufgov.zc.common.commonbiz.constants.RelationRuleConstants;import com.ufgov.zc.common.commonbiz.model.MaElementRelationRule;import com.ufgov.zc.common.commonbiz.model.MaElementRelationRuleEntry;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;public class RulePanel extends JPanel {  /**   *    */  private static final long serialVersionUID = -8169279955950366120L;  private IBaseDataServiceDelegate service = (IBaseDataServiceDelegate) ServiceFactory.create(  IBaseDataServiceDelegate.class, "baseDataServiceDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private JFuncToolBar toolBar = new JFuncToolBar();  private JSaveableSplitPane splitPane = new JSaveableSplitPane();  private JTree ruleTree;  private JPanel editPanel = new JPanel(new BorderLayout());  private JScrollPane scrollPane = new JScrollPane();  private RuleNode selectedNode;  private RuleNode editedNode;  private RuleNode root = new RuleNode();  private JButton insertBtn = new JButton("增加规则");  private JButton delBtn = new JButton("删除规则");  private JButton editBtn = new JButton("编辑规则");  private JButton insertEntryBtn = new JButton("增加规则条目");  private JButton saveBtn = new JButton("保存规则条目");  private JButton delEntryBtn = new JButton("删除规则条目");  private JButton cancelBtn = new JButton("取消修改规则条目");  public RulePanel() {    initToolbar();    initTree();    initRule();    splitPane.setDividerDefaultLocation(this.getClass().getName() + "_splitPane_dividerLocation", 200);    splitPane.setOneTouchExpandable(true);    scrollPane.getViewport().add(ruleTree);    scrollPane.setMinimumSize(new Dimension(0, 0));    splitPane.setLeftComponent(scrollPane);    editPanel.setMinimumSize(new Dimension(0, 0));    splitPane.setRightComponent(editPanel);    this.setLayout(new BorderLayout());    this.add(toolBar, BorderLayout.NORTH);    this.add(splitPane, BorderLayout.CENTER);  }  public void initRule() {    try {      List ruleInfos = RelationRuleConstants.ruleTypeList;      Object[] ruleInfo = null;      MaElementRelationRule rule = null;      Class viewClass = null;      RuleNode lastNode = null;      for (int i = 0; i < ruleInfos.size(); i++) {        ruleInfo = (Object[]) ruleInfos.get(i);        rule = new MaElementRelationRule();        rule.setRuleType((String) ruleInfo[0]);        rule.setRelationRuleName((String) ruleInfo[1]);        RuleNode node = new RuleNode(rule);        node.setRuleNode(false);        node.setEntityNode(false);        viewClass = (Class) Thread.currentThread().getContextClassLoader().loadClass((String) ruleInfo[2]);        node.setViewClass(viewClass);        List rules = service.getElementRelationRules(null, null, rule.getRuleType(), requestMeta);        for (int j = 0; j < rules.size(); j++) {          rule = (MaElementRelationRule) rules.get(j);          RuleNode n = new RuleNode(rule);          n.setViewClass(viewClass);          n.setGroupNode(false);          node.add(n);          List ruleEntrys = rule.getRuleEntryList();          MaElementRelationRuleEntry ruleEntry = null;          for (int k = 0; k < ruleEntrys.size(); k++) {            ruleEntry = (MaElementRelationRuleEntry) ruleEntrys.get(k);            ruleEntry.setRuleType(rule.getRuleType());            ruleEntry.setRelationRuleId(rule.getRelationRuleId());            RuleEntryNode entryNode = new RuleEntryNode(ruleEntry);            entryNode.setViewClass(viewClass);            n.add(entryNode);          }        }        this.addRuleRootNode(node);        lastNode = node;      }      this.expandNode(ruleTree, lastNode);    } catch (ClassNotFoundException ex) {      throw new RuntimeException("未找到类", ex);    }  }  public RuleNode getSelectNode() {    return selectedNode;  }  public void addRuleRootNode(RuleNode node) {    root.add(node);  }  private void initToolbar() {    insertBtn.setEnabled(false);    insertBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent event) {        try {          doInsert();        } catch (Exception ex) {          JOptionPane.showMessageDialog(RulePanel.this, ex.getMessage(), "错误",          JOptionPane.INFORMATION_MESSAGE);        }      }    });    delBtn.setEnabled(false);    delBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent event) {        try {          doDelete();        } catch (Exception ex) {          JOptionPane.showMessageDialog(RulePanel.this, ex.getMessage(), "错误",          JOptionPane.INFORMATION_MESSAGE);        }      }    });    editBtn.setEnabled(false);    editBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent event) {        try {          doEdit();        } catch (Exception ex) {          JOptionPane.showMessageDialog(RulePanel.this, ex.getMessage(), "错误",          JOptionPane.INFORMATION_MESSAGE);        }      }    });    saveBtn.setEnabled(false);    saveBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent event) {        try {          doSave();        } catch (Exception ex) {          JOptionPane.showMessageDialog(RulePanel.this, ex.getMessage(), "错误",          JOptionPane.INFORMATION_MESSAGE);        }      }    });    cancelBtn.setEnabled(false);    cancelBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent event) {        try {          doCancel();        } catch (Exception ex) {        }      }    });    insertEntryBtn.setEnabled(false);    insertEntryBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent evnet) {        doInsertEntry();      }    });    delEntryBtn.setEnabled(false);    delEntryBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent event) {        doDelEntry();      }    });    toolBar.add(insertBtn);    toolBar.add(delBtn);    toolBar.add(editBtn);    toolBar.add(insertEntryBtn);    toolBar.add(saveBtn);    toolBar.add(delEntryBtn);    toolBar.add(cancelBtn);  }  private void doInsert() throws Exception {    RuleNode node = (RuleNode) ruleTree.getSelectionPath().getLastPathComponent();    if (node.isTemplateNode()) {      //checkEditNodeChange();      NewRuleDialog dialog = new NewRuleDialog(null, true, ruleTree);      SwingUtilities.invokeLater(new Runnable() {        public void run() {          TreePath path = ruleTree.getSelectionPath();          if (path != null) {            RuleNode node = (RuleNode) path.getLastPathComponent();            if (!node.isGroupNode() && !node.isTemplateNode()) {              try {                RuleEntryNode entryNode = (RuleEntryNode) node;                editPanel.removeAll();                editPanel.add(entryNode.getRuleView(), BorderLayout.CENTER);                editPanel.revalidate();                editPanel.repaint();                JOptionPane.showMessageDialog(RulePanel.this, "增加规则成功!", "消息",                JOptionPane.INFORMATION_MESSAGE);              } catch (Exception ex) {                JOptionPane.showMessageDialog(RulePanel.this, ex.getMessage(), "错误",                JOptionPane.INFORMATION_MESSAGE);              }            }            //            if (node.isNewRule()) {            //              try {            //                editPanel.removeAll();            //                if (!node.isTemplateNode()) {            //                  editPanel.add(node.getRuleView(), BorderLayout.CENTER);            //                  RulePanel.this.editedNode = node;            //                }            //                editPanel.revalidate();            //                editPanel.repaint();            //              } catch (Exception ex) {            //                JOptionPane.showMessageDialog(RulePanel.this, ex.getMessage(), "错误",            //                  JOptionPane.INFORMATION_MESSAGE);            //              }            //            }          }        }      });    }  }  private void doDelete() throws Exception {    if (selectedNode == null)      return;    if (!selectedNode.isRuleNode())      return;    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          if (selectedNode == editedNode) {            editedNode = null;          }          selectedNode.delete(requestMeta);          selectedNode = null;          ruleTree.updateUI();          editPanel.removeAll();          editPanel.repaint();          RulePanel.this.selectedNode = null;          RulePanel.this.editedNode = null;          JOptionPane.showMessageDialog(RulePanel.this, "账户规则" + "删除成功");        } catch (Exception ex) {          JOptionPane.showMessageDialog(RulePanel.this, "删除失败：" + ex.getMessage(), "错误",          JOptionPane.INFORMATION_MESSAGE);        }      }    });  }  private void doEdit() throws Exception {    final RuleNode node = this.selectedNode;    if (!node.isRuleNode())      return;    this.editedNode = node;    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          EditRuleDialog dialog = new EditRuleDialog(null, true, ruleTree);        } catch (Exception ex) {        }      }    });  }  private void doSave() throws Exception {    final RuleNode node = this.editedNode;    if (node != null) {      if (node.isNewNode() || node.isEntityNode()) {//node.ruleDataHasChanged()        SwingUtilities.invokeLater(new Runnable() {          public void run() {            try {              if (node.isNewNode()) {                node.insert(requestMeta);              } else {                node.update(requestMeta);              }              JOptionPane.showMessageDialog(RulePanel.this, " 修改（添加）成功", "消息",              JOptionPane.INFORMATION_MESSAGE);            } catch (Exception ex) {              JOptionPane.showMessageDialog(RulePanel.this, "保存失败：" + ex.getMessage(), "错误",              JOptionPane.INFORMATION_MESSAGE);            }          }        });      }    }  }  private void doCancel() throws Exception {    final RuleNode node = this.editedNode;    if (node != null && node.isEntityNode()) {      SwingUtilities.invokeLater(new Runnable() {        public void run() {          try {            node.restored();            JOptionPane.showMessageDialog(RulePanel.this, "撤销修改成功", "消息", JOptionPane.INFORMATION_MESSAGE);          } catch (Exception ex) {            JOptionPane.showMessageDialog(RulePanel.this, "撤销修改失败：" + ex.getMessage(), "错误",            JOptionPane.INFORMATION_MESSAGE);          }        }      });    }  }  private void doInsertEntry() {    final RuleNode ruleNode = this.selectedNode;    if (ruleNode.isRuleNode()) {      SwingUtilities.invokeLater(new Runnable() {        public void run() {          MaElementRelationRule rule = (MaElementRelationRule) ruleNode.getUserObject();          MaElementRelationRuleEntry ruleEntry = new MaElementRelationRuleEntry();          ruleEntry.setEntryId(service.getElementEntryId(requestMeta));          ruleEntry.setRelationRuleId(rule.getRelationRuleId());          ruleEntry.setRuleType(rule.getRuleType());          RuleEntryNode entryNode = new RuleEntryNode(ruleEntry);          entryNode.setNewNode(true);          entryNode.setViewClass(ruleNode.getViewClass());          ruleNode.add(entryNode);          ruleTree.updateUI();          ruleTree.clearSelection();          TreePath path = ruleTree.getNextMatch(rule.getRelationRuleId(), 0, Position.Bias.Backward);          ruleTree.addSelectionPath(path);          JOptionPane.showMessageDialog(RulePanel.this, "增加规则条目成功!", "消息", JOptionPane.INFORMATION_MESSAGE);        }      });    }  }  private void doDelEntry() {    final RuleNode ruleNode = this.selectedNode;    if (ruleNode.isEntityNode()) {      SwingUtilities.invokeLater(new Runnable() {        public void run() {          ruleNode.delete(requestMeta);          selectedNode = null;          ruleTree.updateUI();          editPanel.removeAll();          editPanel.repaint();          RulePanel.this.selectedNode = null;          RulePanel.this.editedNode = null;          JOptionPane.showMessageDialog(RulePanel.this, "规则条目删除成功!", "消息", JOptionPane.INFORMATION_MESSAGE);        }      });    }  }  private void initTree() {    root.setUserObject("规则");    ruleTree = new JTree(root);    ruleTree.addMouseListener(new MouseAdapter() {      public void mouseClicked(MouseEvent event) {        TreePath path = ruleTree.getSelectionPath();        if (path != null) {          RuleNode node = (RuleNode) path.getLastPathComponent();          RulePanel.this.selectedNode = node;          editPanel.removeAll();          if (!node.isTemplateNode() && event.getClickCount() > 0 && !node.isGroupNode() && !node.isRoot()) {            try {              //checkEditNodeChange();              RulePanel.this.editedNode = node;              editPanel.add(node.getRuleView(), BorderLayout.CENTER);            } catch (Exception e) {              e.printStackTrace();            }          } else {            RulePanel.this.editedNode = null;          }          editPanel.revalidate();          editPanel.repaint();        }      }    });    ruleTree.addMouseListener(new MouseAdapter() {      public void mouseClicked(MouseEvent event) {        TreePath path = ruleTree.getSelectionPath();        if (path != null) {          RuleNode node = (RuleNode) path.getLastPathComponent();          insertBtn.setEnabled(true);          delBtn.setEnabled(true);          editBtn.setEnabled(true);          insertEntryBtn.setEnabled(true);          saveBtn.setEnabled(true);          delEntryBtn.setEnabled(true);          cancelBtn.setEnabled(true);          if (node.isGroupNode()) {            if (node.isRoot()) {              insertBtn.setEnabled(false);            }            delBtn.setEnabled(false);            editBtn.setEnabled(false);            insertEntryBtn.setEnabled(false);            saveBtn.setEnabled(false);            delEntryBtn.setEnabled(false);            cancelBtn.setEnabled(false);          } else if (node.isRuleNode()) {            insertBtn.setEnabled(false);            saveBtn.setEnabled(false);            delEntryBtn.setEnabled(false);            cancelBtn.setEnabled(false);          } else {            if (node.isEntityNode()) {              insertEntryBtn.setEnabled(false);              insertBtn.setEnabled(false);              delBtn.setEnabled(false);              editBtn.setEnabled(false);            }          }        }      }    });  }  //  private void checkEditNodeChange() throws Exception {  //    RuleNode node = this.editedNode;  //    if (node != null) {  //      if (node.isNewRule() || node.ruleDataHasChanged()) {  //        int option = JOptionPane.showConfirmDialog(this, "规则 "  //          + node.ruleModel.getRuleData().getRelationName() + "是否保存?", "保存", JOptionPane.OK_CANCEL_OPTION);  //        if (option == JOptionPane.OK_OPTION) {  //          if (node.isNewRule()) {  //            node.insert(requestMeta);  //          } else {  //            node.update(requestMeta);  //          }  //          JOptionPane.showMessageDialog(this, node.ruleModel.getRuleData().getRelationName() + " 修改（添加）成功",  //            "消息", JOptionPane.INFORMATION_MESSAGE);  //        } else {  //          if (node.isNewRule()) {  //            node.delete(requestMeta);  //            ruleTree.updateUI();  //          } else {  //            node.restored();  //          }  //        }  //      }  //      //this.editedNode = null;  //    }  //  }  //  private void addAccounterRuleNode(RuleNode parent, List rules) {  //    ElementRelationRule rule = null;  //    for (int i = 0; i < rules.size(); i++) {  //      rule = (ElementRelationRule) rules.get(i);  //      AccounterRuleNode node = new AccounterRuleNode(rule);  //      parent.add(node);  //    }  //  }  private void expandNode(JTree tree, TreeNode node) {    DefaultTreeModel model = (DefaultTreeModel) tree.getModel();    TreePath path = new TreePath(model.getPathToRoot(node));    tree.setSelectionPath(path);  }}