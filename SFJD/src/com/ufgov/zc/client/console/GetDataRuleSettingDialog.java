package com.ufgov.zc.client.console;import java.awt.BorderLayout;import java.awt.Container;import java.awt.Dialog;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Vector;import javax.swing.JButton;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.common.console.model.GkGetdataRule;import com.ufgov.zc.common.console.publish.IConsoleServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;public class GetDataRuleSettingDialog extends GkBaseDialog {  /**  * Logger for this class  */  private static final Logger logger = Logger  .getLogger(GetDataRuleSettingDialog.class);  private IConsoleServiceDelegate consoleServiceDelegate;  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();;  private DataEditArea editArea = new DataEditArea("", "");  private JButton okBtn = new JButton("确定");  private JButton cancelBtn = new JButton("关闭");  public GetDataRuleSettingDialog(Window window, String title) {    super(window, Dialog.ModalityType.APPLICATION_MODAL);    this.setTitle(title);    this.setSize(new Dimension(660, 500));    this.moveToScreenCenter();    initService();    initGUI();  }  public void initService() {    String consoleServiceDelegateName = "consoleServiceDelegate";    consoleServiceDelegate = (IConsoleServiceDelegate) ServiceFactory.create(IConsoleServiceDelegate.class,    consoleServiceDelegateName);  }  public void initGUI() {    Container container = this.getContentPane();    container.setLayout(new BorderLayout());    editArea.setPreferencesKey(this.getClass().getName() + "_RetakeFigRule_table");    this.editArea.setTableModel(getTableModel());    this.add(editArea, BorderLayout.CENTER);    JPanel commandPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));    commandPanel.add(okBtn);    okBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        editArea.stopDataEditArea();        saveDataProcess();      }    });    commandPanel.add(cancelBtn);    cancelBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        close();      }    });    this.add(commandPanel, BorderLayout.SOUTH);  }  public void close() {    this.closeDialog();  }  public void saveDataProcess() {    try {      TableModel tableModel = editArea.getTable().getModel();      List objectList = new ArrayList();      for (int i = 0; i < tableModel.getRowCount(); i++) {        GkGetdataRule gkGetdataRule = new GkGetdataRule();        gkGetdataRule.setRuleId((String) tableModel.getValueAt(i, 0));        gkGetdataRule.setRuleName((String) tableModel.getValueAt(i, 1));        gkGetdataRule.setRuleResc((String) tableModel.getValueAt(i, 2));        gkGetdataRule.setRuleSqlOracle((String) tableModel.getValueAt(i, 3));        objectList.add(gkGetdataRule);      }      consoleServiceDelegate.updateGkGetdataRule(objectList, requestMeta);      JOptionPane.showMessageDialog(this, "取数规则设置更新成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "取数规则设置更新失败！", "错误", JOptionPane.ERROR_MESSAGE);    }  }  private DefaultTableModel getTableModel() {    DefaultTableModel defaultMode = null;    final Vector names = new Vector();    names.add("规则ID");    names.add("规则名称");    names.add("规则描述");    names.add("规则SQL语句");    List dataList = consoleServiceDelegate.getGkGetdataRule(requestMeta);    final Vector data = new Vector();    if (dataList != null && dataList.size() > 0) {      for (int i = 0; i < dataList.size(); i++) {        GkGetdataRule rowData = (GkGetdataRule) dataList.get(i);        Vector row = new Vector();        row.add(rowData.getRuleId());        row.add(rowData.getRuleName());        row.add(rowData.getRuleResc());        row.add(rowData.getRuleSqlOracle());        data.add(row);      }    }    defaultMode = new DefaultTableModel(data, names) {      @Override      public int getColumnCount() {        return names.size();      }      @Override      public int getRowCount() {        return data.size();      }      @Override      public void setValueAt(Object aValue, int row, int column) {        DefaultTableModel defaultMode = null;        Object oldValue = getValueAt(row, column);        Vector rowVector = (Vector) dataVector.elementAt(row);        String key = rowVector.get(0).toString();        rowVector.setElementAt(aValue, column);        fireTableCellUpdated(row, column);      }      @Override      public boolean isCellEditable(int row, int colum) {        if (colum < 3) {          return false;        } else {          return true;        }      }    };    return defaultMode;  }}