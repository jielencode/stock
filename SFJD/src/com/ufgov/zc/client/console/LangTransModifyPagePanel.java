package com.ufgov.zc.client.console;import java.awt.BorderLayout;import java.awt.FlowLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.List;import java.util.Vector;import javax.swing.JButton;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTabbedPane;import javax.swing.event.ChangeEvent;import javax.swing.event.ChangeListener;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.model.LangTrans;public class LangTransModifyPagePanel extends JPanel {  private static final Logger logger = Logger.getLogger(LangTransModifyPagePanel.class);  private String pageKey;  private String curPageKey;  private IBaseDataServiceDelegate baseDataServiceDelegate;  private RequestMeta requestMeta;  private DataEditArea orgBtnPanel;//功能按钮名称修改面板  private DataEditArea titlePanel;//标题名称修改面板  private DataEditArea fieldsPanel;//字段名称修改面板  private final JTabbedPane tabPane = new JTabbedPane();  private final JButton okBtn = new JButton("确定");  private final JButton cancelBtn = new JButton("关闭");  public LangTransModifyPagePanel(String name) {    setName(name);    initService();    initGUI();  }  public void initService() {    requestMeta = WorkEnv.getInstance().getRequestMeta();    final String baseDataServiceDelegateName = "baseDataServiceDelegate";    baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(    IBaseDataServiceDelegate.class, baseDataServiceDelegateName);  }  public void initGUI() {    this.setLayout(new BorderLayout());    orgBtnPanel = new DataEditArea("功能按钮", "FUNC");    curPageKey = "FUNC";    titlePanel = new DataEditArea("标题", "TITLE");    fieldsPanel = new DataEditArea("字段", "FIELD");    tabPane.add(orgBtnPanel);    tabPane.add(titlePanel);    tabPane.add(fieldsPanel);    tabPane.setSelectedComponent(orgBtnPanel);    this.add(tabPane, BorderLayout.CENTER);    tabPane.addChangeListener(new ChangeListener() {      public void stateChanged(final ChangeEvent e) {        final DataEditArea panel = (DataEditArea) tabPane.getSelectedComponent();        final String editKey = panel.getDataAreaKey();        initEditData(editKey);      }    });    final JPanel commandPane = new JPanel(new FlowLayout(FlowLayout.RIGHT));    commandPane.add(okBtn);    okBtn.addActionListener(new ActionListener() {      public void actionPerformed(final ActionEvent e) {        final DataEditArea panel = (DataEditArea) tabPane.getSelectedComponent();        final String editKey = panel.getDataAreaKey();        if (editKey.equalsIgnoreCase("FUNC")) {          orgBtnPanel.stopDataEditArea();        } else if (editKey.equalsIgnoreCase("TITLE")) {          titlePanel.stopDataEditArea();        } else {          fieldsPanel.stopDataEditArea();        }        savaDataProcess();      }    });    commandPane.add(cancelBtn);    cancelBtn.addActionListener(new ActionListener() {      public void actionPerformed(final ActionEvent e) {        close();      }    });    this.add(commandPane, BorderLayout.SOUTH);  }  public void initEditData(final String editKey) {    final String pageKey = getPageKey();    curPageKey = editKey;    final String resId = pageKey + "_" + editKey + "_" + "%";    if (editKey.equalsIgnoreCase("FUNC")) {      orgBtnPanel.setTableModel(getCurTableModel(resId));    } else if (editKey.equalsIgnoreCase("TITLE")) {      titlePanel.setTableModel(getCurTableModel(resId));    } else {      fieldsPanel.setTableModel(getCurTableModel(resId));    }  }  //处理应该保存的数据  //  private void savaDataProcess(List beforEditData, List afterEditData) {  private void savaDataProcess() {    try {      TableModel tableModel = null;      DataEditArea panel = (DataEditArea) tabPane.getSelectedComponent();      String editKey = panel.getDataAreaKey();      if (panel.getDataAreaKey().equals("FUNC")) {        tableModel = orgBtnPanel.getTable().getModel();      } else if (panel.getDataAreaKey().equals("TITLE")) {        tableModel = titlePanel.getTable().getModel();      } else {        tableModel = fieldsPanel.getTable().getModel();      }      List langTransList = new ArrayList();      for (int i = 0; i < tableModel.getRowCount(); i++) {        LangTrans langTrans = new LangTrans();        langTrans.setResId((String) tableModel.getValueAt(i, 0));        langTrans.setLangId((String) tableModel.getValueAt(i, 1));        langTrans.setResNa((String) tableModel.getValueAt(i, 2));        langTransList.add(langTrans);      }      baseDataServiceDelegate.updateAslangTrans(langTransList, requestMeta);      JOptionPane.showMessageDialog(this, "翻译信息设置更新成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "翻译信息设置更新失败！", "错误", JOptionPane.ERROR_MESSAGE);    }  }  public String getActiveKey() {    final DataEditArea panel = (DataEditArea) tabPane.getSelectedComponent();    final String editKey = panel.getDataAreaKey();    return editKey;  }  public void close() {  }  public String getPageKey() {    return pageKey;  }  public void setPageKey(final String pageKey) {    this.pageKey = pageKey;    initSubPageKey(this.pageKey);  }  public void initSubPageKey(final String parentKey) {    this.orgBtnPanel.setParentContainerKey(parentKey);    this.fieldsPanel.setParentContainerKey(parentKey);    this.titlePanel.setParentContainerKey(parentKey);  }  public DefaultTableModel getCurTableModel(final String resId) {    DefaultTableModel defaultMode = null;    final List beforeList = this.baseDataServiceDelegate.getAsLangTrans(resId, requestMeta);    //    editBeforeList = new ArrayList();    final Vector names = new Vector();    names.add("翻译ID");    names.add("语言ID");    names.add("名称");    final Vector data = new Vector();    if (beforeList != null && beforeList.size() > 0) {      for (int i = 0; i < beforeList.size(); i++) {        final Vector row = new Vector();        //        Vector tmp = new Vector();        final LangTrans rowData = (LangTrans) beforeList.get(i);        row.add(rowData.getResId());        row.add(rowData.getLangId());        row.add(rowData.getResNa());        data.add(row);      }    }    defaultMode = new DefaultTableModel(data, names) {      @Override      public int getColumnCount() {        return names.size();      }      @Override      public int getRowCount() {        return data.size();      }      @Override      public void setValueAt(final Object aValue, final int row, final int column) {        final Object oldValue = getValueAt(row, column);        final Vector rowVector = (Vector) dataVector.elementAt(row);        final String key = rowVector.get(0).toString();        rowVector.setElementAt(aValue, column);        fireTableCellUpdated(row, column);      }      //      //      @Override      //      public String getColumnName(int col) {      //        return names.get(col).toString();      //      }      //      @Override      //      public Object getValueAt(int row, int col) {      //        Vector rowData = (Vector) data.get(row);      //        return rowData.get(col);      //      }      @Override      public boolean isCellEditable(final int row, final int col) {        if (col < 2) {          return false;        } else {          return true;        }      }    };    return defaultMode;  }}