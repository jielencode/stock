package com.ufgov.zc.client.component;import java.awt.Component;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.ImageIcon;import javax.swing.JFrame;import javax.swing.JTree;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.DefaultTreeCellRenderer;import javax.swing.tree.DefaultTreeModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.common.commonbiz.model.Company;import com.ufgov.zc.common.commonbiz.model.Emp;import com.ufgov.zc.common.commonbiz.model.Org;import com.ufgov.zc.common.commonbiz.model.Position;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;public class OrgTree extends JTree {  private static final long serialVersionUID = 1L;  private IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory  .create(IBaseDataServiceDelegate.class, "baseDataServiceDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  /**   */  public OrgTree() {    initSelectTree();  }  private Map<String, List<Org>> orgMap = new HashMap<String, List<Org>>();  private Map<String, List<Emp>> empMap = new HashMap<String, List<Emp>>();  private Map<String, List<Position>> positionMap = new HashMap<String, List<Position>>();  public void initSelectTree() {    Map<String, DefaultMutableTreeNode> nodeMap = new HashMap<String, DefaultMutableTreeNode>();    DefaultMutableTreeNode root = new DefaultMutableTreeNode("组织结构");    List<Company> companyList = new ArrayList<Company>();    List<Emp> empList = new ArrayList<Emp>();    List<Position> positionList = new ArrayList<Position>();    List<Org> orgList = new ArrayList<Org>();    companyList = this.getCompanyList();    orgList = this.getOrgList();    empList = this.getEmp();    positionList = this.getPosition();    for (Org org : orgList) {      List<Org> orgListOneCpy = orgMap.get(org.getCoCode());      if (orgListOneCpy != null) {        orgListOneCpy.add(org);      } else {        List<Org> orgListOneCpyTemp = new ArrayList<Org>();        orgListOneCpyTemp.add(org);        orgMap.put(org.getCoCode(), orgListOneCpyTemp);      }    }    for (Position posi : positionList) {      List<Position> posiListForOrg = positionMap.get(posi.getCoCode()      + posi.getOrgCode());      if (posiListForOrg != null) {        posiListForOrg.add(posi);      } else {        List<Position> posiListForOrgTemp = new ArrayList<Position>();        posiListForOrgTemp.add(posi);        positionMap.put(posi.getCoCode() + posi.getOrgCode(), posiListForOrgTemp);      }    }    for (Emp emp : empList) {      List<Emp> empListForPosi = empMap.get(emp.getCoCode() + emp.getOrgCode()      + emp.getPosiCode());      if (empListForPosi != null) {        empListForPosi.add(emp);      } else {        List<Emp> empListForPosiTemp = new ArrayList<Emp>();        empListForPosiTemp.add(emp);        empMap.put(emp.getCoCode() + emp.getOrgCode() + emp.getPosiCode(),        empListForPosiTemp);      }    }    for (Company company : companyList) {      DefaultMutableTreeNode node = new DefaultMutableTreeNode(company);      root.add(node);      nodeMap.put(company.getCode(), node);      this.setChildNode(company, node, nodeMap);      setCompanyOrgChildren(company, node, orgMap);    }    this.setModel(new DefaultTreeModel(root));    this.setCellRenderer(new MyDefaultTreeCellRenderer());  }  private void setCompanyOrgChildren(Company c, DefaultMutableTreeNode node,  Map<String, List<Org>> orgMap) {    List<Org> orgListtemp = orgMap.get(c.getCode());    if (orgListtemp != null && orgListtemp.size() > 0) {      for (Org org : orgListtemp) {        DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(org);        node.add(childNode);        setOrgPosi(org, childNode);        makeOrgChildNode(org, childNode);      }    }  }  private void makeOrgChildNode(Org org, DefaultMutableTreeNode node) {    if (org.getChildren().size() > 0) {      for (Object v : org.getChildren()) {        Org orgc = (Org) v;        DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(orgc);        node.add(childNode);        setOrgPosi(orgc, childNode);        makeOrgChildNode(orgc, childNode);      }    }  }  private void setChildNode(Company company, DefaultMutableTreeNode node,  Map<String, DefaultMutableTreeNode> nodeMap) {    if (company.getChildren().size() > 0) {      for (Object v : company.getChildren()) {        Company c = (Company) v;        DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(c);        node.add(childNode);        nodeMap.put(c.getCode(), childNode);        setChildNode(c, childNode, nodeMap);        setCompanyOrgChildren(c, childNode, orgMap);      }    }  }  private void setOrgPosi(Org org, DefaultMutableTreeNode node) {    List<Position> tempList = positionMap.get(org.getCoCode() + org.getCode());    if (tempList != null && tempList.size() > 0) {      for (Position p : tempList) {        DefaultMutableTreeNode posiNode = new DefaultMutableTreeNode(p);        node.add(posiNode);        setPosiEmp(p, posiNode);      }    }  }  private void setPosiEmp(Position posi, DefaultMutableTreeNode node) {    List<Emp> tempList = empMap.get(posi.getCoCode() + posi.getOrgCode()    + posi.getPosiCode());    if (tempList != null && tempList.size() > 0) {      for (Emp p : tempList) {        DefaultMutableTreeNode empNode = new DefaultMutableTreeNode(p);        node.add(empNode);      }    }  }  private List getCompanyList() {    ElementConditionDto dto = new ElementConditionDto();    dto.setNd(WorkEnv.getInstance().getTransNd());    List list = baseDataServiceDelegate.getCompanyNumLimTree(dto, requestMeta);    return genCompantTreeData(list);  }  private List genCompantTreeData(List companyList) {    List rootCompanyList = new ArrayList();    List childrenCompanyList = new ArrayList();    Map dataMap = new HashMap();    for (Object o : companyList) {      Company cpy = (Company) o;      dataMap.put(cpy.getCode(), cpy);    }    for (Object o : companyList) {      Company cpy = (Company) o;      if (dataMap.get(cpy.getParentCode()) == null) {        rootCompanyList.add(cpy);      } else {        childrenCompanyList.add(cpy);      }    }    Map childrenMap = new HashMap();    for (int i = 0; i < childrenCompanyList.size(); i++) {      Company child = (Company) childrenCompanyList.get(i);      List childrenList = (List) childrenMap.get(child.getParentCode());      if (childrenList != null) {        childrenList.add(child);      } else {        List tempList = new ArrayList();        tempList.add(child);        childrenMap.put(child.getParentCode(), tempList);      }    }    for (int i = 0; i < rootCompanyList.size(); i++) {      Company company = (Company) rootCompanyList.get(i);      this.setCompanyChildren(company, childrenMap);    }    return rootCompanyList;  }  private void setCompanyChildren(Company company, Map childrenMap) {    List childrenList = (List) childrenMap.get(company.getCode());    if (childrenList != null) {      company.setChildren(childrenList);      for (int i = 0; i < childrenList.size(); i++) {        Company c = (Company) childrenList.get(i);        setCompanyChildren(c, childrenMap);      }    }  }  private List getPosition() {    return baseDataServiceDelegate.getPosition(WorkEnv.getInstance().getTransNd(),    requestMeta);  }  private List getEmp() {    return baseDataServiceDelegate.getEmp(WorkEnv.getInstance().getTransNd(),    requestMeta);  }  private List getOrgList() {    List list = baseDataServiceDelegate.getOrg(WorkEnv.getInstance().getTransNd(),    requestMeta);    return this.genOrgTreeData(list);  }  private List genOrgTreeData(List dataList) {    List rootOrgList = new ArrayList();    List childrenOrgList = new ArrayList();    Map dataMap = new HashMap();    for (Object o : dataList) {      Org cpy = (Org) o;      dataMap.put(cpy.getCode(), cpy);    }    for (Object o : dataList) {      Org v = (Org) o;      if (dataMap.get(v.getParentCode()) == null) {        rootOrgList.add(v);      } else {        childrenOrgList.add(v);      }    }    Map childrenMap = new HashMap();    for (int i = 0; i < childrenOrgList.size(); i++) {      Org child = (Org) childrenOrgList.get(i);      List childrenList = (List) childrenMap.get(child.getCoCode()      + child.getParentCode());      if (childrenList != null) {        childrenList.add(child);      } else {        List tempList = new ArrayList();        tempList.add(child);        childrenMap.put(child.getCoCode() + child.getParentCode(), tempList);      }    }    for (int i = 0; i < rootOrgList.size(); i++) {      Org v = (Org) rootOrgList.get(i);      this.setOrgChildren(v, childrenMap);    }    return rootOrgList;  }  private void setOrgChildren(Org v, Map childrenMap) {    List childrenList = (List) childrenMap.get(v.getCoCode() + v.getParentCode());    if (childrenList != null) {      v.setChildren(childrenList);      for (int i = 0; i < childrenList.size(); i++) {        Org c = (Org) childrenList.get(i);        setOrgChildren(c, childrenMap);      }    }  }  class MyDefaultTreeCellRenderer extends DefaultTreeCellRenderer {    private static final long serialVersionUID = 1L;    public MyDefaultTreeCellRenderer() {    }    public Component getTreeCellRendererComponent(JTree tree, Object value,    boolean selected, boolean expanded, boolean leaf, int row,    boolean hasFocus) {      super.getTreeCellRendererComponent(tree, value, selected, expanded,      leaf, row, hasFocus);      DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;      Object userObject = node.getUserObject();      if (userObject instanceof Company) {        this.setIcon(new ImageIcon(this.getClass().getResource(        "/img/company.gif")));      } else if (userObject instanceof Org) {        this.setIcon(new ImageIcon(this.getClass().getResource(        "/img/department.gif")));      } else if (userObject instanceof Position) {        this.setIcon(new ImageIcon(this.getClass().getResource(        "/img/position.gif")));      } else if (userObject instanceof Emp) {        this.setIcon(new ImageIcon(this.getClass().getResource(        "/img/employee.gif")));      }      return this;    }  }  public static void main(String[] args) {    OrgTree tree = new OrgTree();    JFrame f = new JFrame();    f.getContentPane().add(tree);    f.setSize(400, 300);    f.setLocationRelativeTo(null);    f.setVisible(true);    f.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent e) {        System.exit(0);      }    });  }}