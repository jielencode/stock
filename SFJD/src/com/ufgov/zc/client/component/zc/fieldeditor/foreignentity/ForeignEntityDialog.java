/** * ForeignEntityDialog.java * com.ufgov.gk.client.component.zc.fieldeditor * Administrator * 2010-4-30 */package com.ufgov.zc.client.component.zc.fieldeditor.foreignentity;import java.awt.Dialog;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.io.Serializable;import javax.swing.JOptionPane;import javax.swing.JTable;import javax.swing.table.DefaultTableModel;import org.apache.log4j.Logger;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.JButtonTextField;import com.ufgov.zc.client.component.JTableSelectDialog;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.util.GkPreferencesStore;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.BeanUtil;import com.ufgov.zc.common.zc.publish.IZcEbBaseServiceDelegate;/** * @author Administrator * */public class ForeignEntityDialog extends JTableSelectDialog {  private Logger log = Logger.getLogger(ForeignEntityDialog.class);  private String fieldName;  private String[] columNames;  private Object[] editors;  private static final long serialVersionUID = -5603007275009072098L;  public ForeignEntityDialog(Dialog dialog, boolean modal, JButtonTextField triggerField, String sqlMapSelectedId,  ElementConditionDto elementConditionDto, String title, String fieldName, String[] columNames, Object[] editors) {    super(dialog, modal, triggerField, sqlMapSelectedId, elementConditionDto, title);    this.fieldName = fieldName;    this.columNames = columNames;    this.editors = editors;    this.elementConditionDto = elementConditionDto;  }  @Override  public void initTitle() {    LangTransMeta.init("ZC%");  }  protected void initDataBufferList() {    int nd = WorkEnv.getInstance().getTransNd();    IZcEbBaseServiceDelegate delegate = (IZcEbBaseServiceDelegate) ServiceFactory.create(IZcEbBaseServiceDelegate.class, "zcEbBaseServiceDelegate");    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    if (this.elementConditionDto == null) {      this.elementConditionDto = new ElementConditionDto();      this.elementConditionDto.setNd(nd);    }    this.dataBufferList = delegate.getForeignEntitySelectedData(this.sqlMapSelectedId, this.elementConditionDto, requestMeta);    if (this.elementConditionDto.getNumLimitStr() == null && this.elementConditionDto.getDataRuleCondiStr() == null) {      numLimDataList = dataBufferList;    } else {      numLimDataList = delegate.getForeignEntitySelectedData(this.sqlMapSelectedId, this.elementConditionDto, requestMeta);    }  }  public void initSelectTable() {    String[] names = this.columNames;    Object[][] data = null;    tableDataList = this.dataBufferList;    data = new Object[tableDataList.size()][names.length];    for (int i = 0; i < tableDataList.size(); i++) {      Serializable rowData = (Serializable) tableDataList.get(i);      data[i][0] = BeanUtil.get(this.fieldName, rowData);      for (int j = 0; j < editors.length; j++) {        AbstractFieldEditor editor = (AbstractFieldEditor) editors[j];        data[i][j + 1] = BeanUtil.get(editor.getFieldName(), rowData);      }    }    DefaultTableModel model = new DefaultTableModel(data, names) {      public boolean isCellEditable(int row, int colum) {        return false;      }    };    selectTable.setPreferencesKey(this.getClass().getName() + "_selectTable");    selectTable.setPreferenceStore(GkPreferencesStore.preferenceStore());    selectTable.setModel(model);    selectTable.addMouseListener(new MouseAdapter() {      public void mouseClicked(MouseEvent e) {        if (e.getClickCount() == 2) {          doOK();        }      }    });    selectTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);    this.fitTable(selectTable);  }  public void doOK() {    int selectedRowCount = selectTable.getSelectedRowCount();    if (selectedRowCount == 0) {      JOptionPane.showMessageDialog(self, "请选数据 ！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    } else if (selectedRowCount > 1) {      JOptionPane.showMessageDialog(self, "只能选择一条数据 ！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    } else if (selectedRowCount == 1) {      int selectedRow = selectTable.convertRowIndexToModel(selectTable.getSelectedRow());      Serializable bean = (Serializable) tableDataList.get(selectedRow);      triggerField.setValue(BeanUtil.get(this.fieldName, bean));      for (Object o : editors) {        AbstractFieldEditor editor = (AbstractFieldEditor) o;        editor.setEditObject(bean);//editor.getFieldName(),setValue      }      this.closeDialog();    }  }}