package com.ufgov.zc.client.component.zc.fieldeditor.region;import java.awt.Dialog;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.DefaultTreeModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.JButtonTextField;import com.ufgov.zc.client.component.JTreeSelectDialog;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityDataCache;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.EleRegion;import com.ufgov.zc.common.zc.model.TreeNodeValueObject;import com.ufgov.zc.common.zc.publish.IForeignEntityDelegate;import com.ufgov.zc.common.zc.publish.IZcEbBaseServiceDelegate;public class ZcEleRegionTreeSelectDialog extends JTreeSelectDialog {  protected boolean selectedTailFlag = false;    public ZcEleRegionTreeSelectDialog(Dialog dialog, boolean modal, JButtonTextField triggerField) {    super(dialog, modal, triggerField);  }  public ZcEleRegionTreeSelectDialog(Dialog dialog, boolean modal, JButtonTextField triggerField, boolean selectedTailFlag) {    super(dialog, modal, triggerField, selectedTailFlag);    this.selectedTailFlag = selectedTailFlag;  }  private static final long serialVersionUID = -4407933154954926841L;  public void initTitle() {    LangTransMeta.init("ZC%");    this.setTitle(LangTransMeta.translate("ZC_B_CATALOGUE"));  }  protected void initDataBufferList() {    IZcEbBaseServiceDelegate delegate = (IZcEbBaseServiceDelegate) ServiceFactory.create(IZcEbBaseServiceDelegate.class,      "zcEbBaseServiceDelegate");    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    ElementConditionDto dto = new ElementConditionDto();    dto.setZcText0(String.valueOf(requestMeta.getSvNd()));        dataBufferList = (List)ForeignEntityDataCache.getDataMap().get("ELE_REGION");    if (dataBufferList != null && dataBufferList.size() > 0) {    } else {        dataBufferList = delegate.queryDataForList("ELE_REGION.getAllEleRegionsNoCond", null, requestMeta);            ForeignEntityDataCache.setData("ELE_REGION", dataBufferList);          }    for (int i = 0; i < dataBufferList.size(); i++) {      EleRegion rowData = (EleRegion) dataBufferList.get(i);      this.triggerField.dataMap.put(rowData.getChrCode(), rowData);    }    this.triggerField.filteredDataList = dataBufferList;    initSelectTree();  }  private List genTreeData() {    List filteredList = dataBufferList;    Map map = new HashMap();    for (Object o : filteredList) {      EleRegion cpy = (EleRegion) o;      map.put(cpy.getChrCode(), cpy);    }    List rootList = new ArrayList();    List childrenZcBCatalogueList = new ArrayList();    for (Object o : filteredList) {      TreeNodeValueObject cpy = (TreeNodeValueObject) o;      if (map.get(cpy.getParentCode()) == null) {        rootList.add(cpy);      } else {        childrenZcBCatalogueList.add(cpy);      }    }    Map childrenMap = new HashMap();    for (int i = 0; i < childrenZcBCatalogueList.size(); i++) {      TreeNodeValueObject child = (TreeNodeValueObject) childrenZcBCatalogueList.get(i);      List childrenList = (List) childrenMap.get(child.getParentCode());      if (childrenList != null) {        childrenList.add(child);      } else {        List tempList = new ArrayList();        tempList.add(child);        childrenMap.put(child.getParentCode(), tempList);      }    }    for (int i = 0; i < rootList.size(); i++) {      EleRegion bean = (EleRegion) rootList.get(i);      this.setChildren(bean, childrenMap);    }    return rootList;  }  protected void initSelectTree() {    DefaultMutableTreeNode root = new DefaultMutableTreeNode("区划");    this.triggerField.filteredDataList = dataBufferList;//this.genFilterDataList()    List companyTreeList = genTreeData();    treeNodeMap.clear();    for (Object o : companyTreeList) {      TreeNodeValueObject nodeValueObj = (TreeNodeValueObject) o;      DefaultMutableTreeNode node = new DefaultMutableTreeNode(nodeValueObj);      root.add(node);      treeNodeMap.put(nodeValueObj, node);      this.setChildNode(nodeValueObj, node);    }    this.getSelectTree().setModel(new DefaultTreeModel(root));  }  private void setChildren(EleRegion bean, Map childrenMap) {    List childrenList = (List) childrenMap.get(bean.getChrCode());    if (childrenList != null) {      bean.setChildrenList(childrenList);      for (int i = 0; i < childrenList.size(); i++) {        EleRegion c = (EleRegion) childrenList.get(i);        setChildren(c, childrenMap);      }    }  }  private void setChildNode(TreeNodeValueObject nodeValueObj, DefaultMutableTreeNode node) {    if (nodeValueObj.getChildrenList().size() > 0) {      for (Object o : nodeValueObj.getChildrenList()) {        TreeNodeValueObject c = (TreeNodeValueObject) o;        DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(c);        node.add(childNode);        treeNodeMap.put(c, childNode);        setChildNode(c, childNode);      }    }  }}