package com.ufgov.zc.client.component.zc.fieldeditor.zcbagency;import java.awt.Dialog;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import javax.swing.JOptionPane;import javax.swing.JTable;import javax.swing.table.DefaultTableModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.JButtonTextField;import com.ufgov.zc.client.component.JTableSelectDialog;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.util.GkPreferencesStore;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.ZcBAgency;import com.ufgov.zc.common.zc.publish.IForeignEntityDelegate;public class ZcBAgencySelectDialog extends JTableSelectDialog {  protected TextFieldEditor triggerFieldName;  public ZcBAgencySelectDialog(Dialog dialog, boolean modal, JButtonTextField triggerField, TextFieldEditor triggerFieldName) {    super(dialog, modal, triggerField);    this.triggerFieldName = triggerFieldName;  }  private static final long serialVersionUID = -4407933154954926841L;  public void initTitle() {    LangTransMeta.init("ZC%");    this.setTitle(LangTransMeta.translate("ZC_B_AGENCY"));  }  protected void initDataBufferList() {    IForeignEntityDelegate delegate = (IForeignEntityDelegate) ServiceFactory.create(IForeignEntityDelegate.class, "foreignEntityServiceDelegate");    //IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(IBaseDataServiceDelegate.class, "baseDataServiceDelegate");    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    ElementConditionDto dto = new ElementConditionDto();    dto.setBillStatus("1");    //    String dataRuleId = ((ZcBAgencySelectField) this.triggerField).getDataRuleId();    //    dto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance().getDataRuleCondiStr(dataRuleId));    //    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(triggerField.compoId,    //      NumLimConstants.FWATCH, triggerField.elementCode));    dataBufferList = delegate.getZcBAgency(dto, requestMeta);    //    if (dto.getDataRuleCondiStr() == null && dto.getNumLimitStr() == null) {    //      numLimDataList = dataBufferList;    //    } else {    //      numLimDataList = foreignEntityServiceDelegate.getProject(dto, requestMeta);    //    }    for (int i = 0; i < dataBufferList.size(); i++) {      ZcBAgency rowData = (ZcBAgency) dataBufferList.get(i);      this.triggerField.dataMap.put(rowData.getAgency(), rowData);    }    this.triggerField.filteredDataList = dataBufferList;  }  //  private List genTableData() {  //    List list = ProjectDataFilter.filter(dataBufferList, this.triggerField.isRandomEdit(), this.triggerField  //      .getPrefix(), this.triggerField.isLevelCtrl(), this.triggerField.getCtrlLevelNum());  //    list = ProjectDataFilter.getProject(((ZcBAgencySelectField) triggerField).getCompany(), list);  //    list = BaseElementDataFilter.doNumLimFilter(list, numLimDataList);  //    return list;  //  }  public void initSelectTable() {    String[] names = { "中介机构代码", "中介机构名称", "中介机构地址" };    Object[][] data = null;    tableDataList = this.dataBufferList;    data = new Object[tableDataList.size()][names.length];    for (int i = 0; i < tableDataList.size(); i++) {      ZcBAgency rowData = (ZcBAgency) tableDataList.get(i);      int col = 0;      data[i][col++] = rowData.getAgency();      data[i][col++] = rowData.getAgencyName();      data[i][col++] = rowData.getZcAgeyAddr();    }    DefaultTableModel model = new DefaultTableModel(data, names) {      public boolean isCellEditable(int row, int colum) {        return false;      }    };    selectTable.setPreferencesKey(this.getClass().getName() + "_selectTable");    selectTable.setPreferenceStore(GkPreferencesStore.preferenceStore());    selectTable.setModel(model);    selectTable.addMouseListener(new MouseAdapter() {      public void mouseClicked(MouseEvent e) {        if (e.getClickCount() == 2) {          doOK();        }      }    });    selectTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);  }  public void doOK() {    int selectedRowCount = selectTable.getSelectedRowCount();    if (selectedRowCount == 0) {      JOptionPane.showMessageDialog(self, "请选数据 ！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    } else if (selectedRowCount > 1) {      JOptionPane.showMessageDialog(self, "只能选择一条数据 ！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    } else if (selectedRowCount == 1) {      int selectedRow = selectTable.convertRowIndexToModel(selectTable.getSelectedRow());      triggerField.setValue(tableDataList.get(selectedRow));      if (triggerFieldName != null)        triggerFieldName.setValue(tableDataList.get(selectedRow));      this.closeDialog();    }  }}