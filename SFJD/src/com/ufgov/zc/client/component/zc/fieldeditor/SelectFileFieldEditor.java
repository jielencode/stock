/** * ForeignEntityFieldPanel.java * com.ufgov.gk.client.component.zc.fieldeditor * Administrator * 2010-5-4 */package com.ufgov.zc.client.component.zc.fieldeditor;import java.awt.BorderLayout;import javax.swing.JComponent;import com.ufgov.zc.client.component.FileUploader;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.common.system.util.BeanUtil;import com.ufgov.zc.common.zc.model.ZcBaseBill;/** * @author Administrator * */public class SelectFileFieldEditor extends AbstractFieldEditor {  private FileUploader field;  private boolean isDeleteOldFile = false;  private boolean uploadButton = true;  private boolean deleteButton = true;  private boolean downloadButton = true;  private String blobId = "Blobid";  public SelectFileFieldEditor(String name, String fieldName) {    this.fieldName = fieldName;    init(name);  }  public SelectFileFieldEditor(String name, String fieldName, String blobId) {    this.fieldName = fieldName;    this.blobId = blobId;    init(name);  }  public SelectFileFieldEditor(String name, String fieldName, String blobId, boolean isDeleteOldFile) {    this.fieldName = fieldName;    this.blobId = blobId;    this.isDeleteOldFile = isDeleteOldFile;    init(name);  }  public SelectFileFieldEditor(String name, String fieldName, String blobId, boolean isDeleteOldFile, boolean uploadButton,  boolean deleteButton, boolean downloadButton) {    this.fieldName = fieldName;    this.blobId = blobId;    this.isDeleteOldFile = isDeleteOldFile;    this.uploadButton = uploadButton;    this.deleteButton = deleteButton;    this.downloadButton = downloadButton;    init(name);  }  protected void init(String name) {    setName(name);    setBorder(null);    setLayout(new BorderLayout());    editorComponent = createEditorComponent();    setFieldEditorCode();    add(editorComponent);  }  public void setEnabled(boolean enabled) {    field.setEditable(enabled);    field.setEnabled(enabled);  }  public Object getValue() {    return field.getText();  }  public void setValue(Object value) { //在选择的上面的行发生改变的时候所触发的事件    if (value == null) {      field.setText(null);      field.setToolTipText(null);    } else if (value instanceof ZcBaseBill) {      String fileName = (String) BeanUtil.get(fieldName, value);      String fileId = (String) BeanUtil.get(this.blobId, value);      field.setText(fileName);      field.setFileId(fileId);      if (fileName == null || fileName.trim().equals("")) {        field.setToolTipText(null);      } else {        field.setToolTipText(fileName);      }    }  }  protected JComponent createEditorComponent() { //生成下面的控件，并将改变的内容同步到对象中    field = new FileUploader(this.uploadButton, this.deleteButton, this.downloadButton, this.isDeleteOldFile);    field.addValueChangeListener(new ValueChangeListener() {      public void valueChanged(ValueChangeEvent e) {        syncEditObject();      }    });    return field;  }  protected void syncEditObject() {    if (getEditObject() != null) {      BeanUtil.set(fieldName, field.getText(), getEditObject());    }    this.fireEditSynced();  }  public FileUploader getFileUploader() {    return field;  }  public void setFileBlobName(FileUploader fileUploader) {    this.field = fileUploader;  }  public void addValueChangeListener(ValueChangeListener l) {    this.field.addValueChangeListener(l);  }}