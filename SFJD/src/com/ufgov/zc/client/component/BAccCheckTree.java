package com.ufgov.zc.client.component;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.ArrayList;import java.util.Enumeration;import java.util.List;import javax.swing.JFrame;import javax.swing.JScrollPane;import javax.swing.JTree;import javax.swing.UIManager;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.DefaultTreeModel;import javax.swing.tree.DefaultTreeSelectionModel;import javax.swing.tree.TreePath;import javax.swing.tree.TreeSelectionModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.datacache.BAccDataCache;import com.ufgov.zc.common.commonbiz.model.BAcc;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;public class BAccCheckTree extends JTree {  private List baccList;  private List<BAcc> selectedBAccList;  private IBaseDataServiceDelegate baseDataServiceDelegate;  private String baseDataServiceDelegateName = "baseDataServiceDelegate";  private final int DEFAULT_ROWHEIGHT = 20; // 默认行高  /**   * @param showData 是否打开时就显示数据   */  public BAccCheckTree(boolean showData) {    super();    init();    if (showData) {      refreshBAccList();      createTree();    }  }  private void init() {    baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(    IBaseDataServiceDelegate.class, baseDataServiceDelegateName);    selectedBAccList = new ArrayList<BAcc>();    this.addMouseListener(new MouseAdapter() {      public void mouseClicked(MouseEvent e) {        // 取出点击的节点路径，为null时未点中        int x = e.getX();        int y = e.getY();        int row = getRowForLocation(x, y);        TreePath path = getPathForRow(row);        if (path == null)          return;        CheckNode node = (CheckNode) getLastSelectedPathComponent();        if (node == null)          return;        node.setSelected(!node.isSelected());        repaint();      }    });    this.setRowHeight(DEFAULT_ROWHEIGHT);  }  public List getBAccList() {    return baccList;  }  public void setBAccList(List baccList) {    this.baccList = baccList;  }  /**   * 返回勾选中的功能分类list   * @return   */  public List getSelectedBAccList() {    selectedBAccList.clear();    CheckNode root = (CheckNode) this.getModel().getRoot();    Enumeration e = root.depthFirstEnumeration();    while (e.hasMoreElements()) {      CheckNode node = (CheckNode) e.nextElement();      if (node == root)        continue;      if (node.isSelected()) {        BAcc bacc = (BAcc) node.getUserObject();        selectedBAccList.add(bacc);      }    }    return selectedBAccList;  }  /**   * 返回勾选中的末级功能分类list   * @return   */  public List getSelectedLeafBAccList() {    selectedBAccList.clear();    CheckNode root = (CheckNode) this.getModel().getRoot();    CheckNode node = (CheckNode) root.getFirstLeaf();    while (node != null) {      if (node.isSelected()) {        BAcc bacc = (BAcc) node.getUserObject();        selectedBAccList.add(bacc);      }      node = (CheckNode) node.getNextLeaf();    }    return selectedBAccList;  }  /**   * 设置需要勾选的功能分类节点   * @param selectedBAccList   * @param strict 是否严格判断（为否时只判断功能分类代码）   */  public void setSelectedBAccList(List selectedBAccList, boolean strict) {    CheckNode root = (CheckNode) this.getModel().getRoot();    Enumeration e = root.depthFirstEnumeration();    while (e.hasMoreElements()) {      CheckNode node = (CheckNode) e.nextElement();      BAcc bacc = (BAcc) node.getUserObject();      node.setSelectionMode(CheckNode.SINGLE_SELECTION);      if (selectedBAccList == null)        node.setSelected(false);      else if (strict) {        if (selectedBAccList.contains(bacc))          node.setSelected(true);        else          node.setSelected(false);      } else if (!strict) {        boolean hasCode = false;        for (Object o : selectedBAccList) {          BAcc tmpBAcc = (BAcc) o;          if (bacc.getCode().equals(tmpBAcc.getCode())) {            hasCode = true;            break;          }        }        node.setSelected(hasCode);      }      node.setSelectionMode(CheckNode.DIG_IN_SELECTION);    }    repaint();  }  /**   * 设置需要勾选的叶节点   * @param selectedBAccList   * @param strict   */  public void setSelectedLeafBAccList(List selectedBAccList, boolean strict) {    CheckNode root = (CheckNode) this.getModel().getRoot();    CheckNode node = (CheckNode) root.getFirstLeaf();    while (node != null) {      BAcc bacc = (BAcc) node.getUserObject();      if (selectedBAccList == null)        node.setSelected(false);      else if (strict) {        if (selectedBAccList.contains(bacc))          node.setSelected(true);        else          node.setSelected(false);      } else if (!strict) {        boolean hasCode = false;        for (Object o : selectedBAccList) {          BAcc tmpBAcc = (BAcc) o;          if (bacc.getCode().equals(tmpBAcc.getCode())) {            hasCode = true;            break;          }        }        node.setSelected(hasCode);      }      node = (CheckNode) node.getNextLeaf();    }    repaint();  }  /**   * 刷新功能分类数据   */  public void refreshBAccList() {    //    int nd = WorkEnv.getInstance().getTransNd();    //    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    //    ElementConditionDto dto = new ElementConditionDto();    //    dto.setNd(nd);    //    baccList = baseDataServiceDelegate.getBAcc(dto, requestMeta);    baccList = BAccDataCache.getBAcc();  }  /**   * 构建功能分类树   */  public void createTree() {    //创建根节点    BAcc baccRoot = new BAcc();    baccRoot.setCode("");    baccRoot.setName("功能分类");    CheckNode root = new CheckNode(baccRoot);    CheckNode priorNode = root;    for (Object o : baccList) {      BAcc bacc = (BAcc) o;      CheckNode node = new CheckNode(bacc);      BAcc priorBAcc = (BAcc) priorNode.getUserObject();      if ((bacc.getParentCode() == null)      || (bacc.getParentCode().equalsIgnoreCase("")))        root.add(node);      else if (bacc.getParentCode().equals(priorBAcc.getCode()))        priorNode.add(node);      else {        // 循环取上个节点的父节点，从树深处退出        while (priorNode.getParent() != null) {          priorNode = (CheckNode) priorNode.getParent();          priorBAcc = (BAcc) priorNode.getUserObject();          if (bacc.getParentCode().equals(priorBAcc.getCode()))            priorNode.add(node);        }      }      priorNode = node;    }    this.setModel(new DefaultTreeModel(root));    this.setCellRenderer(new CheckRenderer());    // 单选    DefaultTreeSelectionModel selectionModel = new DefaultTreeSelectionModel();    selectionModel.setSelectionMode(TreeSelectionModel.CONTIGUOUS_TREE_SELECTION);    this.setSelectionModel(selectionModel);  }  public void expandAll(boolean expand) {    DefaultMutableTreeNode root = (DefaultMutableTreeNode) this.getModel().getRoot();    expandAll(new TreePath(root), expand);  }  /**   * 遍历parent的所有子节点并展开   * @param parent   * @param expand   */  public void expandAll(TreePath parent, boolean expand) {    DefaultMutableTreeNode node = (DefaultMutableTreeNode) parent    .getLastPathComponent();    if (node.getChildCount() >= 0) {      for (Enumeration e = node.children(); e.hasMoreElements();) {        DefaultMutableTreeNode n = (DefaultMutableTreeNode) e.nextElement();        TreePath path = parent.pathByAddingChild(n);        expandAll(path, expand);      }    }    if (expand) {      this.expandPath(parent);    } else {      this.collapsePath(parent);    }  }  public static void main(String[] args) throws Exception {    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());    BAccCheckTree tree = new BAccCheckTree(true);    tree.expandRow(1);    JFrame f = new JFrame();    f.getContentPane().add(new JScrollPane(tree));    f.setSize(400, 600);    f.setLocationRelativeTo(null);    f.setVisible(true);    f.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent e) {        System.exit(0);      }    });  }}