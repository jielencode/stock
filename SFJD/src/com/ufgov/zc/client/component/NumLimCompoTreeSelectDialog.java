package com.ufgov.zc.client.component;import java.awt.Dialog;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.DefaultTreeModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.common.commonbiz.model.NumLimCompo;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;public class NumLimCompoTreeSelectDialog extends JTreeSelectDialog {  public NumLimCompoTreeSelectDialog(Dialog owner, boolean modal, JButtonTextField triggerField) {    super(owner, modal, triggerField);  }  protected void initDataBufferList() {    String serviceName = "baseDataServiceDelegate";    IBaseDataServiceDelegate service = (IBaseDataServiceDelegate) ServiceFactory.create(    IBaseDataServiceDelegate.class, serviceName);    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    this.dataBufferList = service.getNumLimCompo(requestMeta);  }  protected void initSelectTree() {    treeNodeMap.clear();    // 创建根节点    NumLimCompo numLimCompoRoot = new NumLimCompo();    numLimCompoRoot.setCompoId("");    numLimCompoRoot.setCompoName("部件页面");    DefaultMutableTreeNode root = new DefaultMutableTreeNode(numLimCompoRoot);    DefaultMutableTreeNode priorNode = root;    for (Object o : dataBufferList) {      NumLimCompo numLimCompo = (NumLimCompo) o;      DefaultMutableTreeNode node = new DefaultMutableTreeNode(numLimCompo);      NumLimCompo priorNumLimCompo = (NumLimCompo) priorNode.getUserObject();      if (numLimCompo.getParentCompoId() == null || numLimCompo.getParentCompoId().equalsIgnoreCase(""))        root.add(node);      else if (numLimCompo.getParentCompoId().equals(priorNumLimCompo.getCompoId()))        priorNode.add(node);      else {        // 循环取上个节点的父节点，从树深处退出        while (priorNode.getParent() != null) {          priorNode = (DefaultMutableTreeNode) priorNode.getParent();          priorNumLimCompo = (NumLimCompo) priorNode.getUserObject();          if (numLimCompo.getParentCompoId().equals(priorNumLimCompo.getCompoId()))            priorNode.add(node);        }      }      treeNodeMap.put(numLimCompo, node);      priorNode = node;    }    this.selectTree.setModel(new DefaultTreeModel(root));    // 设置树的选择模式：只能单选?  }  protected void initTitle() {    this.setTitle("设置权限菜单");  }}