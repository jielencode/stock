package com.ufgov.zc.client.component;import java.awt.BorderLayout;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JFrame;import javax.swing.JPanel;import com.ufgov.smartclient.component.JComboBoxEx;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.element.BaseElementDataFilter;import com.ufgov.zc.client.datacache.BalModeDataCache;import com.ufgov.zc.client.util.GkGetDataRuleUtil;import com.ufgov.zc.common.commonbiz.model.BalMode;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;public class BalModeComboBox extends JComboBoxEx {  private List dataList = new ArrayList();  private Map<String, BalMode> dataMap = new HashMap<String, BalMode>();  public BalModeComboBox() {    super();    init();  }  public BalModeComboBox(String dataRuleId) {    super();    this.dataRuleId = dataRuleId;    init();  }  private String dataRuleId;  private List numLimDataList = new ArrayList();  private void init() {    dataList = BalModeDataCache.getBalMode();    int nd = WorkEnv.getInstance().getTransNd();    String baseDataServiceDelegateName = "baseDataServiceDelegate";    IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory    .create(IBaseDataServiceDelegate.class, baseDataServiceDelegateName);    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    ElementConditionDto dto = new ElementConditionDto();    dto.setNd(nd);    dto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance().getDataRuleCondiStr(    dataRuleId));    if (dto.getDataRuleCondiStr() == null) {      numLimDataList = dataList;    } else {      numLimDataList = baseDataServiceDelegate.getBalMode(dto, requestMeta);    }    dataList = BaseElementDataFilter.doNumLimFilter(dataList, numLimDataList);    this.addItem(null);    for (int i = 0; i < dataList.size(); i++) {      BalMode data = (BalMode) dataList.get(i);      this.addItem(data);      this.addItemDisplaLable(data, data.toString());      this.dataMap.put(data.getBalModeCode(), data);    }    this.addItemListener(new ItemListener() {      public void itemStateChanged(ItemEvent e) {        if (((BalMode) getSelectedItem()) != null) {          setToolTipText(((BalMode) e.getItem())          .toString());        } else {          setToolTipText(null);        }      }    });  }  public BalMode getSelectedBalMode() {    return (BalMode) this.getSelectedItem();  }  public void setSelectedBalMode(BalMode balMode) {    this.setSelectedItem(balMode);  }  public void setSelectedBalModeByCode(String balModeCode) {    BalMode balMode = dataMap.get(balModeCode);    this.setSelectedItem(balMode);  }  public static void main(String[] args) {    JFrame f = new JFrame();    BalModeComboBox textField = new BalModeComboBox("");    textField.setEditable(false);    textField.setEnabled(false);    textField.setEnabled(true);    JPanel panel = new JPanel();    panel.add(textField);    f.getContentPane().add(panel, BorderLayout.NORTH);    // f.pack();    // SwingUtilities.updateComponentTreeUI(panel);    f.setSize(400, 300);    f.setLocationRelativeTo(null);    f.setVisible(true);    f.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent e) {        System.exit(0);      }    });  }}