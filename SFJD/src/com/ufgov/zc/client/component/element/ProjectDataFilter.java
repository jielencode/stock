package com.ufgov.zc.client.component.element;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.josql.Query;import org.josql.QueryResults;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.common.commonbiz.model.Company;import com.ufgov.zc.common.commonbiz.model.Project;import com.ufgov.zc.common.system.exception.JoSqlDataHandleException;import com.ufgov.zc.common.system.util.LevelControlUtil;public class ProjectDataFilter {  public static List filter(List dataBufferList, boolean randomEdit, String prefix, boolean levelCtrl,  int ctrlLevelNum) {    int ctrlLen = LevelControlUtil.getCtrLength(AsOptionMeta.getOptVal("OPT_PD_PROJECT_LEVEL"), ctrlLevelNum);    List prefixFilteredList = new ArrayList();    List levelCtrlFilteredList = new ArrayList();    if (!randomEdit) {      if (prefix == null) {        prefix = "";      }      for (Object o : dataBufferList) {        Project temp = (Project) o;        if (temp.getCode().startsWith(prefix)) {          prefixFilteredList.add(temp);        }      }    }    if (levelCtrl && ctrlLevelNum >= 1) {      List level1List = new ArrayList();      Map map = new HashMap();      for (Object o : dataBufferList) {        Project temp = (Project) o;        if (temp.getCode().length() <= ctrlLen) {          level1List.add(temp);        }      }      for (Object o : dataBufferList) {        Project temp = (Project) o;        for (Object rootObj : level1List) {          Project root = (Project) rootObj;          if (temp.getCode().startsWith(root.getCode())) {            if (map.get(root.getCode() + temp.getLevel()) != null) {              List clList = (List) map.get(root.getCode() + temp.getLevel());              clList.add(temp);            } else {              List tempList = new ArrayList();              tempList.add(temp);              map.put(root.getCode() + temp.getLevel(), tempList);            }          }        }      }      for (Object rootObj : level1List) {        Project root = (Project) rootObj;        for (int levelNum = ctrlLevelNum; levelNum >= 1; levelNum--) {          List levelList = (List) map.get(root.getCode() + levelNum);          if (levelList != null && !levelList.isEmpty()) {            levelCtrlFilteredList.addAll(levelList);            break;          }        }      }    }    List filteredList = null;    if (randomEdit && !levelCtrl) {      filteredList = dataBufferList;    } else if (!randomEdit && !levelCtrl) {      filteredList = prefixFilteredList;    } else if (randomEdit && levelCtrl) {      filteredList = levelCtrlFilteredList;    } else {      filteredList = new ArrayList();      for (Object o : prefixFilteredList) {        if (levelCtrlFilteredList.contains(o)) {          filteredList.add(o);        }      }    }    return filteredList;  }  public static List<Project> getProject(Company company, List dataList) {    if (company == null || "01".equals(company.getCoTypeCode())) {      return dataList;    }    String joSql = "select * from " + Project.class.getName()    + " where pdCreaCoCode like :coCode or pdCreaCoCode is null";    Query query = new Query();    List<Project> projectList = new ArrayList<Project>();    try {      query.parse(joSql);      query.setVariable("coCode", company.getCode() + "%");      QueryResults rs = query.execute(dataList);      projectList = rs.getResults();    } catch (Exception e) {      throw new JoSqlDataHandleException("", e);    }    return projectList;  }}