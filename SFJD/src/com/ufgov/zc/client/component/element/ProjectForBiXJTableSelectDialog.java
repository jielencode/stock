package com.ufgov.zc.client.component.element;import java.awt.Dialog;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.ArrayList;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Set;import javax.swing.JButton;import javax.swing.JOptionPane;import javax.swing.JTable;import javax.swing.JToggleButton;import org.apache.log4j.Logger;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.JButtonTextField;import com.ufgov.zc.client.component.JTableSelectDialog;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.datacache.ProjectBiXJDataCache;import com.ufgov.zc.client.util.GkPreferencesStore;import com.ufgov.zc.common.commonbiz.model.Project;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.exception.BusinessException;public class ProjectForBiXJTableSelectDialog extends JTableSelectDialog {  private static final long serialVersionUID = -3104111833156428946L;  protected Logger logger = Logger.getLogger(this.getClass());  protected ProjectForBiXJTableSelectDialog self = this;  private JButton addButton;  private JButton delButton;  private JButton saveButton;  private JButton okButton;  private boolean editable = true;  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory  .create(IBaseDataServiceDelegate.class, "baseDataServiceDelegate");  public ProjectForBiXJTableSelectDialog(Dialog dialog, boolean modal, JButtonTextField triggerField) {    super(dialog, modal, triggerField);  }  public ProjectForBiXJTableSelectDialog(JButtonTextField triggerField) {    super(triggerField);  }  private void doAdd() {    ProjectForBiXJTableModel editTableModel = (ProjectForBiXJTableModel) selectTable.getModel();    Project project = new Project();    project.setCode("");    project.setNd(WorkEnv.getInstance().getTransNd());    project.setName("");    project.setOid(Guid.genID());    editTableModel.insertRow(0, project);  }  private void doDelete() {    if (selectTable.isEditing()) {      selectTable.getCellEditor().stopCellEditing();    }    ProjectForBiXJTableModel editTableModel = (ProjectForBiXJTableModel) selectTable.getModel();    Integer[] selectedRows = selectTable.getCheckedRows();    if (selectedRows.length == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    int result = JOptionPane.showConfirmDialog(this, "是否要删除选中的数据?", "删除确认", JOptionPane.YES_NO_OPTION);    if (result != JOptionPane.YES_OPTION) {      return;    }    List codeIdList = new ArrayList();    List<Project> dataList = editTableModel.getDataList();    for (Integer row : selectedRows) {      Project project = dataList.get(selectTable.convertRowIndexToModel(row));      if (project.getCode() != null) {        codeIdList.add(project.getCode());      }    }    String returnInfo = "";    boolean success = true;    try {      this.baseDataServiceDelegate.deleteProjectFN(codeIdList, requestMeta);    } catch (BusinessException be) {      logger.error(be.getStackTraceMessage(), be);      returnInfo = be.getMessage();      success = false;    } catch (Exception ex) {      logger.error(ex.getMessage(), ex);      returnInfo = ex.getMessage();      success = false;    }    if (success) {      JOptionPane.showMessageDialog(this, "删除成功！", " 提示", JOptionPane.INFORMATION_MESSAGE);    } else {      JOptionPane.showMessageDialog(this, "删除失败 ！\n" + returnInfo, "错误", JOptionPane.ERROR_MESSAGE);    }    refreshCurrentData(true);  }  private boolean listVerify(List editList, List beanList) {    StringBuffer nullValueId = new StringBuffer("");    List repeatIdValueList = new ArrayList();    List repeatNameValueList = new ArrayList();    for (int i = 0; i < editList.size(); i++) {      Project project = (Project) editList.get(i);      if (project.getCode().trim().equals("".trim()) || project.getName().trim().equals("".trim())) {        nullValueId.append("is null");      } else {        for (int j = 0; j < beanList.size(); j++) {          Project beanProject = (Project) beanList.get(j);          if (project.getOid() != null) {            if (!project.getOid().equals(beanProject.getOid())) {              if (project.getCode().equals(beanProject.getCode())) {                repeatIdValueList.add(beanProject.getCode());              } else if (project.getName().equals(beanProject.getName())) {                repeatNameValueList.add(project.getName());              }            }          }        }      }    }    if (nullValueId.length() != 0) {      JOptionPane.showMessageDialog(this, "项目代码或项目名称不能为空  ！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    if (repeatIdValueList.size() != 0) {      StringBuffer repeatIdString = removeDuplicate(repeatIdValueList);      repeatIdString.setLength(repeatIdString.length() - 2);      JOptionPane.showMessageDialog(this, "您输入的项目代码为 ： " + repeatIdString + " 不能重复  ！", "提示",      JOptionPane.INFORMATION_MESSAGE);      return false;    }    if (repeatNameValueList.size() != 0) {      StringBuffer repeaNameString = removeDuplicate(repeatNameValueList);      repeaNameString.setLength(repeaNameString.length() - 2);      JOptionPane.showMessageDialog(this, "您输入的项目名称为：" + repeaNameString + "不能重复  ！", "提示",      JOptionPane.INFORMATION_MESSAGE);      return false;    }    return true;  }  private StringBuffer removeDuplicate(List verifyValue) {    Set set = new HashSet();    StringBuffer messageString = new StringBuffer("");    for (Iterator iter = verifyValue.iterator(); iter.hasNext();) {      String element = (String) iter.next();      if (set.add(element)) {        messageString.append(element);        messageString.append("," + "\n");      }    }    return messageString;  }  private boolean unitVerify(BeanTableModel editTableModel) {    List<Project> udataList = editTableModel.getUpdatedData();    List<Project> idataList = editTableModel.getInsertedData();    List<Project> beanList = editTableModel.getDataBeanList();    if (idataList.size() > 0)      if (!listVerify(idataList, beanList)) {        return false;      }    if (udataList.size() > 0)      if (!listVerify(udataList, beanList)) {        return false;      }    return true;  }  private void doSave() {    if (selectTable.isEditing()) {      selectTable.getCellEditor().stopCellEditing();    }    ProjectForBiXJTableModel editTableModel = (ProjectForBiXJTableModel) selectTable.getModel();    if (!editTableModel.isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据没有发生改变不用保存！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    if (!unitVerify(editTableModel)) {      return;    }    String returnInfo = "";    boolean success = true;    try {      List mIdList = new ArrayList();      List iList = editTableModel.getInsertedData();      for (int i = 0; i < iList.size(); i++) {        Project project = (Project) iList.get(i);        project.setOid(Guid.genID());      }      this.baseDataServiceDelegate.saveBiProjectXJFN(iList, editTableModel.getUpdatedData(), requestMeta);      editTableModel.resetEditedData();    } catch (BusinessException be) {      logger.error(be.getStackTraceMessage(), be);      returnInfo = be.getMessage();      success = false;    } catch (Exception ex) {      logger.error(ex.getMessage(), ex);      returnInfo = ex.getMessage();      success = false;    }    if (success) {      JOptionPane.showMessageDialog(this, "保存成功！", " 提示", JOptionPane.INFORMATION_MESSAGE);    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + returnInfo, "错误", JOptionPane.ERROR_MESSAGE);    }    refreshCurrentData(true);  }  public void initTitle() {    LangTransMeta.init("GK%");    this.setTitle("项目");  }  protected void initDataBufferList() {    dataBufferList = ProjectBiXJDataCache.getProject();    for (int i = 0; i < dataBufferList.size(); i++) {      Project rowData = (Project) dataBufferList.get(i);      this.triggerField.dataMap.put(rowData.getCode(), rowData);    }    this.triggerField.filteredDataList = dataBufferList;  }  private List genTableData() {    initDataBufferList();    return this.dataBufferList;  }  private void refreshCurrentData(boolean isEdit) {    ProjectBiXJDataCache.refreshData();    this.triggerField.dataMap.clear();    initDataBufferList();    List list = new ArrayList(dataBufferList);    selectTable.setModel(new ProjectForBiXJTableModel(list, isEdit));    selectTableSorter.setModel(selectTable.getModel());  }  public void doOK() {    if (selectTable.isEditing()) {      selectTable.getCellEditor().stopCellEditing();    }    Integer[] selectedRows = selectTable.getCheckedRows();    if (selectedRows.length == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    } else if (selectedRows.length > 1) {      JOptionPane.showMessageDialog(self, "只能选择一条数据 ！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    } else if (selectedRows.length == 1) {      int selectedRow = selectTable.convertRowIndexToModel(selectTable.getSelectedRow());      triggerField.setValue(dataBufferList.get(selectedRow));      this.closeDialog();    }  }  private void clickOk() {    int selectedRow = selectTable.convertRowIndexToModel(selectTable.getSelectedRow());    triggerField.setValue(dataBufferList.get(selectedRow));    this.closeDialog();  }  public void initSelectTable() {    selectTable.setShowCheckedColumn(true);    tableDataList = this.genTableData();    selectTable.setPreferencesKey(this.getClass().getName() + "_project_selectTable");    selectTable.setPreferenceStore(GkPreferencesStore.preferenceStore());    List list = new ArrayList(tableDataList);    selectTable.setModel(new ProjectForBiXJTableModel(list, false));    selectTable.addMouseListener(new MouseAdapter() {      public void mouseClicked(MouseEvent e) {        if (e.getClickCount() == 2) {          if (editable)            clickOk();        }      }    });    selectTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);  }  protected void initBottomPanel() {    super.initBottomPanel();    this.bottomPanel.removeAll();    addButton = new JButton("添加");    delButton = new JButton("删除");    saveButton = new JButton("保存");    okButton = new JButton("选择");    final JToggleButton bt = new JToggleButton("编辑");    bottomPanel.add(bt);    bottomPanel.add(addButton);    bottomPanel.add(delButton);    bottomPanel.add(saveButton);    bottomPanel.add(okButton);    bottomPanel.add(clearButton);    bottomPanel.add(cancelButton);    addButton.setEnabled(false);    delButton.setEnabled(false);    saveButton.setEnabled(false);    bt.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        if (bt.isSelected()) {          refreshCurrentData(true);          addButton.setEnabled(true);          delButton.setEnabled(true);          saveButton.setEnabled(true);          okButton.setEnabled(false);          clearButton.setEnabled(false);          cancelButton.setEnabled(false);          editable = false;        } else {          refreshCurrentData(false);          addButton.setEnabled(false);          delButton.setEnabled(false);          saveButton.setEnabled(false);          okButton.setEnabled(true);          clearButton.setEnabled(true);          cancelButton.setEnabled(true);          editable = true;        }      }    });    delButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        self.doDelete();      }    });    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        self.doAdd();      }    });    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        self.doSave();      }    });    okButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        self.doOK();      }    });  }}