package com.ufgov.zc.client.component.element;import java.awt.Dialog;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JOptionPane;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.DefaultTreeModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.JButtonTextField;import com.ufgov.zc.client.component.JTreeSelectDialog;import com.ufgov.zc.client.datacache.OutlayDataCache;import com.ufgov.zc.client.util.NumLimUtil;import com.ufgov.zc.common.commonbiz.model.Outlay;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;public class OutlayTreeSelectDialog extends JTreeSelectDialog {  public OutlayTreeSelectDialog(Dialog owner, boolean modal, JButtonTextField triggerField) {    super(owner, modal, triggerField);  }  protected void initTitle() {    LangTransMeta.init("GK%");    this.setTitle(LangTransMeta.translate("GK_TITLE_OUTLAY"));  }  protected void initDataBufferList() {    String baseDataServiceDelegateName = "baseDataServiceDelegate";    IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory    .create(IBaseDataServiceDelegate.class, baseDataServiceDelegateName);    int nd = WorkEnv.getInstance().getTransNd();    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    ElementConditionDto dto = new ElementConditionDto();    dto.setNd(nd);    //		this.dataBufferList=baseDataServiceDelegate.getOutlay(dto,requestMeta);    this.dataBufferList = OutlayDataCache.getOutlay();    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(triggerField.compoId, NumLimConstants.FWATCH, triggerField.elementCode));    if (dto.getNumLimitStr() == null) {      this.numLimDataList = dataBufferList;    } else {      this.numLimDataList = baseDataServiceDelegate.getOutlay(dto, requestMeta);    }    for (Object o : dataBufferList) {      Outlay temp = (Outlay) o;      this.triggerField.dataMap.put(temp.getCode(), temp);    }    this.triggerField.filteredDataList = dataBufferList;  }  private List genTreeData() {    List filteredList = genFilterDataList();    Map map = new HashMap();    for (Object o : filteredList) {      Outlay temp = (Outlay) o;      map.put(temp.getCode(), temp);    }    List rootOutlayList = new ArrayList();    List childrenOutlayList = new ArrayList();    for (Object o : filteredList) {      Outlay temp = (Outlay) o;      if (map.get(temp.getParentCode()) == null) {        rootOutlayList.add(temp);      } else {        childrenOutlayList.add(temp);      }    }    Map childrenMap = new HashMap();    for (int i = 0; i < childrenOutlayList.size(); i++) {      Outlay child = (Outlay) childrenOutlayList.get(i);      List childrenList = (List) childrenMap.get(child.getParentCode());      if (childrenList != null) {        childrenList.add(child);      } else {        List tempList = new ArrayList();        tempList.add(child);        childrenMap.put(child.getParentCode(), tempList);      }    }    for (int i = 0; i < rootOutlayList.size(); i++) {      Outlay root = (Outlay) rootOutlayList.get(i);      this.setOutlayChildren(root, childrenMap);    }    return rootOutlayList;  }  private List genFilterDataList() {    List prefixFilteredOutlayList = new ArrayList();    List levelCtrlFilteredOutlayList = new ArrayList();    if (!this.triggerField.isRandomEdit()) {      if (this.triggerField.getPrefix() == null) {        this.triggerField.setPrefix("");      }      for (Object o : dataBufferList) {        Outlay temp = (Outlay) o;        if (temp.getCode().startsWith(this.triggerField.getPrefix())) {          prefixFilteredOutlayList.add(temp);        }      }    }    if (this.triggerField.isLevelCtrl() && this.triggerField.getCtrlLevelNum() > 0) {      for (Object o : dataBufferList) {        Outlay temp = (Outlay) o;        if (temp.getLevel() <= this.triggerField.getCtrlLevelNum()) {          levelCtrlFilteredOutlayList.add(temp);        }      }    }    List filteredList = null;    if (this.triggerField.isRandomEdit() && !this.triggerField.isLevelCtrl()) {      filteredList = this.dataBufferList;    } else if (!this.triggerField.isRandomEdit() && !this.triggerField.isLevelCtrl()) {      filteredList = prefixFilteredOutlayList;    }    else if (this.triggerField.isRandomEdit() && this.triggerField.isLevelCtrl()) {      filteredList = levelCtrlFilteredOutlayList;    } else {      filteredList = new ArrayList();      for (Object o : prefixFilteredOutlayList) {        if (levelCtrlFilteredOutlayList.contains(o)) {          filteredList.add(o);        }      }    }    return filteredList;  }  private void setOutlayChildren(Outlay outlay,  Map childrenMap) {    List childrenList = (List) childrenMap.get(outlay.getCode());    if (childrenList != null) {      outlay.setChildren(childrenList);      for (int i = 0; i < childrenList.size(); i++) {        Outlay c = (Outlay) childrenList.get(i);        setOutlayChildren(c, childrenMap);      }    }  }  protected void initSelectTree() {    DefaultMutableTreeNode root = new DefaultMutableTreeNode("经济分类");    this.triggerField.filteredDataList = this.genFilterDataList();    List outlayList = this.genTreeData();    for (Object o : outlayList) {      Outlay outlay = (Outlay) o;      if (this.isNumLimContain(outlay)) {        DefaultMutableTreeNode node = new DefaultMutableTreeNode(        outlay);        root.add(node);        treeNodeMap.put(outlay, node);        this.setChildNode(outlay, node);      }    }    this.getSelectTree().setModel(new DefaultTreeModel(root));  }  private void setChildNode(Outlay outlay, DefaultMutableTreeNode node) {    if (outlay.getChildren().size() > 0) {      for (Object o : outlay.getChildren()) {        Outlay c = (Outlay) o;        if (this.isNumLimContain(c)) {          DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(c);          node.add(childNode);          treeNodeMap.put(c, childNode);          setChildNode(c, childNode);        }      }    }  }  public void doOK() {    if (this.triggerField.isLevelCtrl()) {      DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectTree      .getLastSelectedPathComponent();      if (node == null) {        return;      }      if (!node.isLeaf()) {        JOptionPane.showMessageDialog(self, "只能选择叶子节点!", "提示",        JOptionPane.INFORMATION_MESSAGE);        return;      }    }    super.doOK();  }}