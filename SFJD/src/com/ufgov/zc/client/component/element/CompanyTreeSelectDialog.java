package com.ufgov.zc.client.component.element;import java.awt.Dialog;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JOptionPane;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.DefaultTreeModel;import javax.swing.tree.TreePath;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.JButtonTextField;import com.ufgov.zc.client.component.JTreeSelectDialog;import com.ufgov.zc.client.datacache.CompanyDataCache;import com.ufgov.zc.client.util.NumLimUtil;import com.ufgov.zc.common.commonbiz.model.Company;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.MaElementConstants;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityTreeHandler;public class CompanyTreeSelectDialog extends JTreeSelectDialog {  private IForeignEntityTreeHandler handler;  public CompanyTreeSelectDialog(Dialog owner, boolean modal, JButtonTextField triggerField) {    super(owner, modal, triggerField, true);  }  public CompanyTreeSelectDialog(Dialog owner, boolean modal, JButtonTextField triggerField, IForeignEntityTreeHandler handler) {    this(owner, modal, triggerField);    this.handler = handler;  }  @Override  protected void initTitle() {    LangTransMeta.init("GK%");    this.setTitle(LangTransMeta.translate(MaElementConstants.TITLE_TRANSGK_ZC_TITLE_COMPANY));  }  @Override  protected void initDataBufferList() {    String baseDataServiceDelegateName = "baseDataServiceDelegate";    IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(IBaseDataServiceDelegate.class,      baseDataServiceDelegateName);    int nd = WorkEnv.getInstance().getTransNd();    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    ElementConditionDto dto = new ElementConditionDto();    dto.setNd(nd);    //    this.dataBufferList = baseDataServiceDelegate.getCompany(dto, requestMeta);    this.dataBufferList = (List) ObjectUtil.deepCopy(CompanyDataCache.getCompany());        String numLimitStr = NumLimUtil.getInstance().getNumLimCondByCoType(triggerField.compoId, NumLimConstants.FWATCH, triggerField.elementCode);    if (numLimitStr == null) {      this.numLimDataList = this.dataBufferList;    } else {      if (!"CO_CODE".equals(triggerField.elementCode)) {        numLimitStr = numLimitStr.replaceAll(triggerField.elementCode, "CO_CODE");      }      dto.setNumLimitStr(numLimitStr);      this.numLimDataList = baseDataServiceDelegate.getCompany(dto, requestMeta);      this.dataBufferList = this.numLimDataList;    }    for (Object o : dataBufferList) {      Company cpy = (Company) o;      this.triggerField.dataMap.put(cpy.getCode(), cpy);    }    this.triggerField.filteredDataList = dataBufferList;  }  private List genTreeData() {    List filteredList = genFilterDataList();    Map map = new HashMap();    for (Object o : filteredList) {      Company cpy = (Company) o;      map.put(cpy.getCode(), cpy);    }    List rootCompanyList = new ArrayList();    List childrenCompanyList = new ArrayList();    for (Object o : filteredList) {                Company cpy = (Company) o;            if("000".equals(cpy.getCode())){//不显示虚拟财政局,by chenjl 20130814        continue;      }      if (map.get(cpy.getParentCode()) == null) {        rootCompanyList.add(cpy);      } else {        childrenCompanyList.add(cpy);      }    }    Map childrenMap = new HashMap();    for (int i = 0; i < childrenCompanyList.size(); i++) {      Company child = (Company) childrenCompanyList.get(i);      List childrenList = (List) childrenMap.get(child.getParentCode());      if (childrenList != null) {        childrenList.add(child);      } else {        List tempList = new ArrayList();        tempList.add(child);        childrenMap.put(child.getParentCode(), tempList);      }    }    for (int i = 0; i < rootCompanyList.size(); i++) {      Company company = (Company) rootCompanyList.get(i);      this.setCompanyChildren(company, childrenMap);    }    return rootCompanyList;  }  private List genFilterDataList() {    List prefixFilteredCompanyList = new ArrayList();    List levelCtrlFilteredCompanyList = new ArrayList();    if (!this.triggerField.isRandomEdit()) {      if (this.triggerField.getPrefix() == null) {        this.triggerField.setPrefix("");      }      for (Object o : dataBufferList) {        Company c = (Company) o;        if (c.getCode().startsWith(this.triggerField.getPrefix())) {          prefixFilteredCompanyList.add(c);        }      }    }    if (this.triggerField.isLevelCtrl()) {      for (Object o : dataBufferList) {        Company c = (Company) o;        if (c.getCode().length() <= this.triggerField.getCtrlLen()) {          levelCtrlFilteredCompanyList.add(c);        }      }    }    List filteredList = null;    if (this.triggerField.isRandomEdit() && !this.triggerField.isLevelCtrl()) {      filteredList = this.dataBufferList;    } else if (!this.triggerField.isRandomEdit() && !this.triggerField.isLevelCtrl()) {      filteredList = prefixFilteredCompanyList;    } else if (this.triggerField.isRandomEdit() && this.triggerField.isLevelCtrl()) {      filteredList = levelCtrlFilteredCompanyList;    } else {      filteredList = new ArrayList();      for (Object o : prefixFilteredCompanyList) {        if (levelCtrlFilteredCompanyList.contains(o)) {          filteredList.add(o);        }      }    }    return filteredList;  }  private void setCompanyChildren(Company company, Map childrenMap) {    List childrenList = (List) childrenMap.get(company.getCode());    if (childrenList != null) {      company.setChildren(childrenList);      for (int i = 0; i < childrenList.size(); i++) {        Company c = (Company) childrenList.get(i);        setCompanyChildren(c, childrenMap);      }    }  }  @Override  protected void initSelectTree() {    DefaultMutableTreeNode root = new DefaultMutableTreeNode("单位");    this.triggerField.filteredDataList = this.genFilterDataList();    List companyTreeList = genTreeData();    treeNodeMap.clear();    for (Object o : companyTreeList) {      Company company = (Company) o;      if (isNumLimContain(company)) {        DefaultMutableTreeNode node = new DefaultMutableTreeNode(company);        root.add(node);        treeNodeMap.put(company, node);        this.setChildNode(company, node);      }    }    this.getSelectTree().setModel(new DefaultTreeModel(root));  }  private void setChildNode(Company company, DefaultMutableTreeNode node) {    if (company.getChildren().size() > 0) {      for (Object o : company.getChildren()) {        Company c = (Company) o;        if (isNumLimContain(c)) {          DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(c);          node.add(childNode);          treeNodeMap.put(c, childNode);          setChildNode(c, childNode);        }      }    }  }  @Override  public void doOK() {    DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectTree.getLastSelectedPathComponent();    if (this.triggerField.isLevelCtrl()) {      if (node == null) {        return;      }      if (!node.isLeaf()) {        JOptionPane.showMessageDialog(self, "只能选择叶子节点!", "提示", JOptionPane.INFORMATION_MESSAGE);        return;      }    }    super.doOK();    if (this.handler != null) {      TreePath[] tps = selectTree.getSelectionPaths();      ArrayList selectDatas = new ArrayList();      if (tps != null && tps.length > 0) {        for (TreePath tp : tps) {          DefaultMutableTreeNode nd = (DefaultMutableTreeNode) tp.getLastPathComponent();          selectDatas.add(nd.getUserObject());        }        this.handler.excute(selectDatas);      }    }  }}