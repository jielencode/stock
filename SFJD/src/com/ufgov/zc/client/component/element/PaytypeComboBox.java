package com.ufgov.zc.client.component.element;import java.awt.BorderLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JFrame;import javax.swing.JPanel;import javax.swing.event.PopupMenuEvent;import javax.swing.event.PopupMenuListener;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.datacache.PaytypeDataCache;import com.ufgov.zc.client.util.ElementRelationUtil;import com.ufgov.zc.client.util.GkGetDataRuleUtil;import com.ufgov.zc.client.util.NumLimUtil;import com.ufgov.zc.common.commonbiz.model.BaseBill;import com.ufgov.zc.common.commonbiz.model.Paytype;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.dp.model.DpDetail;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;public class PaytypeComboBox extends EditCtrlComboBox {  private static final long serialVersionUID = -5711917486387837460L;  private BaseBill bill;  private String dataRuleId = null;  private List filterList = null;  private boolean isPopupRebuild = true;  public String getDataRuleId() {    return dataRuleId;  }  public void setDataRuleId(String dataRuleId) {    this.dataRuleId = dataRuleId;  }  private Map<String, Paytype> dataMap = new HashMap<String, Paytype>();  public PaytypeComboBox() {    super();    init(null);    initDataBufferList();  }  public PaytypeComboBox(String dataRuleId) {    super();    init(null);    this.dataRuleId = dataRuleId;    initDataBufferList();  }  public PaytypeComboBox(String dataRuleId, boolean isPopupRebuild) {    super();    init(null);    this.dataRuleId = dataRuleId;    this.isPopupRebuild = isPopupRebuild;    initDataBufferList();  }  public PaytypeComboBox(List filterList, boolean isPopupRebuild) {    super();    init(null);    this.filterList = filterList;    this.isPopupRebuild = isPopupRebuild;    initDataBufferList();  }  public PaytypeComboBox(String compoId, String dataRuleId) {    super();    init(compoId);    this.dataRuleId = dataRuleId;    initDataBufferList();  }  private void init(String compoId) {    this.compoId = compoId;    this.elementCode = "PAYTYPE_CODE";    this.addItemListener(new ItemListener() {      public void itemStateChanged(ItemEvent e) {        if (((Paytype) getSelectedItem()) != null) {          Paytype data = (Paytype) getSelectedItem();          setToolTipText("[" + data.getCode() + "]" + data.getName());        } else {          setToolTipText(null);        }      }    });  }  private void initDataBufferList() {    int nd = WorkEnv.getInstance().getTransNd();    IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(    IBaseDataServiceDelegate.class, "baseDataServiceDelegate");    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    ElementConditionDto dto = new ElementConditionDto();    dto.setNd(nd);    dataBufferList = PaytypeDataCache.getPaytype();    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(compoId, NumLimConstants.FWATCH,    elementCode));    dto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance().getDataRuleCondiStr(dataRuleId));    if (dto.getNumLimitStr() == null && dto.getDataRuleCondiStr() == null) {      numLimDataList = dataBufferList;    } else {      numLimDataList = baseDataServiceDelegate.getPaytype(dto, requestMeta);    }    for (int i = 0; i < dataBufferList.size(); i++) {      Paytype data = (Paytype) dataBufferList.get(i);      this.dataMap.put(data.getCode(), data);    }  }  public BaseBill getBill() {    return bill;  }  public void setBill(BaseBill bill) {    this.bill = bill;    Paytype p = this.getSelectedPaytype();    this.initComboBox();    this.setSelectedPaytype(p);  }  public void rebuildComboBox() {    Paytype paytype = this.getSelectedPaytype();    List dataList = BaseElementDataFilter.doFilter(dataBufferList, randomEdit, prefix, levelCtrl,    ctrlLevelNum);    dataList = BaseElementDataFilter.doNumLimFilter(dataList, numLimDataList);    if (compoId != null) {      dataList = ElementRelationUtil.filterElementByRelation(compoId, bill, this.elementCode, dataList);    }    initComboBox(dataList);    this.setSelectedItem(paytype);  }  private void initComboBox(List dataList) {    this.removeAllItems();    this.addItem(null);    this.dataMap.clear();    for (int i = 0; i < dataList.size(); i++) {      Paytype data = (Paytype) dataList.get(i);      if (filterList == null) {        this.addItem(data);        this.addItemDisplaLable(data, "[" + data.getCode() + "]" + data.getName());        this.dataMap.put(data.getCode(), data);      } else if (filterList.contains(data.getCode())) {        this.addItem(data);        this.addItemDisplaLable(data, "[" + data.getCode() + "]" + data.getName());        this.dataMap.put(data.getCode(), data);      }    }  }  public void initComboBox() {    List dataList = dataBufferList;    if (isPopupRebuild) {      initComboBox(dataList);      this.addPopupMenuListener(new PopupMenuListener() {        public void popupMenuWillBecomeVisible(PopupMenuEvent e) {          rebuildComboBox();        }        public void popupMenuCanceled(PopupMenuEvent e) {        }        public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {        }      });    } else {      rebuildComboBox();    }  }  public Paytype getSelectedPaytype() {    return (Paytype) this.getSelectedItem();  }  public void setSelectedPaytype(Paytype paytype) {    this.setSelectedItem(paytype);  }  public void setSelectedPaytypeByCode(String paytypeCode) {    Paytype paytype = dataMap.get(paytypeCode);    this.setSelectedItem(paytype);  }  public static void main(String[] args) {    JFrame f = new JFrame();    final PaytypeComboBox textField = new PaytypeComboBox("DP_EDIT", null);    textField.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        System.out.println("***********" + textField.getSelectedPaytype());      }    });    textField.setEditable(false);    textField.setEnabled(false);    textField.setEnabled(true);    //		textField.setLevelCtrl(true);    textField.setCtrlLevelNum(2);    //    textField.setRandomEdit(false);    //    		textField.setPrefix("02");    textField.initComboBox();    textField.setSelectedPaytypeByCode("0201");    //    textField.setSelectedIndex(1);    DpDetail bill = new DpDetail();    bill.setPayoutCode("01");    bill.setCoCode("608");    //    textField.setBill(bill);    JPanel panel = new JPanel();    panel.add(textField);    f.getContentPane().add(panel, BorderLayout.NORTH);    // f.pack();    // SwingUtilities.updateComponentTreeUI(panel);    f.setSize(400, 300);    f.setLocationRelativeTo(null);    f.setVisible(true);    f.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent e) {        System.exit(0);      }    });  }}