package com.ufgov.zc.client.component.element;import java.awt.Dialog;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JOptionPane;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.DefaultTreeModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.JButtonTextField;import com.ufgov.zc.client.component.JTreeSelectDialog;import com.ufgov.zc.client.datacache.OriginDataCache;import com.ufgov.zc.client.util.GkGetDataRuleUtil;import com.ufgov.zc.client.util.NumLimUtil;import com.ufgov.zc.common.commonbiz.model.Origin;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;public class OriginTreeSelectDialog extends JTreeSelectDialog {  public OriginTreeSelectDialog(Dialog dialog, boolean modal,  JButtonTextField triggerField) {    super(dialog, modal, triggerField);  }  /**   *    */  private static final long serialVersionUID = -4407933154954926841L;  public void initTitle() {    LangTransMeta.init("GK%");    this.setTitle(LangTransMeta.translate("GK_TITLE_ORIGIN"));  }  protected void initDataBufferList() {    int nd = WorkEnv.getInstance().getTransNd();    IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory    .create(IBaseDataServiceDelegate.class, "baseDataServiceDelegate");    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    ElementConditionDto dto = new ElementConditionDto();    dto.setNd(nd);    dataBufferList = OriginDataCache.getOrigin();    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(    triggerField.compoId, NumLimConstants.FWATCH, triggerField.elementCode));    String dataRuleId = ((OriginTreeSelectField) this.triggerField).getDataRuleId();    dto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance().getDataRuleCondiStr(    dataRuleId));    if (dto.getNumLimitStr() == null && dto.getDataRuleCondiStr() == null) {      numLimDataList = dataBufferList;    } else {      numLimDataList = baseDataServiceDelegate.getOrigin(dto, requestMeta);    }    for (int i = 0; i < dataBufferList.size(); i++) {      Origin rowData = (Origin) dataBufferList.get(i);      this.triggerField.dataMap.put(rowData.getCode(), rowData);    }    this.triggerField.filteredDataList = dataBufferList;  }  private List genTreeData() {    List filteredList = genFilteredDataList();    Map map = new HashMap();    for (Object o : filteredList) {      Origin temp = (Origin) o;      map.put(temp.getCode(), temp);    }    List rootOriginList = new ArrayList();    List childrenOriginList = new ArrayList();    for (Object o : filteredList) {      Origin temp = (Origin) o;      if (map.get(temp.getParentCode()) == null) {        rootOriginList.add(temp);      } else {        childrenOriginList.add(temp);      }    }    Map childrenMap = new HashMap();    for (int i = 0; i < childrenOriginList.size(); i++) {      Origin child = (Origin) childrenOriginList.get(i);      List childrenList = (List) childrenMap.get(child.getParentCode());      if (childrenList != null) {        childrenList.add(child);      } else {        List tempList = new ArrayList();        tempList.add(child);        childrenMap.put(child.getParentCode(), tempList);      }    }    for (int i = 0; i < rootOriginList.size(); i++) {      Origin root = (Origin) rootOriginList.get(i);      this.setOriginChildren(root, childrenMap);    }    return rootOriginList;  }  private List genFilteredDataList() {    List prefixFilteredOriginList = new ArrayList();    List levelCtrlFilteredOriginList = new ArrayList();    if (!this.triggerField.isRandomEdit()) {      if (this.triggerField.getPrefix() == null) {        this.triggerField.setPrefix("");      }      for (Object o : dataBufferList) {        Origin temp = (Origin) o;        if (temp.getCode().startsWith(this.triggerField.getPrefix())) {          prefixFilteredOriginList.add(temp);        }      }    }    if (this.triggerField.isLevelCtrl()) {      for (Object o : dataBufferList) {        Origin temp = (Origin) o;        if (temp.getCode().length() <= this.triggerField.getCtrlLen()) {          levelCtrlFilteredOriginList.add(temp);        }      }    }    List filteredList = null;    if (this.triggerField.isRandomEdit() && !this.triggerField.isLevelCtrl()) {      filteredList = this.dataBufferList;    } else if (!this.triggerField.isRandomEdit() && !this.triggerField.isLevelCtrl()) {      filteredList = prefixFilteredOriginList;    } else if (this.triggerField.isRandomEdit() && this.triggerField.isLevelCtrl()) {      filteredList = levelCtrlFilteredOriginList;    } else {      filteredList = new ArrayList();      for (Object o : prefixFilteredOriginList) {        if (levelCtrlFilteredOriginList.contains(o)) {          filteredList.add(o);        }      }    }    return filteredList;  }  private void setOriginChildren(Origin v, Map childrenMap) {    List childrenList = (List) childrenMap.get(v.getCode());    if (childrenList != null) {      v.setChildren(childrenList);      for (int i = 0; i < childrenList.size(); i++) {        Origin c = (Origin) childrenList.get(i);        setOriginChildren(c, childrenMap);      }    }  }  protected void initSelectTree() {    DefaultMutableTreeNode root = new DefaultMutableTreeNode("指标来源");    this.triggerField.filteredDataList = this.genFilteredDataList();    List bAccList = genTreeData();    treeNodeMap.clear();    for (Object o : bAccList) {      Origin v = (Origin) o;      if (isNumLimContain(v)) {        DefaultMutableTreeNode node = new DefaultMutableTreeNode(v);        root.add(node);        treeNodeMap.put(v, node);        this.setChildNode(v, node);      }    }    this.getSelectTree().setModel(new DefaultTreeModel(root));  }  private void setChildNode(Origin v, DefaultMutableTreeNode node) {    if (v.getChildren().size() > 0) {      for (Object o : v.getChildren()) {        Origin c = (Origin) o;        if (isNumLimContain(c)) {          DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(c);          node.add(childNode);          treeNodeMap.put(c, childNode);          setChildNode(c, childNode);        }      }    }  }  public void doOK() {    if (this.triggerField.isLevelCtrl()) {      DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectTree      .getLastSelectedPathComponent();      if (node == null) {        return;      }      if (!node.isLeaf()) {        JOptionPane.showMessageDialog(self, "只能选择叶子节点!", "提示",        JOptionPane.INFORMATION_MESSAGE);        return;      }    }    super.doOK();  }}