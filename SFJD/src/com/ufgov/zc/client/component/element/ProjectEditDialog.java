/** * */package com.ufgov.zc.client.component.element;import java.awt.BorderLayout;import java.awt.FlowLayout;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTextField;import javax.swing.JTree;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.TreePath;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.datacache.ProjectDataCache;import com.ufgov.zc.common.commonbiz.model.Company;import com.ufgov.zc.common.commonbiz.model.Project;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;public class ProjectEditDialog extends GkBaseDialog {  private ProjectEditDialog self = this;  private static final long serialVersionUID = 3472273909692910630L;  private JLabel codeLabel = new JLabel("项目代码：");  private JTextField codeField = new JTextField(20);  private JLabel nameLabel = new JLabel("项目名称：");  private JTextField nameField = new JTextField(50);  private JLabel coLabel = new JLabel("单位：");  private CompanyTreeSelectField coField = new CompanyTreeSelectField();  private JButton saveButton;  private JButton cancelButton;  private JTree tree;  private ProjectEditableTreeSelectDialog dialog;  private String editStatus = "new";  public static final String NEW = "new";  public static final String UPDATE = "update";  private Project editingProject;  public ProjectEditDialog(ProjectEditableTreeSelectDialog owner,  ModalityType modalityType, JTree tree) {    super(owner, modalityType);    this.tree = tree;    this.dialog = owner;    init();  }  public ProjectEditDialog(ProjectEditableTreeSelectDialog owner,  ModalityType modalityType, JTree tree, Project oldProject) {    super(owner, modalityType);    this.tree = tree;    this.dialog = owner;    editStatus = UPDATE;    this.editingProject = oldProject;    init();  }  private void init() {    this.getContentPane().setLayout(new BorderLayout());    JPanel contentPanel = new JPanel();    int gridx, gridy, gridwidth, gridheight, anchor, fill, ipadx, ipady;    double weightx, weighty;    Insets inset;    gridwidth = 1;    gridheight = 1;    weightx = 1;    weighty = 1;    ipadx = 0;    ipady = 0;    fill = GridBagConstraints.NONE;    inset = new Insets(2, 2, 2, 2);    GridBagLayout gblBasic = new GridBagLayout();    contentPanel.setLayout(gblBasic);    gridx = 0;    gridy = 0;    anchor = GridBagConstraints.EAST;    fill = GridBagConstraints.HORIZONTAL;    gblBasic.setConstraints(codeLabel, new GridBagConstraints(gridx, gridy,    gridwidth, gridheight, weightx, weighty, anchor, fill, inset, ipadx, ipady));    contentPanel.add(codeLabel);    gridx = 1;    gridy = 0;    anchor = GridBagConstraints.WEST;    fill = GridBagConstraints.HORIZONTAL;    gblBasic.setConstraints(codeField, new GridBagConstraints(gridx, gridy,    gridwidth, gridheight, weightx, weighty, anchor, fill, inset, ipadx, ipady));    contentPanel.add(codeField);    gridx = 0;    gridy = 1;    anchor = GridBagConstraints.EAST;    fill = GridBagConstraints.HORIZONTAL;    gblBasic.setConstraints(nameLabel, new GridBagConstraints(gridx, gridy,    gridwidth, gridheight, weightx, weighty, anchor, fill, inset, ipadx, ipady));    contentPanel.add(nameLabel);    gridx = 1;    gridy = 1;    anchor = GridBagConstraints.WEST;    fill = GridBagConstraints.HORIZONTAL;    gblBasic.setConstraints(nameField, new GridBagConstraints(gridx, gridy,    gridwidth, gridheight, weightx, weighty, anchor, fill, inset, ipadx, ipady));    contentPanel.add(nameField);    gridx = 0;    gridy = 2;    anchor = GridBagConstraints.EAST;    fill = GridBagConstraints.HORIZONTAL;    gblBasic.setConstraints(coLabel, new GridBagConstraints(gridx, gridy, gridwidth,    gridheight, weightx, weighty, anchor, fill, inset, ipadx, ipady));    contentPanel.add(coLabel);    gridx = 1;    gridy = 2;    anchor = GridBagConstraints.WEST;    fill = GridBagConstraints.HORIZONTAL;    gblBasic.setConstraints(coField, new GridBagConstraints(gridx, gridy, gridwidth,    gridheight, weightx, weighty, anchor, fill, inset, ipadx, ipady));    contentPanel.add(coField);    this.getContentPane().add(contentPanel, BorderLayout.CENTER);    if (this.editStatus == UPDATE) {      this.codeField.setEnabled(false);      this.codeField.setText(this.editingProject.getCode());      this.nameField.setText(this.editingProject.getName());      this.coField.setValueByCode(this.editingProject.getPdCreaCoCode());    } else {      DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree      .getLastSelectedPathComponent();      if (node == null) {        return;      }      if (!node.isRoot()) {        Project parent = (Project) node.getUserObject();        String id = genID(parent.getCode(), node.getChildCount());        this.codeField.setText(id);      }    }    JPanel panel = new JPanel();    panel.setLayout(new FlowLayout(FlowLayout.RIGHT));//FlowLayout    saveButton = new JButton("保存");    cancelButton = new JButton("关闭");    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave();      }    });    cancelButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        self.closeDialog();      }    });    panel.add(saveButton);    panel.add(cancelButton);    this.getContentPane().add(panel, BorderLayout.SOUTH);    this.setSize(350, 200);    this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);    this.moveToScreenCenter();    this.setTitle("项目");    this.setVisible(true);  }  private IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory  .create(IBaseDataServiceDelegate.class, "baseDataServiceDelegate");  private void doSave() {    if (this.editStatus == NEW) {      insert();    } else {      update();    }  }  private void update() {    this.editingProject.setName(this.nameField.getText().trim());    Company company = this.coField.getCompany();    if (company != null) {      editingProject.setPdCreaCoCode(company.getCode());    }    if (editingProject.getName() == null || editingProject.getName().equals("")) {      JOptionPane.showMessageDialog(this, "项目名称不能为空", "提示",      JOptionPane.INFORMATION_MESSAGE);      return;    }    if (this.baseDataServiceDelegate.projectNameExistSelfExcluded(editingProject,    WorkEnv.getInstance().getRequestMeta())) {      JOptionPane.showMessageDialog(this, editingProject.getName() + "已存在", "提示",      JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    try {      this.baseDataServiceDelegate.savePdProject(editingProject, WorkEnv      .getInstance().getRequestMeta());    } catch (Exception ex) {      logger.error(ex.getMessage(), ex);      success = false;    }    if (success) {      JOptionPane.showMessageDialog(this, "保存成功！", "提示",      JOptionPane.INFORMATION_MESSAGE);      this.dialog.repaint();      this.tree.invalidate();      this.tree.revalidate();      this.tree.repaint();    } else {      JOptionPane.showMessageDialog(this, "保存失败！", "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void insert() {    DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree    .getLastSelectedPathComponent();    if (node == null) {      return;    }    int nd = WorkEnv.getInstance().getTransNd();    Project newProject = new Project();    if (!node.isRoot()) {      Project parent = (Project) node.getUserObject();      newProject.setParentCode(parent.getCode());    }    newProject.setNd(nd);    newProject.setCode(this.codeField.getText().trim());    newProject.setName(this.nameField.getText().trim());    newProject.setLevel(node.getLevel() + 1);    newProject.setPdProjectLevel((node.getLevel() + 1) + "");    newProject.setPdCreateUserId(WorkEnv.getInstance().getCurrUserId());    newProject.setPdCreateDate(WorkEnv.getInstance().getTransDate());    newProject.setPdVersionId("gk");    Company company = this.coField.getCompany();    if (company != null) {      newProject.setPdCreaCoCode(company.getCode());    }    if (newProject.getCode() == null || newProject.getCode().equals("")) {      JOptionPane.showMessageDialog(this, "项目代码不能为空", "提示",      JOptionPane.INFORMATION_MESSAGE);      return;    }    if (newProject.getCode().length() > getProjectLen() || newProject.getCode().length() != getProjectLevelLenMap().get(newProject.getLevel())) {      JOptionPane.showMessageDialog(this, "项目代码不符合编码格式" + AsOptionMeta.getOptVal("OPT_PD_PROJECT_LEVEL"), "提示",      JOptionPane.INFORMATION_MESSAGE);      return;    }    if (newProject.getName() == null || newProject.getName().equals("")) {      JOptionPane.showMessageDialog(this, "项目名称不能为空", "提示",      JOptionPane.INFORMATION_MESSAGE);      return;    }    if (this.baseDataServiceDelegate.projectCodeExist(newProject, WorkEnv    .getInstance().getRequestMeta())) {      JOptionPane.showMessageDialog(this, newProject.getCode() + "已存在", "提示",      JOptionPane.INFORMATION_MESSAGE);      return;    }    if (this.baseDataServiceDelegate.projectNameExist(newProject, WorkEnv    .getInstance().getRequestMeta())) {      JOptionPane.showMessageDialog(this, newProject.getName() + "已存在", "提示",      JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    try {      this.baseDataServiceDelegate.savePdProject(newProject, WorkEnv.getInstance()      .getRequestMeta());    } catch (Exception ex) {      logger.error(ex.getMessage(), ex);      success = false;    }    if (success) {      JOptionPane.showMessageDialog(this, "保存成功！", "提示",      JOptionPane.INFORMATION_MESSAGE);      ProjectDataCache.refreshData();      dialog.refreshTree();      if (!node.isRoot()) {        Project parent = (Project) node.getUserObject();        TreePath path = new TreePath((dialog.getTreeNodeMap().get(parent)).getPath());        tree.setSelectionPath(path);        tree.expandPath(path);      }      self.closeDialog();    } else {      JOptionPane.showMessageDialog(this, "保存失败！", "错误", JOptionPane.ERROR_MESSAGE);    }  }  public static int getProjectLen() {    String elementCodeTemplate = AsOptionMeta.getOptVal("OPT_PD_PROJECT_LEVEL");    int len = 0;    if (elementCodeTemplate != null && !elementCodeTemplate.trim().equals("")) {      String[] nums = elementCodeTemplate.split("-");      for (int i = 0; i < nums.length; i++) {        len += Integer.parseInt(nums[i]);      }    }    return len;  }  public static Map<Integer, Integer> getProjectLevelLenMap() {    Map<Integer, Integer> levelLenMap = new HashMap<Integer, Integer>();    String elementCodeTemplate = AsOptionMeta.getOptVal("OPT_PD_PROJECT_LEVEL");    int len = 0;    if (elementCodeTemplate != null && !elementCodeTemplate.trim().equals("")) {      String[] nums = elementCodeTemplate.split("-");      for (int i = 0; i < nums.length; i++) {        len += Integer.parseInt(nums[i]);        levelLenMap.put(i + 1, len);      }    }    return levelLenMap;  }  public static String genID(String parentProjectCode, int childrenNum) {    String elementCodeTemplate = AsOptionMeta.getOptVal("OPT_PD_PROJECT_LEVEL");    String id = parentProjectCode;    Map<Integer, Integer> levelLenMap = getProjectLevelLenMap();    Iterator<Integer> it = levelLenMap.keySet().iterator();    boolean found = false;    int levelFound = 0;    while (it.hasNext()) {      Integer key = it.next();      Integer len = levelLenMap.get(key);      if (len == parentProjectCode.length()) {        found = true;        levelFound = key;      }    }    if (!found) {      throw new RuntimeException("项目代码[" + parentProjectCode + "]不符合编码格式"      + elementCodeTemplate);    }    int childlen = levelLenMap.get(levelFound + 1) - parentProjectCode.length();    String tempId = (childrenNum + 1) + "";    int tempIdLen = tempId.length();    for (int i = 1; i <= childlen - tempIdLen; i++) {      tempId = "0" + tempId;    }    id = id + tempId;    return id;  }}