package com.ufgov.zc.client.component;import java.awt.BorderLayout;import java.awt.Dialog;import java.awt.FlowLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Vector;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JPanel;import javax.swing.WindowConstants;import javax.swing.table.DefaultTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.UIConstants;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.console.DataEditArea;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.model.AsCompo;import com.ufgov.zc.common.system.model.AsTabCol;public class OrderSelectStringField extends JButtonTextField {  private IBaseDataServiceDelegate baseDataServiceDelegate;  private FieldSelectDialog fieldSelectDialog;  private AsCompo asCompo;  public OrderSelectStringField(AsCompo asCompo) {    super();    this.asCompo = asCompo;    fieldSelectDialog = new FieldSelectDialog(owner, true, "选择字段", this.asCompo);  }  @Override  public void handleClick(JButtonTextField buttonTextField) {    fieldSelectDialog.setVisible(true);    setText(fieldSelectDialog.getSelectFields());  }  class FieldSelectDialog extends GkBaseDialog {    private FieldSelectDialog self = this;    private RequestMeta requestMeta;    private JButton okBtn = new JButton("确定");    private JButton cancelBtn = new JButton("取消");    private DataEditArea editArea = new DataEditArea("", "");    private Map<String, Vector> asTabColMap;    private String selectFields;    private String orderStr = "";    private AsCompo asCompo;    public FieldSelectDialog(Dialog dialog, boolean modal, String title, AsCompo asCompo) {      super(dialog, modal);      this.setTitle(title);      this.setSize(UIConstants.DIALOG_4_LEVEL_WIDTH, UIConstants.DIALOG_4_LEVEL_HEIGHT);      this.moveToScreenCenter();      this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);      requestMeta = WorkEnv.getInstance().getRequestMeta();      initService();      initGUI();      this.asCompo = asCompo;      orderStr = asCompo.getOrderColumns();      refreshData();    }    private void initGUI() {      getContentPane().setLayout(new BorderLayout());      add(editArea, BorderLayout.CENTER);      JPanel panel = new JPanel(new FlowLayout(FlowLayout.CENTER));      panel.add(okBtn);      panel.add(cancelBtn);      okBtn.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          orderStr = "";          List dataList = editArea.getAfterEditTableData();          Iterator itr = dataList.iterator();          while (itr.hasNext()) {            Vector row = (Vector) itr.next();            if (row.get(2) != null && row.get(2).toString().length() > 0) {              orderStr += "," + row.get(0).toString() + " " + row.get(2).toString();            }          }          orderStr = orderStr.replaceFirst(",", "");          selectFields = orderStr;          self.closeDialog();        }      });      cancelBtn.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          closeDialog();        }      });      this.add(panel, BorderLayout.SOUTH);    }    public void superCloseDialog() {      super.closeDialog();    }    public void closeDialog() {      selectFields = orderStr;      super.closeDialog();    }    private void refreshData() {      List list = baseDataServiceDelegate.getAsTabColForOrder(asCompo.getMasterTabId(), requestMeta);      String orderStr = asCompo.getOrderColumns();      Map orderMap = new HashMap();      String[] tmpOrder = orderStr.split(",");      for (int i = 0; i < tmpOrder.length; i++) {        String[] orderClip = tmpOrder[i].split(" ");        orderMap.put(orderClip[0], orderClip[1]);      }      editArea.setPreferencesKey(this.getClass().getName() + "_OrderTable");      editArea.setTableModel(getCurTableModel(list, orderMap));      //      TableColumn column = editArea.getTable().getColumn(      //        LangTransMeta.translate(MaElementConst.FIELD_TRANS_IS_INCLUDE));      //      column.setCellEditor(new DefaultCellEditor(new AsValComboBox("VS_Y_N_1_0")));    }    public String getSelectFields() {      return selectFields;    }    public void setSelectFields(String selectFields) {      this.selectFields = selectFields;    }    public DefaultTableModel getCurTableModel(final List fieldList, Map orderMap) {      DefaultTableModel defaultMode = null;      final Vector names = new Vector();      names.add("排序字段");      names.add("字段名称");      names.add("升/降序");      final Vector data = new Vector();      if (fieldList != null && fieldList.size() > 0) {        for (int i = 0; i < fieldList.size(); i++) {          final Vector row = new Vector();          final AsTabCol rowData = (AsTabCol) fieldList.get(i);          row.add(rowData.getDataItem());          row.add(rowData.getDataItemNa());          row.add(orderMap.get(rowData.getDataItem()));          data.add(row);        }      }      defaultMode = new DefaultTableModel(data, names) {        @Override        public int getColumnCount() {          return names.size();        }        @Override        public int getRowCount() {          return data.size();        }        //        @Override        //        public void setValueAt(final Object aValue, final int row, final int column) {        //          final Object oldValue = getValueAt(row, column);        //          final Vector rowVector = (Vector) dataVector.elementAt(row);        //          final String key = rowVector.get(0).toString();        //          rowVector.setElementAt(aValue, column);        //          if (oldValue != null && !oldValue.toString().equals(aValue.toString())) {        //            asTabColMap.put(key, rowVector);        //          }        //        //          fireTableCellUpdated(row, column);        //        }        public boolean isCellEditable(final int row, final int col) {          if (col < 2) {            return false;          } else {            return true;          }        }      };      return defaultMode;    }  }  private void initService() {    this.baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(    IBaseDataServiceDelegate.class, "baseDataServiceDelegate");  }  public static void main(String[] args) {    OrderSelectStringField selField = new OrderSelectStringField(null);    JFrame f = new JFrame();    f.getContentPane().setLayout(new BorderLayout());    f.getContentPane().add(selField, BorderLayout.NORTH);    f.setSize(400, 300);    f.setLocationRelativeTo(null);    f.setVisible(true);    f.addWindowListener(new WindowAdapter() {      @Override      public void windowClosing(WindowEvent e) {        System.exit(0);      }    });  }}