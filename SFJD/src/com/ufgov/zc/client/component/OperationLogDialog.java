package com.ufgov.zc.client.component;import java.awt.BorderLayout;import java.awt.Dialog;import java.awt.Dimension;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Vector;import javax.swing.JButton;import javax.swing.JToolBar;import javax.swing.table.TableModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.report.DataExporter;import com.ufgov.zc.common.am.model.AmApply;import com.ufgov.zc.common.commonbiz.model.BaseBill;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.cp.model.CpApply;import com.ufgov.zc.common.cp.model.CpVoucher;import com.ufgov.zc.common.cp.publish.ICpVoucherServiceDelegate;import com.ufgov.zc.common.dp.model.DpDetail;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.model.GkBusinessLog;import com.ufgov.zc.common.system.util.DateUtil;public class OperationLogDialog extends GkBaseDialog {  private RequestMeta requestMeta;  private IBaseDataServiceDelegate baseDataServiceDelegate;  private ICpVoucherServiceDelegate cpVoucherServiceDelegate;  private String cpVoucherServiceDelegateName = "cpVoucherServiceDelegate";  private JTablePanel tablePanel = new JTablePanel();  public void initService() {    this.baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(    IBaseDataServiceDelegate.class, "baseDataServiceDelegate");    cpVoucherServiceDelegate = (ICpVoucherServiceDelegate) ServiceFactory    .create(ICpVoucherServiceDelegate.class, cpVoucherServiceDelegateName);    requestMeta = WorkEnv.getInstance().getRequestMeta();  }  private String module = "";  public OperationLogDialog(Window parentWindow, BaseBill bill, String module) {    super(parentWindow, Dialog.ModalityType.APPLICATION_MODAL);    this.module = module;    tablePanel.init();    tablePanel.getSearchBar().setVisible(false);    tablePanel.setTablePreferencesKey(this.getClass().getName()    + "operationLogTable");    this.add(tablePanel, BorderLayout.CENTER);    JButton button = new JButton("导出excel");    JToolBar toolBar = new JToolBar();    toolBar.setFloatable(false);    toolBar.add(button);    button.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        DataExporter.exportToExcel(tablePanel, tablePanel.getTable());      }    });    this.add(toolBar, BorderLayout.NORTH);    initService();    this.refreshData(bill);    this.setTitle("流程明细查看");    this.setSize(700, 500);    this.moveToScreenCenter();    this.setVisible(true);  }  public OperationLogDialog(Window parentWindow, BaseBill bill, String module, String tableName) {    super(parentWindow, Dialog.ModalityType.APPLICATION_MODAL);    this.module = module;    tablePanel.init();    tablePanel.getSearchBar().setVisible(false);    tablePanel.setTablePreferencesKey(this.getClass().getName()    + "operationLogCpTable");    this.add(tablePanel, BorderLayout.CENTER);    JButton button = new JButton("导出excel");    JToolBar toolBar = new JToolBar();    toolBar.setFloatable(false);    toolBar.add(button);    button.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        DataExporter.exportToExcel(tablePanel, tablePanel.getTable());      }    });    this.add(toolBar, BorderLayout.NORTH);    initService();    this.refreshData(bill, tableName);    this.setTitle("流程明细查看");    this.setSize(700, 500);    this.moveToScreenCenter();    this.setVisible(true);  }  public void refreshData(BaseBill bill) {    this.bill = bill;    List resultList = baseDataServiceDelegate.getGkBusinessLog(bill, requestMeta);    TableModel model = convert(resultList);    tablePanel.setTableModel(model);    tablePanel.getTable().setShowCheckedColumn(false);    tablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(50, 0));  }  public void refreshData(BaseBill bill, String tabName) {    this.bill = bill;    List vouResultList = new ArrayList();    if ("cpApply".equals(tabName)) {      String cpVoucherId = ((CpApply) bill).getCpVoucherId();      if (cpVoucherId != null) {        CpVoucher cpVoucher = cpVoucherServiceDelegate.getCpVoucherById(cpVoucherId, WorkEnv.getInstance().getSysNd(), requestMeta);        if (cpVoucher != null) {          GkBusinessLog gkBusinessLog = new GkBusinessLog();          if (cpVoucher.getDealState().equals("1")) {            gkBusinessLog.setUserName("支付中心");            gkBusinessLog.setCoName("支付中心");            gkBusinessLog.setOrgName("支付中心");            gkBusinessLog.setPosiName("支付凭证发送银行");            gkBusinessLog.setOperTime(cpVoucher.getCdate());            gkBusinessLog.setBillId(bill.getId());            gkBusinessLog.setTableName("CP_VOUCHER");            gkBusinessLog.setCompoId(requestMeta.getCompoId());            gkBusinessLog.setFuncId("fsendbank");            gkBusinessLog.setRemark(bill.getComment());            gkBusinessLog.setNd(requestMeta.getSvNd());            vouResultList.add(gkBusinessLog);          } else if (cpVoucher.getDealState().equals("3")          || cpVoucher.getDealState().equals("4")) {            gkBusinessLog.setUserName("银行");            gkBusinessLog.setCoName("银行");            gkBusinessLog.setOrgName("银行");            gkBusinessLog.setPosiName("支付凭证银行确认");            gkBusinessLog.setOperTime(cpVoucher.getBankDate());            gkBusinessLog.setBillId(bill.getId());            gkBusinessLog.setTableName("CP_VOUCHER");            gkBusinessLog.setCompoId(requestMeta.getCompoId());            gkBusinessLog.setFuncId("fauditbank");            gkBusinessLog.setRemark(bill.getComment());            gkBusinessLog.setNd(requestMeta.getSvNd());            vouResultList.add(gkBusinessLog);          }          if (cpVoucher.getDealState().equals("4")) {            GkBusinessLog gkBusinessLog2 = new GkBusinessLog();            gkBusinessLog2.setUserName("人行");            gkBusinessLog2.setCoName("银行");            gkBusinessLog2.setOrgName("银行");            gkBusinessLog2.setPosiName("支付凭证清算");            gkBusinessLog2.setOperTime(cpVoucher.getClearDate());            gkBusinessLog2.setBillId(bill.getId());            gkBusinessLog2.setTableName("CP_VOUCHER");            gkBusinessLog2.setCompoId(requestMeta.getCompoId());            gkBusinessLog2.setFuncId("fclearbank");            gkBusinessLog2.setRemark(bill.getComment());            gkBusinessLog2.setNd(requestMeta.getSvNd());            vouResultList.add(gkBusinessLog2);          }        }      }    }    if ("amApply".equals(tabName)) {      String amVoucherId = ((AmApply) bill).getAmVoucherId();      if (amVoucherId != null) {        vouResultList = baseDataServiceDelegate.getGkBusinessLog(amVoucherId, "AM_VOUCHER", requestMeta);      }    }    List resultList = baseDataServiceDelegate.getGkBusinessLog(bill, requestMeta);    resultList.addAll(vouResultList);    TableModel model = convert(resultList);    tablePanel.setTableModel(model);    tablePanel.getTable().setShowCheckedColumn(false);    tablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(50, 0));  }  private BaseBill bill;  private TableModel convert(List list) {    Vector names = new Vector();    Vector values = new Vector();    names.add("用户");    names.add("单位");    names.add("部门");    names.add("职位");    names.add("操作");    names.add("操作时间");    names.add("意见");    names.add("审核金额");    //    names.add("数字签名信息");    for (int i = 0; i < list.size(); i++) {      Vector eachRowData = new Vector();      GkBusinessLog log = (GkBusinessLog) list.get(i);      eachRowData.add(log.getUserName());      eachRowData.add(log.getCoName());      eachRowData.add(log.getOrgName());      eachRowData.add(log.getPosiName());      String funcName = LangTransMeta.translate(this.module + "_FUNC_"      + log.getFuncId());      eachRowData.add(funcName);      eachRowData.add(log.getOperTime() == null ? "" : DateUtil.dateToSsString(log.getOperTime()));      eachRowData.add(log.getRemark());      BigDecimal money = log.getMoney();      if (bill instanceof DpDetail) {        DpDetail dpDetail = (DpDetail) bill;        if ("202".equals(dpDetail.getPmAdjustCode())) {          if (money != null) {            money = money.multiply(new BigDecimal("-1"));          }        }      }      eachRowData.add(money);      //      eachRowData.add(log.getCertDNCN());      values.add(eachRowData);    }    MyTableModel model = new MyTableModel(values, names) {      @Override      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      @Override      public boolean isCellEditable(int row, int colum) {        return false;      }    };    return model;  }}