package com.ufgov.zc.client.component;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.List;import java.util.Map;import javax.swing.JFrame;import javax.swing.JScrollPane;import javax.swing.JTree;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.DefaultTreeModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.console.model.Component;import com.ufgov.zc.common.console.model.Menu;import com.ufgov.zc.common.console.publish.IConsoleServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.model.LangTrans;public class MenuTree extends JTree {  /**   *    */  private static final long serialVersionUID = -3358415747390534910L;  private String consoleServiceDelegateName = "consoleServiceDelegate";  private IConsoleServiceDelegate consoleServiceDelegate;  private List<Menu> menuList;  private List<Component> compoList;  private IBaseDataServiceDelegate baseDataServiceDelegate;  private String baseDataServiceDelegateName = "baseDataServiceDelegate";  private DefaultTreeModel menuTreeMode;  private DefaultMutableTreeNode selectedNode;  private boolean showMenu = true;  private boolean showCompo = true;  private String title = "";  private String systemCode = "";  private String roleCode = "";  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  public boolean isShowMenu() {    return showMenu;  }  public void setShowMenu(boolean showMenu) {    this.showMenu = showMenu;  }  public boolean isShowCompo() {    return showCompo;  }  public void setShowCompo(boolean showCompo) {    this.showCompo = showCompo;  }  public String getTitle() {    return title;  }  public void setTitle(String title) {    if (title != null && title.trim().length() > 0) {      this.title = title;    }  }  public String getSystemCode() {    return systemCode;  }  public void setSystemCode(String systemCode) {    if (systemCode != null && systemCode.trim().length() > 0) {      this.systemCode = systemCode;    }  }  public String getRoleCode() {    return roleCode;  }  public void setRoleCode(String roleCode) {    if (roleCode != null && roleCode.trim().length() > 0) {      this.roleCode = roleCode;    }  }  public MenuTree(boolean showMenu, String title) {    this(showMenu, true);    setTitle(title);  }  public MenuTree(boolean showMenu, String systemCode, String roleCode) {    this(showMenu, true);    setSystemCode(systemCode);    setRoleCode(roleCode);  }  private MenuTree(boolean showMenu, boolean showCompo) {    setShowMenu(showMenu);    setShowCompo(showCompo);  }  public void run() {    initMenu(showMenu, systemCode);    if (showCompo) {      initCompo(showCompo);    }    menuTreeMode = generateMenuTree(menuList, title, showCompo);    this.setModel(menuTreeMode);  }  private DefaultTreeModel generateMenuTree(List<Menu> menuList, String title,  boolean showCompo) {    // TODO Auto-generated method stub    if (menuList == null || menuList.size() == 0)      return null;    DefaultMutableTreeNode root = new DefaultMutableTreeNode(title);    for (Menu menu : menuList) {      String parentCode = menu.getParentCode();      if (parentCode == null || systemCode.equals(parentCode) || "".equals(parentCode)) {//一级节点        DefaultMutableTreeNode child = new DefaultMutableTreeNode(menu);        DefaultMutableTreeNode curParentNode = child;        setChildMenuNode(curParentNode, menuList);//set子节点        setChildCompoNode(child, compoList);        root.add(child);      }    }    DefaultTreeModel tree = new DefaultTreeModel(root);    return tree;  }  private void setChildMenuNode(DefaultMutableTreeNode parentNode,  List<Menu> menuList) {    Menu parentBean = (Menu) parentNode.getUserObject();    String parentCode = parentBean.getMenuCode();    for (Menu menu : menuList) {      if (parentCode.equals(menu.getParentCode())) {        DefaultMutableTreeNode child = new DefaultMutableTreeNode(menu);        parentNode.add(child);        DefaultMutableTreeNode curParentNode = child;        setChildMenuNode(curParentNode, menuList);        setChildCompoNode(child, compoList);      }    }  }  private void setChildCompoNode(DefaultMutableTreeNode menuNode,  List<Component> compoList) {    Menu menuBean = (Menu) menuNode.getUserObject();    String menuCode = menuBean.getMenuCode();    for (Component compo : compoList) {      if (menuCode.equals(compo.getMenuCode())) {        DefaultMutableTreeNode child = new DefaultMutableTreeNode(compo);        menuNode.add(child);      }    }  }  private void initMenu(boolean showMenu, String systemCode) {    // TODO Auto-generated method stub    if (showMenu) {      consoleServiceDelegate = (IConsoleServiceDelegate) ServiceFactory.create(IConsoleServiceDelegate.class,      consoleServiceDelegateName);      baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(IConsoleServiceDelegate.class,      baseDataServiceDelegateName);      if ("".equals(systemCode) == false) {        Map<String, LangTrans> transMap = baseDataServiceDelegate.getLangTrans(systemCode, requestMeta);        LangTrans transBean = transMap.get(systemCode);        setTitle(transBean.getResNa());      }      menuList = consoleServiceDelegate.getMenuList(systemCode, roleCode, requestMeta);    }  }  private void initCompo(boolean showCompo) {    // TODO Auto-generated method stub    if (showCompo) {      compoList = consoleServiceDelegate.getCompoList(requestMeta);    }  }  public DefaultMutableTreeNode getSelectedNode() {    return this.selectedNode;  }  public static void main(String[] args) {    JFrame f = new JFrame();    MenuTree tree = new MenuTree(true, true);    tree.setSystemCode("GRP_GFI_BI");    tree.run();    f.getContentPane().add(new JScrollPane().getViewport().add(tree));    f.setSize(300, 400);    f.setLocationRelativeTo(null);    f.setVisible(true);    f.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent e) {        System.exit(0);      }    });  }  public List getMenuList() {    // TODO Auto-generated method stub    return menuList;  }  public List<Component> getCompoList() {    return compoList;  }  public void setCompoList(List<Component> compoList) {    this.compoList = compoList;  }}