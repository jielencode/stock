/** *  */package com.ufgov.zc.client.component;/** * @author ufwangfei * */import java.awt.BorderLayout;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.Frame;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.Enumeration;import java.util.Iterator;import java.util.List;import java.util.regex.Matcher;import java.util.regex.Pattern;import javax.swing.DefaultListModel;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JList;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTabbedPane;import javax.swing.JTextArea;import javax.swing.ScrollPaneConstants;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.User;import com.ufgov.zc.common.zc.publish.IZcEbBaseServiceDelegate;public class GkSelectUserCommentDialog extends GkBaseDialog implements ActionListener {  /**   *    */  private static final long serialVersionUID = 7714089677620182874L;  private IZcEbBaseServiceDelegate baseDataServiceDelegate = (IZcEbBaseServiceDelegate) ServiceFactory.create(IZcEbBaseServiceDelegate.class,  "zcEbBaseServiceDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private JTextArea editor = new JTextArea(5, 45);  private JButton confirmButton;  private JButton cancelButton;  private String comment = null;  public boolean cancel = true;  //查候选人sql  private String candidateSql;  private ElementConditionDto candidateConditionDto = new ElementConditionDto();  final JList nextAuditUserList = new JList();  private GkSelectUserCommentDialog self = this;  //默认下级审核人  private List<User> defaultAuditPersons = new ArrayList<User>();  public GkSelectUserCommentDialog() {    super();    init();  }  public GkSelectUserCommentDialog(Frame owner) {    super(owner);    init();  }  public GkSelectUserCommentDialog(Window owner, ModalityType modalityType, String candidateSql, ElementConditionDto candidateConditionDto) {    super(owner, modalityType);    this.candidateSql = candidateSql;    this.candidateConditionDto = candidateConditionDto;    init();  }  public GkSelectUserCommentDialog(Window owner, ModalityType modalityType, String candidateSql, ElementConditionDto candidateConditionDto,  List<User> defaultAuditPersons) {    super(owner, modalityType);    this.candidateSql = candidateSql;    this.candidateConditionDto = candidateConditionDto;    this.defaultAuditPersons = defaultAuditPersons;    init();  }  public GkSelectUserCommentDialog(Window owner, ModalityType modalityType, String defaultText, String title, String candidateSql,  ElementConditionDto candidateConditionDto) {    super(owner, modalityType);    this.defaultText = defaultText;    this.title = title;    this.candidateSql = candidateSql;    this.candidateConditionDto = candidateConditionDto;    init();  }  public GkSelectUserCommentDialog(Window owner, ModalityType modalityType, String defaultText, String candidateSql,  ElementConditionDto candidateConditionDto) {    super(owner, modalityType);    this.defaultText = defaultText;    this.candidateSql = candidateSql;    this.candidateConditionDto = candidateConditionDto;    init();  }  public String getComment() {    return comment;  }  public void setComment(String comment) {    this.comment = comment;  }  private String defaultText = "同意";  private String title = "输入意见";  private void init() {    this.getContentPane().setLayout(new BorderLayout());    JPanel toppanel = createTopAuditUserPanel();    this.getContentPane().add(toppanel, BorderLayout.NORTH);    editor.setText(defaultText);    JScrollPane jsp = new JScrollPane(editor);    jsp.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);    jsp.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);    this.getContentPane().add(jsp, BorderLayout.CENTER);    JPanel panel = new JPanel();    panel.setLayout(new FlowLayout(FlowLayout.RIGHT));//FlowLayout    confirmButton = new JButton("确定");    confirmButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        DefaultListModel model = (DefaultListModel) nextAuditUserList.getModel();        if (model.getSize() == 0) {          JOptionPane.showMessageDialog(self, "请选择下一岗审核人！", "提示", JOptionPane.INFORMATION_MESSAGE);        } else {          self.setVisible(false);        }      }    });    cancelButton = new JButton("取消");    cancelButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        DefaultListModel model = (DefaultListModel) nextAuditUserList.getModel();        self.setVisible(false);      }    });    panel.add(confirmButton);    panel.add(cancelButton);    this.getContentPane().add(panel, BorderLayout.SOUTH);    this.setSize(460, 370);    this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);    this.moveToScreenCenter();    this.setTitle(title);    this.setVisible(true);  }  private JPanel createTopAuditUserPanel() {    JButton left = new JButton("<");    JButton right = new JButton(">");    JPanel toppanel = new JPanel();    toppanel.setLayout(new GridBagLayout());    GridBagConstraints c = new GridBagConstraints();    c.gridx = 0;    c.gridy = 1;    c.weightx = 1;    c.weighty = 1;    c.gridwidth = 2;    c.gridheight = 2;    c.fill = GridBagConstraints.BOTH;    DefaultListModel leftmodel = createCandidateListModel();    final JList leftList = new JList();    leftList.setPreferredSize(new Dimension(150, 150));    leftList.setModel(leftmodel);    JTabbedPane leftTabPanel = new JTabbedPane();    JScrollPane leftscrollP = new JScrollPane(leftList);    leftTabPanel.addTab("待选人", leftscrollP);    toppanel.add(leftTabPanel, c);    c.gridx = 2;    c.gridy = 1;    c.gridwidth = 1;    c.gridheight = 1;    c.weightx = 0;    c.weighty = 0.5;    c.anchor = GridBagConstraints.SOUTH;    c.fill = GridBagConstraints.HORIZONTAL;    toppanel.add(right, c);    c.gridx = 2;    c.gridy = 2;    c.anchor = GridBagConstraints.NORTH;    c.fill = GridBagConstraints.HORIZONTAL;    c.insets = new Insets(10, 0, 0, 0);    toppanel.add(left, c);    c.gridx = 3;    c.gridy = 1;    c.gridwidth = 1;    c.gridheight = 2;    c.weightx = 1;    c.weighty = 1;    c.insets = new Insets(0, 0, 0, 0);    c.fill = GridBagConstraints.BOTH;    DefaultListModel rightmodel = createNextAuditPersonListModel();    nextAuditUserList.setModel(rightmodel);    JTabbedPane rightTabPanel = new JTabbedPane();    JScrollPane rightScrollP = new JScrollPane(nextAuditUserList);    rightTabPanel.addTab("审核人", rightScrollP);    toppanel.add(rightTabPanel, c);    left.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        if (nextAuditUserList.getSelectedIndex() != -1) {          Object o = nextAuditUserList.getSelectedValue();          ((DefaultListModel) nextAuditUserList.getModel()).remove(nextAuditUserList.getSelectedIndex());          ((DefaultListModel) leftList.getModel()).addElement(o);        }      }    });    right.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        if (leftList.getSelectedIndex() != -1) {          Object o = leftList.getSelectedValue();          ((DefaultListModel) leftList.getModel()).remove(leftList.getSelectedIndex());          ((DefaultListModel) nextAuditUserList.getModel()).addElement(o);        }      }    });    return toppanel;  }  /**   * 创建待选人列表model   * @return   */  private DefaultListModel createCandidateListModel() {    DefaultListModel model = new DefaultListModel();    List<String> defaultAuditUserName = initFaultAuditUserNames();    if (this.candidateSql != null && this.candidateSql.length() > 0) {      List list = baseDataServiceDelegate.getForeignEntitySelectedData(candidateSql, candidateConditionDto, requestMeta);      for (Iterator iterator = list.iterator(); iterator.hasNext();) {        User rm = (User) iterator.next();        if (!defaultAuditUserName.contains(rm.getUserName())) {//如果候选人，已经被设为下级审核人，则此人不加入‘候选人’列表          model.addElement(rm.getUserName());        }      }    }    return model;  }  /**   * 创建下级审核人列表model   * @return   */  private DefaultListModel createNextAuditPersonListModel() {    DefaultListModel model = new DefaultListModel();    List<String> defaultAuditUserName = initFaultAuditUserNames();    for (Iterator iterator = defaultAuditUserName.iterator(); iterator.hasNext();) {      String userName = (String) iterator.next();      model.addElement(userName);    }    return model;  }  private List<String> initFaultAuditUserNames() {    if (defaultAuditPersons == null) {      return new ArrayList<String>();    }    List<String> list = new ArrayList<String>();    for (Iterator iterator = defaultAuditPersons.iterator(); iterator.hasNext();) {      User u = (User) iterator.next();      list.add(u.getUserName() + "(" + u.getUserId() + ")");    }    return list;  }  public List<String> getNextAuditUserIds() {    ArrayList<String> userids = new ArrayList<String>();    DefaultListModel model = (DefaultListModel) nextAuditUserList.getModel();    Enumeration<String> ele = (Enumeration<String>) model.elements();    while (ele.hasMoreElements()) {      String userId = (String) ele.nextElement();      userids.add(matchUserId(userId));    }    return userids;  }  public void actionPerformed(ActionEvent event) {    String command = event.getActionCommand();    if (command.equals("confirm")) {      this.comment = editor.getText();      this.cancel = false;      this.closeDialog();    }    if (command.equals("cancel")) {      this.closeDialog();    }  }  public String matchUserId(String s) {    Pattern p = Pattern.compile("(\\([^\\(]+\\))");    Matcher m = p.matcher(s);    if (m.find()) {      String id = m.group(0);      if (id.length() > 2) {        return m.group(0).substring(1, id.length() - 1);      }    }    return null;  }}