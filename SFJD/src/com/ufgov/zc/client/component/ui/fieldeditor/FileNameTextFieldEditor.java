package com.ufgov.zc.client.component.ui.fieldeditor;import java.awt.FlowLayout;import javax.swing.JComponent;import javax.swing.JFrame;import javax.swing.SwingUtilities;import javax.swing.UIManager;import com.ufgov.smartclient.plaf.BigButtonSplitPaneUI;import com.ufgov.zc.client.component.FileUploader;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.common.am.model.AmApply;import com.ufgov.zc.common.am.model.AmVoucher;import com.ufgov.zc.common.cp.model.CpApply;import com.ufgov.zc.common.cp.model.CpVoucher;import com.ufgov.zc.common.dp.model.DpDetail;public class FileNameTextFieldEditor extends AbstractFieldEditor {  private FileUploader field;  public FileNameTextFieldEditor(String name) {    super(name);  }  public FileNameTextFieldEditor(String name, boolean isEditable) {    super(name);    field.setEnabled(isEditable);  }  public Object getValue() {    return field.getFileId();  }  public void setValue(Object value) { //在选择的上面的行发生改变的时候所触发的事件    if (value == null || value instanceof String) {      field.setFileId((String) value);      return;    } else if (value instanceof CpVoucher) {      CpVoucher cpVoucher = (CpVoucher) value;      field.setFileId(cpVoucher.getFilenameBlobid());      return;    } else if (value instanceof CpApply) {      CpApply cpApply = (CpApply) value;      field.setFileId(cpApply.getFileNameBlobId());      return;    } else if (value instanceof DpDetail) {      DpDetail dpDetail = (DpDetail) value;      field.setFileId(dpDetail.getFilenameBlobid());      return;    } else if (value instanceof AmApply) {      AmApply amApply = (AmApply) value;      field.setFileId(amApply.getFilenameBlobid());      return;    } else if (value instanceof AmVoucher) {      AmVoucher amVoucher = (AmVoucher) value;      field.setFileId(amVoucher.getFilenameBlobid());      return;    }    field.setFileId(value.toString());  }  protected JComponent createEditorComponent() {    field = new FileUploader();    field.addValueChangeListener(new ValueChangeListener() {      public void valueChanged(ValueChangeEvent e) {        if (getEditObject() instanceof CpVoucher) {          CpVoucher cpVoucher = (CpVoucher) getEditObject();          if (cpVoucher != null) {            String fieldValue = field.getFileName();            String filenameBlobid = field.getFileId();            cpVoucher.setFileName(fieldValue);            cpVoucher.setFilenameBlobid(filenameBlobid);          }        } else if (getEditObject() instanceof CpApply) {          CpApply cpApply = (CpApply) getEditObject();          if (cpApply != null) {            String fieldValue = field.getFileName();            String filenameBlobid = field.getFileId();            cpApply.setFileName(fieldValue);            cpApply.setFileNameBlobId(filenameBlobid);          }        } else if (getEditObject() instanceof DpDetail) {          DpDetail dpDetail = (DpDetail) getEditObject();          if (dpDetail != null) {            String fieldValue = field.getFileName();            String filenameBlobid = field.getFileId();            dpDetail.setFileName(fieldValue);            dpDetail.setFilenameBlobid(filenameBlobid);          }        } else if (getEditObject() instanceof AmApply) {          AmApply amApply = (AmApply) getEditObject();          if (amApply != null) {            String fieldValue = field.getFileName();            String filenameBlobid = field.getFileId();            amApply.setFilename(fieldValue);            amApply.setFilenameBlobid(filenameBlobid);          }        } else if (getEditObject() instanceof AmVoucher) {          AmVoucher amVoucher = (AmVoucher) getEditObject();          if (amVoucher != null) {            String fieldValue = field.getFileName();            String filenameBlobid = field.getFileId();            amVoucher.setFilename(fieldValue);            amVoucher.setFilenameBlobid(filenameBlobid);          }        }        fireEditSynced();      }    });    return field;  }  public static void main(String[] args) {    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());          //          UIManager.setLookAndFeel(new GrayLookAndFeel());        } catch (Exception e) {          e.printStackTrace();        }        FileNameTextFieldEditor fileField = new FileNameTextFieldEditor("fileName");        UIManager.getDefaults().put("SplitPaneUI", BigButtonSplitPaneUI.class.getName());        JFrame frame = new JFrame("frame");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(800, 600);        frame.setLocationRelativeTo(null);        frame.setLayout(new FlowLayout());        frame.getContentPane().add(fileField);        frame.setVisible(true);      }    });    //    JFrame f = new JFrame();    //    f.getContentPane().add(fileField);    //    //    f.setSize(800, 600);    //    f.setVisible(true);    //    f.setLocationRelativeTo(null);    //    f.addWindowListener(new WindowAdapter() {    //      public void windowClosing(WindowEvent e) {    //        System.exit(0);    //      }    //    });  }  @Override  public void setFieldEditorCode() {    this.FieldEditorCode = FieldEditorCodeConstants.FILE_NAME;  }}