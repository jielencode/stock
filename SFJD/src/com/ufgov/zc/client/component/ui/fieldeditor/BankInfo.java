package com.ufgov.zc.client.component.ui.fieldeditor;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Component;import java.awt.Dimension;import java.awt.Graphics;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.event.KeyAdapter;import java.awt.event.KeyEvent;import javax.swing.JComponent;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JTextField;import javax.swing.table.AbstractTableModel;import com.ufgov.zc.client.component.JButtonTextField;import com.ufgov.zc.client.component.RegexDocument;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.tablelayout.CellConstraints;import com.ufgov.zc.client.component.tablelayout.CustomBorder;import com.ufgov.zc.client.component.tablelayout.GridCellLayout;import com.ufgov.zc.client.component.tablelayout.GridPanel;import com.ufgov.zc.client.component.ui.AbstractEditInputBill;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.common.am.model.AmApply;import com.ufgov.zc.common.am.model.AmVoucher;import com.ufgov.zc.common.commonbiz.model.BankAccount;import com.ufgov.zc.common.commonbiz.model.BaseBill;import com.ufgov.zc.common.cp.model.CpApply;import com.ufgov.zc.common.cp.model.CpVoucher;public abstract class BankInfo extends JPanel {  protected boolean showRemark = true;  private AbstractEditInputBill editInputBill;  private final BankInfo self = this;  protected static JLabel createLabel(String text, Color background) {    JLabel label = new JLabel(SwingUtil.processAsteriskLabel(text));    label.setHorizontalAlignment(JLabel.RIGHT);    label.setVerticalAlignment(JLabel.CENTER);    label.setOpaque(true);    label.setBackground(background);    label.setBorder(new CustomBorder());    label.setPreferredSize(new Dimension(20, 10));    return label;  }  class MyJTextField extends JTextField {    //    private int preferredWidth;    public MyJTextField(String text, int width) {      super(text);      this.setPreferredSize(new Dimension(180, 20));    }    //    @Override    //    public Dimension getPreferredSize() {    //      Dimension preferredSize = super.getPreferredSize();    //      preferredSize.width = preferredWidth;    //      return preferredSize;    //    }  }  public JTextField accNameField = new MyJTextField("", 180);  public JButtonTextField accBankField; //收款人的信息  public JTextField payBankField; //付款人的信息  public JButtonTextField payBankForAmField; //付款人的信息  public JTextField accNoField = new MyJTextField("", 180);  protected JLabel label0 = createLabel(null, null);  private final JLabel accName = createLabel(" 全称*", null);  private final JLabel accBank = createLabel(" 开户银行*", null);  private final JLabel accNo = createLabel(" 银行账号*", null);  public final JLabel remarkLbl = createLabel(" 备注", null);  public JTextField remarkField = new JTextField();  private String recePayType = null;  protected GridPanel gridPanel;  protected GridPanel createGridPanel() {    return new GridPanel() {      @Override      public void paint(Graphics g) {        super.paint(g);        if (getParent().getBounds().y < 25) {          int width = 0;          for (int i = 0; i < 4; i++) {            width += getTableHeader().getColumnModel().getColumn(i).getWidth();          }          width--;          g.setColor(Color.GRAY);          g.drawLine(0, 0, width, 0);        }      }      @Override      public Color getBackground() {        return BankInfo.this.getBackground();      }    };  }  protected static JPanel crearePanel(Component putComp) {    JPanel panel = new JPanel(new GridBagLayout());    panel.add(putComp, new GridBagConstraints(0, 0, 1, 1, 1.0, 0.0, GridBagConstraints.WEST,    GridBagConstraints.HORIZONTAL, new Insets(5, 5, 5, 5), 0, 0));    panel.setBorder(new CustomBorder());    return panel;  }  public BankInfo() {  }  public BankInfo(final String recePayType) {    init(recePayType);  }  protected void init(final String recePayType) {    this.recePayType = recePayType;    gridPanel = createGridPanel();    gridPanel.setModel(new AbstractTableModel() {      public int getColumnCount() {        return 4;      }      public int getRowCount() {        if ("RECE".equals(recePayType) && showRemark) {          return 4;//收款人有备注信息        }        return 3;      }      public Object getValueAt(int rowIndex, int columnIndex) {        return null;      }    });    gridPanel.setLayout(new GridCellLayout());    initBankInfo();  }  protected abstract JComponent createAccountEditComponent();  protected abstract JComponent createPayAccountEditComponent();  protected void initBankInfo() {    gridPanel.getTableHeader().getColumnModel().getColumn(0).setPreferredWidth(6);    gridPanel.getTableHeader().getColumnModel().getColumn(1).setPreferredWidth(4);    gridPanel.getTableHeader().getColumnModel().getColumn(2).setPreferredWidth(320);    gridPanel.setBackground(getBackground());    gridPanel.setSelectionBackground(getBackground());    gridPanel.setShowGrid(false);    gridPanel.setRowHeight(30);    setLayout(new BorderLayout());    add(gridPanel);    gridPanel.add(label0, new CellConstraints(0, 0, 2, 0));    gridPanel.add(accName, new CellConstraints(0, 1, 0, 1));    gridPanel.add(accBank, new CellConstraints(1, 1, 1, 1));    gridPanel.add(accNo, new CellConstraints(2, 1, 2, 1));    accName.setHorizontalAlignment(JTextField.LEFT);    accBank.setHorizontalAlignment(JTextField.LEFT);    accNo.setHorizontalAlignment(JTextField.LEFT);    //    processBankField();   //在子类中调用    //    addFieldValuceUpdateListener();//在子类中调用    if (!accNoFieldAllowChinese) {      RegexDocument rd = new RegexDocument();      rd.setMaxLength(50);      // rd.setRegex("[^\u4e00-\u9fa5]*");//不能输入中文      rd.setRegex("[0-9,\\-]*");//只能输入数字和-      accNoField.setDocument(rd);    }    gridPanel.add(crearePanel(accNameField), new CellConstraints(0, 2, 0, 2));    gridPanel.add(crearePanel(accNoField), new CellConstraints(2, 2, 2, 2));  }  protected boolean accNoFieldAllowChinese = false;  /*   * 对于银行信息，是否需要选择框   */  public void processBankField() {    if (this.recePayType.equalsIgnoreCase("RECE")) {      accBankField = (JButtonTextField) createAccountEditComponent();      accBankField.addValueChangeListener(new ValueChangeListener() {        public void valueChanged(ValueChangeEvent e) {          BankAccount ba = (BankAccount) accBankField.getValue();          if (ba == null)            ba = new BankAccount();          setBankInfoByBankAccount(ba);          accNameField.setText(ba.getAccName());          accBankField.setText(ba.getBankNodeName());          accNoField.setText(ba.getBankAccCode());          remarkField.setText(ba.getRemark());        }      });      //银行      accBankField.addKeyListener(new KeyAdapter() {        public void keyReleased(KeyEvent e) {          if (obj instanceof CpVoucher) {            if (self.recePayType.equalsIgnoreCase("RECE")) {              ((CpVoucher) obj).setReceBankNodeName(accBankField.getText());            } else if (self.recePayType.equalsIgnoreCase("PAY")) {              ((CpVoucher) obj).setPayBankNodeName(accBankField.getText());            }          } else if (obj instanceof CpApply) {            if (self.recePayType.equalsIgnoreCase("RECE")) {              CpApply cpApply = (CpApply) obj;              cpApply.setReceBankNodeName(accBankField.getText());            }          } else if (obj instanceof AmApply) {            if (self.recePayType.equalsIgnoreCase("RECE")) {              AmApply amApply = (AmApply) obj;              amApply.setReceBankNodeName(accBankField.getText());            }          } else if (obj instanceof AmVoucher) {            if (self.recePayType.equalsIgnoreCase("RECE")) {              AmVoucher amVoucher = (AmVoucher) obj;              amVoucher.setReceBankNodeName(accBankField.getText());            }          }        }      });      gridPanel.add(crearePanel(accBankField), new CellConstraints(1, 2, 1, 2));    } else if (this.recePayType.equalsIgnoreCase("PAY")) {      payBankField = (JTextField) createPayAccountEditComponent();      gridPanel.add(crearePanel(payBankField), new CellConstraints(1, 2, 1, 2));    } else if (this.recePayType.equalsIgnoreCase("PAY_AM")) {      payBankForAmField = (JButtonTextField) createAccountEditComponent();      payBankForAmField.addValueChangeListener(new ValueChangeListener() {        public void valueChanged(ValueChangeEvent e) {          BankAccount ba = (BankAccount) payBankForAmField.getValue();          if (ba == null)            ba = new BankAccount();          setBankInfoByBankAccount(ba);          accNameField.setText(ba.getAccName());          payBankForAmField.setText(ba.getBankNodeName());          accNoField.setText(ba.getBankAccCode());        }      });      payBankForAmField.addKeyListener(new KeyAdapter() {        public void keyReleased(KeyEvent e) {          if (obj instanceof CpVoucher) {            if (self.recePayType.equalsIgnoreCase("PAY_AM")) {              ((AmVoucher) obj).setPayBankNodeName(payBankForAmField.getText());            }          }        }      });      gridPanel.add(crearePanel(payBankForAmField), new CellConstraints(1, 2, 1, 2));    }  }  /*   * 根据选择返回的帐户信息   */  private void setBankInfoByBankAccount(BankAccount ba) {    if (obj instanceof CpVoucher) {      if (self.recePayType.equalsIgnoreCase("RECE")) {        ((CpVoucher) obj).setReceAccCode(ba.getAccCode());        ((CpVoucher) obj).setReceAccName(ba.getAccName());        ((CpVoucher) obj).setReceBankAccCode(ba.getBankAccCode());        ((CpVoucher) obj).setReceBankNo(ba.getBankNo());        ((CpVoucher) obj).setReceBankNodeCode(ba.getBankNodeCode());        ((CpVoucher) obj).setReceBankNodeName(ba.getBankNodeName());        ((CpVoucher) obj).setReceCode(ba.getCoCode());      } else if (self.recePayType.equalsIgnoreCase("PAY")) {        ((CpVoucher) obj).setPayAccCode(ba.getAccCode());        ((CpVoucher) obj).setPayAccName(ba.getAccName());        ((CpVoucher) obj).setPayBankAccCode(ba.getBankAccCode());        ((CpVoucher) obj).setPayBankCode(ba.getBankCode());        ((CpVoucher) obj).setPayBankName(ba.getBankName());        ((CpVoucher) obj).setPayBankNo(ba.getBankNo());        ((CpVoucher) obj).setPayBankNodeCode(ba.getBankNodeCode());        ((CpVoucher) obj).setPayBankNodeName(ba.getBankNodeName());        ((CpVoucher) obj).setPayCode(ba.getCoCode());      }    } else if (obj instanceof CpApply) {      if (self.recePayType.equalsIgnoreCase("RECE")) {        CpApply cpApply = (CpApply) obj;        cpApply.setReceAccCode(ba.getAccCode());        cpApply.setReceAccName(ba.getAccName());        cpApply.setReceBankAccCode(ba.getBankAccCode());        cpApply.setReceBankNo(ba.getBankNo());        cpApply.setReceBankNodeCode(ba.getBankNodeCode());        cpApply.setReceBankNodeName(ba.getBankNodeName());        cpApply.setReceCode(ba.getCoCode());      }    } else if (obj instanceof AmApply) {      if (self.recePayType.equalsIgnoreCase("RECE")) {        AmApply amApply = (AmApply) obj;        amApply.setReceAccCode(ba.getAccCode());        amApply.setReceAccName(ba.getAccName());        amApply.setReceBankAccCode(ba.getBankAccCode());        amApply.setReceBankNo(ba.getBankNo());        amApply.setReceBankNodeCode(ba.getBankNodeCode());        amApply.setReceBankNodeName(ba.getBankNodeName());        amApply.setReceCode(ba.getCoCode());        amApply.setReceBankRemark(ba.getRemark());      }    } else if (obj instanceof AmVoucher) {      if (self.recePayType.equalsIgnoreCase("RECE")) {        AmVoucher amVoucher = (AmVoucher) obj;        amVoucher.setReceAccCode(ba.getAccCode());        amVoucher.setReceAccName(ba.getAccName());        amVoucher.setReceBankAccCode(ba.getBankAccCode());        amVoucher.setReceBankNo(ba.getBankNo());        amVoucher.setReceBankNodeCode(ba.getBankNodeCode());        amVoucher.setReceBankNodeName(ba.getBankNodeName());        amVoucher.setReceCode(ba.getCoCode());      } else if (self.recePayType.equalsIgnoreCase("PAY_AM")) {        ((AmVoucher) obj).setPayAccCode(ba.getAccCode());        ((AmVoucher) obj).setPayAccName(ba.getAccName());        ((AmVoucher) obj).setPayBankAccCode(ba.getBankAccCode());        ((AmVoucher) obj).setPayBankNo(ba.getBankNo());        ((AmVoucher) obj).setPayBankNodeCode(ba.getBankNodeCode());        ((AmVoucher) obj).setPayBankNodeName(ba.getBankNodeName());        ((AmVoucher) obj).setPayCode(ba.getCoCode());      }    }  }  /*   *将付款人信息同步到下面的区域   */  protected void setPayBankAccountInfo(Object obj) {    this.obj = obj;    if (obj instanceof BaseBill) {      accNameField.setText(((BaseBill) obj).getPayAccName());      payBankField.setText(((BaseBill) obj).getPayBankNodeName());      accNoField.setText(((BaseBill) obj).getPayBankAccCode());    }  }  /*   * 将收款人的信息同步到下面的区域   */  public void setReceBankAccountInfo(Object obj) {    this.obj = obj;    if (obj instanceof BaseBill) {      accNameField.setText(((BaseBill) obj).getReceAccName());      accBankField.setText(((BaseBill) obj).getReceBankNodeName());      accNoField.setText(((BaseBill) obj).getReceBankAccCode());    }  }  public void addFieldValuceUpdateListener() {    //账户名    accNameField.addKeyListener(new KeyAdapter() {      public void keyReleased(KeyEvent e) {        if (obj instanceof CpVoucher) {          if (self.recePayType.equalsIgnoreCase("RECE")) {            ((CpVoucher) obj).setReceAccName(accNameField.getText());          } else if (self.recePayType.equalsIgnoreCase("PAY")) {            ((CpVoucher) obj).setPayAccName(accNameField.getText());          }        } else if (obj instanceof CpApply) {          if (self.recePayType.equalsIgnoreCase("RECE")) {            CpApply cpApply = (CpApply) obj;            cpApply.setReceAccName(accNameField.getText());          }        } else if (obj instanceof AmApply) {          if (self.recePayType.equalsIgnoreCase("RECE")) {            AmApply amApply = (AmApply) obj;            amApply.setReceAccName(accNameField.getText());          }        } else if (obj instanceof AmVoucher) {          if (self.recePayType.equalsIgnoreCase("RECE")) {            AmVoucher amVoucher = (AmVoucher) obj;            amVoucher.setReceAccName(accNameField.getText());          }        }      }    });    //账号    accNoField.addKeyListener(new KeyAdapter() {      public void keyReleased(KeyEvent e) {        if (obj instanceof CpVoucher) {          if (self.recePayType.equalsIgnoreCase("RECE")) {            ((CpVoucher) obj).setReceBankAccCode(accNoField.getText());          } else if (self.recePayType.equalsIgnoreCase("PAY")) {            ((CpVoucher) obj).setPayBankAccCode(accNoField.getText());          }        } else if (obj instanceof CpApply) {          if (self.recePayType.equalsIgnoreCase("RECE")) {            CpApply cpApply = (CpApply) obj;            cpApply.setReceBankAccCode(accNoField.getText());          }        } else if (obj instanceof AmApply) {          if (self.recePayType.equalsIgnoreCase("RECE")) {            AmApply amApply = (AmApply) obj;            amApply.setReceBankAccCode(accNoField.getText());          }        } else if (obj instanceof AmVoucher) {          if (self.recePayType.equalsIgnoreCase("RECE")) {            AmVoucher amVoucher = (AmVoucher) obj;            amVoucher.setReceBankAccCode(accNoField.getText());          }        }      }    });    //备注    remarkField.addKeyListener(new KeyAdapter() {      public void keyReleased(KeyEvent e) {        if (obj instanceof AmApply) {          if (self.recePayType.equalsIgnoreCase("RECE")) {            AmApply amApply = (AmApply) obj;            amApply.setReceBankRemark(remarkField.getText());          }        }      }    });  }  @Override  public Dimension getPreferredSize() {    return new Dimension(0, gridPanel.getRowCount() * gridPanel.getRowHeight());  }  public void setEditInputBill(AbstractEditInputBill editInputBill) {    this.editInputBill = editInputBill;  }  private Object obj;  public void setEditObject(Object editObject) {    obj = editObject;  }  public Object getEditObject() {    return obj;  }}