package com.ufgov.zc.client.component.ui;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Component;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JComboBox;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTable;import javax.swing.JTextField;import javax.swing.event.ListSelectionEvent;import javax.swing.event.ListSelectionListener;import javax.swing.table.AbstractTableModel;import javax.swing.table.TableModel;import com.ufgov.smartclient.component.table.JGroupableTable;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.UIConstants;import com.ufgov.zc.client.component.AsteriskLabel;import com.ufgov.zc.client.component.JButtonTextField;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.tablelayout.CellConstraints;import com.ufgov.zc.client.component.tablelayout.CustomBorder;import com.ufgov.zc.client.component.tablelayout.GridCellLayout;import com.ufgov.zc.client.component.tablelayout.GridPanel;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.ui.fieldeditor.BAccFieldEditor;import com.ufgov.zc.client.component.ui.fieldeditor.BalModeComboBoxFieldEditor;import com.ufgov.zc.client.component.ui.fieldeditor.BankInfo;import com.ufgov.zc.client.component.ui.fieldeditor.CheckNoTextFieldEditor;import com.ufgov.zc.client.component.ui.fieldeditor.ContractCodeGridFieldEditor;import com.ufgov.zc.client.component.ui.fieldeditor.DAttrTableSelectFieldEditor;import com.ufgov.zc.client.component.ui.fieldeditor.ElementFieldTranslate;import com.ufgov.zc.client.component.ui.fieldeditor.FileNameTextFieldEditor;import com.ufgov.zc.client.component.ui.fieldeditor.ManageTableSelectFieldEditor;import com.ufgov.zc.client.component.ui.fieldeditor.OperationTypeComboBoxFieldEditor;import com.ufgov.zc.client.component.ui.fieldeditor.OutlayFieldEditor;import com.ufgov.zc.client.component.ui.fieldeditor.PayBankInfo;import com.ufgov.zc.client.component.ui.fieldeditor.PayoutTableSelectFieldEditor;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.util.Util;import com.ufgov.zc.common.commonbiz.model.BillElement;import com.ufgov.zc.common.commonbiz.model.DAttr;import com.ufgov.zc.common.commonbiz.model.OperationType;import com.ufgov.zc.common.system.constants.AmElementConstants;import com.ufgov.zc.common.system.constants.CpElementConstants;import com.ufgov.zc.common.system.util.StringTools;/** * <p>Title: GK53</p> * <p>Description: 抽象账表输入</p> * <p>Copyright: Copyright 2009 ufgov, Inc.</p> * <p>Company: ufgov</p> * <p>创建时间: 2009-4-24</p> * @author 刘永伟(manlge) * @version 1.0 */public abstract class AbstractEditInputBill extends JPanel {  private static JPanel createPanel(Component putComp) {    JPanel panel = new JPanel(new GridBagLayout());    panel.add(putComp, new GridBagConstraints(0, 0, 1, 1, 1.0, 0.0, GridBagConstraints.WEST,    GridBagConstraints.HORIZONTAL, new Insets(5, 5, 5, 5), 0, 0));    panel.setBorder(new CustomBorder());    return panel;  }  protected class DisplayField extends JTextField {    public DisplayField() {      setColumns(18);      setPreferredSize(new Dimension(75, 20));    }  }  class TopPanel extends JPanel {    public TopPanel() {      setLayout(new BorderLayout());      JScrollPane scrollPane = new JScrollPane(getTable());      add(scrollPane, BorderLayout.CENTER);      add(getBalancePanel(), BorderLayout.SOUTH);      setPreferredSize(new Dimension(0, 100));      scrollPane.getHorizontalScrollBar().setPreferredSize(      new Dimension(0, UIConstants.HORIZONTAL_SCROLLBAR__HEIGHT));    }  }  protected abstract JPanel getBalancePanel();  protected final DisplayField balanceInfo = new DisplayField();  protected final DisplayField totalMoneyInfo = new DisplayField();  protected final DisplayField payMoneyInfo = new DisplayField();  /**   * 顶部表格   */  private JGroupableTable table;  /**   * 传过来的数据，每行应该一个对象，类型为：6种之一   */  protected List<Object> billDataList;  protected final JPanel topPanel = new TopPanel();  protected final JPanel clientPanel = new JPanel(new BorderLayout());  protected final JFuncToolBar toolBar = new JFuncToolBar();  protected final JTable dynamicPane = new GridPanel() {    public Color getBackground() {      return AbstractEditInputBill.this.getBackground();    }  };  protected BillElementMeta billElementMeta;  protected BillElementMeta preBem;  protected String product;  protected Object current;  protected List<AbstractFieldEditor> fieldEditors;  protected List<AbstractFieldEditor> fieldEditorsByBem;  protected boolean isEnabled = false;  /**   * 收款人信息   */  private PayBankInfo payBankInfo;  /**   * 付款人信息   */  public AbstractEditInputBill() {  }  public List<Object> getBillDataList() {    return billDataList;  }  public List getFieldEditorsByBem() {    return fieldEditorsByBem;  }  protected List<AbstractFieldEditor> createFieldEditorsByBem() {    LangTransMeta.init(product + "%");    List<BillElement> displayField = billElementMeta.getDisplayField(); //在下面需要显示的字段    List<AbstractFieldEditor> fieldEditors = new ArrayList<AbstractFieldEditor>();    for (BillElement billElement : displayField) {      final String id = billElement.getElementCode();      String transId = new StringBuffer(product).append("_FIELD_").append(id).toString();      String transName = ElementFieldTranslate.getCurTransFieldByProduct(this.product, id);      if (CpElementConstants.FIELD_NAME_B_ACC_CODE.equals(id)) {//功能分类树型显示        BAccFieldEditor editor = new BAccFieldEditor(transName + Util.asterisk(id, billElementMeta));        fieldEditors.add(editor);      } else if (CpElementConstants.FIELD_NAME_OUTLAY_CODE.equals(id)) {//经济分类树型显示        OutlayFieldEditor editor = new OutlayFieldEditor(current, preBem, billElementMeta, transName        + Util.asterisk(id, billElementMeta));        fieldEditors.add(editor);      } else if (CpElementConstants.FIELD_NAME_OPERATION_TYPE_CODE.equals(id)) {        OperationTypeComboBoxFieldEditor editor = null;        editor = new OperationTypeComboBoxFieldEditor(transName + Util.asterisk(id, billElementMeta));        fieldEditors.add(editor);//业务类型        editor.getComboBox().addActionListener(new ActionListener() {          public void actionPerformed(ActionEvent e) {            JComboBox cmb = (JComboBox) e.getSource();            setValueByOperType((OperationType) cmb.getSelectedItem());          }        });      } else if (CpElementConstants.FIELD_NAME_BAL_MODE_CODE.equals(id)) {//结算方式        BalModeComboBoxFieldEditor editor = new BalModeComboBoxFieldEditor(transName        + Util.asterisk(id, billElementMeta));        fieldEditors.add(editor);      } else if (CpElementConstants.FIELD_NAME_CHECK_NO.equals(id)) {//支票号        CheckNoTextFieldEditor editor = new CheckNoTextFieldEditor(transName        + Util.asterisk(id, billElementMeta));        fieldEditors.add(editor);      } else if (CpElementConstants.FIELD_NAME_CONTRACT_CODE.equals(id)) {//合同编号        if (billElementMeta.getElementRenderType(id).equals(BillElement.GRID_RENDER)) {          ContractCodeGridFieldEditor editor = new ContractCodeGridFieldEditor(transName          + Util.asterisk(id, billElementMeta));          fieldEditors.add(editor);        }      } else if (AmElementConstants.FIELD_NAME_PAYOUT_CODE.equals(id)) {        PayoutTableSelectFieldEditor editor = new PayoutTableSelectFieldEditor(LangTransMeta        .translate(CpElementConstants.FIELD_TRANS_PAYOUT_NAME), this.isEnabled);        fieldEditors.add(editor);      } else if (AmElementConstants.FIELD_NAME_MANAGE_CODE.equals(id)) {        ManageTableSelectFieldEditor editor = new ManageTableSelectFieldEditor(LangTransMeta        .translate(CpElementConstants.FIELD_TRANS_MANAGE_NAME), this.isEnabled);        fieldEditors.add(editor);      } else if (AmElementConstants.FIELD_NAME_FILENAME.equals(id)) {//附件名        FileNameTextFieldEditor editor = new FileNameTextFieldEditor(transName        + Util.asterisk(id, billElementMeta));        fieldEditors.add(editor);      } else if (id.startsWith("D_ATTR")) {//扩展要素字段        fieldEditors.add(new DAttrTableSelectFieldEditor(LangTransMeta.translate(transId)        + Util.asterisk(id, billElementMeta)) {          public String getDattrType() {            return DAttr.getType(id.toUpperCase());          }        });      }    }    return fieldEditors;  }  protected void setValueByOperType(OperationType operType) {  }  protected void setIsEnabled(boolean isEnabled) {    this.isEnabled = isEnabled;  }  protected String defaultStyle = "0";//0:input新增风格 1：edit编辑风格  /**   * 初始化新增风格   */  protected void init(List billDataList, BillElementMeta preBem, BillElementMeta billElementMeta,  String product) {    this.init(billDataList, preBem, billElementMeta, product, defaultStyle);  }  /**   * 初始化   */  protected void init(List billDataList, BillElementMeta preBem, BillElementMeta billElementMeta,  String product, String styleType) {    this.billDataList = billDataList;    this.current = billDataList.get(0);    this.preBem = preBem;    this.billElementMeta = billElementMeta;    this.product = product;    toolBar.setModuleCode(product);    this.defaultStyle = styleType;    if ("0".equals(styleType)) {      setInputStyle();//新增风格    } else {      setEditStyle();//编辑风格    }    clientPanel.setLayout(new GridBagLayout());    clientPanel.add(dynamicPane, new GridBagConstraints(0, 2, 1, 1, 1.0, 1.0, GridBagConstraints.WEST,    GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0));    installListeners();    addFieldEditors();  }  protected void setEditStyle() {    toolBar.setLayout(new FlowLayout(FlowLayout.LEFT));    addToolBarComponet(toolBar);    setLayout(new BorderLayout());    JPanel tempPanel = new JPanel(new BorderLayout());    tempPanel.add(toolBar, BorderLayout.NORTH);    tempPanel.add(topPanel, BorderLayout.CENTER);    add(tempPanel, BorderLayout.NORTH);    add(new JScrollPane(clientPanel), BorderLayout.CENTER);  }  protected void setInputStyle() {    toolBar.setLayout(new FlowLayout());    addToolBarComponet(toolBar);    setLayout(new BorderLayout());    add(topPanel, BorderLayout.NORTH);    add(new JScrollPane(clientPanel), BorderLayout.CENTER);    add(toolBar, BorderLayout.SOUTH);  }  public void setTableMode(TableModel tableModel) {    JGroupableTable table2 = getTable();    table2.setModel(tableModel);    table2.getSelectionModel().setSelectionInterval(0, 0);  }  protected void addFieldEditors() {    fieldEditorsByBem = new ArrayList();    fieldEditors = createFieldEditorsByBem();    fieldEditorsByBem.addAll(fieldEditors);    dynamicPane.setGridColor(Color.red);    dynamicPane.removeAll();    dynamicPane.setRowHeight(30);    dynamicPane.setLayout(new GridCellLayout());    dynamicPane.setBackground(AbstractEditInputBill.this.getBackground());    dynamicPane.setModel(new AbstractTableModel() {      public int getColumnCount() {        return 4;      }      public int getRowCount() {        return fieldEditors.size();      }      public Object getValueAt(int rowIndex, int columnIndex) {        return null;      }    });    dynamicPane.getTableHeader().getColumnModel().getColumn(0).setPreferredWidth(6);    dynamicPane.getTableHeader().getColumnModel().getColumn(1).setPreferredWidth(4);    dynamicPane.getTableHeader().getColumnModel().getColumn(2).setPreferredWidth(320);    //自己创建的固定的FieldEditor    AbstractFieldEditor[] createFieldEditor = createSelfFieldEditor();    if (createFieldEditor != null) {      fieldEditors.addAll(Arrays.asList(createFieldEditor));    }    for (int row = 0; row < fieldEditors.size(); row++) {      AbstractFieldEditor e = fieldEditors.get(row);      final JLabel label = new AsteriskLabel(e.getName());      label.setPreferredSize(new Dimension(40, 10));      e.addPropertyChangeListener("name", new PropertyChangeListener() {        public void propertyChange(PropertyChangeEvent evt) {          label.setText((String) evt.getNewValue());        }      });      label.setBorder(new CustomBorder());      e.setBorder(new CustomBorder());      dynamicPane.add(label, new CellConstraints(row, 0, row, 1));      dynamicPane.add(createPanel(e), new CellConstraints(row, 2, row, 2));    }  }  protected AbstractFieldEditor[] createSelfFieldEditor() {    return null;  }  /**   * 安装监听器   */  private void installListeners() {    getTable().getSelectionModel().addListSelectionListener(new ListSelectionListener() {      public void valueChanged(ListSelectionEvent e) {        if (e.getValueIsAdjusting()) {          return;        }        JGroupableTable table = getTable();        int row = table.getSelectedRow();        if (row > -1 && row < table.getRowCount()) {          current = billDataList.get(table.convertRowIndexToModel(row));          updateFieldEditorEditable();          updateFieldEditor();          if (payBankInfo != null) {            payBankInfo.setEditObject(current);          }          balanceInfo.setText(StringTools.getNumberFormat(getDpBalance(current)));          payMoneyInfo.setText(StringTools.getNumberFormat(getDpPayMoney(current)));          totalMoneyInfo.setText(StringTools.getNumberFormat(getDpTotalMoney(current)));          balanceInfo.setEditable(false);          payMoneyInfo.setEditable(false);          totalMoneyInfo.setEditable(false);          balanceInfo.setHorizontalAlignment(JTextField.RIGHT);          payMoneyInfo.setHorizontalAlignment(JTextField.RIGHT);          totalMoneyInfo.setHorizontalAlignment(JTextField.RIGHT);        }      }    });  }  protected Map wfCanEditFieldMap = new HashMap();  // 更新编辑器是否可编辑  protected void updateFieldEditorEditable() {    for (AbstractFieldEditor editor : fieldEditors) {      if ("0".equals(defaultStyle)) {//新增页面可编辑        editor.setEnabled(true);        if (editor.getEditorComponent() instanceof JButtonTextField) {          ((JButtonTextField) editor.getEditorComponent()).setEditable(true);        }        continue;      }      if (wfCanEditFieldMap.containsKey(editor.getFieldEditorCode())) {//工作流中定义可编辑        editor.setEnabled(true);      } else {        editor.setEnabled(this.isEnabled);//草稿时可编辑      }    }  }  // 根据当前选定的对象更新所有编辑器  protected void updateFieldEditor() {    for (AbstractFieldEditor editor : fieldEditors) {      editor.setEditObject(current);    }    balanceInfo.setText(StringTools.getNumberFormat(getDpBalance(current)));    payMoneyInfo.setText(StringTools.getNumberFormat(getDpPayMoney(current)));    totalMoneyInfo.setText(StringTools.getNumberFormat(getDpTotalMoney(current)));  }  protected abstract String getDpBalance(Object obj);  protected abstract String getDpTotalMoney(Object obj);  protected abstract String getDpPayMoney(Object obj);  protected JGroupableTable getTable() {    if (table == null) {      table = createTable();    }    return table;  }  protected JGroupableTable createTable() {    JGroupableTable newTable = SwingUtil.createTable(JGroupableTable.class);    newTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);    newTable.getTableRowHeader().setVisible(false);    newTable.setShowCheckedColumn(false);    return newTable;  }  public void setPayBankInfo(PayBankInfo payBankInfo) {    this.payBankInfo = payBankInfo;    payBankInfo.setEditInputBill(this);    clientPanel.add(payBankInfo, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0, GridBagConstraints.WEST,    GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));    payBankInfo.setEditObject(current);  }  public BankInfo getPayBankInfo() {    return payBankInfo;  }  public Object getCurrentEditObject() {    return current;  }  public abstract void addToolBarComponet(JFuncToolBar bottomPanel);}