package com.ufgov.zc.client.component.table.codecelleditor;import java.awt.Component;import java.util.List;import javax.swing.JTable;import javax.swing.table.TableCellEditor;import com.ufgov.zc.client.component.PayBankAccountSelectField;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.GkAbstractCellEditor;import com.ufgov.zc.common.commonbiz.model.BankAccount;import com.ufgov.zc.common.commonbiz.model.BaseBill;public class PayBankCellEditor extends GkAbstractCellEditor implements TableCellEditor {  private static final long serialVersionUID = -1877655270782827672L;  PayBankAccountSelectField payBankField;  PayBankCellEditor self = this;  private JTable table;  List acctypeList;  public PayBankCellEditor() {    payBankField = new PayBankAccountSelectField(20);    payBankField.addValueChangeListener(new ValueChangeListener() {      public void valueChanged(ValueChangeEvent e) {        self.stopCellEditing();        if (table != null) {          table.repaint();        }      }    });  }  public PayBankCellEditor(int col, List acctypeList) {    this.acctypeList = acctypeList;    payBankField = new PayBankAccountSelectField(20, acctypeList);    payBankField.addValueChangeListener(new ValueChangeListener() {      public void valueChanged(ValueChangeEvent e) {        self.stopCellEditing();        if (table != null) {          table.repaint();        }      }    });  }  public Component getTableCellEditorComponent(final JTable table, Object value, boolean isSelected, int row,  int column) {    this.table = table;    BaseBill bill = (BaseBill) ((BeanTableModel) table.getModel()).getBean(row);    payBankField.refreshData(acctypeList);    payBankField.setValueByCode(null);    if (value != null && payBankField.getValue() == null) {      payBankField.setText((String) value);    }    return payBankField;  }  public Object getCellEditorValue() {    BankAccount v = payBankField.getBankAccount();    String v2 = payBankField.getText();    if (v != null) {      String bankAccCode = v.getBankAccCode();      if (bankAccCode != null && bankAccCode.equalsIgnoreCase(v2)) {        return v;      } else {        return v2;      }    } else if (v == null && v2 != null && !"".equals(v2.trim())) {      return v2;    } else {      return null;    }  }}