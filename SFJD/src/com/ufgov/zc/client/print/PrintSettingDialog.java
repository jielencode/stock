package com.ufgov.zc.client.print;import java.awt.BorderLayout;import java.awt.Color;import java.awt.FlowLayout;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JLabel;import javax.swing.JPanel;import com.ufgov.smartclient.component.JClassifyList;import com.ufgov.smartclient.component.JComboBoxEx;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.UIConstants;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.model.PrintSetting;import com.ufgov.zc.common.system.model.PrintTemplate;public class PrintSettingDialog extends GkBaseDialog {  /**   *    */  private static final long serialVersionUID = 1789677976294158628L;  private RequestMeta requestMeta;  private List dataBufferList = new ArrayList();  private Map<String, PrintTemplate> dataMap = new HashMap<String, PrintTemplate>();  private IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory  .create(IBaseDataServiceDelegate.class, "baseDataServiceDelegate");  private JClassifyList classifyList = new JClassifyList();  private JComboBoxEx showPrintDialogComboBox = new JComboBoxEx();  private JPanel componentPanel = new JPanel();  private JPanel bottomPanel = new JPanel();  private JButton okButton = new JButton("确定");  private JButton cancelButton = new JButton("取消");  public PrintSettingDialog(RequestMeta requestMeta) {    this.requestMeta = requestMeta;    this.init();    this.refreshData(requestMeta);    this.setModal(true);    this.setTitle("打印模板设置");    this.setSize(UIConstants.PRINT_SETTING_DIALOG_WIDTH,    UIConstants.PRINT_SETTING_DIALOG_HEIGHT);    this.moveToScreenCenter();    this.setVisible(true);  }  private void init() {    JLabel showPrintDialogLabel = new JLabel("  显示打印对话框:");    showPrintDialogComboBox.addItem("N");    showPrintDialogComboBox.addItem("Y");    showPrintDialogComboBox.addItemDisplaLable("N", "否");    showPrintDialogComboBox.addItemDisplaLable("Y", "是");    GridBagLayout gblBasic = new GridBagLayout();    componentPanel.setLayout(gblBasic);    int gridx, gridy, gridwidth, gridheight, anchor, fill, ipadx, ipady;    double weightx, weighty;    Insets inset;    gridx = 0;    gridy = 0;    gridwidth = 1;    gridheight = 1;    weightx = 1;    weighty = 1;    anchor = GridBagConstraints.WEST;    fill = GridBagConstraints.NONE;    inset = new Insets(1, 0, 1, 0);    ipadx = 0;    ipady = 0;    gblBasic.setConstraints(showPrintDialogLabel, new GridBagConstraints(gridx,    gridy, gridwidth, gridheight, weightx, weighty, anchor, fill, inset, ipadx,    ipady));    componentPanel.add(showPrintDialogLabel);    gridx = 1;    gridy = 0;    gridwidth = 1;    gridheight = 1;    weightx = 1;    weighty = 1;    anchor = GridBagConstraints.WEST;    fill = GridBagConstraints.NONE;    inset = new Insets(1, 0, 1, 0);    ipadx = 0;    ipady = 0;    gblBasic.setConstraints(showPrintDialogComboBox, new GridBagConstraints(gridx,    gridy, gridwidth, gridheight, weightx, weighty, anchor, fill, inset, ipadx,    ipady));    componentPanel.add(showPrintDialogComboBox);    bottomPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));    bottomPanel.add(okButton);    bottomPanel.add(cancelButton);    this.setLayout(new BorderLayout());    JPanel tempPanel = new JPanel(new BorderLayout());    tempPanel.add(this.classifyList, BorderLayout.CENTER);    tempPanel.add(componentPanel, BorderLayout.SOUTH);    tempPanel.setBorder(BorderFactory.createLineBorder(Color.GRAY));    this.add(tempPanel, BorderLayout.CENTER);    this.add(bottomPanel, BorderLayout.SOUTH);    this.okButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doOK();      }    });    this.cancelButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doCancel();      }    });  }  public void refreshData(RequestMeta requestMeta) {    this.requestMeta = requestMeta;    dataBufferList.clear();    dataMap.clear();    dataBufferList = baseDataServiceDelegate    .getCurrentPrintTemplate(this.requestMeta);    for (int i = 0; i < dataBufferList.size(); i++) {      PrintTemplate data = (PrintTemplate) dataBufferList.get(i);      this.dataMap.put(data.getTemplateCode(), data);    }    classifyList.setLeftObjects(dataBufferList.toArray());    PrintSetting printSetting = baseDataServiceDelegate    .getCurrentPrintSetting(this.requestMeta);    if (printSetting != null) {      if (printSetting.getTemplateCode() != null) {        String[] selected = printSetting.getTemplateCode().split(",");        List selectedList = new ArrayList();        for (int i = 0; i < selected.length; i++) {          PrintTemplate pt = dataMap.get(selected[i]);          if (pt != null) {            selectedList.add(pt);          }          classifyList.setRightObjects(selectedList.toArray());        }      }      this.showPrintDialogComboBox      .setSelectedItem(printSetting.getShowPrintDialog());    }    this.repaint();  }  private void doOK() {    Object[] templates = classifyList.getRightObjects();    String templateCodes = "";    for (int i = 0; i < templates.length; i++) {      templateCodes += i == 0 ? "" : ",";      templateCodes += ((PrintTemplate) templates[i]).getTemplateCode();    }    PrintSetting printSetting = new PrintSetting();    printSetting.setCompoId(this.requestMeta.getPrintCompoId());    printSetting.setPageType(this.requestMeta.getPageType());    printSetting.setTemplateCode(templateCodes);    printSetting.setUserId(this.requestMeta.getSvUserID());    printSetting.setShowPrintDialog((String) this.showPrintDialogComboBox    .getSelectedItem());    this.baseDataServiceDelegate.savePrintSettingFN(printSetting, requestMeta);    closeDialog();  }  private void doCancel() {    closeDialog();  }}