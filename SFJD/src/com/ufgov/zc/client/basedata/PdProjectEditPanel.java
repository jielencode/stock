package com.ufgov.zc.client.basedata;import java.awt.BorderLayout;import java.awt.Dimension;import java.awt.Font;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.FocusAdapter;import java.awt.event.FocusEvent;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.ArrayList;import java.util.Enumeration;import java.util.List;import java.util.Map;import javax.swing.JCheckBox;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JMenuItem;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JPopupMenu;import javax.swing.JScrollPane;import javax.swing.JTextField;import javax.swing.JTree;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.TreePath;import org.apache.log4j.Logger;import com.ufgov.smartclient.plaf.GrayLookAndFeel;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.CompanySelectField;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JSaveableSplitPane;import com.ufgov.zc.client.component.ProjectTreePanel;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.element.ProjectTypeTableSelectField;import com.ufgov.zc.client.util.NumUtil;import com.ufgov.zc.common.commonbiz.model.Project;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.BusinessOptionConstants;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.model.AsOption;import com.ufgov.zc.common.system.model.User;public class PdProjectEditPanel extends JPanel implements ParentWindowAware {  private static final Logger logger = Logger.getLogger(PdProjectEditPanel.class);  private Window parentWindow;  private User user;  private String compoId = "MA_CP_PD_PROJECT_NEW";  private RequestMeta requestMeta;  private JSaveableSplitPane splitPane = new JSaveableSplitPane();  private ProjectTreePanel projectTreePanel = new ProjectTreePanel(compoId);  private JFuncToolBar toolBar = new JFuncToolBar();  private FuncButton newPlanButton = new AddButton();  private FuncButton saveButton = new SaveButton();  private DeleteButton deleteButton = new DeleteButton();  private final int tfWidth = 30;  private JPanel projectEditPanel = new JPanel(new BorderLayout());  private JTextField projectCode = new JTextField(20);  private JTextField projectName = new JTextField(20);  private JTextField superCodeField = new JTextField(20);  private JTextField superNameField = new JTextField(tfWidth);  private ProjectTypeTableSelectField projectTypeField = new ProjectTypeTableSelectField(20);  private CompanySelectField companyField = new CompanySelectField(20);  private JTextField codeRule = new JTextField();  private JCheckBox isLowestChk = new JCheckBox();  private IBaseDataServiceDelegate baseDataServiceDelegate;  private AsOption asOption;  private String treePath;  private JTree tree;  private String isDelControl = AsOptionMeta.getOptVal(BusinessOptionConstants.OPT_MA_CP_PD_PROJECT_NEW_DEL_CONTROL);  public PdProjectEditPanel() {    init();  }  private void initToolBar() {    toolBar.setModuleCode("MA");    toolBar.setCompoId(compoId);    toolBar.add(newPlanButton);    toolBar.add(saveButton);    if ("N".equalsIgnoreCase(this.isDelControl)) {      toolBar.add(deleteButton);    }    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doSave();      }    });    newPlanButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        tree.setSelectionRow(-1);        doClear();        projectCode.setText("");        superCodeField.setText("");        superNameField.setText("");      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doDelete();      }    });  }  private void init() {    initService();    initToolBar();    initProjectEditPanel();    tree = projectTreePanel.getSelectTree();    tree.addMouseListener(new MouseAdapter() {      public void mouseClicked(MouseEvent e) {        doEdit();      }    });    tree.addMouseListener(new MouseListener() {      public void mouseClicked(MouseEvent e) {        // TODO Auto-generated method stub      }      public void mouseEntered(MouseEvent e) {        // TODO Auto-generated method stub      }      public void mouseExited(MouseEvent e) {        // TODO Auto-generated method stub      }      public void mousePressed(MouseEvent e) {        // TODO Auto-generated method stub      }      public void mouseReleased(MouseEvent e) {        // TODO Auto-generated method stub        //判断是否为右键        if (e.isPopupTrigger()) {          TreePath path = tree.getPathForLocation(e.getX(), e.getY());          if (path == null) {            return;          }          //选中该节点          tree.setSelectionPath(path);          //判断是否为根节点          if (path.getParentPath() != null) {            JMenuItem del = new JMenuItem("删除  ");            JMenuItem newNode = new JMenuItem("新建子项目");            JPopupMenu popupMenu1;            popupMenu1 = new JPopupMenu();            popupMenu1.add(newNode);            if ("N".equalsIgnoreCase(isDelControl)) {              popupMenu1.add(del);            }            newNode.addActionListener(new ActionListener() {              //设置菜单项动作              public void actionPerformed(ActionEvent e) {                doNewNode();              }            });            del.addActionListener(new ActionListener() {              public void actionPerformed(ActionEvent e) {                doDelete();              }            });            //弹出右键菜单            popupMenu1.show(tree, e.getX(), e.getY());          }        }      }    });    splitPane.setOneTouchExpandable(true);    splitPane.setContinuousLayout(true);    splitPane.setOrientation(JSaveableSplitPane.HORIZONTAL_SPLIT);    splitPane.setDividerSize(10);    splitPane.setDividerDefaultLocation(this.getClass().getName() + "_splitPane_dividerLocation", 180);    JPanel tmpPanel = new JPanel(new BorderLayout());    tmpPanel.add(toolBar, BorderLayout.NORTH);    JPanel panel = new JPanel();    panel.add(this.projectEditPanel);    JScrollPane jsp = new JScrollPane();    jsp.getViewport().add(panel);    tmpPanel.add(jsp, BorderLayout.CENTER);    projectTreePanel.setMinimumSize(new Dimension(180, 0));    tmpPanel.setMinimumSize(new Dimension(0, 0));    splitPane.setLeftComponent(projectTreePanel);    splitPane.setRightComponent(tmpPanel);    this.setLayout(new BorderLayout());    this.add(splitPane, BorderLayout.CENTER);  }  private void initProjectEditPanel() {    //    projectTypeField.setEditable(false);    projectTypeField.setPreferredSize(new Dimension(130, 20));    JPanel titlePanel = new JPanel();    Font f = new Font("宋体", Font.BOLD, 13);    JLabel titleLab = new JLabel("编 辑");    titleLab.setFont(f);    titlePanel.add(titleLab);    JPanel pEditPanel = new JPanel();    GridBagLayout gblBasic = new GridBagLayout();    pEditPanel.setLayout(gblBasic);    int gridx, gridy, gridwidth, gridheight, anchor, fill, ipadx, ipady;    double weightx, weighty;    Insets inset;    gridwidth = 1;    gridheight = 1;    weightx = 1;    weighty = 1;    ipadx = 0;    ipady = 0;    fill = GridBagConstraints.NONE;    inset = new Insets(5, 5, 5, 5);    gridx = 0;    gridy = 0;    anchor = GridBagConstraints.EAST;    JLabel startLabel = new JLabel("项目代码：");    gblBasic.setConstraints(startLabel, new GridBagConstraints(gridx, gridy, gridwidth, gridheight, weightx,    weighty, anchor, fill, inset, ipadx, ipady));    pEditPanel.add(startLabel);    gridx = 1;    gridy = 0;    anchor = GridBagConstraints.WEST;    fill = GridBagConstraints.HORIZONTAL;    gblBasic.setConstraints(projectCode, new GridBagConstraints(gridx, gridy, gridwidth, gridheight, weightx,    weighty, anchor, fill, inset, ipadx, ipady));    pEditPanel.add(projectCode);    gridx = 2;    gridy = 0;    anchor = GridBagConstraints.EAST;    fill = GridBagConstraints.NONE;    JLabel endLabel = new JLabel("项目名称：");    gblBasic.setConstraints(endLabel, new GridBagConstraints(gridx, gridy, gridwidth, gridheight, weightx,    weighty, anchor, fill, inset, ipadx, ipady));    pEditPanel.add(endLabel);    gridx = 3;    gridy = 0;    anchor = GridBagConstraints.WEST;    fill = GridBagConstraints.HORIZONTAL;    gblBasic.setConstraints(projectName, new GridBagConstraints(gridx, gridy, gridwidth, gridheight, weightx,    weighty, anchor, fill, inset, ipadx, ipady));    pEditPanel.add(projectName);    gridx = 4;    gridy = 0;    anchor = GridBagConstraints.EAST;    fill = GridBagConstraints.NONE;    JLabel printLabel = new JLabel("项目类型：");    gblBasic.setConstraints(printLabel, new GridBagConstraints(gridx, gridy, gridwidth, gridheight, weightx,    weighty, anchor, fill, inset, ipadx, ipady));    pEditPanel.add(printLabel);    gridx = 5;    gridy = 0;    anchor = GridBagConstraints.WEST;    fill = GridBagConstraints.HORIZONTAL;    gblBasic.setConstraints(projectTypeField, new GridBagConstraints(gridx, gridy, gridwidth, gridheight,    weightx, weighty, anchor, fill, inset, ipadx, ipady));    pEditPanel.add(projectTypeField);    gridx = 0;    gridy = 1;    anchor = GridBagConstraints.EAST;    fill = GridBagConstraints.NONE;    JLabel highterCode = new JLabel("上级项目代码：");    gblBasic.setConstraints(highterCode, new GridBagConstraints(gridx, gridy, gridwidth, gridheight, weightx,    weighty, anchor, fill, inset, ipadx, ipady));    pEditPanel.add(highterCode);    gridx = 1;    gridy = 1;    anchor = GridBagConstraints.WEST;    fill = GridBagConstraints.HORIZONTAL;    gblBasic.setConstraints(superCodeField, new GridBagConstraints(gridx, gridy, gridwidth, gridheight,    weightx, weighty, anchor, fill, inset, ipadx, ipady));    pEditPanel.add(superCodeField);    superCodeField.addFocusListener(new FocusAdapter() {      public void focusLost(FocusEvent e) {        if (superCodeField.getText().equals("")) {          superNameField.setText("");        }      }    });    gridx = 2;    gridy = 1;    anchor = GridBagConstraints.EAST;    fill = GridBagConstraints.NONE;    JLabel highterName = new JLabel("上级项目名称：");    gblBasic.setConstraints(highterName, new GridBagConstraints(gridx, gridy, gridwidth, gridheight, weightx,    weighty, anchor, fill, inset, ipadx, ipady));    pEditPanel.add(highterName);    gridx = 3;    gridy = 1;    anchor = GridBagConstraints.WEST;    fill = GridBagConstraints.HORIZONTAL;    superNameField.setEditable(false);    gblBasic.setConstraints(superNameField, new GridBagConstraints(gridx, gridy, gridwidth, gridheight,    weightx, weighty, anchor, fill, inset, ipadx, ipady));    pEditPanel.add(superNameField);    gridx = 4;    gridy = 1;    anchor = GridBagConstraints.EAST;    fill = GridBagConstraints.NONE;    JLabel companyLabel = new JLabel("项目申报单位：");    gblBasic.setConstraints(companyLabel, new GridBagConstraints(gridx, gridy, gridwidth, gridheight,    weightx, weighty, anchor, fill, inset, ipadx, ipady));    pEditPanel.add(companyLabel);    gridx = 5;    gridy = 1;    anchor = GridBagConstraints.WEST;    fill = GridBagConstraints.HORIZONTAL;    gblBasic.setConstraints(companyField, new GridBagConstraints(gridx, gridy, gridwidth, gridheight,    weightx, weighty, anchor, fill, inset, ipadx, ipady));    pEditPanel.add(companyField);    gridx = 0;    gridy = 2;    anchor = GridBagConstraints.EAST;    fill = GridBagConstraints.NONE;    JLabel higherLabel = new JLabel("编码规则：");    gblBasic.setConstraints(higherLabel, new GridBagConstraints(gridx, gridy, gridwidth, gridheight, weightx,    weighty, anchor, fill, inset, ipadx, ipady));    pEditPanel.add(higherLabel);    gridx = 1;    gridy = 2;    anchor = GridBagConstraints.WEST;    fill = GridBagConstraints.HORIZONTAL;    codeRule.setEditable(false);    gblBasic.setConstraints(codeRule, new GridBagConstraints(gridx, gridy, gridwidth, gridheight, weightx,    weighty, anchor, fill, inset, ipadx, ipady));    pEditPanel.add(codeRule);    gridx = 2;    gridy = 2;    anchor = GridBagConstraints.EAST;    fill = GridBagConstraints.NONE;    JLabel isEndLabel = new JLabel("是否末级：");    gblBasic.setConstraints(isEndLabel, new GridBagConstraints(gridx, gridy, gridwidth, gridheight, weightx,    weighty, anchor, fill, inset, ipadx, ipady));    pEditPanel.add(isEndLabel);    gridx = 3;    gridy = 2;    anchor = GridBagConstraints.WEST;    fill = GridBagConstraints.HORIZONTAL;    isLowestChk.setSelected(false);    isLowestChk.setPreferredSize(new Dimension(130, 20));    gblBasic.setConstraints(isLowestChk, new GridBagConstraints(gridx, gridy, gridwidth, gridheight, weightx,    weighty, anchor, fill, inset, ipadx, ipady));    pEditPanel.add(isLowestChk);    projectEditPanel.add(titlePanel, BorderLayout.NORTH);    projectEditPanel.add(pEditPanel, BorderLayout.CENTER);  }  private boolean isHaveSuperCode() {    if (superCodeField.getText().equals("")) {      superNameField.setText("");      return true;    }    String code = superCodeField.getText().trim();    Map map = projectTreePanel.getMap();    Project project = (Project) map.get(code);    if (project == null) {      JOptionPane.showMessageDialog(null, "您输入的上级项目代码不存在，请输入正确的上级项目代码！", "提示", JOptionPane.INFORMATION_MESSAGE);      superCodeField.setText("");      superNameField.setText("");      superCodeField.requestFocus();      return false;    } else {      superNameField.setText(project.getName());      return true;    }  }  private void initService() {    LangTransMeta.init("MA%");    requestMeta = WorkEnv.getInstance().getRequestMeta();    requestMeta.setCompoId(compoId);    this.baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(    IBaseDataServiceDelegate.class, "baseDataServiceDelegate");    asOption = baseDataServiceDelegate.getAsOption(BusinessOptionConstants.OPT_PD_PROJECT_LEVEL, requestMeta);  }  private void refreshTree() {    projectTreePanel.refreshTree();    doSelection();  }  private void doSelection() {    int rowCount = tree.getRowCount();    DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();    if (node == null || node.getNextNode() == null)      node = (DefaultMutableTreeNode) tree.getModel().getRoot();    DefaultMutableTreeNode currentNode = node;    node = node.getNextNode();    if (node == null)      return;    while (node != currentNode) {      Project project = (Project) node.getUserObject();      String codeName = project.getCode() + project.getName();      if (codeName.indexOf(treePath) >= 0) {        for (int i = rowCount - 1; i > 0; i--) {          tree.collapseRow(i);        }        tree.setSelectionPath(new TreePath(node.getPath()));        int[] selectedRows = tree.getSelectionRows();        if (selectedRows.length > 0) {          tree.scrollRowToVisible(selectedRows[0]);        }        return;      }      node = node.getNextNode();      if (node == null)        node = (DefaultMutableTreeNode) tree.getModel().getRoot();    }  }  private void doSave() {    boolean success = true;    try {      String pCode = projectCode.getText().trim();      Map map = projectTreePanel.getMap();      Project pd = (Project) map.get(pCode);      if (pd != null) {        JOptionPane.showMessageDialog(this, "编号" + pCode + "已存在，请在项目树中选择后编辑！", "提示",        JOptionPane.INFORMATION_MESSAGE);        return;      }    } catch (Exception ex) {      logger.error(ex.getMessage(), ex);      //do nothing;    }    DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();    Project project;    if (node != null && node.getUserObject() instanceof String) {      JOptionPane.showMessageDialog(this, "请选择要编辑的项目 ！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    StringBuffer returnInfo = new StringBuffer("");    if (projectCode.getText().equals("")) {      returnInfo.append("项目代码不能为空！\n");    }    if (projectName.getText().equals("")) {      returnInfo.append("项目名称不能为空！\n");    }    if (projectTypeField.getText().equals("")) {      returnInfo.append("项目类型不能为空！\n");    }    if (companyField.getText().equals("")) {      returnInfo.append("项目申报单位不能为空！\n");    }    if (returnInfo.length() > 0) {      JOptionPane.showMessageDialog(this, returnInfo, "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    if (!isHaveSuperCode()) {      return;    }    if (superCodeField.getText().trim().equals(projectCode.getText().trim())) {      JOptionPane.showMessageDialog(this, "上级项目不能为本项目！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    if (node != null) {      project = (Project) node.getUserObject();    } else {      project = new Project();    }    project.setCode(projectCode.getText().trim());    project.setName(projectName.getText().trim());    if (projectTypeField.getValue() != null) {      String typetemp = projectTypeField.getValue().toString().split("]")[0];      String projectTypeCode = typetemp.substring(1, typetemp.length());      project.setPdProjectTypeCode(projectTypeCode);    }    project.setParentCode(superCodeField.getText().trim());    if (companyField.getValue() != null) {      String comptemp = companyField.getValue().toString().split("]")[0];      project.setPdCreaCoCode(comptemp.substring(1, comptemp.length()).trim());      project.setPdCreaCoName(companyField.getText());    }    project.setNd(WorkEnv.getInstance().getTransNd());    user = WorkEnv.getInstance().getCurrUser();    project.setPdCreateUserId(user.getUserId());    project.setPdCreateDate(WorkEnv.getInstance().getTransDate());    if (isLowestChk.isSelected()) {      project.setPdIsLowest("1");    } else {      project.setPdIsLowest(null);    }    try {      Project pdproject = (Project) baseDataServiceDelegate.savePdProject(project, requestMeta);      treePath = (String) pdproject.getCode() + (String) pdproject.getName();    } catch (Exception ex) {      returnInfo.append(ex.getMessage());      logger.error(ex.getMessage(), ex);      success = false;    }    if (success) {      JOptionPane.showMessageDialog(this, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      refreshTree();    } else {      JOptionPane.showMessageDialog(this, "保存失败！", "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doNewNode() {    DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();    if (node != null) {      Project project = (Project) node.getUserObject();      String numStr = NumUtil.getNum(compoId, "PD_PROJECT_CODE", project,      requestMeta);      projectCode.setText(numStr);      superCodeField.setText(project.getCode());      superNameField.setText(project.getName());      superCodeField.setEditable(false);    }    doClear();  }  private void doClear() {    projectName.setText("");    projectTypeField.setText("");    companyField.setText("");    codeRule.setText("");    isLowestChk.setSelected(false);    projectCode.setEditable(true);  }  private void doEdit() {    DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();    if (node != null) {      if (node.getUserObject() instanceof String) {        return;      }      projectCode.setEditable(false);      superCodeField.setEditable(true);      Project project = (Project) node.getUserObject();      projectCode.setText(project.getCode());      projectName.setText(project.getName());      projectTypeField.setValueByCode(project.getPdProjectTypeCode());      superCodeField.setText(project.getParentCode());      if (project.getParentCode() != null) {        try {          if (!project.getParentCode().equals("")) {            Map map = projectTreePanel.getMap();            Project pd = (Project) map.get(project.getParentCode());            superNameField.setText(pd.getName());          }        } catch (Exception ex) {          logger.error(ex.getMessage(), ex);        }      } else {        superNameField.setText("");      }      companyField.setValueByCode(project.getPdCreaCoCode());      codeRule.setText(asOption.getOptVal());      String islowest = project.getPdIsLowest();      if (islowest == null) {        isLowestChk.setSelected(false);      } else {        isLowestChk.setSelected(true);      }    }  }  private void doDelete() {    String returnInfo = "";    boolean success = true;    try {      if (tree.getSelectionCount() == 0) {        JOptionPane.showMessageDialog(this, "请选择要删除的数据 ！", "提示", JOptionPane.INFORMATION_MESSAGE);        return;      }      DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();      Project project = (Project) node.getUserObject();      List childrenDataList = new ArrayList();      StringBuffer deleteNodeInfo = new StringBuffer("");      deleteNodeInfo.append("[" + project.getCode() + "]" + project.getName());      if (node.getChildCount() > 0) {        this.getDeepChildren(node, childrenDataList);        deleteNodeInfo.append("以及它的子");      }      int num = JOptionPane.showConfirmDialog(this, "确定删除 " + deleteNodeInfo + "项目吗 ？", "删除确认", 0);      if (num != 0) {        return;      }      childrenDataList.add(node.getUserObject());      baseDataServiceDelegate.deletePdProjectFN(childrenDataList, requestMeta);    } catch (BusinessException be) {      success = false;      logger.error(be.getStackTraceMessage(), be);    } catch (Exception ex) {      returnInfo = ex.getMessage();      success = false;      logger.error(ex.getMessage(), ex);    }    if (success) {      JOptionPane.showMessageDialog(this, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      projectTreePanel.refreshTree();      doClear();      projectCode.setText("");      superCodeField.setText("");      superNameField.setText("");    } else {      JOptionPane.showMessageDialog(this, "删除失败  ！\n" + returnInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void getDeepChildren(DefaultMutableTreeNode node, List childrenUserObjectList) {    for (Enumeration<DefaultMutableTreeNode> e = node.children(); e.hasMoreElements();) {      DefaultMutableTreeNode child = e.nextElement();      childrenUserObjectList.add(child.getUserObject());      getDeepChildren(child, childrenUserObjectList);    }  }  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window window) {    parentWindow = window;  }  public static void main(String[] args) throws Exception {    UIManager.setLookAndFeel(new GrayLookAndFeel());    SwingUtilities.invokeLater(new Runnable() {      public void run() {        PdProjectEditPanel panel = new PdProjectEditPanel();        JFrame f = new JFrame();        f.getContentPane().add(panel);        f.setSize(1000, 700);        f.setLocationRelativeTo(null);        f.setVisible(true);        f.addWindowListener(new WindowAdapter() {          public void windowClosing(WindowEvent e) {            System.exit(0);          }        });      }    });  }}