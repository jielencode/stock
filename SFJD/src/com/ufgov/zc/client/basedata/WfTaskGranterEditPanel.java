package com.ufgov.zc.client.basedata;import java.awt.BorderLayout;import java.awt.Dimension;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Vector;import javax.swing.JFrame;import javax.swing.JMenuItem;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JPopupMenu;import javax.swing.JScrollPane;import javax.swing.JTable;import javax.swing.JTree;import javax.swing.ListSelectionModel;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.event.ListSelectionEvent;import javax.swing.event.ListSelectionListener;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableModel;import javax.swing.table.TableRowSorter;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.TreePath;import org.apache.log4j.Logger;import com.ufgov.smartclient.component.table.CheckBoxCellEditor;import com.ufgov.smartclient.component.table.JGroupableTable;import com.ufgov.smartclient.component.table.cellrenderer.CheckBoxTableCellRenderer;import com.ufgov.smartclient.plaf.GrayLookAndFeel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JSaveableSplitPane;import com.ufgov.zc.client.component.button.CancelTaskButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.NotAccreditButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.table.celleditor.CellEditValidator;import com.ufgov.zc.client.component.table.celleditor.DateCellEditor;import com.ufgov.zc.client.console.AsOrgTreePanel;import com.ufgov.zc.client.util.GkPreferencesStore;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.common.commonbiz.model.WfTaskGranter;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.console.model.AsOrg;import com.ufgov.zc.common.system.RequestMeta;public class WfTaskGranterEditPanel extends JPanel implements ParentWindowAware {  private static final Logger logger = Logger.getLogger(WfTaskGranterEditPanel.class);  private Window parentWindow;  private String compoId = "WF_TASK_GRANTER";  private RequestMeta requestMeta;  private JSaveableSplitPane splitPane = new JSaveableSplitPane();  private AsOrgTreePanel asOrgTreePanel = new AsOrgTreePanel();  private JFuncToolBar toolBar = new JFuncToolBar();  private FuncButton saveButton = new SaveButton();  private DeleteButton deleteButton = new DeleteButton();  private NotAccreditButton notAccreditButton = new NotAccreditButton();  private String addFuncId = "fadd";  private CancelTaskButton cancelTaskButton = new CancelTaskButton();  private IBaseDataServiceDelegate baseDataServiceDelegate;  private JTree tree;  private List beforeList;  private JGroupableTable table;  private TableRowSorter tableSorter = new TableRowSorter();  public WfTaskGranterEditPanel() {    init();  }  private void initToolBar() {    toolBar.setModuleCode("WF");    toolBar.setCompoId(compoId);    toolBar.add(saveButton);    toolBar.add(deleteButton);    toolBar.add(notAccreditButton);    toolBar.add(cancelTaskButton);    deleteButton.setEnabled(false);    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doSave();      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doDelete();      }    });    notAccreditButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doRelieveWarrant();      }    });    cancelTaskButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doCancelTask();      }    });  }  private void init() {    initService();    initToolBar();    initTable();    refreshTableData();    tree = asOrgTreePanel.getSelectTree();    tree.addMouseListener(new MouseListener() {      public void mouseClicked(MouseEvent e) {        TreePath path = tree.getPathForLocation(e.getX(), e.getY());        if (path == null) {          return;        }        if (e.getClickCount() == 2) {          //选中该节点          tree.setSelectionPath(path);          if (path.getParentPath() != null) {            DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();            AsOrg asOrg = (AsOrg) node.getUserObject();            if (asOrg != null && asOrg.getUserId() != null) {              if (node.isLeaf()) {                // TODO Auto-generated method stub                doNewWarrant();              }            }          }        }      }      public void mouseEntered(MouseEvent e) {        // TODO Auto-generated method stub      }      public void mouseExited(MouseEvent e) {        // TODO Auto-generated method stub      }      public void mousePressed(MouseEvent e) {        // TODO Auto-generated method stub      }      public void mouseReleased(MouseEvent e) {        // TODO Auto-generated method stub        //判断是否为右键        if (e.isPopupTrigger()) {          TreePath path = tree.getPathForLocation(e.getX(), e.getY());          if (path == null) {            return;          }          //选中该节点          tree.setSelectionPath(path);          //判断是否为根节点          if (path.getParentPath() != null) {            DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();            JMenuItem del = new JMenuItem("删除授权  ");            JMenuItem newWarrant = new JMenuItem("新增授权");            JPopupMenu popupMenu1;            popupMenu1 = new JPopupMenu();            popupMenu1.add(newWarrant);            popupMenu1.add(del);            newWarrant.addActionListener(new ActionListener() {              //设置菜单项动作              public void actionPerformed(ActionEvent e) {                doNewWarrant();              }            });            del.addActionListener(new ActionListener() {              public void actionPerformed(ActionEvent e) {                doDelWarrant();              }            });            //弹出右键菜单            if (node.isLeaf())              popupMenu1.show(tree, e.getX(), e.getY());          }        }      }    });    splitPane.setOneTouchExpandable(true);    splitPane.setContinuousLayout(true);    splitPane.setOrientation(JSaveableSplitPane.HORIZONTAL_SPLIT);    splitPane.setDividerSize(10);    splitPane.setDividerDefaultLocation(this.getClass().getName() + "_splitPane_dividerLocation", 180);    JPanel tmpPanel = new JPanel(new BorderLayout());    tmpPanel.add(toolBar, BorderLayout.NORTH);    JScrollPane jsp = new JScrollPane();    jsp.getViewport().add(table);    tmpPanel.add(jsp, BorderLayout.CENTER);    asOrgTreePanel.setMinimumSize(new Dimension(0, 0));    tmpPanel.setMinimumSize(new Dimension(0, 0));    splitPane.setLeftComponent(asOrgTreePanel);    splitPane.setRightComponent(tmpPanel);    this.setLayout(new BorderLayout());    this.add(splitPane, BorderLayout.CENTER);  }  private void initService() {    LangTransMeta.init("WF%");    requestMeta = WorkEnv.getInstance().getRequestMeta();    requestMeta.setCompoId(compoId);    this.baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(    IBaseDataServiceDelegate.class, "baseDataServiceDelegate");  }  protected void initTable() {    table = new JGroupableTable();    table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);    table.setShowCheckedColumn(false);    table.getTableHeader().setReorderingAllowed(false);    table.setPreferencesKey(this.getClass().getName() + "_warrantTable");    table.setPreferenceStore(GkPreferencesStore.preferenceStore());    table.getTableRowHeader().setPreferredSize(new Dimension(50, 0));    table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {      public void valueChanged(ListSelectionEvent e) {        if (e.getValueIsAdjusting()) {          return;        }        deleteButton.setEnabled(true);      }    });  }  private void doNewWarrant() {    DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();    if (node != null) {      AsOrg asOrg = (AsOrg) node.getUserObject();      if (asOrg.getUserId() == null) {        JOptionPane.showMessageDialog(this, "请选择具体人员授权！", "提示", JOptionPane.INFORMATION_MESSAGE);        return;      }      if (asOrg.getUserId() != null && asOrg.getUserId().equals(WorkEnv.getInstance().getCurrUserId())) {        JOptionPane.showMessageDialog(this, "不能给自己本人授权！", "提示", JOptionPane.INFORMATION_MESSAGE);        return;      }      WfTaskGranter wfTaskGranter = new WfTaskGranter();      wfTaskGranter.setUserId(WorkEnv.getInstance().getCurrUserId());//getCurrCompany()      wfTaskGranter.setGrantedId(asOrg.getUserId());      wfTaskGranter.setGrantDate(WorkEnv.getInstance().getTransDate());      wfTaskGranter.setUserCoCode(WorkEnv.getInstance().getCurrCoCode());      wfTaskGranter.setUserOrgCode(WorkEnv.getInstance().getOrgCode());      wfTaskGranter.setUserPosiCode(WorkEnv.getInstance().getPoCode());      wfTaskGranter.setUserPosiId(WorkEnv.getInstance().getOrgPoCode());      wfTaskGranter.setIsGrant("Y");      try {        Map map = getMaWfGrantMap();        if (map != null) {          if (map.get(asOrg.getUserId()) == null) {            requestMeta.setFuncId(this.addFuncId);            baseDataServiceDelegate.insertWfTaskGranterFN(wfTaskGranter, requestMeta);            refreshTableData();            JOptionPane.showMessageDialog(this, "添加被授权人成功，请根据需要调整授权截止时间！", "提示",            JOptionPane.INFORMATION_MESSAGE);          } else {            JOptionPane.showMessageDialog(this, " 此用户已经添加到授权用户！", "提示", JOptionPane.INFORMATION_MESSAGE);          }        }      } catch (Exception e) {        logger.error(e.getMessage(), e);        JOptionPane.showMessageDialog(this, " 添加授权用户失败！", "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void doDelWarrant() {    DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();    if (node != null) {      AsOrg asOrg = (AsOrg) node.getUserObject();      try {        Map map = getMaWfGrantMap();        if (map != null) {          if (map.get(asOrg.getUserId()) == null) {            JOptionPane.showMessageDialog(this, " 此用户已不在授权列表中！", "提示", JOptionPane.INFORMATION_MESSAGE);            return;          }        }        int num = JOptionPane.showConfirmDialog(this, "确定删除吗 ？", "删除确认", 0);        if (num != 0) {          return;        }        baseDataServiceDelegate.deleteWfTaskGranterFN(asOrg.getUserId(), requestMeta);        refreshTableData();      } catch (Exception e) {        logger.error(e.getMessage(), e);        JOptionPane.showMessageDialog(this, " 删除授权用户失败！", "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void doDelete() {    if (table.getSelectedRow() < 0) {      JOptionPane.showMessageDialog(this, "请在表格中选择一条授权数据！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    String str = (String) (table.getValueAt(table.getSelectedRow(), 0));    try {      int num = JOptionPane.showConfirmDialog(null, "确定删除吗 ？", "删除确认", 0);      if (num != 0) {        return;      }      requestMeta.setFuncId("fdelete");      baseDataServiceDelegate.deleteWfTaskGranterFN(str.trim(), requestMeta);      refreshTableData();      JOptionPane.showMessageDialog(this, " 删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(null, " 删除授权用户失败！", "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doRelieveWarrant() {    if (table.getCellEditor() != null) {      table.getCellEditor().stopCellEditing();      if (table.isEditing()) {        return;      }    }    try {      TableModel tableModel = table.getModel();      if (tableModel.getRowCount() == 0) {        JOptionPane.showMessageDialog(this, "没有授权对象 ！", "提示", JOptionPane.INFORMATION_MESSAGE);        return;      }      List dataList = new ArrayList();      for (int i = 0; i < tableModel.getRowCount(); i++) {        WfTaskGranter wfTaskGranter = new WfTaskGranter();        wfTaskGranter.setGrantedId((String) tableModel.getValueAt(i, 0));        wfTaskGranter.setIsGrant((String) tableModel.getValueAt(i, 3));        dataList.add(wfTaskGranter);      }      baseDataServiceDelegate.updateToRelieveWarrant(dataList, requestMeta);      refreshTableData();      JOptionPane.showMessageDialog(this, "取消授权成功 ！", "提示", JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      logger.error(e.getMessage());      JOptionPane.showMessageDialog(this, "取消授权失败 ！" + e.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doCancelTask() {    try {      baseDataServiceDelegate.cancelGrantedTaskFN(WorkEnv.getInstance().getCurrUserId().trim(), requestMeta);      JOptionPane.showMessageDialog(this, "取消任务成功 ！", "提示", JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      logger.error(e.getMessage());      JOptionPane.showMessageDialog(this, "取消任务失败 ！" + e.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doSave() {    if (table.getCellEditor() != null) {      table.getCellEditor().stopCellEditing();      if (table.isEditing()) {        return;      }    }    try {      TableModel tableModel = table.getModel();      if (tableModel.getRowCount() == 0) {        JOptionPane.showMessageDialog(this, "没有授权对象不用保存 ！", "提示", JOptionPane.INFORMATION_MESSAGE);        return;      }      List dataList = new ArrayList();      for (int i = 0; i < tableModel.getRowCount(); i++) {        WfTaskGranter wfTaskGranter = new WfTaskGranter();        wfTaskGranter.setGrantedId((String) tableModel.getValueAt(i, 0));        wfTaskGranter.setGrantDate((Date) tableModel.getValueAt(i, 2));        //        wfTaskGranter.setIsGrant((String) tableModel.getValueAt(i, 3));        wfTaskGranter.setIsGrant("Y");        dataList.add(wfTaskGranter);      }      requestMeta.setFuncId(saveButton.getFuncId());      baseDataServiceDelegate.updateWfTaskGranterFN(dataList, requestMeta);      JOptionPane.showMessageDialog(this, "保存成功 ！", "提示", JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      logger.error(e.getMessage());      JOptionPane.showMessageDialog(this, "保存失败 ！" + e.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);    }  }  public void refreshTableData() {    table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);    table.setModel(getDefaultTableModel());    tableSorter.setModel(getDefaultTableModel());    table.setRowSorter(tableSorter);    SwingUtil.setTableCellEditor(table, "是否授权", new CheckBoxCellEditor("Y", "N"));    SwingUtil.setTableCellRenderer(table, "是否授权", new CheckBoxTableCellRenderer("Y", "N"));    CellEditValidator dateCellValidater = new CellEditValidator() {      public boolean validateCellValue(JTable table, Object oldValue, Object newValue, int row, int column) {        return true;      }    };    SwingUtil.setTableCellEditor(table, "授权截止日期", new DateCellEditor(dateCellValidater));    deleteButton.setEnabled(false);  }  private Map getMaWfGrantMap() {    Map map = new HashMap();    for (int i = 0; i < beforeList.size(); i++) {      WfTaskGranter wfTaskGranter = (WfTaskGranter) beforeList.get(i);      map.put(wfTaskGranter.getGrantedId(), wfTaskGranter);    }    return map;  }  public DefaultTableModel getDefaultTableModel() {    DefaultTableModel defaultMode = null;    beforeList = this.baseDataServiceDelegate.getWfTaskGranter(WorkEnv.getInstance().getCurrUserId(),    requestMeta);    final Vector names = new Vector();    names.add("被授权人代码");    names.add("被授权人");    names.add("授权截止日期");    //    names.add("是否授权");    final Vector data = new Vector();    if (beforeList != null && beforeList.size() > 0) {      for (int i = 0; i < beforeList.size(); i++) {        final Vector row = new Vector();        final WfTaskGranter rowData = (WfTaskGranter) beforeList.get(i);        row.add(rowData.getGrantedId());        row.add(rowData.getGrantedName());        row.add(rowData.getGrantDate());        //        row.add(rowData.getIsGrant());        data.add(row);      }    }    defaultMode = new DefaultTableModel(data, names) {      @Override      public int getColumnCount() {        return names.size();      }      @Override      public int getRowCount() {        return data.size();      }      public Class getColumnClass(int columnIndex) {        if (columnIndex == 2) {          return java.util.Date.class;        }        return Object.class;      }      @Override      public boolean isCellEditable(int row, int colum) {        if (colum > 0) {          return true;        } else {          return false;        }      }    };    return defaultMode;  }  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window window) {    parentWindow = window;  }  public static void main(String[] args) throws Exception {    UIManager.setLookAndFeel(new GrayLookAndFeel());    SwingUtilities.invokeLater(new Runnable() {      public void run() {        WfTaskGranterEditPanel panel = new WfTaskGranterEditPanel();        JFrame f = new JFrame();        f.setTitle("工作授权");        f.getContentPane().add(panel);        f.setSize(1000, 700);        f.setLocationRelativeTo(null);        f.setVisible(true);        f.addWindowListener(new WindowAdapter() {          public void windowClosing(WindowEvent e) {            System.exit(0);          }        });      }    });  }}