package com.ufgov.zc.server.zc.web.action.auction;import java.io.IOException;import java.io.PrintWriter;import java.math.BigDecimal;import java.util.Date;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import org.springframework.web.struts.ActionSupport;import com.ufgov.zc.common.zc.model.ZcAuctionRecord;import com.ufgov.zc.server.zc.service.IZcAuctionInfoService;public class AuctionValidateAction extends ActionSupport {  private final static Log log = LogFactory.getLog(AuctionValidateAction.class);  public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {    response.setContentType("text/html");    IZcAuctionInfoService zcAuctionInfoService = (IZcAuctionInfoService) this.getWebApplicationContext().getBean("zcAuctionInfoService");    try {      PrintWriter out = response.getWriter();      String bidPrice = request.getParameter("BidPrice");      String auctionId = request.getParameter("auctionId");      String minimumBid = request.getParameter("minimumBid");      if (auctionId != null && !"".equals(auctionId)) {        ZcAuctionRecord zcAuctionRecord = zcAuctionInfoService.getLowerAuctionPrice(auctionId);        if (bidPrice != null && !"".equals(bidPrice)) {          BigDecimal bdBidPrice = new BigDecimal(bidPrice);          BigDecimal bdAuctionBidPrice = new BigDecimal(zcAuctionRecord.getZcAuctionBidPrice());          BigDecimal bdMinimumBid = new BigDecimal(minimumBid);          if (bdBidPrice.compareTo(bdAuctionBidPrice.subtract(bdMinimumBid)) > -1          || bdBidPrice.compareTo(bdAuctionBidPrice.subtract(bdMinimumBid)) == 0) {            out.print("invalid");          } else {            ZcAuctionRecord auctionRecord = new ZcAuctionRecord();            auctionRecord.setZcAuctionId(auctionId);            auctionRecord.setZcAuctionBidUserid("testUser");            auctionRecord.setZcAuctionBidPrice(bidPrice);            auctionRecord.setZcAuctionBidTime(new Date());            zcAuctionInfoService.insertAuctionRecord(auctionRecord);            out.print("valid");          }        }      }    } catch (IOException e) {      e.printStackTrace();    }    return null;  }}