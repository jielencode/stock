package com.ufgov.zc.server.zc.web.form;import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;import javax.swing.JPanel;import org.springframework.beans.BeansException;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.RfqSinupPack;import com.ufgov.zc.common.zc.model.ZcEbRfqPack;import com.ufgov.zc.common.zc.model.ZcEbXunJiaBaoJia;import com.ufgov.zc.common.zc.model.ZcXunJiaDetail;import com.ufgov.zc.common.zc.model.ZcXunJiaSummary;import com.ufgov.zc.server.system.SpringContext;import com.ufgov.zc.server.zc.service.IZcEbRfqService;import com.ufgov.zc.server.zc.service.IZcEbXjbjService;import com.ufgov.zc.server.zc.web.ylbTable.ChangeRMB;public class XunJiaHuiZongTablePrintForm extends AbstractActionForm {  private ZcEbRfqPack zcEbRfqPack;  private List xjSummaryList = new ArrayList();  public String toXunJiaTotalPrint() {    try {      String packCode = this.getRequest().getParameter("packCode");      String projCode = this.getRequest().getParameter("projCode");      String nd = this.getRequest().getParameter("nd");      IZcEbRfqService zcEbRfqService = (IZcEbRfqService) SpringContext.getBean("zcEbRfqService");      ElementConditionDto dto = new ElementConditionDto();      dto.setPackCode(packCode);      dto.setProjCode(projCode);      dto.setNd(Integer.parseInt(nd));      zcEbRfqPack = zcEbRfqService.getZcEbRfqPack(dto, null);      System.out.println("zcEbRfqPack:---------------------" + zcEbRfqPack);      ElementConditionDto dto2 = new ElementConditionDto();      dto2.setPackCode(zcEbRfqPack.getPackCode());      dto2.setProjCode(zcEbRfqPack.getProjCode());      List xjdList = zcEbRfqService.getXunjiaDetaiList(dto2, null);      removeUnpriceProvider(xjdList);      collectSameProviderPrice(xjdList);      removeDuplicationProviders(xjSummaryList);      makeEnquiryListTabPane(xjdList);      System.out.println("xjSummaryList:---------------------" + xjSummaryList);    } catch (BeansException e) {      // TODO Auto-generated catch block      e.printStackTrace();    } catch (NumberFormatException e) {      // TODO Auto-generated catch block      e.printStackTrace();    }    return SUCCESS;  }  /**  * 将报名供应商中未报价的供应商去掉  * @param xjdList  */  private void removeUnpriceProvider(List xjdList) {    System.out.println("removeUnpriceProvider");    ZcXunJiaDetail detail = null;    RfqSinupPack rfq = null;    boolean same = true;    for (int i = 0; i < zcEbRfqPack.getRfqSinupPackList().size() && i >= 0; i++) {      rfq = (RfqSinupPack) zcEbRfqPack.getRfqSinupPackList().get(i);      for (int j = 0; j < xjdList.size(); j++) {        detail = (ZcXunJiaDetail) xjdList.get(j);        same = true;        if (rfq.getProviderCode() != null && rfq.getProviderCode().equals(detail.getProviderCode())) {          same = false;          break;        }      }      if (same) {        zcEbRfqPack.getRfqSinupPackList().remove(rfq);        i--;      }    }  }  private void collectSameProviderPrice(List xjdList) {    System.out.println("collectSameProviderPrice");    ZcXunJiaSummary sum = null;    ZcXunJiaDetail detail = null;    xjSummaryList.clear();    //如果没有中标人，那么暂时将暂时中标人设置为一个不可能存在的值    String winnerCode = this.zcEbRfqPack.getWinBidProviderCode() == null ? "##@##" : this.zcEbRfqPack.getWinBidProviderCode();    for (int i = 0; i < xjdList.size(); i++) {      detail = getCurrProviderDetail(xjdList, (ZcXunJiaDetail) xjdList.get(i));      System.out.println("..........detail:" + i + "," + detail);      if (detail == null) {        continue;      }      System.out.println("..........21321321321:");      sum = new ZcXunJiaSummary();      sum.setHaveXianHuo(detail.getHaveXianHuo());      sum.setGongHuoDate(detail.getGongHuoDate());      sum.setIsClosedDeal(winnerCode.equals(detail.getProviderCode()) ? "Y" : "N");      sum.setProviderCode(detail.getProviderCode());      sum.setProviderName(detail.getProviderName());      System.out.println("11111111111111111111111111111");      sum.setTotalPrice(getProviderTotalPrice(xjdList, detail));      ZcEbXunJiaBaoJia bj = new ZcEbXunJiaBaoJia();      bj.setSupplierCode(detail.getProviderCode());      bj.setProjCode(detail.getProjCode());      System.out.println("1111111111199999999999999" + SpringContext.getBean("baoJiaService").getClass());      IZcEbXjbjService baoJiaService = (IZcEbXjbjService) SpringContext.getBean("baoJiaService");      System.out.println("baoJiaService................" + baoJiaService + "," + detail.getProviderCode() + "," + detail.getProjCode());      ZcEbXunJiaBaoJia bjObj = baoJiaService.getXunJiaBaoJiaBySupplier(bj, null);      System.out.println("bjObj................" + bjObj);      sum.setLinkMan(bjObj.getManager());      sum.setLinkTel(bjObj.getPhone());      sum.setRemark(bjObj.getRemark());      xjSummaryList.add(sum);    }  }  private void removeDuplicationProviders(List xjdList) {    System.out.println("removeDuplicationProviders.......");    if (xjdList == null || xjdList.size() < 2) {      return;    }    for (int i = 0; i < xjdList.size() && i >= 0; i++) {      System.out.println("..........21321321321:" + xjdList.get(i));      ZcXunJiaDetail dOut = (ZcXunJiaDetail) xjdList.get(i);      String outCode = dOut.getProviderCode();      System.out.println("..........outCode:" + outCode);      if (outCode == null) {        continue;      }      for (int j = i + 1; j < xjdList.size() && j > 0; j++) {        System.out.println("..........xjdList.get(j):" + xjdList.get(j));        ZcXunJiaDetail dIn = (ZcXunJiaDetail) xjdList.get(j);        if (outCode.equals(dIn.getProviderCode())) {          xjdList.remove(dIn);          j--;        }      }    }  }  private ZcXunJiaDetail getCurrProviderDetail(List xjdList, ZcXunJiaDetail tarDetail) {    ZcXunJiaDetail detail = null;    for (int i = 0; i < xjdList.size(); i++) {      System.out.println(".........." + i + "," + xjdList.get(i));      detail = (ZcXunJiaDetail) xjdList.get(i);      if (detail.getProjCode().equals(tarDetail.getProjCode()) && detail.getPackCode().equals(tarDetail.getPackCode())      && detail.getProviderCode().equals(tarDetail.getProviderCode())) {        return detail;      }    }    return null;  }  private BigDecimal getProviderTotalPrice(List xjdList, ZcXunJiaDetail currDetail) {    System.out.println("getProviderTotalPrice.......");    ZcXunJiaDetail detail = null;    BigDecimal sum = new BigDecimal(0.0);    for (int i = 0; i < xjdList.size(); i++) {      detail = (ZcXunJiaDetail) xjdList.get(i);      System.out.println("detail......." + detail);      if (detail.getProjCode().equals(currDetail.getProjCode()) && detail.getPackCode().equals(currDetail.getPackCode())      && detail.getProviderCode().equals(currDetail.getProviderCode())) {        System.out.println("detail.3222......" + sum);        sum = sum.add(detail.getSpTotalSum());      }    }    return sum;  }  //创建询价供应商报价详细一览面板  private void makeEnquiryListTabPane(List xjdList) {    System.out.println("makeEnquiryListTabPane.......");    //JTabbedPane tabPane = new JTabbedPane();    if (this.xjSummaryList != null && this.xjSummaryList.size() > 0) {      RfqSinupPack spp = null;      ZcXunJiaSummary sp = null;      String title = null;      JPanel p = null;      String spCode = null;      String totalPrice = null;      List detailsForCurr = null;      for (int i = 0; i < this.xjSummaryList.size(); i++) {        System.out.println("..........this.xjSummaryList:" + this.xjSummaryList.get(i));        sp = (ZcXunJiaSummary) this.xjSummaryList.get(i);        spCode = sp.getProviderCode();        detailsForCurr = new ArrayList();        //找到当前供应商的detail        for (int j = 0; j < xjdList.size(); j++) {          if (spCode.equals(((RfqSinupPack) xjdList.get(j)).getProviderCode())) {            detailsForCurr.add(xjdList.get(j));          }        }        totalPrice = this.getTotalMoney(spCode, detailsForCurr);        //title = ZcUtil.substring(sp.getProviderName(), 16, "...") + "(总价:" + totalPrice + ")";        spp = new RfqSinupPack();        spp.setProviderCode(sp.getProviderCode());        spp.setProviderName(sp.getProviderName());        //p.add(createTopInfoPanel(spp, totalPrice), BorderLayout.NORTH);        //p.add(createEnquiryTablePanel(spp, detailsForCurr), BorderLayout.CENTER);        //tabPane.add(title, p);      }      //this.getLowestPrice(xjSummaryList);    } else {      //JPanel empty = new JPanel(new BorderLayout());      //JLabel label = new JLabel("当前没有相关数据需要显示...");      //label.setPreferredSize(new Dimension(300, 30));      //empty.add(label, BorderLayout.CENTER);      //tabPane.setLayout(new BorderLayout());      //tabPane.add(empty, BorderLayout.CENTER);    }    //return tabPane;  }  private String getTotalMoney(String spCode, List list) {    String result = null;    ZcXunJiaDetail detail = null;    BigDecimal sum = BigDecimal.valueOf(0);    for (int i = 0; i < list.size(); i++) {      detail = (ZcXunJiaDetail) list.get(i);      if (spCode.equals(detail.getProviderCode()) && detail.getSpTotalSum() != null) {        sum = sum.add(detail.getSpTotalSum());      }    }    result = ChangeRMB.doChange(sum.toString());    return result;  }  public ZcEbRfqPack getPackInfor() {    return zcEbRfqPack;  }  public List getXjSummaryList() {    return xjSummaryList;  }  public void setXjSummaryList(List xjSummaryList) {    this.xjSummaryList = xjSummaryList;  }}