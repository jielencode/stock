package com.ufgov.zc.server.zc.web.form;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import org.apache.struts.action.ActionMessage;import com.ufgov.zc.common.system.model.AsVal;import com.ufgov.zc.common.system.model.User;import com.ufgov.zc.common.zc.model.EmExpertType;import com.ufgov.zc.common.zc.model.EmExpertTypeJoin;import com.ufgov.zc.common.zc.model.ExpertPo;import com.ufgov.zc.server.system.SpringContext;import com.ufgov.zc.server.system.service.IAsValService;import com.ufgov.zc.server.system.util.NumUtil;import com.ufgov.zc.server.zc.service.IExpertService;import com.ufgov.zc.server.zc.service.IExpertTypeJoinService;import com.ufgov.zc.server.zc.service.IZcEmExpertTypeService;import com.ufgov.zc.server.zc.util.GeneralFunc;import com.ufgov.zc.server.zc.web.OptionItem;public class ExpertActionForm extends AbstractActionForm {  /**  *   */  private static final long serialVersionUID = 1L;  ExpertPo expertpo = new ExpertPo();  private User user = new User();  public User getUser() {    return user;  }  public void setUser(User user) {    this.user = user;  }  EmExpertType emExpertType = new EmExpertType();  public EmExpertType getEmExpertType() {    return emExpertType;  }  public void setEmExpertType(EmExpertType emExpertType) {    this.emExpertType = emExpertType;  }  List peopleList = new ArrayList();  List sexList = new ArrayList();  List stateList = new ArrayList();  List treeList = new ArrayList();  List lbList = new ArrayList();  public List getLbList() {    return lbList;  }  public void setLbList(List lbList) {    this.lbList = lbList;  }  public List getTreeList() {    return treeList;  }  public void setTreeList(List treeList) {    this.treeList = treeList;  }  List comList = new ArrayList();  List positionList = new ArrayList();  List callList = new ArrayList();  public List getPositionList() {    return positionList;  }  public void setPositionList(List positionList) {    this.positionList = positionList;  }  public List getComList() {    return comList;  }  public void setComList(List comList) {    this.comList = comList;  }  public List getStateList() {    return stateList;  }  public void setStateList(List stateList) {    this.stateList = stateList;  }  public List getSexList() {    return sexList;  }  public void setSexList(List sexList) {    this.sexList = sexList;  }  List list = new ArrayList();  IAsValService asValService = null;  IZcEmExpertTypeService zcEmExpertTypeService = null;  IExpertService expertService = null;  IExpertTypeJoinService expertTypeJoinService = null;  public void initService() {    asValService = (IAsValService) SpringContext.getBean("asValService");    zcEmExpertTypeService = (IZcEmExpertTypeService) SpringContext.getBean("zcEmExpertTypeService");    expertService = (IExpertService) SpringContext.getBean("expertService");    // expertTypeJoinService = (IExpertTypeJoinService) SpringContext.getBean(    // "expertTypeJoinService");  }  public ExpertActionForm() {  }  public String gotoReq() {    List temp = asValService.getAsVal("EM_VS_ID_TYPE");    for (int i = 0; i < temp.size(); i++) {      AsVal val = (AsVal) temp.get(i);      peopleList.add(new OptionItem(val.getValId(), val.getVal()));    }    List sex = asValService.getAsVal("VS_SEX");    for (int i = 0; i < sex.size(); i++) {      AsVal val1 = (AsVal) sex.get(i);      sexList.add(new OptionItem(val1.getValId(), val1.getVal()));    }    List state = asValService.getAsVal("VS_IF_CHECK");    for (int i = 0; i < state.size(); i++) {      AsVal val2 = (AsVal) state.get(i);      stateList.add(new OptionItem(val2.getValId(), val2.getVal()));    }    List com = asValService.getAsVal("VS_CO_KIND");    for (int i = 0; i < com.size(); i++) {      AsVal val3 = (AsVal) com.get(i);      comList.add(new OptionItem(val3.getValId(), val3.getVal()));    }    List position = asValService.getAsVal("VS_POSITION");    for (int i = 0; i < position.size(); i++) {      AsVal val4 = (AsVal) position.get(i);      positionList.add(new OptionItem(val4.getValId(), val4.getVal()));    }    List call = asValService.getAsVal("VS_EMP_TECH");    for (int i = 0; i < call.size(); i++) {      AsVal val5 = (AsVal) call.get(i);      callList.add(new OptionItem(val5.getValId(), val5.getVal()));    }    List eval = asValService.getAsVal("VS_ZC_EXPERT_EVAL_TYPE");    for (int i = 0; i < eval.size(); i++) {      AsVal val6 = (AsVal) eval.get(i);      lbList.add(new OptionItem(val6.getValId(), val6.getVal()));    }    return "success";  }  public List getCallList() {    return callList;  }  public void setCallList(List callList) {    this.callList = callList;  }  private Date getString2Date(String dateString) {    Date retDate = null;    if (dateString != null && !"".equals(dateString.trim())) {      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");      try {        retDate = sdf.parse(dateString);      } catch (ParseException e) {        e.printStackTrace();      }    }    return retDate;  }  /*   * 注册、保存   */  public String save() {    user.setUserId("em_" + user.getUserId());    List expertTypeJoinList = new ArrayList();    try {      if (expertService.checkAsUser(user)) {        addMessage("errors", new ActionMessage("用户名" + user.getUserId() + "已经存在！", false));        return FAILURE;      }      String code = NumUtil.getInstance().getNo("ZC_EM_B_EXPERT", "EM_EXPERT_CODE", expertpo);      expertpo.setEm_birthday(getString2Date(this.getRequest().getParameter("birthDate")));      expertpo.setEm_graduation_time(getString2Date(this.getRequest().getParameter("graduateDate")));      expertpo.setEm_work_starttime(getString2Date(this.getRequest().getParameter("workDate")));      expertpo.setEm_major_startime(getString2Date(this.getRequest().getParameter("beginDate")));      expertpo.setEm_protitle_time(getString2Date(this.getRequest().getParameter("getJobDate")));      expertpo.setEm_expert_code(code);      EmExpertTypeJoin emExpertTypeJoin = null;      Map nvMap = this.getRequest().getParameterMap();      Object obj = nvMap.get("licenseName");      String[] data = (String[]) obj;      if (obj != null) {        if (obj instanceof String) {          emExpertTypeJoin = new EmExpertTypeJoin();          emExpertTypeJoin.setEmExpertCode(code);          emExpertTypeJoin.setEmTypeCode((String) nvMap.get("licenseNo"));          expertTypeJoinList.add(emExpertTypeJoin);        } else {          for (int i = 0; i < data.length; i++) {            emExpertTypeJoin = new EmExpertTypeJoin();            emExpertTypeJoin.setEmExpertCode(code);            emExpertTypeJoin.setEmTypeCode(((String[]) nvMap.get("licenseNo"))[i]);            expertTypeJoinList.add(emExpertTypeJoin);          }        }      }      user.setPassword(GeneralFunc._encodePwd(user.getPassword()));      user.setUserName(expertpo.getEm_expert_name());      expertService.insertExpertPo(expertpo, expertTypeJoinList, user);    } catch (Exception e) {      log.error(e.getMessage());      addMessage("errors", new ActionMessage("系统错误：专家注册操作失败！", false));      e.printStackTrace();    }    return "saveSuc";  }  Map codeIndexMap = new HashMap();  int count = 0;  /**   * 查询专家类型   * @return   */  public String query() {    List list = zcEmExpertTypeService.getList(null, null);    String flag = null;    EmExpertType temp = null;    for (int i = 0; i < list.size(); i++) {      temp = (EmExpertType) list.get(i);      if (temp.getEmParentTypeCode() == null) {        count++;        codeIndexMap.put(temp.getEmTypeCode(), new Integer(count));        temp.setEmTypeName(temp.getEmTypeName() + "(" + temp.getEmTypeCode() + ")");        temp.setEmTypeCode(count + "");        temp.setEmParentTypeCode("0");        treeList.add(temp);        list.remove(i);        i--;      }    }    Iterator it = codeIndexMap.keySet().iterator();    String pCode;    while (it.hasNext()) {      pCode = it.next().toString();      getSubNodes(list, pCode);    }    String rowNum = this.getRequest().getParameter("rowNum");    this.getRequest().setAttribute("rowNum", rowNum);    return "querySuc";  }  private void getSubNodes(List list, String pcode) {    EmExpertType temp = null;    for (int i = 0; i < list.size(); i++) {      temp = (EmExpertType) list.get(i);      if (pcode.equals(temp.getEmParentTypeCode())) {        temp.setEmParentTypeCode(codeIndexMap.get(pcode).toString());        temp.setEmTypeName(temp.getEmTypeName() + "(" + temp.getEmTypeCode() + ")");        temp.setEmTypeCode((count++) + "");        treeList.add(temp);        list.remove(i);        i--;      }    }  }  public List getPeopleList() {    return peopleList;  }  public void setPeopleList(List peopleList) {    this.peopleList = peopleList;  }  public List getList() {    return list;  }  public void setList(List list) {    this.list = list;  }  public ExpertPo getExpertpo() {    return expertpo;  }  public void setExpertpo(ExpertPo expertpo) {    this.expertpo = expertpo;  }}