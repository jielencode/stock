package com.ufgov.zc.server.zc.actions;import java.io.BufferedInputStream;import java.io.File;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.Enumeration;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.tools.zip.ZipEntry;import org.apache.tools.zip.ZipFile;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.zc.filemstools.FileSign;import com.ufgov.zc.common.zc.filemstools.fileDecrypt;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcEbSecurityRecord;import com.ufgov.zc.common.zc.model.ZcEbWaitingDecodeItem;import com.ufgov.zc.server.system.SpringContext;import com.ufgov.zc.server.system.service.IAsFileService;import com.ufgov.zc.server.zc.service.IZcEbProjService;import com.ufgov.zc.server.zc.service.IZcEbSecurityRecordService;public class TBFileDecodeAction {  public static final String partitionLeft = "┐";  public static final String partitionRight = "@";  private Map parameterMap = new HashMap();  private Map returnMap = new HashMap();  private String functionDo = null;  private IZcEbSecurityRecordService zcEbSecurityRecordService = null;  private IAsFileService asFileService = null;  private IZcEbProjService zcEbProjService = null;  public TBFileDecodeAction(Map parameterMap, String functionDo) {    setParameterMap(parameterMap);    setFunctionDo(functionDo);    this.zcEbSecurityRecordService = (IZcEbSecurityRecordService) SpringContext.getBean("zcEbSecurityRecordService");    this.asFileService = (IAsFileService) SpringContext.getBean("asFileService");    this.zcEbProjService = (IZcEbProjService) SpringContext.getBean("zcEbProjService");  }  public void start() {    System.out.println("我在...TBFileDecodeAction");    if (this.zcEbSecurityRecordService == null) {      this.returnMap.put("UPDATESTATUS", "fail");      this.returnMap.put("FAILREASON", "没有获取到zcEbSecurityRecordService实例.");      System.out.println("没有获取到zcEbSecurityRecordService实例.");      return;    }    if (this.asFileService == null) {      this.returnMap.put("UPDATESTATUS", "fail");      this.returnMap.put("FAILREASON", "没有获取到asFileService实例.");      System.out.println("没有获取到asFileService实例.");      return;    }    if (this.zcEbProjService == null) {      this.returnMap.put("UPDATESTATUS", "fail");      this.returnMap.put("FAILREASON", "没有获取到zcEbProjService实例.");      System.out.println("没有获取到zcEbProjService实例.");      return;    }    this.returnMap.clear();    if ("getwaitingdecodingitems".equalsIgnoreCase((String) this.parameterMap.get("OPERATIONNAME"))) {      System.out.println("77777777=getwaitingdecodingitems.");      if ("supplier".equalsIgnoreCase((String) this.parameterMap.get("USERTYPE"))) {        doExecuteJobsForSupplier();      } else {        boolean isHaveProj = doQueryProjectProcessing();        if (!isHaveProj) {          this.returnMap.put("UPDATESTATUS", "fail");          this.returnMap.put("FAILREASON", "没有得到需要解密的标书，请确认【用户名:" + this.parameterMap.get("USERNAME") + "(" + this.parameterMap.get("USERID") + ")】");          return;        }        doExecuteJobsForMaster();      }    } else if ("updatedecodedrecord".equalsIgnoreCase((String) this.parameterMap.get("OPERATIONNAME"))) {      System.out.println("77777777=updatedecodedrecord.");      doExecuteRecordUpdate();    } else if ("executeserverdecoded".equalsIgnoreCase((String) this.parameterMap.get("OPERATIONNAME"))) {      System.out.println("77777777=executeserverdecoded.");      ZcEbSecurityRecord record = (ZcEbSecurityRecord) this.parameterMap.get("ZCEBSECURITYRECORD");      executeServerDecoded(record);    }    System.out.println("0000000000000008");  }  /**   * 查询所有当前用户的待解密项目列表   * @return   */  private boolean doQueryProjectProcessing() {    ElementConditionDto dto = new ElementConditionDto();    dto.setManageCode((String) this.parameterMap.get("USERID"));    dto.setStatus((String) this.parameterMap.get("PROJSTATUS"));    String types = (String) this.parameterMap.get("PROJTYPE");    if (types == null || "".equals(types)) {      types = "1,3,4,7";    }    dto.setType(types);    String[] typeArr = types.split(",");    for (int i = 0; i < typeArr.length; i++) {      dto.getPmAdjustCodeList().add(typeArr[i]);    }    dto.setStartDate(new Date());    SimpleDateFormat sdfDate = new SimpleDateFormat(ZcSettingConstants.SIMPLE_DATE_FORMAT_DATE_ONLY);    SimpleDateFormat sdfFull = new SimpleDateFormat(ZcSettingConstants.SIMPLE_DATE_FORMAT_FULL);    String dateOnly = sdfDate.format(new Date());    String dateTime = dateOnly + " 23:59:59";    try {      dto.setEndDate(sdfFull.parse(dateTime));    } catch (Exception e) {      e.printStackTrace();    }    System.out.println("startDate:" + sdfFull.format(dto.getStartDate()));    System.out.println("endDate:" + sdfFull.format(dto.getEndDate()));    System.out.println("参数：USERID:" + dto.getManageCode() + ",projstatus:" + dto.getStatus() + ",projtype:" + dto.getType());    List list = null;    try {      list = this.zcEbProjService.getZcEbProjForDecoded(dto);      System.out.println("查询到待解密的数据：" + list.size());      if (list.size() == 0) {        return false;      }    } catch (Exception e) {      e.printStackTrace();      return false;    }    StringBuffer buff = new StringBuffer();    for (int i = 0; i < list.size(); i++) {      ZcEbProj pj = (ZcEbProj) list.get(i);      buff.append(pj.getProjCode());      buff.append(",");    }    buff.delete(buff.length() - 1, buff.length());    this.parameterMap.put("PROJCODE", buff.toString());    return true;  }  /**   * 查询数据供供应商解密使用   */  private void doExecuteJobsForSupplier() {    try {      ZcEbWaitingDecodeItem item = new ZcEbWaitingDecodeItem();      item.setProviderCode((String) this.parameterMap.get("PROVIDERCODE"));      item.setPackStatus((String) this.parameterMap.get("PACKSTATUS"));      item.setProjStatus((String) this.parameterMap.get("PROJSTATUS"));      List list = new ArrayList();      list = this.zcEbSecurityRecordService.getWaitingDecodingItems(item);      this.returnMap.put("RESULTLIST", list);      this.returnMap.put("UPDATESTATUS", "success");      System.out.println("RESULTLIST:" + ((List) this.returnMap.get("RESULTLIST")).size());    } catch (Exception e) {      e.printStackTrace();      this.returnMap.put("UPDATESTATUS", "fail");      this.returnMap.put("FAILREASON", e.getMessage());    }  }  /**   * 查询数据供主办方解密使用   */  private void doExecuteJobsForMaster() {    ZcEbWaitingDecodeItem item = new ZcEbWaitingDecodeItem();    String projCodeString = (String) this.parameterMap.get("PROJCODE");    if (projCodeString == null) {      return;    }    String projStatus = (String) this.parameterMap.get("PROJSTATUS");    String pDecodedStatus = (String) this.parameterMap.get("PROVIDERDECODEDSTATUS");    System.out.println("projcode:" + projCodeString + ",projstatus:" + projStatus + ",providerdecodedstatus:" + pDecodedStatus);    List allProjects = new ArrayList();    String[] projCodes = projCodeString.split(",");    for (int i = 0; i < projCodes.length; i++) {      item.setProjCode(projCodes[i]);      item.setProjStatus(projStatus);      item.getZcEbSecurityRecord().setZcProviderDecodedStatus(pDecodedStatus);      List tmp = this.zcEbSecurityRecordService.getWaitingDecodingItems(item);      allProjects.addAll(tmp);      System.out.println(i + "=" + item.getProjCode() + ": " + tmp.size());    }    System.out.println("共查询到【" + allProjects.size() + "】个项目待解密。。。");    this.returnMap.put("RESULTLIST", allProjects);  }  /**   * 供应商或主办方解密完成后，更新相关记录，并执行服务器端解密   */  private void doExecuteRecordUpdate() {    System.out.println("0000000000000001");    String userType = (String) this.parameterMap.get("USERTYPE");    ZcEbSecurityRecord record = (ZcEbSecurityRecord) this.parameterMap.get("ZCEBSECURITYRECORD");    System.out.println("0000000000000002");    if ("supplier".equalsIgnoreCase(userType)) {      record.setZcProviderDecodedTime(new Date());    } else {      record.setZcMasterDecodedTime(new Date());    }    System.out.println("0000000000000003");    try {      this.zcEbSecurityRecordService.update(record);      this.returnMap.put("UPDATESTATUS", "success");    } catch (Exception e) {      e.printStackTrace();    }    this.returnMap.put("DBUPDATESTATUS", "数据库相关记录更新完毕...");    System.out.println("0000000000000004");    if ("supplier".equalsIgnoreCase(userType)) {//如果供应商解密完成了，而且主办方没有进行加密，那么可以马上进行服务器端解密      System.out.println("0000000000000004a");      if (ZcSettingConstants.FILE_DECODED_SUCCESS.equals(record.getZcProviderDecodedStatus()) && "N".equals(record.getZcIsMasterCoded())) {        this.returnMap.put("DECODEAFTERSUPPLIERDECODED", "供应商解密完后，因为主办方未加密，可以直接执行标书文件的解密...");        executeServerDecoded(record);        System.out.println("0000000000000005");      }    } else {//如果是主办方解密完成，那么也需要马上进行服务器端解密      this.returnMap.put("DECODEAFTERSUPPLIERDECODED", "主办方解密完后，继续执行标书文件的解密...");      executeServerDecoded(record);      System.out.println("0000000000000006");    }    System.out.println("0000000000000007");  }  /**   * 执行服务器端标书还原，先将对应的标书加上.en附加名进行重命名，而将原始的名字作为解密后的文件名   * @param record   * @param codedRandomString   * @return   */  public boolean executeServerDecoded(ZcEbSecurityRecord record) {    if (record == null || record.getZcPwdOrigContent() == null || record.getZcPwdOrigContent().length <= 8) {      this.returnMap.put("UPDATESTATUS", "fail");      this.returnMap.put("FAILREASON", "调用executeServerDecoded(record)解密时参数为空或参数不够...");      return false;    }    Map codeParas = new HashMap();    String codedRandomString = new String(record.getZcPwdOrigContent());    System.out.println("解密完成后的密钥串:" + codedRandomString);    codeParas.put("RANDOMSTRING", codedRandomString);    String fileID = record.getZcCodedFileID();    AsFile asFile = this.asFileService.getAsFileById(fileID);    if (asFile == null) {      this.returnMap.put("UPDATESTATUS", "fail");      this.returnMap.put("FAILREASON", "服务器端未找到编号为" + fileID + "的文件，请检查...");      return false;    }    java.io.File enFile = new java.io.File(asFile.getFilePath());    String srcPath = enFile.getAbsolutePath();    String renameToEnPath = srcPath + ".ztb.en";    if (!(new File(renameToEnPath).exists())) {      File file = new File(srcPath);      file.renameTo(new File(renameToEnPath));    }    try {      System.out.println("开始服务器端解密：" + codeParas);      boolean res = false;      if ("COMMON".equalsIgnoreCase(record.getUploadMold())) {        res = this.bidOpenningForServer(renameToEnPath, srcPath, codeParas);      } else {        res = fileDecrypt.cryptoFile("./crypto", "dec", codedRandomString, renameToEnPath, srcPath);        res = toTestZip(srcPath);      }      if (res) {        record.setZcIsDecodedFinish("Y");        this.zcEbSecurityRecordService.update(record);        this.returnMap.put("DBUPDATESTATUS", "服务器端标书完成了还原...");        this.returnMap.put("UPDATESTATUS", "success");        this.returnMap.put("ISSERVERFINISHEDDECODED", "true");      } else {        record.setZcIsDecodedFinish("N");        this.zcEbSecurityRecordService.update(record);        this.returnMap.put("DBUPDATESTATUS", "服务器端标书还原时出错...");        this.returnMap.put("UPDATESTATUS", "fail");        this.returnMap.put("ISSERVERFINISHEDDECODED", "false");      }      return res;    } catch (Exception e) {      e.printStackTrace();      this.returnMap.put("UPDATESTATUS", "fail");      this.returnMap.put("FAILREASON", "服务器解密出错，原因：\n" + e.getMessage());      return false;    }  }  /**   * 解密完成后，对文件进行解压读取测试   * @param renameToEnPath   * @return   * @throws Exception    */  private boolean toTestZip(String renameToEnPath) throws Exception {    int fileCount = 0;    int okCount = 0;    //不正常的总数    int notOkCount = 0;    int offsize = 0;    ZipFile zipFile = null;    try {      zipFile = new ZipFile(renameToEnPath, "GBK");      Enumeration emu = zipFile.getEntries();      while (emu.hasMoreElements()) {        try {          ZipEntry entry = (ZipEntry) emu.nextElement();          if (entry.isDirectory()) {            continue;          }          BufferedInputStream bis = new BufferedInputStream(zipFile.getInputStream(entry));          ++fileCount;          double readLen = 0;          int rL = -1;          byte data[] = new byte[4096];          while ((rL = bis.read(data, offsize, 4096)) != -1) {            readLen += rL;          }          bis.close();          okCount++;        } catch (Exception e) {          e.printStackTrace();          notOkCount++;        }      }      zipFile.close();    } catch (Exception e) {      e.printStackTrace();      throw new Exception("检查解密后的标书失败，详细:" + e.getMessage());    }    if (notOkCount > 0 || okCount == 0) {      return false;    }    return true;  }  public boolean bidOpenningForServer(String zipEnFilePath, String zipFilePath, Map paras) throws Exception {    // 3 还原招标明文    // 0 还原压缩包删除原加密文件    // 1还原压缩包不删除原加密文件    try {      String randomString = (String) paras.get("RANDOMSTRING");      if (randomString == null || "".equals(randomString)) {        this.returnMap.put("FAILREASON", "服务器没有得到随机串128位密钥...");        return false;      }      System.out.println("size:" + randomString.length() + ",randomstring:" + randomString);      File file = new File(zipEnFilePath);      if (!file.exists()) {        this.returnMap.put("FAILREASON", "服务器找不到文件：" + file.getAbsolutePath());        return false;      }      System.out.println("exist1:" + file.exists() + ",zipEnFilePath path:" + file.getAbsolutePath());      File file2 = new File(zipFilePath);      System.out.println("exist2:" + file2.exists() + ",zipFilePath path:" + file2.getAbsolutePath());      String isSucc = FileSign.decrypt(zipEnFilePath, zipFilePath, randomString);      if (!(null != isSucc && isSucc.equals("TRUE")))        throw new RuntimeException();    } catch (Exception e) {      e.printStackTrace();      throw new RuntimeException("还原招标明文过称发生错误，请重试！", e);    }    return true;  }  public Map getParameterMap() {    return parameterMap;  }  public void setParameterMap(Map parameterMap) {    this.parameterMap = parameterMap;  }  public Map getReturnMap() {    return returnMap;  }  public void setReturnMap(Map returnMap) {    this.returnMap = returnMap;  }  public String getFunctionDo() {    return functionDo;  }  public void setFunctionDo(String functionDo) {    this.functionDo = functionDo;  }  public IZcEbSecurityRecordService getZcEbSecurityRecordService() {    return zcEbSecurityRecordService;  }  public void setZcEbSecurityRecordService(IZcEbSecurityRecordService zcEbSecurityRecordService) {    this.zcEbSecurityRecordService = zcEbSecurityRecordService;  }}