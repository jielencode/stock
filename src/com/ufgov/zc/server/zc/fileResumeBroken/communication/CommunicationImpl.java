package com.ufgov.zc.server.zc.fileResumeBroken.communication;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import com.caucho.hessian.server.HessianServlet;import com.ufgov.zc.common.zc.Communication;import com.ufgov.zc.server.zc.fileResumeBroken.serverFileOperate.ServerFileOperate;public class CommunicationImpl extends HessianServlet implements Communication {  public Map buildCommunication(Map parameterMap, String functionDo) {    System.out.println("进入Communication类:" + functionDo);    parameterMap = toUpperCaseParas(parameterMap);    Map returnMap = new HashMap();    CallServer callServer = new CallServer(parameterMap, functionDo);    callServer.start();    returnMap = callServer.getReturnMap();    System.out.println("CommunicationImpl: returnMap: userPass: " + returnMap.get("USERPASS"));    return returnMap;  }  public Map buildCommunicationB(Map parameterMap) {    String functionDto = (String) parameterMap.get("functiondto");    System.out.println("进入CommunicationB类:" + functionDto);    parameterMap = toUpperCaseParas(parameterMap);    Map returnMap = new HashMap();    CallServer callServer = new CallServer(parameterMap, functionDto);    callServer.start();    returnMap = callServer.getReturnMap();    System.out.println("CommunicationImpl: returnMap: userPass: " + returnMap.get("USERPASS"));    return returnMap;  }  public Map buildCommunicationU(Map paraMap) {    paraMap = toUpperCaseParas(paraMap);    ServerFileOperate serverFileOperate = new ServerFileOperate();    byte[] buff = (byte[]) paraMap.get("BUFFCONTENT");    String sequenceOrder = (String) paraMap.get("SEQUENCEORDER");    serverFileOperate.outPutStream(paraMap, buff, sequenceOrder);    Map rv = new HashMap();    rv.put("FILEID", serverFileOperate.getFileId());    rv.put("TS_STATUS", serverFileOperate.getTransStatus());    rv.put("ERR_CONTENT", serverFileOperate.getErrContent());    rv.put("SERVERFILELEN", serverFileOperate.getServerFileLen() + "");    return rv;  }  /**   * 统一转换所有的key为大写   * @param parasMap   * @returnln   */  private Map toUpperCaseParas(Map parasMap) {    StringBuffer buff = new StringBuffer();    Map retMap = new HashMap();    Iterator it = parasMap.keySet().iterator();    while (it.hasNext()) {      String key = (String) it.next();      Object value = parasMap.get(key);      String KEY = key.toUpperCase();      retMap.put(KEY, value);    }    return retMap;  }}