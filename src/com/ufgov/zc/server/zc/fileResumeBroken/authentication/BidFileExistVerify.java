package com.ufgov.zc.server.zc.fileResumeBroken.authentication;import java.io.File;import java.util.HashMap;import java.util.Map;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.ZcFileResumeBrokenUpload;import com.ufgov.zc.server.system.SpringContext;import com.ufgov.zc.server.system.service.IAsFileService;import com.ufgov.zc.server.zc.fileResumeBroken.serverFileOperate.IfFileTransSuccess;import com.ufgov.zc.server.zc.service.IZcFileResumeBrokenUploadService;public class BidFileExistVerify {  private String userId;  private String projectId;  private String packId;  private String fileName;  private boolean ifPass;  private Map parameterMap = new HashMap();  private Map returnMap = new HashMap();  private int fileLen = 0;  private String serverFilePath;  private IZcFileResumeBrokenUploadService zcFileResumeBrokenUploadService;  public String getServerFilePath() {    return serverFilePath;  }  public void setServerFilePath(String serverFilePath) {    this.serverFilePath = serverFilePath;  }  public int getFileLen() {    return fileLen;  }  public void setFileLen(int fileLen) {    this.fileLen = fileLen;  }  public Map getParameterMap() {    return parameterMap;  }  public void setParameterMap(Map parameterMap) {    this.parameterMap = parameterMap;  }  public Map getReturnMap() {    return returnMap;  }  public void setReturnMap(Map returnMap) {    this.returnMap = returnMap;  }  public String getUserId() {    return userId;  }  public void setUserId(String userId) {    this.userId = userId;  }  public String getProjectId() {    return projectId;  }  public void setProjectId(String projectId) {    this.projectId = projectId;  }  public String getPackId() {    return packId;  }  public void setPackId(String packId) {    this.packId = packId;  }  public String getFileName() {    return fileName;  }  public void setFileName(String fileName) {    this.fileName = fileName;  }  public boolean isIfPass() {    return ifPass;  }  public void setIfPass(boolean ifPass) {    this.ifPass = ifPass;  }  public BidFileExistVerify(Map parameterMap) {    setUserId((String) parameterMap.get("USERID"));    setProjectId((String) parameterMap.get("PROJECTCODE"));    setFileName((String) parameterMap.get("FILENAME"));    setPackId((String) parameterMap.get("PACKCODE"));    setParameterMap(parameterMap);  }  public void startVerify() {    String packCode = (String) parameterMap.get("PACKCODE");    String fileID = projectId + "@" + packCode + "@" + userId;    ElementConditionDto dto = new ElementConditionDto();    System.out.println("USERID:" + userId + ", PROJCODE:" + projectId + ", PACKCODE:" + packCode);    dto.setExtField1(userId);    dto.setExtField2(projectId);    dto.setExtField3(packCode);    zcFileResumeBrokenUploadService = (IZcFileResumeBrokenUploadService) SpringContext.getBean("zcFileResumeBrokenUploadService");    ZcFileResumeBrokenUpload zcFileResumeBrokenUpload = zcFileResumeBrokenUploadService.getFileUploadInfo(dto);    System.out.println(zcFileResumeBrokenUpload);    if (zcFileResumeBrokenUpload != null) {//文件已上传过      setServerFilePath(zcFileResumeBrokenUpload.getFilePath());      System.out.println("客户端MD5：" + (String) parameterMap.get("MD5CODE"));      System.out.println("服务端MD5：" + zcFileResumeBrokenUpload.getMd5Code());      if (((String) parameterMap.get("MD5CODE")).equals(zcFileResumeBrokenUpload.getMd5Code())) {//客户端的文件未发生变化                File file = new File(zcFileResumeBrokenUpload.getFilePath());        if (file.exists()) {          setFileLen(Integer.parseInt(String.valueOf(file.length())));        }        returnMap.put("UPLOADTYPE", "CONTINUE");      } else {        System.out.println("进入覆盖上传分支。。。。");        returnMap.put("UPLOADTYPE", "COVER");        if (((String) parameterMap.get("ISREPLACE")).equals("true")) {//覆盖上传          //若文件已上传成功过，删除asFile中的数据          IAsFileService asFileService = (IAsFileService) SpringContext.getBean("asFileService");          asFileService.deleteFile(zcFileResumeBrokenUpload.getFileId());          //删除已上传过的此文件          File file = new File(zcFileResumeBrokenUpload.getFilePath());          if (file.exists()) {            file.delete();          }          //设置文件大小为0          setFileLen(0);          IfFileTransSuccess ifFileTransSuccess = IfFileTransSuccess.getInstance(userId);          ifFileTransSuccess.setServerFileTotalLen(0);          ifFileTransSuccess.setLocalFileTotalLen(0);          prepareToUpload(fileID);        }      }      setIfPass(true);    } else {      prepareToUpload(fileID);    }  }  private void prepareToUpload(String fileID) {    //文件未上传过    System.out.println("开始插入数据库！");    String md5Code = (String) parameterMap.get("MD5CODE");    String blockId = "";    String ifSuccess = "0";    String filePath = "fileUploads/" + fileID;    File file = new File(filePath);    if (file.exists()) {      if (file.delete()) {        System.out.println("删除了服务器端原有文件！" + file.getAbsolutePath());      } else {        System.out.println("服务器端原有文件删除失败！" + file.getAbsolutePath());        file.renameTo(new File(filePath + "@" + Guid.genID()));      }    }    String sequenceOrder = "1";    ZcFileResumeBrokenUpload record = new ZcFileResumeBrokenUpload();    record.setUserId(userId);    record.setProjectId(projectId);    record.setFileId(fileID);    record.setPackId(packId);    record.setFileName(fileName);    record.setMd5Code(md5Code);    record.setBlockId(blockId);    record.setIfSuccess(ifSuccess);    record.setFilePath(filePath);    record.setSequenceOrder(sequenceOrder);    try {      zcFileResumeBrokenUploadService.delete(record);      zcFileResumeBrokenUploadService.insert(record);      System.out.println("插入数据库zc_file_resume_broken成功！");      setFileLen(0);    } catch (Exception e) {      System.out.println("插入数据库zc_file_resume_broken失败！");      e.printStackTrace();    }    returnMap.put("UPLOADTYPE", "INIT");    setServerFilePath(filePath);    setIfPass(false);  }}