package com.ufgov.zc.server.zc.fileResumeBroken.download;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.util.HashMap;import java.util.Map;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.server.system.SpringContext;import com.ufgov.zc.server.system.service.IAsFileService;public class FetchFile {  private String fileId;  private Map parameterMap = new HashMap();  private Map returnMap = new HashMap();  private IAsFileService asFileService;  public String getFileId() {    return fileId;  }  public void setFileId(String fileId) {    this.fileId = fileId;  }  public Map getParameterMap() {    return parameterMap;  }  public void setParameterMap(Map parameterMap) {    this.parameterMap = parameterMap;  }  public Map getReturnMap() {    return returnMap;  }  public void setReturnMap(Map returnMap) {    this.returnMap = returnMap;  }  public FetchFile(Map parameterMap, String functionDo) {    setParameterMap(parameterMap);    setFileId((String) parameterMap.get("FILEID"));  }  public void start() {    String filePath = "downloadFiles/";    mkDirs(filePath);    File file = new File(filePath + "/" + (String) parameterMap.get("PROJECTID") + "_" + getFileId());    int fileLen = 0;    if (!file.exists()) {      asFileService = (IAsFileService) SpringContext.getBean("asFileService");      AsFile asFile = asFileService.getLargeAsFileById(getFileId());      if (asFile == null) {        returnMap.put("ERRORMESSAGE", "从数据库中取文件失败！");      } else {        int len = 0;        byte[] buff = new byte[1024 * 1024 * 5];        try {          System.out.println("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa:fileUploads/" + getFileId());          File tempFile = new File("fileUploads/" + getFileId());          FileInputStream in = new FileInputStream(tempFile);          FileOutputStream out = new FileOutputStream(filePath + "/" + (String) parameterMap.get("PROJECTID") + "_" + getFileId());          while ((len = in.read(buff)) != -1) {            byte[] buf = new byte[len];            if (len < buff.length) {              for (int k = 0; k < len; k++) {                buf[k] = buff[k];              }              out.write(buf);            } else {              out.write(buff);            }          }          in.close();          out.close();        } catch (FileNotFoundException e) {          e.printStackTrace();          returnMap.put("ERRORMESSAGE", "操作文件失败！");        } catch (IOException e) {          e.printStackTrace();          returnMap.put("ERRORMESSAGE", "操作文件失败！");        }      }    }    FileInputStream fileIn = null;    try {      fileIn = new FileInputStream(file);      fileLen = fileIn.available();      fileIn.close();    } catch (FileNotFoundException e) {      e.printStackTrace();    } catch (IOException e) {      e.printStackTrace();    }    returnMap.put("FILENAME", (String) parameterMap.get("PROJECTID") + "_" + getFileId());    returnMap.put("SERVERFILELEN", String.valueOf(fileLen));  }  public void mkDirs(String filePath) {    File file = new File(filePath);    if (!file.exists()) {      file.mkdirs();    }  }}