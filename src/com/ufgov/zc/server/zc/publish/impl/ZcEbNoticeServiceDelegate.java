package com.ufgov.zc.server.zc.publish.impl;import java.util.List;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.util.ExceptionUtil;import com.ufgov.zc.common.zc.model.ZcEbNotice;import com.ufgov.zc.common.zc.publish.IZcEbNoticeServiceDelegate;import com.ufgov.zc.server.system.service.IAsFileService;import com.ufgov.zc.server.zc.service.IZcEbNoticeService;public class ZcEbNoticeServiceDelegate implements IZcEbNoticeServiceDelegate {  private IZcEbNoticeService zcEbNoticeService;  private IAsFileService asFileService;  public IAsFileService getAsFileService() {    return asFileService;  }  public void setAsFileService(IAsFileService asFileService) {    this.asFileService = asFileService;  }  public IZcEbNoticeService getZcEbNoticeService() {    return zcEbNoticeService;  }  public void setZcEbNoticeService(IZcEbNoticeService zcEbNoticeService) {    this.zcEbNoticeService = zcEbNoticeService;  }  public List getZcEbNotice(ElementConditionDto dto, RequestMeta meta) {    return zcEbNoticeService.getZcEbNotice(dto, meta);  }  public void newCommitFN(List NoticeList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < NoticeList.size(); i++) {      ZcEbNotice bean = (ZcEbNotice) NoticeList.get(i);      try {        //调用工作流，工作流会返回一个状态，不用在此设置单据状态        zcEbNoticeService.newCommit(bean, meta);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(bean.getNoticeID());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的单据处理失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void unAuditFN(List NoticeList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < NoticeList.size(); i++) {      ZcEbNotice bean = (ZcEbNotice) NoticeList.get(i);      try {        //调用工作流，工作流会返回一个状态，不用在此设置单据状态        zcEbNoticeService.unAudit(bean, meta);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(bean.getNoticeID());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的单据处理失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  //  public void unAuditFN(ZcEbNotice zcEbNotice, RequestMeta meta) {  //    StringBuffer errorInfo = new StringBuffer("id为");  //    StringBuffer stackTraceMessage = new StringBuffer();  //    boolean fail = false;  //  //    try {  //      //调用工作流，工作流会返回一个状态，不用在此设置单据状态  //      zcEbNoticeService.unAudit(zcEbNotice);  //    } catch (Exception ex) {  //      errorInfo.append(": ");  //      errorInfo.append(zcEbNotice.getNoticeID());  //      stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));  //      fail = true;  //    }  //    errorInfo.append("的单据处理失败！");  //    if (fail) {  //      BusinessException be = new BusinessException(errorInfo.toString());  //      be.setStackTraceMessage(stackTraceMessage.toString());  //      throw be;  //    }  //  }  public void commitFN(List NoticeList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < NoticeList.size(); i++) {      ZcEbNotice bean = (ZcEbNotice) NoticeList.get(i);      try {        //调用工作流，工作流会返回一个状态，不用在此设置单据状态        zcEbNoticeService.commit(bean, meta);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(bean.getNoticeID());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的单据处理失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void newCommitFN(ZcEbNotice zcEbNotice, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    try {      //调用工作流，工作流会返回一个状态，不用在此设置单据状态      zcEbNoticeService.newCommit(zcEbNotice, meta);    } catch (Exception ex) {      errorInfo.append(": ");      errorInfo.append(zcEbNotice.getNoticeID());      stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));      fail = true;    }    errorInfo.append("的单据处理失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void commitFN(ZcEbNotice zcEbNotice, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    try {      //调用工作流，工作流会返回一个状态，不用在此设置单据状态      zcEbNoticeService.commit(zcEbNotice, meta);    } catch (Exception ex) {      errorInfo.append(": ");      errorInfo.append(zcEbNotice.getNoticeID());      stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));      fail = true;    }    errorInfo.append("的单据处理失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void insertFN(ZcEbNotice zcEbNotice, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    try {      zcEbNoticeService.insert(zcEbNotice, meta);    } catch (Exception ex) {      errorInfo.append(": ");      errorInfo.append(zcEbNotice.getNoticeID());      stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));      fail = true;    }    errorInfo.append("的单据插入失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void updateFN(ZcEbNotice zcEbNotice, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    try {      zcEbNoticeService.update(zcEbNotice);    } catch (Exception ex) {      errorInfo.append(": ");      errorInfo.append(zcEbNotice.getNoticeID());      stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));      fail = true;    }    errorInfo.append("的单据更新失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 删除   * @param Notice   * @param meta   */  public void deleteFN(ZcEbNotice zcEbNotice, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    try {      zcEbNoticeService.isCheck(zcEbNotice.getNoticeID());      asFileService.deleteFile(zcEbNotice.getFileID());      zcEbNoticeService.delete(zcEbNotice);    } catch (Exception ex) {      errorInfo.append(": ");      errorInfo.append(zcEbNotice.getNoticeID());      errorInfo.append("的单据");      errorInfo.append(ex.getMessage());      stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));      fail = true;    }    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 批量删除   * @param NoticeList   * @param meta   */  public void deleteBeanListFN(List NoticeList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < NoticeList.size(); i++) {      ZcEbNotice bean = (ZcEbNotice) NoticeList.get(i);      try {        zcEbNoticeService.isCheck(bean.getNoticeID());        asFileService.deleteFile(bean.getFileID());        zcEbNoticeService.delete(bean);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(bean.getNoticeID());        errorInfo.append("的单据处理失败！\n");        errorInfo.append(ex.getMessage());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public ZcEbNotice CancelMakeFN(ZcEbNotice make, RequestMeta requestMeta) {    // TODO Auto-generated method stub    return zcEbNoticeService.CancelMake(make, requestMeta);  }  public ZcEbNotice auditFN(ZcEbNotice bulletin, RequestMeta requestMeta) {    // TODO Auto-generated method stub    return zcEbNoticeService.auditFN(bulletin, requestMeta);  }  public ZcEbNotice callbackFN(ZcEbNotice make, RequestMeta requestMeta) {    // TODO Auto-generated method stub    return zcEbNoticeService.callbackFN(make, requestMeta);  }  public ZcEbNotice unAuditFN(ZcEbNotice make, RequestMeta requestMeta) {    // TODO Auto-generated method stub    return zcEbNoticeService.unAuditFN(make, requestMeta);  }  public ZcEbNotice untreadFN(ZcEbNotice make, RequestMeta requestMeta) {    // TODO Auto-generated method stub    return zcEbNoticeService.untreadFN(make, requestMeta);  }  public ZcEbNotice getZcEbNoticeById(String noticeID, RequestMeta requestMeta) {    // TODO Auto-generated method stub    return zcEbNoticeService.getZcEbNoticeById(noticeID);  }}