/**    * @(#) project: GK * @(#) file: ZcEbEvalServiceDelegate.java *  * Copyright 2010 UFGOV, Inc. All rights reserved. * UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms. *  */package com.ufgov.zc.server.zc.publish.impl;import java.util.Date;import java.util.List;import java.util.Map;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.dto.PrintObject;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.util.ExceptionUtil;import com.ufgov.zc.common.system.util.UUID;import com.ufgov.zc.common.zc.model.ZcEbEvalBidTeamMember;import com.ufgov.zc.common.zc.model.ZcEbEvalPack;import com.ufgov.zc.common.zc.model.ZcEbEvalReport;import com.ufgov.zc.common.zc.model.ZcEbExpertChengNuo;import com.ufgov.zc.common.zc.model.ZcEbExpertOpinion;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.publish.IZcEbEvalServiceDelegate;import com.ufgov.zc.server.zc.service.IZcEbEvalService;/** *  * @ClassName: ZcEbEvalServiceDelegate *  * @Description: 评标模块代理实现类。 *  * @date: 2010-4-21 下午04:02:43 *  * @version: V1.0 *  * @since: 1.0 *  * @author: tianly1 *  * @modify: */public class ZcEbEvalServiceDelegate implements IZcEbEvalServiceDelegate {	private IZcEbEvalService zcEbEvalService;	public IZcEbEvalService getZcEbEvalService() {		return zcEbEvalService;	}	public void setZcEbEvalService(IZcEbEvalService zcEbEvalService) {		this.zcEbEvalService = zcEbEvalService;	}	public List getZcEbEvalPackList(ElementConditionDto dto, RequestMeta meta) {		return zcEbEvalService.getZcEbEvalPackList(dto, meta);	}	public List getZcEbEvalItemResultList(Map map, RequestMeta meta) {		return zcEbEvalService.getZcEbEvalItemResultList(map);	}	public List getZcEbEvalExpertList(ElementConditionDto dto, RequestMeta meta) {		return zcEbEvalService.getZcEbEvalExpertList(dto);	}	public List getZcEbEvalReportList(ElementConditionDto dto, RequestMeta meta) {		return zcEbEvalService.getZcEbEvalReportList(dto, meta);	}	public List getZcEbEvalFormulaItemList(Map map, RequestMeta meta) {		return zcEbEvalService.getZcEbEvalFormulaItemList(map);	}	public void saveEvalitemResultList(List list, RequestMeta meta) {		zcEbEvalService.saveEvalitemResultList(list);	}	public List getEvalPackProviderList(Map map, RequestMeta meta) {		return zcEbEvalService.getListEvalPackProvider(map);	}	public List getProviderList(Map map, RequestMeta meta) {		return zcEbEvalService.getProviderList(map);	}	public List getZcEbEvalPackSumResult(Map map, RequestMeta meta) {		return zcEbEvalService.getZcEbEvalPackSumResult(map, meta);	}	public List getEvalParamList(Map map, RequestMeta meta) {		return zcEbEvalService.getEvalParamList(map);	}	public List getEvalParamResultList(Map map, RequestMeta meta) {		return zcEbEvalService.getEvalParamResultList(map);	}	public void saveEvalItemResultList(List list, RequestMeta meta) {		zcEbEvalService.saveEvalitemResultList(list);	}	public void deleteEvalItemResultList(Map map, RequestMeta meta) {		zcEbEvalService.deleteEvalitemResultList(map);	}	public void insertEvalItemResultList(List list, RequestMeta meta) {		zcEbEvalService.insertEvalItemResultList(list);	}	public void insertEvalParamResultList(List list, RequestMeta meta) {		zcEbEvalService.insertEvalParamResultList(list);	}	public void updateEvalParamResultList(List list, RequestMeta meta) {		zcEbEvalService.updateEvalParamResultList(list);	}	public List getZcEbExpertEvalResultList(ElementConditionDto dto,			RequestMeta meta) {		return zcEbEvalService.getZcEbExpertEvalResultList(dto, meta);	}	public List getZcEbPackEvalResultList(ElementConditionDto dto,			RequestMeta meta) {		return zcEbEvalService.getZcEbPackEvalList(dto);	}	public ZcEbEvalReport saveZcEbEvalReportFN(ZcEbEvalReport zcEbEvalReport,			RequestMeta meta) {		return zcEbEvalService.saveZcEbEvalReport(zcEbEvalReport);	}	public ZcEbEvalReport getZcEbEvalReport(String reportCode, RequestMeta meta) {		return zcEbEvalService.getZcEbEvalReport(reportCode);	}	public ZcEbEvalReport insertZcEbEvalReport(ZcEbEvalReport zcEbEvalReport,			RequestMeta meta) {		zcEbEvalReport.setReportCode(UUID.randomUUID().toString());		zcEbEvalReport.setExecuteDate(new Date());		zcEbEvalReport.setNd(new Integer(meta.getSvNd()));		zcEbEvalReport.setExecutor(meta.getSvUserID());		return zcEbEvalService.insertZcEbEvalReport(zcEbEvalReport);	}	public ZcEbEvalReport updateZcEbEvalReport(ZcEbEvalReport zcEbEvalReport,			RequestMeta meta) {		return zcEbEvalService.updateZcEbEvalReport(zcEbEvalReport);	}	public void deleteZcEbEvalReportFN(List list, RequestMeta meta) {		StringBuffer errorInfo = new StringBuffer("id为");		StringBuffer stackTraceMessage = new StringBuffer();		boolean fail = false;		for (int i = 0; i < list.size(); i++) {			ZcEbEvalReport zcEbEvalReport = (ZcEbEvalReport) list.get(i);			try {				int num = zcEbEvalService.deleteZcEbEvalReport(zcEbEvalReport);				if (num == 0) {					errorInfo.append(": ");					errorInfo.append(zcEbEvalReport.getReportCode());					errorInfo.append("已被删除");					fail = true;				}			} catch (Exception ex) {				errorInfo.append(": ");				errorInfo.append(zcEbEvalReport.getReportCode());				stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));				fail = true;			}		}		errorInfo.append("的指标删除失败！");		if (fail) {			BusinessException be = new BusinessException(errorInfo.toString());			be.setStackTraceMessage(stackTraceMessage.toString());			throw be;		}	}	public void deleteZcEbEvalReport(ZcEbEvalReport zcEbEvalReport,			RequestMeta meta) {		zcEbEvalService.deleteZcEbEvalReport(zcEbEvalReport);	}	public ZcEbEvalReport auditFN(ZcEbEvalReport zcEbEvalReport,			RequestMeta meta) {		return zcEbEvalService.audit(zcEbEvalReport, meta);	}	public ZcEbEvalReport callbackFN(ZcEbEvalReport zcEbEvalReport,			RequestMeta meta) {		return zcEbEvalService.callbackZcEbEvalReport(zcEbEvalReport, meta);	}	public ZcEbEvalReport newCommitFN(ZcEbEvalReport zcEbEvalReport,			RequestMeta meta) {		if (zcEbEvalReport.getProcessInstId() == null				|| zcEbEvalReport.getProcessInstId().longValue() == -1) {			zcEbEvalService.createWfDraft(zcEbEvalReport, meta);			zcEbEvalService.updateZcEbEvalReport(zcEbEvalReport);		}		return zcEbEvalService.newCommit(zcEbEvalReport, meta);	}	public ZcEbEvalReport unauditFN(ZcEbEvalReport zcEbEvalReport,			RequestMeta meta) {		return zcEbEvalService.unaudit(zcEbEvalReport, meta);	}	public ZcEbEvalReport untreadFN(ZcEbEvalReport zcEbEvalReport,			RequestMeta meta) {		return zcEbEvalService.untread(zcEbEvalReport, meta);	}	public void auditFN(List zcEbEvalReportList, RequestMeta meta) {		StringBuffer errorInfo = new StringBuffer("id为");		StringBuffer stackTraceMessage = new StringBuffer();		boolean fail = false;		for (int i = 0; i < zcEbEvalReportList.size(); i++) {			ZcEbEvalReport bean = (ZcEbEvalReport) zcEbEvalReportList.get(i);			try {				zcEbEvalService.audit(bean, meta);			} catch (Exception ex) {				errorInfo.append(": ");				errorInfo.append(bean.getReportCode());				System.out.println(ex.getMessage());				stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));				fail = true;			}		}		errorInfo.append("的单据处理失败！");		if (fail) {			BusinessException be = new BusinessException(errorInfo.toString());			be.setStackTraceMessage(stackTraceMessage.toString());			throw be;		}	}	public void newCommitFN(List zcEbEvalReportList, RequestMeta meta) {		StringBuffer errorInfo = new StringBuffer("id为");		StringBuffer stackTraceMessage = new StringBuffer();		boolean fail = false;		for (int i = 0; i < zcEbEvalReportList.size(); i++) {			ZcEbEvalReport bean = (ZcEbEvalReport) zcEbEvalReportList.get(i);			try {				newCommitFN(bean, meta);			} catch (Exception ex) {				errorInfo.append(": ");				errorInfo.append(bean.getReportCode());				stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));				fail = true;			}		}		errorInfo.append("的单据处理失败！");		if (fail) {			BusinessException be = new BusinessException(errorInfo.toString());			be.setStackTraceMessage(stackTraceMessage.toString());			throw be;		}	}	public void unauditFN(List zcEbEvalReportList, RequestMeta meta) {		StringBuffer errorInfo = new StringBuffer("id为");		StringBuffer stackTraceMessage = new StringBuffer();		boolean fail = false;		for (int i = 0; i < zcEbEvalReportList.size(); i++) {			ZcEbEvalReport bean = (ZcEbEvalReport) zcEbEvalReportList.get(i);			try {				zcEbEvalService.unaudit(bean, meta);			} catch (Exception ex) {				errorInfo.append(": ");				errorInfo.append(bean.getReportCode());				stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));				fail = true;			}		}		errorInfo.append("的单据处理失败！");		if (fail) {			BusinessException be = new BusinessException(errorInfo.toString());			be.setStackTraceMessage(stackTraceMessage.toString());			throw be;		}	}	public void untreadFN(List zcEbEvalReportList, RequestMeta meta) {		StringBuffer errorInfo = new StringBuffer("id为");		StringBuffer stackTraceMessage = new StringBuffer();		boolean fail = false;		for (int i = 0; i < zcEbEvalReportList.size(); i++) {			ZcEbEvalReport bean = (ZcEbEvalReport) zcEbEvalReportList.get(i);			try {				zcEbEvalService.untread(bean, meta);			} catch (Exception ex) {				errorInfo.append(": ");				errorInfo.append(bean.getReportCode());				stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));				fail = true;			}		}		errorInfo.append("的单据处理失败！");		if (fail) {			BusinessException be = new BusinessException(errorInfo.toString());			be.setStackTraceMessage(stackTraceMessage.toString());			throw be;		}	}	public void callbackZcEbEvalReportFN(List zcEbEvalReportList,			RequestMeta meta) {		StringBuffer errorInfo = new StringBuffer("id为 ");		StringBuffer stackTraceMessage = new StringBuffer();		boolean fail = false;		for (int i = 0; i < zcEbEvalReportList.size(); i++) {			ZcEbEvalReport zcEbEvalReport = (ZcEbEvalReport) zcEbEvalReportList					.get(i);			try {				zcEbEvalService.callbackZcEbEvalReport(zcEbEvalReport, meta);			} catch (Exception ex) {				errorInfo.append(zcEbEvalReport.getReportCode() + "\n");				stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));				fail = true;			}		}		errorInfo.append("的直接支付申请收回失败！");		if (fail) {			BusinessException be = new BusinessException(errorInfo.toString());			be.setStackTraceMessage(stackTraceMessage.toString());			throw be;		}	}	public void updateZcEbEvalStatus(List zcEbEvalReportList, RequestMeta meta) {		zcEbEvalService.updateZcEbEvalStatus(zcEbEvalReportList);	}	public ZcEbEvalReport updateZcEbEvalStatus(ZcEbEvalReport zcEbEvalReport,			RequestMeta meta) {		return zcEbEvalService.updateZcEbEvalStatus(zcEbEvalReport);	}	public String genExpertEvalPackSumResult(Map map, RequestMeta meta) {		return zcEbEvalService.genExpertSumResult(map);	}	public List getExpertEvalPackResList(Map map, RequestMeta meta) {		return zcEbEvalService.getExpertEvalPackResList(map);	}	public List genPackFinalSumResult(Map map, List list, RequestMeta meta) {		return zcEbEvalService.genPackFinalSumResult(map, list);	}	public void updateZcEbPackEvalFinalSumResultFN(List list, RequestMeta meta) {		zcEbEvalService.updateZcEbPackEvalFinalSumResultFN(list);	}	public void deleteZcEbPackEvalFinalSumResult(Map map, RequestMeta meta) {		zcEbEvalService.deleteZcEbPackEvalFinalSumResult(map);	}	public List getZcEbEvalItemResultList(ElementConditionDto dto,			RequestMeta meta) {		return null;	}	public String genProviderEvalResult(Map map, RequestMeta meta) {		return zcEbEvalService.getProviderEvalResult(map);	}	public PrintObject genZcEbEvalReportPrintObject(			ZcEbEvalReport zcEbEvalReport, RequestMeta requestMeta) {		return zcEbEvalService.genZcEbEvalReportPrintObject(zcEbEvalReport);	}	public List getEbExpertOpinionList(Map map, RequestMeta meta) {		return zcEbEvalService.getEbExpertOpinionList(map);	}	public ZcEbExpertOpinion getZcEbExpertOpinion(Map map, RequestMeta meta) {		return zcEbEvalService.getZcEbExpertOpinion(map);	}	public void SaveZcEbExpertOpinion(ZcEbExpertOpinion zcEbExpertOpinion,			RequestMeta meta) {		zcEbEvalService.SaveZcEbExpertOpinion(zcEbExpertOpinion);	}	public List getZcEbEvalFormulaItemReportList(Map map, RequestMeta meta) {		return zcEbEvalService.getZcEbEvalFormulaItemReportList(map);	}	public List getZcEbEvalResult(Map map, RequestMeta meta) {		return zcEbEvalService.getZcEbEvalResult(map);	}	// 获取专家当前的评审进度	public ZcEbEvalBidTeamMember getZcEbCurrExpertEvalProgress(			ZcEbEvalPack evalPack, RequestMeta requestMeta) {		return this.zcEbEvalService.getZcEbEvalMember(evalPack);	}	// 送采购单位确认	public ZcEbEvalReport sendToProcurementUnitFN(ZcEbEvalReport bill,			RequestMeta requestMeta) {		// TODO Auto-generated method stub		return zcEbEvalService.sendToProcurementUnit(bill, requestMeta);	}	// 批量插入供应商的评审数据	public void insertProEvalItemResultList(Map map, List providerList,			RequestMeta meta) {		zcEbEvalService.insertProEvalItemResultList(map, providerList, meta);	}	/*	 * 	 * --------------------------------------------------专家承诺--------------------	 * -------------------------------------------------------	 */	public void deleteZcExpertChengNuo(ZcEbExpertChengNuo bill, RequestMeta meta) {		zcEbEvalService.deleteZcExpertChengNuo(bill, meta);	}	public void saveZcExpertChengNuo(ZcEbExpertChengNuo bill, RequestMeta meta) {		zcEbEvalService.saveZcExpertChengNuo(bill, meta);	}	public ZcEbExpertChengNuo getZcExpertChengNuo(Map map, RequestMeta meta) {		return zcEbEvalService.getZcExpertChengNuo(map, meta);	}	public List getZcEbPackEvalResult(Map map, RequestMeta meta) {		// TODO Auto-generated method stub		return zcEbEvalService.getZcEbPackEvalResult(map);	}     public List queryExportsDatas(ElementConditionDto dto, RequestMeta meta) {    // TODO Auto-generated method stub    return zcEbEvalService.queryExportsDatas(dto, meta);  }     public String importTransDatasFN(ZcEbEvalReport bill, RequestMeta meta) {    // TODO Auto-generated method stub    return zcEbEvalService.importTransDatasFN(bill, meta);  }     public String saveOffLineEvalBidFN(List packLst, RequestMeta requestMeta) {    // TODO Auto-generated method stub    return zcEbEvalService.saveOffLineEvalBidFN(packLst, requestMeta);  }}