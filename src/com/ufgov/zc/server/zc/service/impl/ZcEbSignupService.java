package com.ufgov.zc.server.zc.service.impl;import java.io.File;import java.io.FileInputStream;import java.math.BigDecimal;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Set;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.system.model.AsOption;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.common.system.util.UUID;import com.ufgov.zc.common.zc.WordFileUtil;import com.ufgov.zc.common.zc.filemstools.FileSeparater;import com.ufgov.zc.common.zc.model.DataExchangeRedo;import com.ufgov.zc.common.zc.model.MailInfo;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbPlan;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcEbSecurityRecord;import com.ufgov.zc.common.zc.model.ZcEbSignup;import com.ufgov.zc.common.zc.model.ZcEbSignupPackDetail;import com.ufgov.zc.common.zc.model.ZcEbSupplier;import com.ufgov.zc.server.system.dao.IAsFileDao;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.dao.IBaseDao;import com.ufgov.zc.server.zc.dao.IDataExchangeDao;import com.ufgov.zc.server.zc.dao.IZcEbProjDao;import com.ufgov.zc.server.zc.dao.IZcEbSecurityRecordDao;import com.ufgov.zc.server.zc.dao.IZcEbSignupDao;import com.ufgov.zc.server.zc.dao.IZcEbSupplierDao;import com.ufgov.zc.server.zc.service.IZcEbSignupService;import com.ufgov.zc.server.zc.util.MailUtil;/** *  * @ClassName: ZcEbSignupService *  * @Description: TODO(这里用一句话描述这个类的作用) *  * @date: Apr 21, 2010 4:44:08 PM *  * @version: V1.0 *  * @since: 1.0 *  * @author: xiaofei *  * @modify: */public class ZcEbSignupService implements IZcEbSignupService {	private IZcEbSignupDao zcEbSignupDao;	private IZcEbSupplierDao zcEbSupplierDao;	private IDataExchangeDao dataExchangeDao;	private IWorkflowDao workflowDao;	private WFEngineAdapter wfEngineAdapter;	private IAsFileDao asFileDao;	private IZcEbSecurityRecordDao zcEbSecurityRecordDao;	private IZcEbProjDao zcEbProjDao;	private IBaseDao baseDao;	public IBaseDao getBaseDao() {		return baseDao;	}	public void setBaseDao(IBaseDao baseDao) {		this.baseDao = baseDao;	}	public void setWorkflowDao(IWorkflowDao workflowDao) {		this.workflowDao = workflowDao;	}	public IWorkflowDao getWorkflowDao() {		return workflowDao;	}	public IZcEbSignupDao getZcEbSignupDao() {		return zcEbSignupDao;	}	public void setZcEbSignupDao(IZcEbSignupDao zcEbSignupDao) {		this.zcEbSignupDao = zcEbSignupDao;	}	public List getZcEbSignup(ElementConditionDto dto, RequestMeta meta) {		return zcEbSignupDao.getZcEbSignup(dto, meta);	}	public List getZcEbSignupList(ElementConditionDto dto, RequestMeta meta) {		return zcEbSignupDao.getZcEbSignupList(dto, meta);	}	public IZcEbSupplierDao getZcEbSupplierDao() {		return zcEbSupplierDao;	}	public void setZcEbSupplierDao(IZcEbSupplierDao zcEbSupplierDao) {		this.zcEbSupplierDao = zcEbSupplierDao;	}	public IDataExchangeDao getDataExchangeDao() {		return dataExchangeDao;	}	public void setDataExchangeDao(IDataExchangeDao dataExchangeDao) {		this.dataExchangeDao = dataExchangeDao;	}	public IAsFileDao getAsFileDao() {		return asFileDao;	}	public void setAsFileDao(IAsFileDao asFileDao) {		this.asFileDao = asFileDao;	}	public List getZcEbSignupPackDetail(ElementConditionDto dto, RequestMeta meta) {		return this.zcEbSignupDao.getZcEbSignupPackDetail(dto);	}	public void updateZcEbSignup(ZcEbSignup signup, RequestMeta requestMeta) {		this.zcEbSignupDao.updateZcEbSignup(signup, requestMeta);	}	public IZcEbSecurityRecordDao getZcEbSecurityRecordDao() {		return zcEbSecurityRecordDao;	}	public void setZcEbSecurityRecordDao(			IZcEbSecurityRecordDao zcEbSecurityRecordDao) {		this.zcEbSecurityRecordDao = zcEbSecurityRecordDao;	}	public IZcEbProjDao getZcEbProjDao() {		return zcEbProjDao;	}	public void setZcEbProjDao(IZcEbProjDao zcEbProjDao) {		this.zcEbProjDao = zcEbProjDao;	}	public ZcEbSignup insertZcEbSignup(ZcEbSignup signup,			RequestMeta requestMeta) {		String userId = requestMeta.getSvUserID();		String compoId = requestMeta.getCompoId();		String signupId = UUID.randomUUID().toString();		signup.setSignupId(signupId);////		Long draftid = workflowDao.createDraftId();////		signup.setProcessInstId(draftid);		List detail = signup.getSignupPacks();		if (detail != null) {			ZcEbSignupPackDetail pack;			for (int i = 0; i < detail.size(); i++) {				pack = (ZcEbSignupPackDetail) detail.get(i);				pack.setSignupId(signupId);			}		}		this.zcEbSignupDao.insertZcEbSignup(signup, requestMeta);//		AsWfDraft asWfDraft = new AsWfDraft();////		asWfDraft.setCompoId(compoId);////		asWfDraft.setWfDraftName(signupId);////		asWfDraft.setUserId(userId);////		asWfDraft.setMasterTabId(compoId);////		asWfDraft.setWfDraftId(BigDecimal.valueOf(draftid.longValue()));////		workflowDao.insertAsWfdraft(asWfDraft);		Map paras = new HashMap();		paras.put("projectcode", signup.getProjCode());		paras.put("suppliercode", signup.getProviderCode());		paras.put("suppliername", signup.getProviderName());		paras.put("signupid", signupId);		this.generatorDataExchangeRedoRecordForSignup(paras);		if ("1".equals(signup.getIsPayGuarantee())) {			// 如果状态为就是已经缴纳了保证金			Map para = new HashMap();			para.put("addDate", signup.getSignupDate());			para.put("singupId", signup.getSignupId());			zcEbSignupDao.updatebzjStatus(para);		}		return signup;	}	/**	 * 	 * 往数据导出表中插入导出数据存根	 * 	 * 	 * 	 * @param parasMap	 */	private void generatorDataExchangeRedoRecordForSignup(Map map) {		String projCode = (String) map.get("projectcode");		String supplierCode = (String) map.get("suppliercode");		String supplierName = (String) map.get("suppliername");		String signupID = (String) map.get("signupid");		String recordID = projCode + "@" + supplierCode + "@" + signupID;		DataExchangeRedo redo = new DataExchangeRedo();		redo.setDataTypeID(ZcSettingConstants.DATA_TYPE_ID_SIGNUP_EXP_IMP);		redo.setRecordID(recordID);		dataExchangeDao.deleteByRecordIDAndDataTypeID(redo);		// recordID格式：projCode@supplierCode@signupID,其中用@分隔		redo.setDataTypeName(ZcSettingConstants.DATA_TYPE_NAME_SIGNUP_EXP_IMP);		redo.setMasterTableName("ZC_EB_SIGNUP");		redo.setGenerateDate(new Date());		redo.setIsExported("0");		redo.setRecordName(supplierName + "报名");		redo.setOperateType("INSERT");		dataExchangeDao.saveRedo(redo);	}	public ZcEbSignup save(ZcEbSignup signup, RequestMeta requestMeta) {		StringBuffer packs = new StringBuffer("' '");		boolean isBid = "1".equals(signup.getStatus());		if (signup.getSignupId() == null || "".equals(signup.getSignupId())) {//			if (isBid && signup.getSignupPacks() != null) {//				for (int i = 0; i < signup.getSignupPacks().size(); i++) {//					packs.append(",'")//							.append(((ZcEbSignupPackDetail) signup//									.getSignupPacks().get(i)).getPackCode())//							.append("'");//				}//			}			insertZcEbSignup(signup, requestMeta);		} else {//			if (isBid && signup.getSignupPacks() != null) {//				String pk = (String) baseDao.read(//						"ZcEbSignup.getBidZcEbSignupPackDetailByID",//						signup.getSignupId());//				if (pk == null) {//					pk = "";//				}//				for (int i = 0; i < signup.getSignupPacks().size(); i++) {//					String pack = ((ZcEbSignupPackDetail) signup//							.getSignupPacks().get(i)).getPackCode();//					if (pk.indexOf("_" + pack + "_") < 0) {//						packs.append(",'").append(pack).append("'");//					}//				}//			}			updateZcEbSignup(signup, requestMeta);		}		if ("1".equals(signup.getIsPayGuarantee())) {			// 如果状态为就是已经缴纳了保证金			Map paras = new HashMap();			paras.put("addDate", signup.getSignupDate());			paras.put("singupId", signup.getSignupId());			zcEbSignupDao.updatebzjStatus(paras);		}//		if (isBid) {//			this.sendMail(signup, packs.toString());//		}		signup.setDbDigest(signup.digest());		signup.setDbDigest(this.getZcEbSignupByID(signup.getSignupId())				.digest());		return signup;	}	private void sendMail(ZcEbSignup signup, String packs) {		final MailInfo mailInfo = new MailInfo();		String mail = (String) baseDao.read("ZcEbSupplier.getSuMail",				signup.getProviderCode());		if (mail == null || "".equals(mail)) {			return;		} else {			mailInfo.setToAddress(mail);		}		List ao = baseDao.query("ZC_WCMS_CONTENT.getMailInfo", null);		String manager = "";		AsOption op = null;		for (int i = 0; i < ao.size(); i++) {			op = (AsOption) ao.get(i);			if ("OPT_ZC_MAIL_FROM_POP".equals(op.getOptId())) {				mailInfo.setMailServerHost(op.getOptVal());				continue;			}			if ("OPT_ZC_MAIL_FROM_PORT".equals(op.getOptId())) {				mailInfo.setMailServerPort(op.getOptVal());				continue;			}			if ("OPT_ZC_MAIL_FROM_USER".equals(op.getOptId())) {				mailInfo.setUserName(op.getOptVal());				mailInfo.setFromAddress(op.getOptVal());				continue;			}			if ("OPT_ZC_MAIL_FROM_PASS".equals(op.getOptId())) {				mailInfo.setPassword(op.getOptVal());				continue;			}			if ("OPT_ZC_MAIL_TITLE".equals(op.getOptId())) {				mailInfo.setSubject(op.getOptVal());				continue;			}			if ("OPT_ZC_MAIL_INTERFACE_DOWN".equals(op.getOptId())) {				manager = op.getOptVal();				continue;			}		}		Map sig = new HashMap();		sig.put("signupId", signup.getSignupId());		sig.put("packCode", packs);		List files = baseDao.query("AsFile.getBulAsFileBySignupId", sig);		if (files == null || files.size() == 0) {			return;		}		for (int i = 0; i < files.size(); i++) {			AsFile f = (AsFile) files.get(i);			String name = signup.getProviderCode() + f.getFileId() + ".doc";			try {				WordFileUtil.createFile(manager + "/zc/", name,						WordFileUtil.getFileContent(f));			} catch (Exception e) {			}			mailInfo.getAttachFileNames().add(manager + "/zc/" + name);		}		mailInfo.setValidate(true);		mailInfo.setContent("");		// 这个类主要来发送邮件		new Thread() {			public void run() {				MailUtil m = new MailUtil();				m.sendHtmlMail(mailInfo);			}		}.start();	}	public ZcEbSignup getZcEbSignupByID(String signupId) {		ZcEbSignup signup = this.zcEbSignupDao.getZcEbSignupByID(signupId);		ElementConditionDto dto=new ElementConditionDto();		dto.setZcText0(signup.getProjCode());		List projLst= baseDao.query("ZcEbProj.getProjWithPlan", dto);		if(projLst!=null && projLst.size()>0){			ZcEbProj proj =(ZcEbProj) projLst.get(0);			signup.setPlan(proj.getPlan());			signup.setPurType(proj.getPurType());		}		if (signup != null) {			dto=new ElementConditionDto();			dto.setZcText1(signupId);			signup.setSignupPacks(this.zcEbSignupDao.getZcEbSignupPackDetail(dto));					}		return signup;	}	public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {		this.wfEngineAdapter = wfEngineAdapter;	}	public WFEngineAdapter getWfEngineAdapter() {		return wfEngineAdapter;	}	public boolean delete(ZcEbSignup signup, RequestMeta requestMeta) {		return this.zcEbSignupDao.delete(signup, requestMeta);	}	public ZcEbSignup getZcEbSignupByIDProvider(ZcEbSignup curObj,			RequestMeta requestMeta) {		return this.zcEbSignupDao				.getZcEbSignupByIDProvider(curObj, requestMeta);	}	public List getZcEbBid(ElementConditionDto elementConditionDto,			RequestMeta meta) {		return zcEbSignupDao.getZcEbBid(elementConditionDto, meta);	}	public void updateZcEbSignupPackProperty(ZcEbSignupPackDetail signupDetail) {		zcEbSignupDao.updateZcEbSignupPackProperty(signupDetail);	}	public void updateZcEbSignupProperty(ZcEbSignup signup) {		zcEbSignupDao.updateZcEbSignupProperty(signup);	}	public void updateZcEbSignupIfImport(ZcEbSignup zcEbSignup, String packId) {		zcEbSignupDao.updateZcEbSignupProperty(zcEbSignup);		ZcEbSignupPackDetail zcEbSignupPackDetail = new ZcEbSignupPackDetail();		zcEbSignupPackDetail.setSignupId(zcEbSignup.getSignupId());		zcEbSignupPackDetail.setPackCode(packId);		zcEbSignupPackDetail.setIsSubmitBidDoc("Y");		zcEbSignupPackDetail.setBidDocId(zcEbSignup.getBidDocFileId());		zcEbSignupPackDetail.setBidDocName(zcEbSignup.getBidDocFile());		zcEbSignupDao.updateZcEbSignupPackProperty(zcEbSignupPackDetail);	}	public ZcEbSignup getZcEbSignupByInfo(ElementConditionDto dto) {		return zcEbSignupDao.getZcEbSignupByInfo(dto);	}	public ZcEbSignup getZcEbSignupForU(ElementConditionDto dto) {		return zcEbSignupDao.getZcEbSignupForU(dto);	}	/**	 * 	 * 供应商标书上传成功后对相关的表数据进行更新:	 * 	 * 1、根据供应商的loginName查找供应商详细信息；	 * 	 * 2、获得报名信息；	 * 	 * 3、更新报名信息；	 * 	 * 4、产生数据导入导出redo数据	 */	public Map updateRelationDataForTBFileUpload(Map parasMap) {		Map resultMap = new HashMap();		// 默认将结果设置为失败		resultMap.put("UPDATESTATUS", "fail");		Map checkResultMap = toCheckParasEnough(parasMap);		if ("FAIL".equals(checkResultMap.get("CHECKRESULT"))) {			resultMap.putAll(checkResultMap);			return resultMap;		}		String fileID = (String) parasMap.get("FILEID");		String loginName = (String) parasMap.get("USERID");		ZcEbSupplier supplier = zcEbSupplierDao				.getSupplierByLoginName(loginName);		if (supplier == null) {			resultMap.put("FAILREASON", "供应商【" + loginName + "】不存在...");			return resultMap;		} else {			resultMap.put("SUPPLIERINFO", "供应商【" + loginName + "】具体信息获得成功...");		}		String suCode = supplier.getCode();		String suName = supplier.getName();		resultMap.put("SUPPLIERCODE", suCode);		resultMap.put("SUPPLIERNAME", suName);		parasMap.put("SUPPLIERCODE", suCode);		parasMap.put("SUPPLIERNAME", suName);		String projCode = (String) parasMap.get("PROJECTCODE");		String packCode = (String) parasMap.get("PACKCODES");		String ztbName = (String) parasMap.get("ZTBNAME");		String signupID = null;		Date signupDate = null;		ZcEbSignup paraSignup = new ZcEbSignup();		paraSignup.setProviderCode(suCode);		paraSignup.setProjCode(projCode);		ZcEbSignup reSignup = this.zcEbSignupDao.getZcEbSignupByIDProvider(				paraSignup, null);		if (reSignup == null) {			resultMap.put("FAILREASON", "没有查询到供应商报名信息，无法完成投标，请确认是否已经报名项目标段.");			return resultMap;		} else {			resultMap.put("SIGNUPINFO", "供应商报名信息获取成功...");			resultMap.put("PROJECTNAME", reSignup.getProjName());		}		signupID = reSignup.getSignupId();		signupDate = reSignup.getSignupDate();		SimpleDateFormat sdf = new SimpleDateFormat(				ZcSettingConstants.SIMPLE_DATE_FORMAT_FULL);		resultMap.put("SIGNUPDATE", sdf.format(signupDate));		ElementConditionDto dto=new ElementConditionDto();		dto.setZcText1(signupID);		List signupPackList = this.zcEbSignupDao.getZcEbSignupPackDetail(dto);		if (signupPackList == null || signupPackList.size() == 0) {			resultMap.put("FAILREASON", "在项目报名时，未报名具体标段，无法完成投标.");			return resultMap;		}		ZcEbSignupPackDetail detail = null;		boolean flag = false;		resultMap.put("FAILREASON", "供应商报名分包表信息更新失败，无法完成投标.");		String[] packCodes = packCode.split(",");		StringBuffer packNames = new StringBuffer();		for (int k = 0; k < packCodes.length; k++) {			for (int i = 0; i < signupPackList.size(); i++) {				detail = (ZcEbSignupPackDetail) signupPackList.get(i);				if (packCodes[k].equals(detail.getPackCode())) {					detail.setIsSubmitBidDoc("Y");					detail.setBidDocId(fileID);					detail.setBidDocName(ztbName);					detail.setSubmitBidDocType("1");					this.zcEbSignupDao.updateZcEbSignupPackProperty(detail);					packNames.append(detail.getPackName());					packNames.append("，");					signupPackList.remove(detail);					flag = true;				}			}		}		if (!flag) {			resultMap.put("FAILREASON", "无法更新报名分包表...");			return resultMap;		}		resultMap.put("BIDPACKNAMES", packNames.toString());		// 如果是高速上传		if ("HIGHT".equals(parasMap.get("UPLOADMOLD"))) {			String currWorkSpace = System.getProperty("user.dir");			parasMap.put("SERVERFILEFULLPATH", currWorkSpace + "/fileUploads/");			String res = this.insertAsFile(parasMap);			if (!"OK".equalsIgnoreCase(res)) {				resultMap.put("FAILREASON", res);				return resultMap;			}			parasMap.put("LEVEL2XMLFILEPATH", currWorkSpace + "/fileUploads/"					+ fileID + ".xml");			String result = this.insertOrUpdate(parasMap);			if (!"OK".equalsIgnoreCase(result)) {				resultMap.put("FAILREASON", result);				return resultMap;			}		} else {			String sepInfo = doSeperatorMergedFile(parasMap);			if (sepInfo != null && !"".equals(sepInfo)) {				resultMap.put("FAILREASON", "服务器端文件拆分失败，无法完成投标..." + sepInfo);				return resultMap;			}		}		paraSignup = new ZcEbSignup();		paraSignup.setIsSubmitBidDoc("Y");		paraSignup.setBidDocFileId(fileID);		paraSignup.setBidDocFile(ztbName);		paraSignup.setSubmitBidDocType("1");		paraSignup.setProviderCode(suCode);		paraSignup.setProjCode(projCode);		paraSignup.setSignupId(signupID);		resultMap.put("FAILREASON", "供应商报名信息更新失败，无法完成投标.");		this.zcEbSignupDao.updateZcEbSignupProperty(paraSignup);		resultMap.put("SIGNUPUPDATE", "供应商报名信息更新成功...");		resultMap.put("FAILREASON", "数据导出表插入失败，无法完成投标.");		this.generatorDataExchangeRedoRecord(parasMap);		resultMap.put("FAILREASON", "");		resultMap.put("UPDATESTATUS", "success");		return resultMap;	}	/**	 * 	 * 检查是否有足够的参数	 * 	 * @param parasMap	 * 	 * @return	 */	private Map toCheckParasEnough(Map parasMap) {		Map resultMap = new HashMap();		StringBuffer buff = new StringBuffer();		int count = 0;		if (parasMap.get("FILEID") == null) {			buff.append(++count + "、缺少参数：FILEID;");		}		if (parasMap.get("USERID") == null) {			buff.append(++count + "、缺少参数：USERID;");		}		if (parasMap.get("PROJECTCODE") == null) {			buff.append(++count + "、缺少参数：PROJECTCODE;");		}		if (parasMap.get("PACKCODES") == null) {			buff.append(++count + "、缺少参数：PACKCODES;");		}		if (parasMap.get("UPLOADMOLD") == null) {			buff.append(++count + "、缺少参数：UPLOADMOLD;");		}		if (parasMap.get("ZCISMASTERCODED") == null) {			buff.append(++count + "、缺少参数：ZCISMASTERCODED;");		}		if (parasMap.get("ZCISPROVIDERCODED") == null) {			buff.append(++count + "、缺少参数：ZCISPROVIDERCODED;");		}		if (count >= 1) {			System.out.println(buff.toString());			resultMap.put("FAILREASON", buff.toString());			resultMap.put("CHECKRESULT", "FAIL");		}		return resultMap;	}	/**	 * 	 * 高速方式上传时，在这里往AS_FILE添加记录	 * 	 * @param parasMap	 */	private String insertAsFile(Map parasMap) {		String serverFilePath = (String) parasMap.get("SERVERFILEFULLPATH");		String fileID = (String) parasMap.get("FILEID");		String fileFullPath = serverFilePath + File.separator + fileID;		File file = new File(fileFullPath);		if (!file.exists()) {			return "没有在服务器上找到：" + fileFullPath + "文件！";		}		String fileName = parasMap.get("PROJECTCODE") + "@"				+ parasMap.get("PACKCODES") + "@"				+ parasMap.get("SUPPLIERCODE") + ".ztb";		AsFile asFile = new AsFile();		asFile.setFileId(fileID);		asFile.setFileName(fileName);		asFile.setFilePath(fileFullPath);		this.asFileDao.deleteAsFileById(fileID);		this.asFileDao.insertAsFileDirectory(asFile);		return "OK";	}	/**	 * 	 * 拆分投标文件，拆成加密后的完整标书数字信封文件两个部分，开标截止时间到后，供应商登录进行解密还原； 基本思路：	 * 	 * 0、检查一下文件是否已经拆过，如果已经拆完，那么直接返回； 1、重命名该未拆分的文件，以fileID+"_tmp"的形式命名；	 * 	 * 2、创建一个用于拆分后存放文件的临时目录，临时目录以fileID+"_dir"的方式命名；	 * 	 * 3、进行文件拆分，拆分到第1步新建的临时目录下，应该包含了*.ztb.en和*.ztb.en.att文件；	 * 	 * 将*.ztb.en文件和*.ztb.en.att文件的*部分替换为fileID进行重命名，*.ztb.en文件直接重命名到fileUploads	 * 	 * 目录下，*.ztb.en.att文件直接存入数据库ZC_SECURITY_RECORD表ZC_DIGITAL_ENVLOPE中；	 * 	 * 4、更新对应的记录：更新AsFile对象到数据库;	 * 	 * 	 * 	 * @param parasMap	 */	private String doSeperatorMergedFile(Map parasMap) {		String fileID = (String) parasMap.get("FILEID");		AsFile asFile = this.asFileDao.getAsFileById(fileID);		FileSeparater fs = new FileSeparater();		if (asFile == null) {			return "没有在数据库AS_FILE表中找到指定" + fileID + "的记录，稍候可以再试...";		}		String origFileName = asFile.getFileName();		if (origFileName.endsWith(ZcSettingConstants.MEG_FILE_SUFFIX)) {			java.io.File megFile = new java.io.File(asFile.getFilePath());			// 获得合并文件的全路径			String srcPath = megFile.getAbsolutePath();			// 创建一个新的用于存放拆分文件的目录			String tarDirPath = megFile.getParent() + File.separator + fileID					+ "_dir";			// 重命名该刚刚上传的文件			String renamePath = srcPath + "_tmp";			String newFileBase = megFile.getParent() + File.separator;			File file = new File(srcPath);			file.renameTo(new File(renamePath));			String level2XmlFileName = null;			String level2XmlFilePath = null;			String projCode = (String) parasMap.get("PROJECTCODE");			String packCode = (String) parasMap.get("PACKCODES");			try {				System.out.println("开始调用拆分文件。。。src:" + renamePath);				System.out.println("开始调用拆分文件。。。tar:" + tarDirPath);				fs.separaterFiles(renamePath, tarDirPath);				System.out.println("拆分文件完成。。。");				File tmpFile = new File(tarDirPath);				if (tmpFile.isDirectory()) {					System.out.println("查找目录下的文件...");					File[] fileList = tmpFile.listFiles();					for (int i = 0; i < fileList.length; i++) {						String fileName = fileList[i].getName().toUpperCase();						System.out.println((i + 1) + ",filename=" + fileName);						if (fileName.endsWith(".ZTB.EN")) {							String newName = newFileBase + fileID + ".ztb.en";							System.out.println("5555555=" + newName);							fileList[i].renameTo(new File(newName));						} else if (fileName.endsWith("LEVEL2.XML")								&& fileName.indexOf(projCode.toUpperCase()) != -1								&& fileName.indexOf(packCode.toUpperCase()) != -1) {							String newName = newFileBase + fileID + ".xml";							System.out.println("6666666=" + newName);							fileList[i].renameTo(new File(newName));							level2XmlFileName = fileName;							level2XmlFilePath = newName;						}					}				}			} catch (Exception e) {				e.printStackTrace();				return "服务器端文件处理失败：" + e.getMessage();			}			asFile.setFileId(fileID);			asFile.setFileName(level2XmlFileName);			this.asFileDao.updateAsFileById(asFile);			if (parasMap.get("UPLOADMOLD") == null) {				parasMap.put("UPLOADMOLD", "COMMON");			}			parasMap.put("LEVEL2XMLFILEPATH", level2XmlFilePath);			this.toDeleteTmpMidFiles(tarDirPath);		} else {			if (parasMap.get("UPLOADMOLD") == null) {				parasMap.put("UPLOADMOLD", "COMMON");			}			parasMap.put("LEVEL2XMLFILEPATH", "");		}		String result = this.insertOrUpdate(parasMap);		if (!"OK".equalsIgnoreCase(result)) {			return result;		}		System.out.println("服务器端文件拆分完成.");		return null;	}	/**	 * 	 * 删除拆分过程中产生的临时文件和目录	 */	private void toDeleteTmpMidFiles(String toDelDirs) {		File file = new File(toDelDirs);		if (file.exists()) {			if (file.isFile()) {				file.delete();			} else {				if (file.listFiles().length > 0) {					for (int i = 0; i < file.listFiles().length; i++) {						this.toDeleteTmpMidFiles(file.listFiles()[i]								.getAbsolutePath());					}				} else {					file.delete();				}				file.delete();			}		}	}	private String insertOrUpdate(Map parasMap) {		String projCode = (String) parasMap.get("PROJECTCODE");		String packCode = (String) parasMap.get("PACKCODES");		String fileID = (String) parasMap.get("FILEID");		String userID = (String) parasMap.get("USERID");		String zcZtbFileMD5 = (String) parasMap.get("ORIGTBFILEMD5");		String zcCodedFileMD5 = (String) parasMap.get("TBFILEENCODEDMD5");		String uploadMold = (String) parasMap.get("UPLOADMOLD");		String zcIsMasterCoded = (String) parasMap.get("ZCISMASTERCODED");		String zcIsProviderCoded = (String) parasMap.get("ZCISPROVIDERCODED");		String zcBusinessIndex = projCode.trim() + "@" + packCode.trim() + "@"				+ userID.trim();		// 为了保证不会重复，先根据业务标识删除一下也行存在的旧数据		ZcEbSecurityRecord rec = new ZcEbSecurityRecord();		rec.setZcBusinessIndex(zcBusinessIndex);		this.zcEbSecurityRecordDao.delete(rec);		rec = new ZcEbSecurityRecord();		String level2XmlFilePath = (String) parasMap.get("LEVEL2XMLFILEPATH");		if (level2XmlFilePath != null && !"".equals(level2XmlFilePath)) {			byte[] fileContent = this.getFileContent(level2XmlFilePath);			if (fileContent == null) {				return "服务器端没有找到数字信封文件！";			}			rec.setZcDigitalEnvlope(fileContent);		}		rec.setId(Guid.genID());		rec.setZcBusinessIndex(zcBusinessIndex);		rec.setZcCodedFileMD5(zcCodedFileMD5);		rec.setZcZtbFileMD5(zcZtbFileMD5);		rec.setZcCodedFileID(fileID);		rec.setZcIsMasterCoded(zcIsMasterCoded);		rec.setZcIsProviderCoded(zcIsProviderCoded);		rec.setZcMasterDecodedStatus("0");		rec.setZcProviderDecodedStatus("0");		rec.setZcMasterDecodedTime(null);		rec.setZcProviderDecodedTime(null);		rec.setZcMemo("插入新数据");		rec.setZcPwdOrigContent(null);		rec.setZcIsDecodedFinish("N");		rec.setZcProviderDecodedCount(new Integer(0));		rec.setZcMasterDecodedCount(new Integer(0));		System.out.println("上传模式" + uploadMold);		rec.setUploadMold(uploadMold);		System.out.println("88888888=" + zcBusinessIndex);		this.zcEbSecurityRecordDao.save(rec);		return "OK";	}	private byte[] getFileContent(String xmlFilePath) {		System.out.println("附件文件路径：" + xmlFilePath);		try {			byte[] buff = new byte[(int) (new File(xmlFilePath)).length()];			FileInputStream fis = new FileInputStream(xmlFilePath);			int len = fis.read(buff);			System.out.println("附件长度：" + len);			fis.close();			return buff;		} catch (Exception e) {			e.printStackTrace();		}		return null;	}	/**	 * 	 * 往数据导出表中插入导出数据存根	 * 	 * 	 * 	 * @param parasMap	 */	private void generatorDataExchangeRedoRecord(Map parasMap) {		String projCode = (String) parasMap.get("PROJCODE");		String packCodes = (String) parasMap.get("PACKCODES");		String supplierCode = (String) parasMap.get("SUPPLIERCODE");		String supplierName = (String) parasMap.get("SUPPLIERNAME");		String fileID = (String) parasMap.get("FILEID");		String recordID = projCode + "@" + packCodes + "@" + supplierCode + "@";		DataExchangeRedo redo = new DataExchangeRedo();		redo.setDataTypeID(ZcSettingConstants.DATA_TYPE_ID_TB_EXP);		redo.setRecordID(recordID);		dataExchangeDao.deleteByRecordIDAndDataTypeID(redo);		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");		// recordID格式：projCode@packCode@suppierCode@fileID@submitBidDocDate,其中用@分隔		recordID = recordID + fileID + "@" + sdf.format(new Date());		redo.setRecordID(recordID);		redo.setDataTypeName(ZcSettingConstants.DATA_TYPE_NAME_TB_EXP);		redo.setMasterTableName("AS_FILE");		redo.setGenerateDate(new Date());		redo.setIsExported("0");		redo.setRecordName(supplierName + "投标书");		redo.setOperateType("INSERT");		dataExchangeDao.saveRedo(redo);	}	/**	 * 	 * 查询已报名的可投标项目及标段，暂只需传入项目状态作为参数	 */	public List getSignupProjListForToubiao(Map paras) {		List list = this.zcEbSignupDao.getSignupProjListForToubiao(paras);		for (int i = 0; i < list.size(); i++) {			Map item = (Map) list.get(i);			String projCode = (String) item.get("PROJ_CODE");			List packList = this.zcEbProjDao					.getZcEbPackListByProjCode(projCode);			List retList = new ArrayList();			for (int j = 0; j < packList.size(); j++) {				ZcEbPack pack = (ZcEbPack) packList.get(j);				Map packMap = new HashMap();				packMap.put("pack_code", pack.getPackCode());				packMap.put("pack_name", pack.getPackName());				packMap.put("pack_desc", pack.getPackDesc());				packMap.put("pur_content", pack.getPurContent());				packMap.put("pur_type", pack.getPurType());				packMap.put("open_bid_status", pack.getOpenBidStatus());				retList.add(packMap);			}			item.put("PACKLIST", retList);		}		return list;	}	/**	 * 	 * 为了ztb下不再引用zcebpack类，在这里进行转换	 * 	 * @param projCode	 * 	 * @return	 */	private List convertPackObjectToMap(String projCode) {		List packList = this.zcEbProjDao.getZcEbPackListByProjCode(projCode);		List retList = new ArrayList();		for (int j = 0; j < packList.size(); j++) {			ZcEbPack pack = (ZcEbPack) packList.get(j);			Map packMap = new HashMap();			packMap.put("pack_code", pack.getPackCode());			packMap.put("pack_name", pack.getPackName());			packMap.put("pack_desc", pack.getPackDesc());			packMap.put("pur_content", pack.getPurContent());			packMap.put("pur_type", pack.getPurType());			packMap.put("open_bid_status", pack.getOpenBidStatus());			retList.add(packMap);		}		return retList;	}	/**	 * 	 * 查询可再次报价项目及标段，暂无需传递查询参数	 */	public List getEcbjProjListForQuotation(Map paras) {		List list = this.zcEbSignupDao.getEcbjProjListForQuotation(paras);		for (int i = 0; i < list.size(); i++) {			Map item = (Map) list.get(i);			String projCode = (String) item.get("PROJ_CODE");			item.put("PACKLIST", this.convertPackObjectToMap(projCode));		}		return list;	}	public List getProjPack(ElementConditionDto elementConditionDto,			RequestMeta requestMeta) {		return this.zcEbSignupDao.getProjPack(elementConditionDto);	}	public ZcEbProj getProj(ElementConditionDto elementConditionDto,			RequestMeta requestMeta) {		Map m = new HashMap();		m.put("PROJ_CODE", elementConditionDto.getProjCode());		return this.zcEbSignupDao.getProj(m);	}	public Map getSignupProjList(String userID) {		Map data = new HashMap();		// 获得所有该供应商报名了的未过截止时间的项目		List list = this.zcEbSignupDao.getSignupProjListByUserID(userID);		StringBuffer projCodes = new StringBuffer();		if (list.size() > 0) {			for (int i = 0; i < list.size(); i++) {				ZcEbSignup item = (ZcEbSignup) list.get(i);				if (item != null) {					projCodes.append(item.getProjCode());					projCodes.append("@&@");				}			}		} else {			List plans = this.zcEbSignupDao.getZcEbPlanNotOverdue();			for (int i = 0; i < plans.size(); i++) {				ZcEbPlan plan = (ZcEbPlan) plans.get(i);				projCodes.append(plan.getProjCode());				projCodes.append("@&@");			}		}		data.put("PROJCODES", projCodes.toString());		return data;	}	public ZcEbSignup updateStatusFN(ZcEbSignup signup, RequestMeta requestMeta) {		if (signup.getSignupId() == null || "".equals(signup.getSignupId())) {			insertZcEbSignup(signup, requestMeta);		} else {			updateZcEbSignup(signup, requestMeta);		}		signup.setDbDigest(signup.digest());		signup.setDbDigest(this.getZcEbSignupByID(signup.getSignupId())				.digest());		return signup;	}	public List getZcEbSignupSubmit(ElementConditionDto dto, RequestMeta meta) {		return zcEbSignupDao.getZcEbSignupSubmit(dto, meta);	}	public void unBidZcEbSignupFN(ZcEbSignup signup, RequestMeta requestMeta) {		zcEbSignupDao.unBidZcEbSignupFN(signup);	}	public List getRealMessageSignupList(ElementConditionDto dto,			RequestMeta meta) {		return baseDao.query("ZcEbSignup.getRealMessageSignupList", dto);	}     public List getZcEbSignupListWithNums(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    // TODO Auto-generated method stub    //获取项目列表    List projLst=baseDao.query("ZcEbProj.getProjWithPlan", elementConditionDto);    projLst=projLst==null?new ArrayList():projLst;    List sigupPackLst=baseDao.query("ZcEbSignup.getZcEbSignupPackListWithNums", elementConditionDto);    sigupPackLst=sigupPackLst==null?new ArrayList():sigupPackLst;    for(int i=0;i<projLst.size();i++){      ZcEbProj proj=(ZcEbProj)projLst.get(i);      proj.setRemark(getSignupMsg(proj.getProjCode(),sigupPackLst));    }    return projLst;  }  private String getSignupMsg(String projCode, List sigupPackLst) {    // TODO Auto-generated method stub    Map packs=new HashMap();    for(int i=0;i<sigupPackLst.size();i++){      ZcEbSignupPackDetail d=(ZcEbSignupPackDetail)sigupPackLst.get(i);      if(projCode.equals(d.getId())){        BigDecimal s=new BigDecimal(0);        if("1".equals(d.getSpStatus())){//已经报名          s=new BigDecimal(1);        }        if(packs.containsKey(d.getPackName())){          BigDecimal n=(BigDecimal) packs.get(d.getPackName());          packs.put(d.getPackName(), n.add(s));        }else{          packs.put(d.getPackName(), s);                  }      }    }    StringBuffer sb=new StringBuffer();    Object[] keys= packs.keySet().toArray();    for(int i=0;i<keys.length;i++){      BigDecimal s=(BigDecimal) packs.get(keys[i]);      sb.append(keys[i]).append(":").append(s.intValue()).append("家\n");    }    return sb.toString();  }}