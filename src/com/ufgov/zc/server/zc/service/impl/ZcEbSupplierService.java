/** * ZcEbSupplierService.java * com.ufgov.gk.server.zc.service.impl * Administrator * 2010-4-30 */package com.ufgov.zc.server.zc.service.impl;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.GregorianCalendar;import java.util.HashMap;import java.util.List;import java.util.Map;import com.ufgov.zc.common.console.model.AsEmp;import com.ufgov.zc.common.console.model.SysUsermanage;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.system.model.AsOption;import com.ufgov.zc.common.system.model.User;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.DataExchangeRedo;import com.ufgov.zc.common.zc.model.MailInfo;import com.ufgov.zc.common.zc.model.ZcEbEcbjItem;import com.ufgov.zc.common.zc.model.ZcEbSupBsType;import com.ufgov.zc.common.zc.model.ZcEbSupplier;import com.ufgov.zc.common.zc.model.ZcEbSupplierQualify;import com.ufgov.zc.common.zc.model.ZcEbSupplierType;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.service.ISysUsermanageService;import com.ufgov.zc.server.system.service.IUserService;import com.ufgov.zc.server.system.util.AsOptionUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.dao.IBaseDao;import com.ufgov.zc.server.zc.dao.IDataExchangeDao;import com.ufgov.zc.server.zc.dao.IZcEbSupplierDao;import com.ufgov.zc.server.zc.service.IZcEbSupplierService;import com.ufgov.zc.server.zc.util.GeneralFunc;import com.ufgov.zc.server.zc.util.MailUtil;/** *  * @author Administrator *  *  */public class ZcEbSupplierService implements IZcEbSupplierService {  private IWorkflowDao workflowDao;  private WFEngineAdapter wfEngineAdapter;  private IZcEbSupplierDao zcEbSupplierDao;  private IBaseDao baseDao;  private IUserService userService;  private ISysUsermanageService sysUsermanageService;  private IDataExchangeDao dataExchangeDao;  public IBaseDao getBaseDao() {    return baseDao;  }  public void setBaseDao(IBaseDao baseDao) {    this.baseDao = baseDao;  }  /**   *    * @return the zcEbSupplierDao   */  public IZcEbSupplierDao getZcEbSupplierDao() {    return zcEbSupplierDao;  }  public IDataExchangeDao getDataExchangeDao() {    return dataExchangeDao;  }  public void setDataExchangeDao(IDataExchangeDao dataExchangeDao) {    this.dataExchangeDao = dataExchangeDao;  }  /**   *    * @param zcEbSupplierDao   *    *            the zcEbSupplierDao to set   */  public void setZcEbSupplierDao(IZcEbSupplierDao zcEbSupplierDao) {    this.zcEbSupplierDao = zcEbSupplierDao;  }  public List getZcEbSupplier(ElementConditionDto dto, RequestMeta meta) {    return this.zcEbSupplierDao.getZcEbSupplier(dto, meta);  }  public List getZcEbSupplierBySupplierID(ElementConditionDto dto) {    return this.zcEbSupplierDao.getZcEbSupplierBySupplierID(dto);  }  public List getZcEbSupplierStatus(ElementConditionDto dto) {    return this.zcEbSupplierDao.getZcEbSupplierStatus(dto);  }  public List getZcEbSupplierBd(ElementConditionDto dto) {    return this.zcEbSupplierDao.getZcEbSupplierBd(dto);  }  public List getZcEbSupplierFile(ElementConditionDto dto) {    return this.zcEbSupplierDao.getZcEbSupplierFile(dto);  }  public List getZcEbSecSupplierFile(ElementConditionDto dto) {    return this.zcEbSupplierDao.getZcSecEbSupplierFile(dto);  }  public List getZcEbScrollStatus(String providerCode) {    return this.zcEbSupplierDao.getZcEbScrollStatus(providerCode);  }  public List getZcEbSecSupplierAllFile(ElementConditionDto dto) {    return this.zcEbSupplierDao.getZcEbSecSupplierAllFile(dto);  }  public List getZcEbSupplierDetail(ElementConditionDto dto) {    return this.zcEbSupplierDao.getZcEbSupplierDetail(dto);  }  public List getZcEbSupplierResult(ElementConditionDto dto) {    return this.zcEbSupplierDao.getZcEbSupplierResult(dto);  }  public List getZcEbSupplierForm(ElementConditionDto dto) {    return this.zcEbSupplierDao.getZcEbSupplierForm(dto);  }  public List getZcEbSup(ElementConditionDto dto) {    return this.zcEbSupplierDao.getZcEbSup(dto);  }  public boolean deleteSupplier(ZcEbSupplier supplier, RequestMeta requestMeta) {    // 删除平台基础登陆表里面的数据    //sysUsermanageService.deleteSysUsermanage(supplier.getCode());    this.userService.updateAsEmpLogin(supplier.getCode(), false);    return this.zcEbSupplierDao.deleteSupplier(supplier, requestMeta);  }  public ZcEbSupplier getSupplierById(String code, RequestMeta requestMeta) {    return this.zcEbSupplierDao.getSupplierById(code, requestMeta);  }  /**   * @return the sysUsermanageService   */  public ISysUsermanageService getSysUsermanageService() {    return sysUsermanageService;  }  /**   * @param sysUsermanageService   *            the sysUsermanageService to set   */  public void setSysUsermanageService(ISysUsermanageService sysUsermanageService) {    this.sysUsermanageService = sysUsermanageService;  }  public ZcEbSupplier save(ZcEbSupplier supplier, RequestMeta requestMeta) {    String key = supplier.getCode();    if (supplier.isNew()) {      addSupplier(supplier, requestMeta);    } else {      updateZcEbSupplier(supplier, requestMeta);    }    ZcEbSupplier rtn = getSupplierById(key, requestMeta);    supplier.setNew(false);    rtn.setDbDigest(rtn.digest());    return rtn;  }  public String importSupplier(ZcEbSupplier supplier, RequestMeta requestMeta) {    ZcEbSupplier localSupplier = this.getSupplierById(supplier.getCode(), requestMeta);    if (localSupplier == null) {      this.zcEbSupplierDao.insertSupplier(supplier, requestMeta);      this.zcEbSupplierDao.insertZcEbSupplierFeedback(supplier);      this.zcEbSupplierDao.insertSupplierQualifyList(supplier);      this.zcEbSupplierDao.insertZcEbSupplierJudge(supplier);      this.zcEbSupplierDao.insertSupBsType(supplier);      this.zcEbSupplierDao.insertSupZyxm(supplier);      this.userService.deleteAndInsertSysEmp(supplier.getSysEmp(), String.valueOf(requestMeta.getSvNd()));      return "往数据库中插入一条新记录及其相关信息:" + supplier.getName();    } else {      // 之所以将这两行代码调换顺序，是因为deleteAndInsertSysEmp会进行删插操作，所以可能会将序列号信息丢失掉      this.userService.deleteAndInsertSysEmp(supplier.getSysEmp(), String.valueOf(requestMeta.getSvNd()));      String localSerial = localSupplier.getCaSerial();      String newSerial = supplier.getCaSerial();      // 一、如果查询出来的序列号不为空，且新传入的序列号也不为空，那么：      // a、如果两个序列号相同，那么不做任何操作； -------->无效覆盖，无需执行      // b、如果两个序列号不同，那么需要用新传入的序列号覆盖查询出来的序列号；-------->无效覆盖，无需执行      // 二、如果查询出来的序列号不为空，且传入的序列号为空，那么：      // a、将查询出来的序列号覆盖传入的空序列号； -------->有效覆盖，必须执行      // 三、如果查询出来的序列号为空，而传入的序列号不为空，那么：      // a、将传入的序列号覆盖查询出来的序列号； -------->无效覆盖，无需执行      if (localSerial != null && !"".equals(localSerial)) {        if (newSerial == null || "".equals(newSerial)) {          supplier.setCaSerial(localSerial);        }      }      // 对于zc_status也是同样的道理，但是启用状态和冻结状态没有顺序可言，所以两者只需要和最初的状态比较，如果不是      // 最初状态，则执行。      String toUse = ZcSettingConstants.SUPPLIER_START_TO_USE_STATUS;      String toFreeze = ZcSettingConstants.SUPPLIER_FREEZE_STATUS;      if (!toUse.equals(supplier.getStatus()) && !toFreeze.equals(supplier.getStatus())) {        if (toUse.equals(localSupplier.getStatus()) || toFreeze.equals(localSupplier.getStatus())) {          supplier.setStatus(localSupplier.getStatus());        }      }      updateZcEbSupplier(supplier, requestMeta);      return "更新了数据库中的一条记录：" + supplier.getName();    }  }  public boolean checkAsUser(User user) {    if (userService.getUserById(user.getUserId()) == null) {      return false;    } else      return true;  }  public ZcEbSupplier addSupplier(ZcEbSupplier supplier, RequestMeta requestMeta) {    if (checkDupleteSupplier(supplier)) {      throw new BusinessException("供应商【" + supplier.getName() + "】已经存在！");    }    addUser(supplier);// 添加供应商用户信息到系统相关表，使供应商能登陆    zcEbSupplierDao.insertSupplier(supplier, requestMeta);// 供应商主表    zcEbSupplierDao.insertSupBsType(supplier);// 供应商经营类别    zcEbSupplierDao.insertZcEbSupplierFeedback(supplier);// 供应商履约情况    zcEbSupplierDao.insertZcEbSupplierJudge(supplier);// 供应商综合评价    zcEbSupplierDao.insertSupplierQualifyList(supplier);// 供应商相关资质    zcEbSupplierDao.insertSupZyxm(supplier);// 供应商主营项目    zcEbSupplierDao.insertGysType(supplier);// 供应商注册类型    //插入临时数据，用于编辑    supplier.setCode(ZcEbSupplier.TEMP + supplier.getCode());    zcEbSupplierDao.insertSupplier(supplier, requestMeta);// 供应商主表    zcEbSupplierDao.insertSupBsType(supplier);// 供应商经营类别    zcEbSupplierDao.insertZcEbSupplierFeedback(supplier);// 供应商履约情况    zcEbSupplierDao.insertZcEbSupplierJudge(supplier);// 供应商综合评价    zcEbSupplierDao.insertSupplierQualifyList(supplier);// 供应商相关资质    zcEbSupplierDao.insertSupZyxm(supplier);// 供应商主营项目    zcEbSupplierDao.insertGysType(supplier);// 供应商注册类型    //创建审批工作流    if ("Y".equals(AsOptionUtil.getInstance().getOptionVal("OPT_ZC_AUDIT_SUPPLIER_BY_WORK_FLOW"))) {      //暂不用工作流了，麻烦，    }    return supplier;  }  // 检查重名的供应商  public boolean checkDupleteSupplier(ZcEbSupplier supplier) {    ZcEbSupplier su = this.zcEbSupplierDao.getSupplierByName(supplier.getName());    if (su != null) {      return true;    }    return false;  }  /**   *    *    *    * @param old   */  public void updateZcEbSupplier(ZcEbSupplier supplier, RequestMeta requestMeta) {    if (ZcEbSupplier.ENABLE.equals(supplier.getStatus())) {      enableSupplier(supplier, requestMeta);    } else if (ZcEbSupplier.FROZNE.equals(supplier.getStatus())) {      frozneSupplier(supplier, requestMeta);    } else if (ZcEbSupplier.UPDATING.equals(supplier.getStatus())) {      updatingSupplier(supplier, requestMeta);    } else if (ZcEbSupplier.NEW.equals(supplier.getStatus())) {      updateNewSupplier(supplier, requestMeta);    }  }  private void updateNewSupplier(ZcEbSupplier supplier, RequestMeta requestMeta) {    // TODO Auto-generated method stub    _updateSupplier(supplier, requestMeta);    updateRealSupplier(supplier, requestMeta);  }  private void updatingSupplier(ZcEbSupplier supplier, RequestMeta requestMeta) {    // TODO Auto-generated method stub    _updateSupplier(supplier, requestMeta);  }  private void frozneSupplier(ZcEbSupplier supplier, RequestMeta requestMeta) {    // TODO Auto-generated method stub    _updateSupplier(supplier, requestMeta);    updateRealSupplier(supplier, requestMeta);  }  private void enableSupplier(ZcEbSupplier supplier, RequestMeta requestMeta) {    // TODO Auto-generated method stub    _updateSupplier(supplier, requestMeta);    updateRealSupplier(supplier, requestMeta);  }  private void updateRealSupplier(ZcEbSupplier supplier, RequestMeta requestMeta) {    // TODO Auto-generated method stub    supplier = resetCode(supplier);    _updateSupplier(supplier, requestMeta);  }  private ZcEbSupplier resetCode(ZcEbSupplier supplier) {    // TODO Auto-generated method stub    if (!supplier.getCode().startsWith(ZcEbSupplier.TEMP)) {      return supplier;    }    String code = supplier.getCode().substring(ZcEbSupplier.TEMP.length());    supplier.setCode(code);    supplier.setOldCode(code);    return supplier;  }  private void _updateSupplier(ZcEbSupplier supplier, RequestMeta requestMeta) {    String key = supplier.getCode();    if (supplier.getOldCode() != null)      key = supplier.getOldCode();    this.zcEbSupplierDao.updateZcEbSupplier(supplier, requestMeta);    if (supplier.getFeedbackList() != null && supplier.getFeedbackList().size() > 0) {      zcEbSupplierDao.deleteZcEbSupplierFeedbackByCode(key);      zcEbSupplierDao.insertZcEbSupplierFeedback(supplier);    } else {      zcEbSupplierDao.deleteZcEbSupplierFeedbackByCode(key);    }    if (supplier.getJudgeList() != null && supplier.getJudgeList().size() > 0) {      zcEbSupplierDao.deleteZcEbSupplierJudgeByCode(key);      zcEbSupplierDao.insertZcEbSupplierJudge(supplier);    } else {      zcEbSupplierDao.deleteZcEbSupplierJudgeByCode(key);    }    if (supplier.getQualifyList() != null && supplier.getQualifyList().size() > 0) {      zcEbSupplierDao.deleteSupplierQualify(key);      zcEbSupplierDao.insertSupplierQualifyList(supplier);    } else {      zcEbSupplierDao.deleteSupplierQualify(key);    }    if (supplier.getBsTypeList() != null && supplier.getBsTypeList().size() > 0) {      zcEbSupplierDao.delSupBsType(key);      zcEbSupplierDao.insertSupBsType(supplier);    } else {      zcEbSupplierDao.delSupBsType(key);    }    if (supplier.getZyxmList() != null && supplier.getZyxmList().size() > 0) {      zcEbSupplierDao.delZyxm(key);      zcEbSupplierDao.insertSupZyxm(supplier);    } else {      zcEbSupplierDao.delZyxm(key);    }    if (supplier.getGysTypeList() != null && supplier.getGysTypeList().size() > 0) {      zcEbSupplierDao.delGysType(key);      zcEbSupplierDao.insertGysType(supplier);    } else {      zcEbSupplierDao.delGysType(key);    }    if (supplier.getCaSerial() != null && !"".equals(supplier.getCaSerial()) && !supplier.getCode().startsWith(ZcEbSupplier.TEMP)) {      AsEmp asEmp = new AsEmp();      asEmp.setCaSerial(supplier.getCaSerial());      asEmp.setEmpCode(supplier.getCode());      this.userService.updateEmpCaSerial(asEmp);    }    /*     * 是否允许用户登录     */    if (!supplier.getCode().startsWith(ZcEbSupplier.TEMP)      && (supplier.getStatus().equals(ZcEbSupplier.ENABLE) || supplier.getStatus().equals(ZcEbSupplier.FROZNE) || supplier.getStatus().equals(        ZcEbSupplier.NEW))) {      boolean enableLogin = false;      if (supplier.getStatus().equals(ZcEbSupplier.ENABLE)) {        enableLogin = true;        //给供应商授权        grantCompoFuncToUser(supplier);      }      this.userService.updateAsEmpLogin(supplier.getCode(), enableLogin);      //冻结或者启用供应商，要生成待导出的数据      createExchangeData(supplier, requestMeta);    }  }  //给供应商授权  private void grantCompoFuncToUser(ZcEbSupplier supplier) {    // TODO Auto-generated method stub    if (supplier.getGysTypeList() == null || supplier.getGysTypeList().size() == 0) {      return;    }    /*     * ZC_VS_SUPPLIER_TYPE     这个值集指明的供应商的各种角色，除了normal是默认的会员供应商外，其他的值都是对应的供应商角色,给供应商启用时，根据其注册的供应商类别，     * 获取这些角色具备的功能，然后给这个供应商设置权限，存于as_user_num_lim     */        Map paramMap = new HashMap();    for (int i = 0; i < supplier.getGysTypeList().size(); i++) {      ZcEbSupplierType gysType = (ZcEbSupplierType) supplier.getGysTypeList().get(i);      if(gysType.getTypeCode().equals(ZcEbSupplier.GYS_TYPE_NORMAL)){//通用供应商角色的权限设置通过前台同一设置，不在这里进行设置        continue;      }      List funcLst = baseDao.query("AS_USER_FUNC.selectRoleFuncByRoleId", gysType.getTypeCode());      if (funcLst == null)        continue;      String compoId = "";      for (int j = 0; j < funcLst.size(); j++) {        Map m = (Map) funcLst.get(j);        if (!compoId.equals(m.get("COMPO_ID"))) {          //FUNC_ID=zc_fgencontract, COMPO_ID=ZC_XMCG_HT, ROLE_ID          paramMap.clear();          paramMap.put("keyCode", supplier.getCode());          paramMap.put("compoId", m.get("COMPO_ID"));          baseDao.delete("AS_USER_FUNC.deleteUserFunc", paramMap);          compoId = (String) m.get("COMPO_ID");        }        if (gysType.getIsSelected().booleanValue()) {          paramMap.clear();          paramMap.put("keyCode", supplier.getCode());          paramMap.put("compoId", m.get("COMPO_ID"));          paramMap.put("funcId", m.get("FUNC_ID"));          baseDao.insert("AS_USER_FUNC.insertUserFunc", paramMap);        }      }    }  }  private void sendMail(ZcEbSupplier supplier) {    if (supplier.getEmail() == null || "".equals(supplier.getEmail())) {      return;    }    List ao = zcEbSupplierDao.getMailInfo();    final MailInfo mailInfo = new MailInfo();    mailInfo.setValidate(true);    mailInfo.setToAddress(supplier.getEmail());    String content = AsOptionUtil.getInstance().getOptionVal("OPT_ZC_SUPPLIER_ENABLE_CONTENT");    String subject = AsOptionUtil.getInstance().getOptionVal("OPT_ZC_SUPPLIER_ENABLE_SUBJECT");    mailInfo.setSubject(subject);    mailInfo.setContent(content);    AsOption op = null;    for (int i = 0; i < ao.size(); i++) {      op = (AsOption) ao.get(i);      if ("OPT_ZC_MAIL_FROM_POP".equals(op.getOptId())) {        mailInfo.setMailServerHost(op.getOptVal());        continue;      }      if ("OPT_ZC_MAIL_FROM_PORT".equals(op.getOptId())) {        mailInfo.setMailServerPort(op.getOptVal());        continue;      }      if ("OPT_ZC_MAIL_FROM_USER".equals(op.getOptId())) {        mailInfo.setUserName(op.getOptVal());        mailInfo.setFromAddress(op.getOptVal());        continue;      }      if ("OPT_ZC_MAIL_FROM_PASS".equals(op.getOptId())) {        mailInfo.setPassword(op.getOptVal());        continue;      }    }    new Thread() {      public void run() {        MailUtil m = new MailUtil();        m.sendHtmlMail(mailInfo);      }    }.start();  }  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  /**   *    * @return the workflowDao   */  public IWorkflowDao getWorkflowDao() {    return workflowDao;  }  /**   *    * @param workflowDao   *    *            the workflowDao to set   */  public void setWorkflowDao(IWorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  /**   *    * 获得供应商反馈及评价列表   */  public ZcEbSupplier getZcEbSupplierDetailList(String code, RequestMeta requestMeta) {    return this.zcEbSupplierDao.getZcEbSupplierDetailList(code, requestMeta);  }  public List getSimpleZcEbSupplier(ElementConditionDto dto) {    return this.zcEbSupplierDao.getSimpleZcEbSupplier(dto);  }  public List getSupplierPackList(ElementConditionDto dto, RequestMeta requestMeta) {    List list = null;    if (dto.getStatus() != null && !"0".equals(dto.getStatus()) && !"5".equals(dto.getStatus())) {      dto.setType("1");      list = this.zcEbSupplierDao.getSupplierPackList(dto, requestMeta);    } else {      float f = zcEbSupplierDao.getSurplusOpenTime(dto);      if (f <= 1.0 / 48) {        dto.setType("2");        list = this.zcEbSupplierDao.getSupplierPackList(dto, requestMeta);      } else if (f <= 1.0 / 24) {        dto.setType("3");        list = this.zcEbSupplierDao.getSupplierPackList(dto, requestMeta);      } else {        list = new ArrayList();      }    }    return list;  }  public void insertAsFileDirectory(AsFile asFile, RequestMeta meta) {    this.zcEbSupplierDao.insertAsFileDirectory(asFile, meta);  }  public void insertZcEbEcbjItem(ZcEbEcbjItem ecbjItem, RequestMeta meta) {    this.zcEbSupplierDao.insertZcEbEcbjItem(ecbjItem, meta);  }  public ZcEbEcbjItem getZcEbEcbjItem(ElementConditionDto dto, RequestMeta meta) {    return this.zcEbSupplierDao.getZcEbEcbjItem(dto, meta);  }  public void updateAsFileDirectory(AsFile asFile, RequestMeta meta) {    this.zcEbSupplierDao.updateAsFileDirectory(asFile, meta);  }  public void getLargeAsFileById(AsFile asFile, RequestMeta meta) {    this.zcEbSupplierDao.insertAsFileDirectory(asFile, meta);  }  public AsFile getLargeAsFileById(String fileId, RequestMeta meta) {    return this.zcEbSupplierDao.getLargeAsFileById(fileId);  }  public AsFile getPictureAsFileById(String fileId) {    return this.zcEbSupplierDao.getPictureAsFileById(fileId);  }  // 外网供应商注册调用的方法，有创建导入导出数据的操作。  public ZcEbSupplier addSupplier(ZcEbSupplier supplier) {    this.zcEbSupplierDao.insertSupplier(supplier, null);    ZcEbSupplierQualify qua;    for (int i = 0; i < supplier.getQualifyList().size(); i++) {      qua = (ZcEbSupplierQualify) supplier.getQualifyList().get(i);      this.zcEbSupplierDao.insertSupplierQualify(qua);    }    List typeList = supplier.getBsTypeList();    ZcEbSupBsType typeVal;    if (typeList != null) {      for (int i = 0; i < typeList.size(); i++) {        typeVal = (ZcEbSupBsType) typeList.get(i);        this.zcEbSupplierDao.insertSupBsType(typeVal);      }    }    this.zcEbSupplierDao.insertSupZyxm(supplier);    addUser(supplier);// 添加供应商用户信息到系统相关表，使供应商能登陆    createExchangeData(supplier, null);    return supplier;  }  public List getZcEbSupplierDetailListByZcMerCode(String merCode) {    return zcEbSupplierDao.getZcEbSupplierDetailListByZcMerCode(merCode);  }  public List getZcEbSupplierListByIDs(ElementConditionDto dto, RequestMeta meta) {    ZcEbSupplier su = null;    ZcEbSupplier temp = null;    List list = zcEbSupplierDao.getZcEbSupplierListByIDs(dto);    for (int i = 0; i < list.size(); i++) {      su = (ZcEbSupplier) list.get(i);      temp = this.zcEbSupplierDao.getZcEbSupplierDetailList(su.getCode(), meta);      su.setFeedbackList(temp.getFeedbackList());      su.setJudgeList(temp.getJudgeList());      su.setQualifyList(temp.getQualifyList());      su.setBsTypeList(temp.getBsTypeList());      su.setSysEmp(userService.getSysEmp(su.getCode(), String.valueOf(meta.getSvNd())));      su.setZyxmList(temp.getZyxmList());    }    return list;  }  /**   *    * @Description: 供应商有登陆系统的需求，在平台里给供应商添加用户。   * @return void 返回类型   * @since 1.0   */  public void addUser(ZcEbSupplier supplier) {    GregorianCalendar g = new GregorianCalendar();    int nd = g.get(Calendar.YEAR);    String groupId = AsOptionUtil.getInstance().getOptionVal(ZcElementConstants.OPT_ZC_SUPPLIER_GROUP_ID);    String orgId = AsOptionUtil.getInstance().getOptionVal(ZcElementConstants.OPT_ZC_SUPPLIER_ORG_ID);    String coCode = AsOptionUtil.getInstance().getOptionVal(ZcElementConstants.OPT_ZC_SUPPLIER_CO_CODE);    String posiCode = AsOptionUtil.getInstance().getOptionVal(ZcElementConstants.OPT_ZC_SUPPLIER_POSI_ID);    User user = new User();    user.setUserId(supplier.getCode());//组织机构代码作为唯一吗    user.setUserName(supplier.getName());    user.setPassword(GeneralFunc.encodePwd(supplier.getCode()));    userService.addUser(user, coCode, orgId, posiCode, groupId, "" + nd, false);  }  public IUserService getUserService() {    return userService;  }  public void setUserService(IUserService userService) {    this.userService = userService;  }  public void createExchangeData(ZcEbSupplier supplier, RequestMeta requestMeta) {    if (requestMeta == null) {      // 内网新增的供应商      DataExchangeRedo redo = new DataExchangeRedo();      redo.setDataTypeID("ZC_EB_SUPPLIER");      redo.setDataTypeName("供应商注册");      redo.setRecordID(supplier.getCode());      redo.setRecordName(supplier.getName());      redo.setMasterTableName("ZC_B_SUPPLIER");      redo.setIsExported("0");      redo.setGenerateDate(new Date());      dataExchangeDao.delete(redo);      dataExchangeDao.saveRedo(redo);    } else if (requestMeta.getFuncId().equals("fsave")) {      if (supplier.getOldCode() != null) {// 内网修改供应商信息        DataExchangeRedo redo = new DataExchangeRedo();        redo.setDataTypeID("ZC_EB_SUPPLIER");        redo.setDataTypeName("供应商注册信息变更");        redo.setRecordID(supplier.getCode());        redo.setRecordName(supplier.getName());        redo.setMasterTableName("ZC_B_SUPPLIER");        redo.setIsExported("0");        redo.setGenerateDate(new Date());        dataExchangeDao.delete(redo);        dataExchangeDao.saveRedo(redo);      }    } else if (requestMeta.getFuncId().equals("fenable")) {      DataExchangeRedo redo = new DataExchangeRedo();      redo.setDataTypeID(requestMeta.getCompoId());      redo.setDataTypeName("供应商审核通过");      redo.setRecordID(supplier.getCode());      redo.setRecordName(supplier.getName());      redo.setMasterTableName("ZC_B_SUPPLIER");      redo.setIsExported("0");      redo.setGenerateDate(new Date());      dataExchangeDao.delete(redo);      dataExchangeDao.saveRedo(redo);    } else if (requestMeta.getFuncId().equals("ffreeze")) {      DataExchangeRedo redo = new DataExchangeRedo();      redo.setDataTypeID(requestMeta.getCompoId());      redo.setDataTypeName("供应商取消资格");      redo.setRecordID(supplier.getCode());      redo.setRecordName(supplier.getName());      redo.setMasterTableName("ZC_B_SUPPLIER");      redo.setIsExported("0");      redo.setGenerateDate(new Date());      dataExchangeDao.delete(redo);      dataExchangeDao.saveRedo(redo);    }  }  public Integer getSupplierCount(Map parameterObject) {    return zcEbSupplierDao.getSupplierCount(parameterObject);  }  public List getSupplier(Map parameterObject) {    return zcEbSupplierDao.getSupplier(parameterObject);  }  public List getZcEbSupplierList() {    return zcEbSupplierDao.getZcEbSupplierList();  }  /*   * 6.0平台用户保存SYS_USER_MANAGER表中，不在是AS_USER表   */  public SysUsermanage convertUserToSysUserManager(ZcEbSupplier zcEbSupplier) {    SysUsermanage sysUserManage = new SysUsermanage();    // 供应商的UserId和UserCode一致都是以组织机构代码证为唯一标识    sysUserManage.setUserCode(zcEbSupplier.getCode());    sysUserManage.setUserId(zcEbSupplier.getCode());    sysUserManage.setUserName(zcEbSupplier.getName());    sysUserManage.setPassword(GeneralFunc.encodePwd(zcEbSupplier.getCode()));    // 设置供应商所在的组号    String orgCode = AsOptionUtil.getInstance().getOptionVal("");    // 设置供应商所在组的组类别    String belongType = AsOptionUtil.getInstance().getOptionVal("");    // 设置供应商是否审核通过 0是未审核？待确定    sysUserManage.setIsAudit(Short.valueOf("0"));    sysUserManage.setEnabled(Short.valueOf("1"));    sysUserManage.setBelongOrg(orgCode);    sysUserManage.setBelongType(belongType);    String orgType = AsOptionUtil.getInstance().getOptionVal(ZcElementConstants.OPT_ZC_SUPPLIER_ORG_TYPE);    sysUserManage.setOrgType(orgType);    sysUserManage.setOrgType("t");// 是否通过常量待定    sysUserManage.setLevelNum(Short.valueOf("1"));    sysUserManage.setGender(Short.valueOf("1"));    sysUserManage.setIsLeaf(Short.valueOf("1"));    sysUserManage.setUserType(Short.valueOf("0"));    sysUserManage.setCaSerial(zcEbSupplier.getCaSerial());    return sysUserManage;  }}