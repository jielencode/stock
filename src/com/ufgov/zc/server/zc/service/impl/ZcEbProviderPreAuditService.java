package com.ufgov.zc.server.zc.service.impl;import java.util.HashMap;import java.util.List;import java.util.Map;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.UUID;import com.ufgov.zc.common.zc.model.ZcEbPackPreAudit;import com.ufgov.zc.common.zc.model.ZcEbProviderPreAudiItemtResult;import com.ufgov.zc.common.zc.model.ZcEbProviderPreAudit;import com.ufgov.zc.common.zc.model.ZcEbProviderPreAuditItem;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.ZcSUtil;import com.ufgov.zc.server.zc.dao.IBaseDao;import com.ufgov.zc.server.zc.service.IZcEbProviderPreAuditService;public class ZcEbProviderPreAuditService implements IZcEbProviderPreAuditService {  private IBaseDao baseDao;  private WFEngineAdapter wfEngineAdapter;  private IWorkflowDao workflowDao;  public IBaseDao getBaseDao() {    return baseDao;  }  public void setBaseDao(IBaseDao baseDao) {    this.baseDao = baseDao;  }  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public IWorkflowDao getWorkflowDao() {    return workflowDao;  }  public void setWorkflowDao(IWorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  // ---------------------预审分包---------------------------  public void deleteZcEbPackPreAudit(ZcEbPackPreAudit zcEbPackPreAudit, RequestMeta requestMeta) {    Map para = new HashMap();    para.put("projCode", zcEbPackPreAudit.getProjCode());    para.put("packCode", zcEbPackPreAudit.getPackCode());    para.put("auditCode", zcEbPackPreAudit.getAuditCode());    // 保存初审分包信息    baseDao.delete("ZcEbProviderPreAudit.deleteZcEbPackPreAudit", para);    // 初审指标    baseDao.delete("ZcEbProviderPreAudit.deleteAuditItemList", para);    // 供应商初审明细    baseDao.delete("ZcEbProviderPreAudit.deleteAuditItemResultItemList", para);    // 供应商初审汇总结果    baseDao.delete("ZcEbProviderPreAudit.deleteProviderAuditResult", para);  }  public ZcEbPackPreAudit saveZcEbPackPreAudit(ZcEbPackPreAudit zcEbPackPreAudit, RequestMeta requestMeta) {    if (zcEbPackPreAudit.getAuditCode() == null || "".equals(zcEbPackPreAudit.getAuditCode())) {      insertZcEbPackPreAudit(zcEbPackPreAudit, requestMeta);    } else {      updateZcEbPackPreAudit(zcEbPackPreAudit, requestMeta);    }    return zcEbPackPreAudit;  }  private void insertZcEbPackPreAudit(ZcEbPackPreAudit zcEbPackPreAudit, RequestMeta requestMeta) {    String userId = requestMeta.getSvUserID();    String compoId = requestMeta.getCompoId();    String auditCode = UUID.randomUUID().toString();    // 供应商初审不需要走流程    // Long draftid = workflowDao.createDraftId();    Long draftid = new Long(0);    zcEbPackPreAudit.setAuditCode(auditCode);    zcEbPackPreAudit.setProcessInstId(draftid);    /**     *      * 保存初审分包信息     */    baseDao.insert("ZcEbProviderPreAudit.insertZcEbPackPreAudit", zcEbPackPreAudit);    Map para = new HashMap();    para.put("projCode", zcEbPackPreAudit.getProjCode());    para.put("packCode", zcEbPackPreAudit.getPackCode());    /**     *      * 保存初审指标     */    savePackPreAuditItemList(para, zcEbPackPreAudit.getItemList(), requestMeta);    /**     *      * 保存供应商初审明细     */    baseDao.delete("ZcEbProviderPreAudit.deleteAuditItemResultItemList", para);    for (int i = 0; i < zcEbPackPreAudit.getProviderList().size(); i++) {      ZcEbProviderPreAudit proAudit = (ZcEbProviderPreAudit) zcEbPackPreAudit.getProviderList().get(i);      saveProviderAuditResultItemList(para, proAudit.getItemList(), requestMeta);    }    /**     *      * 保存供应商初审汇总结果     */    saveZcEbProviderPreAuditList(para, zcEbPackPreAudit.getProviderList(), requestMeta);    // 供应商初审不需要走流程    /**     *      * 创建草稿     */    // zcEbPackPreAudit.setProcessInstId(draftid);    //    // AsWfDraft asWfDraft = new AsWfDraft();    //    // asWfDraft.setCompoId(compoId);    //    // asWfDraft.setWfDraftName("供应商资质初审" + auditCode);    //    // asWfDraft.setUserId(userId);    //    // asWfDraft.setMasterTabId(compoId);    //    // asWfDraft.setWfDraftId(BigDecimal.valueOf(draftid.longValue()));    //    // workflowDao.insertAsWfdraft(asWfDraft);  }  private void updateZcEbPackPreAudit(ZcEbPackPreAudit zcEbPackPreAudit, RequestMeta requestMeta) {    Map para = new HashMap();    para.put("projCode", zcEbPackPreAudit.getProjCode());    para.put("packCode", zcEbPackPreAudit.getPackCode());    /**     *      * update 初审分包     */    baseDao.update("ZcEbProviderPreAudit.updateZcEbPackPreAudit", zcEbPackPreAudit);    /**     *      * 保存初审指标     */    savePackPreAuditItemList(para, zcEbPackPreAudit.getItemList(), requestMeta);    /**     *      * 保存供应商初审明细     */    baseDao.delete("ZcEbProviderPreAudit.deleteAuditItemResultItemList", para);    for (int i = 0; i < zcEbPackPreAudit.getProviderList().size(); i++) {      ZcEbProviderPreAudit proAudit = (ZcEbProviderPreAudit) zcEbPackPreAudit.getProviderList().get(i);      saveProviderAuditResultItemList(para, proAudit.getItemList(), requestMeta);    }    /**     *      * 保存供应商初审汇总结果     */    saveZcEbProviderPreAuditList(para, zcEbPackPreAudit.getProviderList(), requestMeta);  }  public ZcEbPackPreAudit getZcEbPackPreAudit(String auditCode, RequestMeta requestMeta) {    return (ZcEbPackPreAudit) baseDao.read("ZcEbProviderPreAudit.getZcEbPackByAuditCode", auditCode);  }  public List getZcEbPackPreAuditList(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    elementConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(elementConditionDto.getWfcompoId(), NumLimConstants.FWATCH));    List prePackList = baseDao.query("ZcEbProviderPreAudit.getZcEbPackPreAuditList", elementConditionDto);    ZcSUtil.setBillDBDigest(prePackList);    return prePackList;  }  // ---------------------预审指标项--------------------------  public List getPackPreAuditItemList(Map map, RequestMeta requestMeta) {    return baseDao.query("ZcEbProviderPreAudit.getAuditItemList", map);  }  public List savePackPreAuditItemList(Map map, List itemList, RequestMeta requestMeta) {    // 删插操作    baseDao.delete("ZcEbProviderPreAudit.deleteAuditItemList", map);    for (int i = 0; i < itemList.size(); i++) {      ZcEbProviderPreAuditItem item = (ZcEbProviderPreAuditItem) itemList.get(i);      baseDao.insert("ZcEbProviderPreAudit.insertAuditItemList", item);    }    return itemList;  }  // ---------------------供应商预审结果-----------------------m  public List getZcEbProviderPreAuditList(Map map, RequestMeta requestMeta) {    /**     *      * 先取供应商预审结果表(Zc_Eb_Pre_Audit_Result)里的数据，如果取不到，说明供应商还没有进行初审     */    List list1 = baseDao.query("ZcEbProviderPreAudit.getProviderAuditResultList", map);    if (list1 != null && list1.size() > 1) {      return list1;    } else {      return baseDao.query("ZcEbProviderPreAudit.getProviderNoAuditResultList", map);    }  }  public List saveZcEbProviderPreAuditList(Map map, List list, RequestMeta requestMeta) {    // 删插操作    baseDao.delete("ZcEbProviderPreAudit.deleteProviderAuditResult", map);    for (int i = 0; i < list.size(); i++) {      ZcEbProviderPreAudit item = (ZcEbProviderPreAudit) list.get(i);      baseDao.insert("ZcEbProviderPreAudit.insertProviderAuditResultList", item);    }    return list;  }  // ---------------------供应商预审明细-----------------------  public List getProviderAuditResultItemList(Map map, RequestMeta requestMeta) {    return baseDao.query("ZcEbProviderPreAudit.getProviderAuditResultItemList", map);  }  public List saveProviderAuditResultItemList(Map map, List list, RequestMeta requestMeta) {    // 删插操作    for (int i = 0; i < list.size(); i++) {      ZcEbProviderPreAudiItemtResult item = (ZcEbProviderPreAudiItemtResult) list.get(i);      baseDao.insert("ZcEbProviderPreAudit.insertAuditItemResultItemList", item);    }    return list;  }  // -------------------------工作流模块------------------------------------  public ZcEbPackPreAudit auditFN(ZcEbPackPreAudit zcEbPackPreAudit, RequestMeta requestMeta, boolean isSendNext) {    if (isSendNext) {      baseDao.update("ZcEbProviderPreAudit.updateZcEbPackPreAudit", zcEbPackPreAudit);    }    wfEngineAdapter.commit(zcEbPackPreAudit.getComment(), zcEbPackPreAudit, requestMeta);    return zcEbPackPreAudit;  }  public ZcEbPackPreAudit callbackFN(ZcEbPackPreAudit zcEbPackPreAudit, RequestMeta requestMeta) {    wfEngineAdapter.callback(zcEbPackPreAudit.getComment(), zcEbPackPreAudit, requestMeta);    return zcEbPackPreAudit;  }  public ZcEbPackPreAudit newCommitFN(ZcEbPackPreAudit zcEbPackPreAudit, RequestMeta requestMeta) {    wfEngineAdapter.newCommit(zcEbPackPreAudit.getComment(), zcEbPackPreAudit, requestMeta);    return zcEbPackPreAudit;  }  public ZcEbPackPreAudit unAuditFN(ZcEbPackPreAudit zcEbPackPreAudit, RequestMeta requestMeta) {    wfEngineAdapter.unAudit(zcEbPackPreAudit.getComment(), zcEbPackPreAudit, requestMeta);    return zcEbPackPreAudit;  }  public ZcEbPackPreAudit untreadFN(ZcEbPackPreAudit zcEbPackPreAudit, RequestMeta requestMeta) {    wfEngineAdapter.untread(zcEbPackPreAudit.getComment(), zcEbPackPreAudit, requestMeta);    return zcEbPackPreAudit;  }  public ZcEbPackPreAudit updateZcEbPackPreAuditStatus(ZcEbPackPreAudit zcEbPackPreAudit, RequestMeta requestMeta) {    baseDao.update("ZcEbProviderPreAudit.updateZcEbPackPreAudit", zcEbPackPreAudit);    return zcEbPackPreAudit;  }}