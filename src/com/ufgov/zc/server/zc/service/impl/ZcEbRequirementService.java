package com.ufgov.zc.server.zc.service.impl;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.HashSet;import java.util.List;import java.util.Set;import com.kingdrive.workflow.context.WorkflowContext;import com.ufgov.zc.common.commonbiz.model.Position;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.common.zc.model.ZcEbEntrust;import com.ufgov.zc.common.zc.model.ZcEbFormula;import com.ufgov.zc.common.zc.model.ZcEbFormulaPack;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbPackReq;import com.ufgov.zc.common.zc.model.ZcEbReqFile;import com.ufgov.zc.common.zc.model.ZcEbRequirement;import com.ufgov.zc.common.zc.model.ZcEbRequirementDetail;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.util.AsOptionUtil;import com.ufgov.zc.server.system.util.NumUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.ZcSUtil;import com.ufgov.zc.server.zc.dao.IZcEbProjDao;import com.ufgov.zc.server.zc.dao.IZcEbRequirementDao;import com.ufgov.zc.server.zc.dao.ibatis.BaseDao;import com.ufgov.zc.server.zc.service.IZcEbFormulaService;import com.ufgov.zc.server.zc.service.IZcEbRequirementService;public class ZcEbRequirementService implements IZcEbRequirementService {	private IZcEbRequirementDao zcEbRequirementDao;	private IWorkflowDao workflowDao;	private WFEngineAdapter wfEngineAdapter;	private BaseDao baseDao;	private IZcEbFormulaService zcEbFormulaService;	private IZcEbProjDao zcEbProjDao;	/**	 * @return the zcEbProjDao	 */	public IZcEbProjDao getZcEbProjDao() {		return zcEbProjDao;	}	/**	 * @param zcEbProjDao	 *            the zcEbProjDao to set	 */	public void setZcEbProjDao(IZcEbProjDao zcEbProjDao) {		this.zcEbProjDao = zcEbProjDao;	}	public WFEngineAdapter getWfEngineAdapter() {		return wfEngineAdapter;	}	public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {		this.wfEngineAdapter = wfEngineAdapter;	}	/**	 * @return the zcEbFormulaService	 */	public IZcEbFormulaService getZcEbFormulaService() {		return zcEbFormulaService;	}	/**	 * @param zcEbFormulaService	 *            the zcEbFormulaService to set	 */	public void setZcEbFormulaService(IZcEbFormulaService zcEbFormulaService) {		this.zcEbFormulaService = zcEbFormulaService;	}	/**	 * 	 * @return the workflowDao	 */	public IWorkflowDao getWorkflowDao() {		return workflowDao;	}	/**	 * 	 * @param workflowDao	 *            the workflowDao to set	 */	public void setWorkflowDao(IWorkflowDao workflowDao) {		this.workflowDao = workflowDao;	}	public IZcEbRequirementDao getZcEbRequirementDao() {		return zcEbRequirementDao;	}	public void setZcEbRequirementDao(IZcEbRequirementDao zcEbRequirementDao) {		this.zcEbRequirementDao = zcEbRequirementDao;	}	public List getZcEbRequirementList(ElementConditionDto dto, RequestMeta meta) {		List list = zcEbRequirementDao.getZcEbRequirementList(dto, meta);		ZcSUtil.setBillDBDigest(list);		return list;	}	public ZcEbRequirement getZcEbRequirementDetailByReqCode(String reqCode) {		ZcEbRequirement zcEbRequirement = new ZcEbRequirement();		List detailList = zcEbRequirementDao				.getZcEbRequirementDetailByReqCode(reqCode);		zcEbRequirement.setDetailList(detailList);		return zcEbRequirement;	}	public ZcEbRequirement save(ZcEbRequirement zcEbRequirement,			RequestMeta meta) {		if (zcEbRequirement.getReqCode() == null				|| "自动编号".equals(zcEbRequirement.getReqCode())) {			insertZcEbRequirement(zcEbRequirement, meta);		} else {			updateZcEbRequirement(zcEbRequirement, meta);		}		return getZcEbRequirementByReqCode(zcEbRequirement.getReqCode());	}	private ZcEbRequirement saveBill(ZcEbRequirement zcEbRequirement,			RequestMeta meta) {		if (zcEbRequirement.getReqCode() == null				|| "".equals(zcEbRequirement.getReqCode())				|| zcEbRequirement.getReqCode().equals("自动编号")) {			insertZcEbRequirement(zcEbRequirement, meta);		} else {			updateZcEbRequirement(zcEbRequirement, meta);		}		return zcEbRequirement;	}	private void insertZcEbRequirement(ZcEbRequirement zcEbRequirement,			RequestMeta meta) {		String userId = meta.getSvUserID();		String compoId = meta.getCompoId();		String reqCode = NumUtil.getInstance().getNo(compoId, "REQ_CODE",				zcEbRequirement);		Long draftid = workflowDao.createDraftId();		zcEbRequirement.setReqCode(reqCode);		zcEbRequirement.setProcessInstId(draftid);		zcEbRequirementDao.insertZcEbRequirement(zcEbRequirement);		AsWfDraft asWfDraft = new AsWfDraft();		asWfDraft.setCompoId(compoId);		asWfDraft.setWfDraftName(reqCode);		asWfDraft.setUserId(userId);		asWfDraft.setMasterTabId(compoId);		asWfDraft.setWfDraftId(BigDecimal.valueOf(draftid.longValue()));		workflowDao.insertAsWfdraft(asWfDraft);		insertZcEbRequirementDetail(zcEbRequirement);		/**		 * 保存标段		 */		zcEbRequirementDao.insertZcEbPackInfo(zcEbRequirement, "insert");		/**		 * 更新采购需求确认表		 */		if (zcEbRequirement.getZcEbReqFile() != null) {			zcEbRequirement.getZcEbReqFile().setReqCode(reqCode);			zcEbRequirement.getZcEbReqFile().setSn(zcEbRequirement.getSn());			baseDao.insert("ZC_EB_REQ_FILE.abatorgenerated_insert",					zcEbRequirement.getZcEbReqFile());		}		/**		 * 评标方法的数据结构进行了调整，一个指标项，可以被多个评标方法引用。		 */		for (int i = 0; i < zcEbRequirement.getFormulaPackList().size(); i++) {			ZcEbFormulaPack formulaPack = (ZcEbFormulaPack) zcEbRequirement					.getFormulaPackList().get(i);			if (formulaPack.isDataChanged()) {				zcEbFormulaService.saveZcEbFormulaPack(formulaPack,						"ZC_EB_FORMULA");			}		}	}	private void updateZcEbRequirement(ZcEbRequirement zcEbRequirement,			RequestMeta meta) {		boolean isDraft = false;		String userId = meta.getSvUserID();		String compoId = meta.getCompoId();		if (zcEbRequirement.getProcessInstId() == null				|| zcEbRequirement.getProcessInstId().longValue() == -1) {			Long draftid = workflowDao.createDraftId();			zcEbRequirement.setProcessInstId(draftid);			isDraft = true;		}		if (isDraft) {			AsWfDraft asWfDraft = new AsWfDraft();			asWfDraft.setCompoId(compoId);			asWfDraft.setMasterTabId(compoId);			asWfDraft.setWfDraftName(zcEbRequirement.getReqCode());			asWfDraft.setUserId(userId);			asWfDraft.setWfDraftId(BigDecimal.valueOf(zcEbRequirement					.getProcessInstId().longValue()));			workflowDao.insertAsWfdraft(asWfDraft);		}		zcEbRequirementDao.updateZcEbRequirement(zcEbRequirement);		insertZcEbRequirementDetail(zcEbRequirement);		if (zcEbRequirement.getZcEbReqFile().getSn() == null) {			zcEbRequirement.getZcEbReqFile().setSn(zcEbRequirement.getSn());		}		updateZcEbReqFile(zcEbRequirement.getZcEbReqFile(), meta);		// /**		// * 保存标段,先删除，后录入		// */		// zcEbProjDao.deleteZcEbPackByProjCode(zcEbRequirement.getZcEbEntrust().getSn());		zcEbRequirementDao.insertZcEbPackInfo(zcEbRequirement, "update");		// /**		// * 更新采购需求确认文件		// *		// */		// if (zcEbRequirement.getZcEbReqFile().isDataChaged) {		// System.out.println("---------------保存需求文档到数据库------------------");		// if (baseDao.read("ZC_EB_REQ_FILE.abatorgenerated_isExist",		// zcEbRequirement.getReqCode()) != null) {		// baseDao.update("ZC_EB_REQ_FILE.abatorgenerated_updateByPrimaryKeySelective",		// zcEbRequirement.getZcEbReqFile());		// } else {		// baseDao.insert("ZC_EB_REQ_FILE.abatorgenerated_insert",		// zcEbRequirement.getZcEbReqFile());		//		// }		// }		/**		 * 评标方法的数据结构进行了调整，一个指标项，可以被多个评标方法引用。		 */		for (int i = 0; i < zcEbRequirement.getFormulaPackList().size(); i++) {			ZcEbFormulaPack formulaPack = (ZcEbFormulaPack) zcEbRequirement					.getFormulaPackList().get(i);			if (formulaPack.isDataChanged()) {				System.out						.println("---------------保存评标方法到数据库------------------");				zcEbFormulaService.saveZcEbFormulaPack(formulaPack,						"ZC_EB_FORMULA");			}		}	}	private void insertZcEbRequirementDetail(ZcEbRequirement zcEbRequirement) {		List packList = zcEbRequirement.getPackList();		zcEbRequirementDao.deleteZcEbRequirementDetailByReqCode(zcEbRequirement				.getReqCode());		// List packReqDetail = ((ZcEbPack)		// packDetail.get(0)).getRequirementDetailList();		ZcEbRequirementDetail zcEbRequirementDetail;		ZcEbPack pack;		for (int i = 0; i < packList.size(); i++) {			pack = (ZcEbPack) packList.get(i);			List packReqList = pack.getRequirementDetailList();// 存在一个标段有多个标段需求明细			for (int j = 0; j < packReqList.size(); j++) {				ZcEbPackReq packReq = (ZcEbPackReq) packReqList.get(j);				packReq.getRequirementDetail().setReqCode(						zcEbRequirement.getReqCode());				zcEbRequirementDao.insertZcEbRequirementDetail(packReq						.getRequirementDetail());			}		}	}	private String checkConsistency(ZcEbRequirement zcEbRequirement) {		return ZcSUtil.checkConsistency(zcEbRequirement,				getOriginalZcEbRequirementByReqCode(zcEbRequirement						.getReqCode()), "reqCode");	}	public ZcEbRequirement getOriginalZcEbRequirementByReqCode(String reqCode) {		ZcEbRequirement originalBean = this.zcEbRequirementDao				.getOriginZcEbRequirementById(reqCode);		List detailList = zcEbRequirementDao				.getZcEbRequirementDetailByReqCode(reqCode);		originalBean.setDetailList(detailList);		return originalBean;	}	public ZcEbRequirement getZcEbRequirementByReqCode(String reqCode) {		ZcEbRequirement zcEbRequirement = this.zcEbRequirementDao				.getOriginZcEbRequirementById(reqCode);		// 获取项目的分包		ElementConditionDto dto = new ElementConditionDto();		dto.setZcText0(reqCode);		List packList = baseDao.query("ZcEbReqPack.getZcEbPackByEntrustCode",				dto);		// 获取需求确认的信息		ZcEbReqFile zcEbReqFile = (ZcEbReqFile) baseDao.read(				"ZC_EB_REQ_FILE.abatorgenerated_selectByPrimaryKey",				zcEbRequirement.getReqCode());		zcEbRequirement.setZcEbReqFile(zcEbReqFile);		zcEbRequirement.setPackList(packList);		// 获取评标方法		Set set = new HashSet();		//获取每个分包的需求和平板 方法		for (int i = 0; i < packList.size(); i++) {			ZcEbPack pack = (ZcEbPack) packList.get(i);			//每个分包获取需求明细			List packReqList = baseDao					.query("ZcEbProj.getZcEbPackReqListByPackCode",							pack.getPackCode());			pack.setRequirementDetailList(packReqList);			dto.setPackCode(pack.getPackCode());			//根据包号获取对应飞品表方法集合			ZcEbFormula formula = (ZcEbFormula) baseDao.read(					"ZcEbFormula.getZcEbFormulaByPackCode", dto);			if (formula != null) {				pack.setZcEbFormula(formula);				set.add(formula.getFormulaCode());			}		}				Object[] formulaObj = set.toArray();		Arrays.sort(formulaObj);    List zcEbFormulaPackList = new ArrayList();		for(int i=0;i<formulaObj.length;i++){		  String formulaCode = (String)formulaObj[i];      ZcEbFormulaPack zcEbFormulaPack = new ZcEbFormulaPack();      zcEbFormulaPack.setFormulaCode(formulaCode);      List packWihtSameFormulaLst = new ArrayList();      for (int j = 0; j < packList.size(); j++) {        ZcEbPack pack = (ZcEbPack) packList.get(j);        if (pack.getZcEbFormula() != null) {          if (pack.getZcEbFormula().getFormulaCode().equals(formulaCode)) {            packWihtSameFormulaLst.add(pack);            zcEbFormulaPack.setZcEbFormula(pack.getZcEbFormula());          }        }      }      zcEbFormulaPack.setPackList(packWihtSameFormulaLst);      zcEbFormulaPackList.add(zcEbFormulaPack);		  		}		/*		while (set.iterator().hasNext()) {			String formulaCode = (String) set.iterator().next();			ZcEbFormulaPack zcEbFormulaPack = new ZcEbFormulaPack();			zcEbFormulaPack.setFormulaCode(formulaCode);			List packCloneLst = new ArrayList();			for (int j = 0; j < packList.size(); j++) {				ZcEbPack pack = (ZcEbPack) packList.get(j);				if (pack.getZcEbFormula() != null) {					if (pack.getZcEbFormula().getFormulaCode().equals(formulaCode)) {						ZcEbPack packClone = (ZcEbPack) ObjectUtil.deepCopy(pack);						packCloneLst.add(packClone);					}				}			}			zcEbFormulaPack.setPackList(packCloneLst);			zcEbFormulaPack.setZcEbFormula(((ZcEbPack) packCloneLst.get(0))					.getZcEbFormula());			zcEbFormulaPackList.add(zcEbFormulaPack);		}*/		zcEbRequirement.setFormulaPackList(zcEbFormulaPackList);		return zcEbRequirement;	}	public void delete(String reqCode) {		// 需要查询分包表信息，所有放到前面		zcEbRequirementDao.deleteZcEbPackQuaByReqCode(reqCode);		zcEbRequirementDao.deleteZcEbRequirementDetailByReqCode(reqCode);		zcEbRequirementDao.deleteZcEbRequirementByReqCode(reqCode);	}	public ZcEbRequirement auditFN(ZcEbRequirement requirement,			RequestMeta requestMeta) {		// String fuzhuren = (String)		// baseDao.read("ZC_XMCG_HT.getOptionValById",		// "CG_HT_AUDIT_CGZX_FZR");//采购中心副主任角色		// String ysdwjb =		// AsOptionUtil.getInstance().getOptionVal("CG_HT_AUDIT_YSDW_JB_ROLE_STRING_for_all");//预算单位经办人角色		ZcEbRequirement req = getZcEbRequirementByReqCode(requirement				.getReqCode());		req.setIsGoonAudit(requirement.getIsGoonAudit());		zcEbRequirementDao.updateZcEbRequirement(req);		// if (fuzhuren.equalsIgnoreCase(requestMeta.getSvPoCode()))		// {//采购中心副主任审批，送中心经办人		// commit2Zxjbr(requirement);		// return getZcEbRequirementByReqCode(requirement.getReqCode());		// } else if (ysdwjb.equalsIgnoreCase(requestMeta.getSvPoCode()))		// {//预算单位经办人审批，送中心经办人		// commit2Zxjbr(requirement);		// return getZcEbRequirementByReqCode(requirement.getReqCode());		// }		wfEngineAdapter.commit(requirement.getComment(), requirement,				requestMeta);		return getZcEbRequirementByReqCode(requirement.getReqCode());	}	private void commit2Zxjbr(ZcEbRequirement requirement,			RequestMeta requestMeta) {		String userId = (String) baseDao.read(				"ZcEbRequirement.getNodeCgzxUserId",				requirement.getProcessInstId());		WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(				requirement.getComment(), requirement, requestMeta);		List result = new ArrayList();		result.add(userId);		workflowContext.setNextExecutor(result);		wfEngineAdapter.commit(workflowContext);	}	// 获取预算单位 经办人id	private String getYsdwjbr(String sn) {		ZcEbEntrust ent = (ZcEbEntrust) baseDao.read(				"ZcEbEntrust.getZcEbEntrustBySn", sn);		if (ent == null)			return null;		HashMap para = new HashMap();		para.put(				"POSI_CODE",				AsOptionUtil.getInstance().getOptionVal(						"CG_HT_AUDIT_YSDW_JB_ROLE_STRING_for_all"));		para.put("CO_CODE", ent.getCoCode());		para.put("ND", ent.getNd());		Position po = (Position) this.baseDao.read(				"User.getAsEmpPosiByEmpCode", para);		if (po == null)			return null;		return po.getEmpCode();	}	public ZcEbRequirement newCommitFN(ZcEbRequirement requirement,			RequestMeta meta) {		ZcEbRequirement bill = requirement;		// if (requirement.getDetailList() != null) {		bill = saveBill(requirement, meta);		// }		wfEngineAdapter.newCommit(bill.getComment(), bill, meta);		return getZcEbRequirementByReqCode(bill.getReqCode());	}	public ZcEbRequirement unAuditFN(ZcEbRequirement requirement,			RequestMeta requestMeta) throws Exception {		Integer temp = (Integer) baseDao				.read("ZcEbRequirement.checkReqStatusByCod",						requirement.getReqCode());		int count = temp == null ? 0 : temp.intValue();		if (count > 0) {			throw new Exception("该需求设置的分包已经立项，不能消审");		}		wfEngineAdapter.rework(requirement.getComment(), requirement,				requestMeta);		return getZcEbRequirementByReqCode(requirement.getReqCode());	}	public ZcEbRequirement untreadFN(ZcEbRequirement requirement,			RequestMeta meta) {		updateZcEbRequirement(requirement, meta);		wfEngineAdapter.untread(requirement.getComment(), requirement, meta);		return getZcEbRequirementByReqCode(requirement.getReqCode());	}	public ZcEbRequirement callbackFN(ZcEbRequirement requirement,			RequestMeta requestMeta) {		wfEngineAdapter.unAudit(requirement.getComment(), requirement,				requestMeta);		return getZcEbRequirementByReqCode(requirement.getReqCode());	}	public BaseDao getBaseDao() {		return baseDao;	}	public void setBaseDao(BaseDao baseDao) {		this.baseDao = baseDao;	}	public ZcEbRequirement sendToProcurementUnit(ZcEbRequirement requirement,			RequestMeta requestMeta) {		ZcEbRequirement req = getZcEbRequirementByReqCode(requirement				.getReqCode());		req.setIsGoonAudit(requirement.getIsGoonAudit());		zcEbRequirementDao.updateZcEbRequirement(req);		String ysdwcg = getYsdwjbr(requirement.getSn());		if (ysdwcg == null) {			throw new RuntimeException("未找到预算单位经办人！");		}		WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(				requirement.getComment(), requirement, requestMeta);		List result = new ArrayList();		result.add(ysdwcg);//		workflowContext.setNextExecutor(result);		wfEngineAdapter.commit(workflowContext);		return getZcEbRequirementByReqCode(requirement.getReqCode());	}	public ZcEbReqFile getZcEReqFileByEntrustCode(String entrustCode) {		return (ZcEbReqFile) baseDao.read(				"ZC_EB_REQ_FILE.selectZcEbReqFileByEntrustCode", entrustCode);	}	public void updateZcEbReqFile(ZcEbReqFile zcEbRfqFile,			RequestMeta requestMeta) {		/**		 * 更新采购需求确认文件		 * 		 */		System.out.println("---------------保存需求文档到数据库------------------");		if (baseDao.read("ZC_EB_REQ_FILE.abatorgenerated_isExist",				zcEbRfqFile.getReqCode()) != null) {			baseDao.update(					"ZC_EB_REQ_FILE.abatorgenerated_updateByPrimaryKeySelective",					zcEbRfqFile);		} else {			baseDao.insert("ZC_EB_REQ_FILE.abatorgenerated_insert", zcEbRfqFile);		}	}	public boolean isExistZbEbReqFileByRegCode(String reqCode) {		boolean isExist = baseDao.read(				"ZC_EB_REQ_FILE.abatorgenerated_isExistNotNull", reqCode) != null;		return isExist;	}	public ZcEbRequirement getZcEbRequirementByUseBudget(String snCode,			RequestMeta requestMeta) {		return zcEbRequirementDao.getZcEbRequirementByUseBudget(snCode);	}	public List getPackCount(ZcEbRequirement requirement, RequestMeta meta) {		return zcEbRequirementDao.getPackCount(requirement);	}}