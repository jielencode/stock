package com.ufgov.zc.server.zc.service.impl;import java.math.BigDecimal;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import com.kingdrive.workflow.context.WorkflowContext;import com.ufgov.zc.common.commonbiz.model.Position;import com.ufgov.zc.common.system.MimeMapping;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.common.zc.model.ZcEbEntrust;import com.ufgov.zc.common.zc.model.ZcEbProtocol;import com.ufgov.zc.server.system.dao.IAsFileDao;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.util.AsOptionUtil;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.system.util.NumUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.ZcSUtil;import com.ufgov.zc.server.zc.dao.IBaseDao;import com.ufgov.zc.server.zc.dao.IZcEbEntrustDao;import com.ufgov.zc.server.zc.dao.IZcEbProtocolDao;import com.ufgov.zc.server.zc.dao.IZcXmcgHtDao;import com.ufgov.zc.server.zc.service.IZcEbProtocolService;public class ZcEbProtocolService implements IZcEbProtocolService {  private IZcXmcgHtDao zcXmcgHtDao;  private IAsFileDao asFileDao;  private IZcEbProtocolDao zcEbProtocolDao;  private IWorkflowDao workflowDao;  private WFEngineAdapter wfEngineAdapter;  private IZcEbEntrustDao zcEbEntrustDao;  private IBaseDao baseDao;  public IAsFileDao getAsFileDao() {    return asFileDao;  }  public void setAsFileDao(IAsFileDao asFileDao) {    this.asFileDao = asFileDao;  }  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public IWorkflowDao getWorkflowDao() {    return workflowDao;  }  public void setWorkflowDao(IWorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  public IZcEbProtocolDao getZcEbProtocolDao() {    return zcEbProtocolDao;  }  public void setZcEbProtocolDao(IZcEbProtocolDao zcEbProtocolDao) {    this.zcEbProtocolDao = zcEbProtocolDao;  }  public List getZcEbProtocolList(ElementConditionDto dto, RequestMeta meta) {    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getWfcompoId(), NumLimConstants.FWATCH));    return zcEbProtocolDao.getZcEbProtocolList(dto);  }  public ZcEbProtocol getZcEbProtocolByProtCode(String protCode) {    ZcEbProtocol protocol = zcEbProtocolDao.getZcEbProtocolByProtCode(protCode);    protocol.setDbDigest(protocol.digest());    return protocol;  }  private ZcEbProtocol getOriginalZcEbProtocolByProjCode(String protCode) {    ZcEbProtocol originalBean = zcEbProtocolDao.getZcEbProtocolByProtCode(protCode);    // 清空摘要    originalBean.setDbDigest(null);    return originalBean;  }  /*   * 得到合并后的委托代理协议   */  public byte[] evaluateFileContext(ZcEbProtocol protocol, byte[] templateContent) throws Exception {    Map contextMap = new HashMap();    contextMap.put("protocol", protocol);    return ZcSUtil.evaluate(contextMap, templateContent, "protocol", ZcSUtil.ENCODING_DEFAULT);  }  public AsFile getProtocolContent(ZcEbProtocol zcEbProtocol) {    AsFile protocolContent = new AsFile();    AsFile template = zcEbProtocolDao.getProtocolDefaultTemplateContent();    byte[] protocolByte = null;    try {      protocolByte = evaluateFileContext(zcEbProtocol, template.getFileContent());      //protocolByte = template.getFileContent();    } catch (Exception e) {      e.printStackTrace();    }    protocolContent.setFileContent(protocolByte);    return protocolContent;  }  public ZcEbProtocol save(ZcEbProtocol protocol, RequestMeta requestMeta) {    saveBill(protocol, requestMeta);    // 从新计算摘要    protocol.setDbDigest(this.getOriginalZcEbProtocolByProjCode(protocol.getProtCode()).digest());    return protocol;  }  private void saveBill(ZcEbProtocol protocol, RequestMeta requestMeta) {    //AsFile protocolContent = getProtocolContent(protocol);    //protocol.setProtFileContent(protocolContent.getFileContent());    if (protocol.getProtCode() == null || "".equals(protocol.getProtCode()) || protocol.getProtCode().equals("自动编号")) {      insertZcEbProtocol(protocol, requestMeta);    } else {      updateZcEbProtocol(protocol);    }  }  private void insertZcEbProtocol(ZcEbProtocol protocol, RequestMeta requestMeta) {    String userId = requestMeta.getSvUserID();    String compoId = requestMeta.getCompoId();    String protCode = NumUtil.getInstance().getNo(compoId, "PROT_CODE", protocol);    Long draftid = workflowDao.createDraftId();    protocol.setProtCode(protCode);    protocol.setProcessInstId(draftid);    this.zcEbProtocolDao.insertZcEbProtocol(protocol);    //AsFile asFile = this.getProtFile(protocol);    //this.asFileDao.insertAsFile(asFile);    AsWfDraft asWfDraft = new AsWfDraft();    asWfDraft.setCompoId(compoId);    asWfDraft.setWfDraftName(protCode);    asWfDraft.setUserId(userId);    asWfDraft.setMasterTabId(compoId);    asWfDraft.setWfDraftId(BigDecimal.valueOf(draftid.longValue()));    workflowDao.insertAsWfdraft(asWfDraft);  }  private AsFile getProtFile(ZcEbProtocol protocol) {    AsFile asFile = new AsFile();    asFile.setFileContent(protocol.getProtFileContent());    asFile.setFileId(protocol.getProtFileBlobid());    String fileName = protocol.getProtFile();    asFile.setFileName(fileName);    asFile.setMimeType(MimeMapping.getMimeType(fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase()));    return asFile;  }  private void updateZcEbProtocol(ZcEbProtocol protocol) {    // 检查摘要    //checkConsistency(protocol);    this.zcEbProtocolDao.updateZcEbProtocol(protocol);    //    AsFile asFile = this.getProtFile(protocol);    //    this.asFileDao.updateAsFileById(asFile);  }  private String checkConsistency(ZcEbProtocol protocol) {    return ZcSUtil.checkConsistency(protocol, getOriginalZcEbProtocolByProjCode(protocol.getProtCode()), "protCode");  }  public void delete(String protCode) {    this.zcEbProtocolDao.deleteZcEbProtocolByProtCode(protCode);  }  public ZcEbProtocol newCommitFN(ZcEbProtocol protocol, RequestMeta requestMeta) {    // saveBill(protocol);    this.zcEbProtocolDao.updateZcEbProtocol(protocol);    wfEngineAdapter.newCommit(protocol.getComment(), protocol, requestMeta);    return getZcEbProtocolByProtCode(protocol.getProtCode());  }  public ZcEbProtocol auditFN(ZcEbProtocol protocol, RequestMeta requestMeta) {    //    String fuzhuren = zcXmcgHtDao.getOptionValById("CG_HT_AUDIT_CGZX_FZR");//采购中心副主任角色    //    String zhuren = zcXmcgHtDao.getOptionValById("CG_HT_AUDIT_CGZX_ZR");//采购中心主任角色    //    String ysdwjbjs = AsOptionUtil.getInstance().getOptionVal("CG_HT_AUDIT_YSDW_JB_ROLE_STRING_for_all");    //    String currentJs = requestMeta.getSvPoCode();    //    //如果副主任审批，并不送主任审批，或者 主任审批，则送中心经办人    //    if ((currentJs.equalsIgnoreCase(fuzhuren) && (protocol.getIsGoonAudit() == null || protocol.getIsGoonAudit().intValue() != 1))    //      || currentJs.equalsIgnoreCase(zhuren)) {    //      commit2Zxjbr(protocol);    //      return getZcEbProtocolByProtCode(protocol.getProtCode());    //    } else if (ysdwjbjs != null && ysdwjbjs.equalsIgnoreCase(currentJs)) {//如果是采购单位经办，送采购中心经办    //      commit2Zxjbr(protocol);    //      return getZcEbProtocolByProtCode(protocol.getProtCode());    //    }    wfEngineAdapter.commit(protocol.getComment(), protocol, requestMeta);    return getZcEbProtocolByProtCode(protocol.getProtCode());  }  /**   * 送采购中心经办人   */  private void commit2Zxjbr(ZcEbProtocol protocol, RequestMeta requestMeta) {    String zxjbr = getZxjbr(protocol);//获取采购中心经办人，负责人    WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(protocol.getComment(), protocol, requestMeta);    List result = new ArrayList();    result.add(zxjbr);    workflowContext.setNextExecutor(result);    wfEngineAdapter.commit(workflowContext);  }  private String getZxjbr(ZcEbProtocol protocol) {    String userId = (String) baseDao.read("ZcEbRequirement.getNodeCgzxUserId", protocol.getProcessInstId());    return userId;  }  //获取预算单位 经办人id  private String getYsdwjbr(String sn) {    ZcEbEntrust ent = zcEbEntrustDao.getZcEbEntrustBySn(sn);    if (ent == null)      return null;    HashMap para = new HashMap();    para.put("POSI_CODE", AsOptionUtil.getInstance().getOptionVal("CG_HT_AUDIT_YSDW_JB_ROLE_STRING_for_all"));    para.put("CO_CODE", ent.getCoCode());    para.put("ND", ent.getNd());    Position po = (Position) this.baseDao.read("User.getAsEmpPosiByEmpCode", para);    if (po == null)      return null;    return po.getEmpCode();  }  public ZcEbProtocol unAuditFN(RequestMeta requestMeta, ZcEbProtocol protocol) {    wfEngineAdapter.rework(protocol.getComment(), protocol, requestMeta);    return getZcEbProtocolByProtCode(protocol.getProtCode());  }  public ZcEbProtocol untreadFN(ZcEbProtocol protocol, RequestMeta requestMeta) {    wfEngineAdapter.untread(protocol.getComment(), protocol, requestMeta);    return getZcEbProtocolByProtCode(protocol.getProtCode());  }  public ZcEbProtocol callbackFN(ZcEbProtocol protocol, RequestMeta requestMeta) {    wfEngineAdapter.unAudit(protocol.getComment(), protocol, requestMeta);    return getZcEbProtocolByProtCode(protocol.getProtCode());  }  public void interruptZcPProMake(ZcEbProtocol make, RequestMeta requestMeta) {    wfEngineAdapter.interrupt(null, make, requestMeta);  }  public ZcEbProtocol CancelMake(ZcEbProtocol currentObject, RequestMeta requestMeta) {    interruptZcPProMake(currentObject, requestMeta);    this.save(currentObject, requestMeta);    ZcEbProtocol bu = (ZcEbProtocol) zcEbProtocolDao.getZcEbProtocolByProtCode(currentObject.getProtCode());    return bu;  }  public ZcEbProtocol commitFN(ZcEbProtocol report, RequestMeta requestMeta) {    wfEngineAdapter.commit(report.getComment(), report, requestMeta);    ZcEbProtocol bu = (ZcEbProtocol) zcEbProtocolDao.getZcEbProtocolByProtCode(report.getProtCode());    return bu;  }  public ZcEbProtocol unAuditFN(ZcEbProtocol report, RequestMeta requestMeta) {    wfEngineAdapter.rework(report.getComment(), report, requestMeta);    ZcEbProtocol bu = (ZcEbProtocol) zcEbProtocolDao.getZcEbProtocolByProtCode(report.getProtCode());    return bu;  }  public IZcXmcgHtDao getZcXmcgHtDao() {    return zcXmcgHtDao;  }  public void setZcXmcgHtDao(IZcXmcgHtDao zcXmcgHtDao) {    this.zcXmcgHtDao = zcXmcgHtDao;  }  public IZcEbEntrustDao getZcEbEntrustDao() {    return zcEbEntrustDao;  }  public void setZcEbEntrustDao(IZcEbEntrustDao zcEbEntrustDao) {    this.zcEbEntrustDao = zcEbEntrustDao;  }  public IBaseDao getBaseDao() {    return baseDao;  }  public void setBaseDao(IBaseDao baseDao) {    this.baseDao = baseDao;  }  /**   * 送采购单位   */  public ZcEbProtocol sendToProcurementUnit(ZcEbProtocol protocol, RequestMeta requestMeta) {    String ysdwcg = getYsdwjbr(protocol.getSn());    if (ysdwcg == null) {      throw new RuntimeException("未找到预算单位经办人！");    }    WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(protocol.getComment(), protocol, requestMeta);    List result = new ArrayList();    result.add(ysdwcg);    workflowContext.setNextExecutor(result);    wfEngineAdapter.commit(workflowContext);    return getZcEbProtocolByProtCode(protocol.getProtCode());  }}