/** * ZcEbXunJiaBaoJiaService.java * com.ufgov.gk.server.zc.service.impl * Administrator * 2010-10-24 */package com.ufgov.zc.server.zc.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.DataExchangeRedo;import com.ufgov.zc.common.zc.model.ZcEbSignupPackDetail;import com.ufgov.zc.common.zc.model.ZcEbXunJia;import com.ufgov.zc.common.zc.model.ZcEbXunJiaBaoJia;import com.ufgov.zc.common.zc.model.ZcEbXunJiaBaoJiaDetail;import com.ufgov.zc.server.system.SpringContext;import com.ufgov.zc.server.zc.dao.IDataExchangeDao;import com.ufgov.zc.server.zc.dao.IZcEbBaseServiceDao;import com.ufgov.zc.server.zc.dao.IZcEbXjbjDao;import com.ufgov.zc.server.zc.dao.ibatis.BaseDao;import com.ufgov.zc.server.zc.service.IZcEbProjService;import com.ufgov.zc.server.zc.service.IZcEbXjbjService;/** * @author Administrator * */public class ZcEbXjbjService implements IZcEbXjbjService {  private IZcEbXjbjDao baoJiaDao;  private IDataExchangeDao dataExchangeDao;  private BaseDao baseDao;    private IZcEbBaseServiceDao zcEbBaseServiceDao;  public IZcEbBaseServiceDao getZcEbBaseServiceDao() {    return zcEbBaseServiceDao;  }  public void setZcEbBaseServiceDao(IZcEbBaseServiceDao zcEbBaseServiceDao) {    this.zcEbBaseServiceDao = zcEbBaseServiceDao;  }  private boolean isDataChange = false;  public BaseDao getBaseDao() {    return baseDao;  }  public void setBaseDao(BaseDao baseDao) {    this.baseDao = baseDao;  }  public IDataExchangeDao getDataExchangeDao() {    return dataExchangeDao;  }  public void setDataExchangeDao(IDataExchangeDao dataExchangeDao) {    this.dataExchangeDao = dataExchangeDao;  }  public IZcEbXjbjDao getBaoJiaDao() {    return baoJiaDao;  }  public void setBaoJiaDao(IZcEbXjbjDao baoJiaDao) {    this.baoJiaDao = baoJiaDao;  }  public boolean deleteXunJiaBaoJia(ZcEbXunJiaBaoJia xunJiaBaoJia, RequestMeta requestMeta) {    createExchangeData(xunJiaBaoJia, requestMeta);    return this.baoJiaDao.deleteXunJiaBaoJia(xunJiaBaoJia);  }  public List getSignupPack(ZcEbXunJiaBaoJia xunJiaBaoJia, RequestMeta requestMeta) {    List packs = this.baoJiaDao.getSignupPack(xunJiaBaoJia);    if (packs == null)      return new ArrayList();    //获取已经保存了得报价信息    //获取分包上带有的询价单信息，准备让供应商填写报价数据    if (xunJiaBaoJia.getBjCode() != null) {//获取已经保存的报价信息      for (int i = 0; i < packs.size(); i++) {        ZcEbSignupPackDetail pack = (ZcEbSignupPackDetail) packs.get(i);        ElementConditionDto dto = new ElementConditionDto();        dto.setZcText0(xunJiaBaoJia.getProjCode());        dto.setZcText1(pack.getPackCode());        dto.setZcText2(xunJiaBaoJia.getBjCode());        List bjLst = this.baoJiaDao.getBaoJiaDetail(dto);        if (bjLst == null || bjLst.size() == 0) {          ElementConditionDto dto1 = new ElementConditionDto();          dto1.setZcText0(xunJiaBaoJia.getProjCode());          dto1.setZcText1(pack.getPackCode());          dto1.setZcText2(xunJiaBaoJia.getSupplierCode());          List bjList1 = this.baoJiaDao.getXunJiaByProj(dto);          pack.setXunJiaBaoJiaList(bjList1 == null ? new ArrayList() : bjList1);        } else {          pack.setXunJiaBaoJiaList(bjLst);        }      }    } else {//获取分包上带有的询价单信息,准备让供应商填写报价数据      for (int i = 0; i < packs.size(); i++) {        ZcEbSignupPackDetail pack = (ZcEbSignupPackDetail) packs.get(i);        ElementConditionDto dto = new ElementConditionDto();        dto.setZcText0(xunJiaBaoJia.getProjCode());        dto.setZcText1(pack.getPackCode());        dto.setZcText2(xunJiaBaoJia.getSupplierCode());        List bjLst = this.baoJiaDao.getXunJiaByProj(dto);        pack.setXunJiaBaoJiaList(bjLst == null ? new ArrayList() : bjLst);      }    }    return packs;  }  public List getXunJiaBaoJia(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    // TODO Auto-generated method stub    return this.baoJiaDao.getXunJiaBaoJia(elementConditionDto, requestMeta);  }  public ZcEbXunJiaBaoJia getXunJiaBaoJiaBySupplier(ZcEbXunJiaBaoJia xunJiaBaoJia, RequestMeta requestMeta) {    return this.baoJiaDao.getXunJiaBaoJiaBySupplier(xunJiaBaoJia);  }  public String updateXunJiaBaoJia(ZcEbXunJiaBaoJia xunJiaBaoJia, RequestMeta requestMeta) {    this.baoJiaDao.updateXunJiaBaoJia(xunJiaBaoJia);    return "成功修改了商家【" + xunJiaBaoJia.getSupplierName() + "】的询价报价信息...";  }  public ZcEbXunJiaBaoJia saveXunJiaBaoJia(ZcEbXunJiaBaoJia xunJiaBaoJia, RequestMeta requestMeta) {    // TODO Auto-generated method stub    if (xunJiaBaoJia.getBjCode() == null) {      String bjCode = zcEbBaseServiceDao.getSequenceNextVal(ZcSettingConstants.SEQUENCE_XUNJIA_BAOJIA);      xunJiaBaoJia.setBjCode(bjCode);      for (int i = 0; i < xunJiaBaoJia.getBaoJiaPackList().size(); i++) {        ZcEbSignupPackDetail pack = (ZcEbSignupPackDetail) xunJiaBaoJia.getBaoJiaPackList().get(i);        for (int j = 0; j < pack.getXunJiaBaoJiaList().size(); j++) {          ZcEbXunJiaBaoJiaDetail d = (ZcEbXunJiaBaoJiaDetail) pack.getXunJiaBaoJiaList().get(j);          d.setBjCode(xunJiaBaoJia.getBjCode());          //          d.setBjDetailCode(ZcUtil.getSequenceNextVal(ZcSettingConstants.SEQUENCE_XUNJIA_BAOJIA_DETAIL));        }      }      this.baoJiaDao.insertXunJiaBaoJia(xunJiaBaoJia);    } else {      this.baoJiaDao.updateXunJiaBaoJia(xunJiaBaoJia);    }//    createExchangeData(xunJiaBaoJia, requestMeta);    xunJiaBaoJia = (ZcEbXunJiaBaoJia) this.baseDao.read("ZC_EB_XUNJIA_BAOJIA.selectXunJiaBaoJiaByPrimaryKey", xunJiaBaoJia.getBjCode());    xunJiaBaoJia.setSignupPackList(this.getSignupPack(xunJiaBaoJia, requestMeta));    return xunJiaBaoJia;  }  public void createExchangeData(ZcEbXunJiaBaoJia bj, RequestMeta meta) {    if (isDataChange) {      return;    }    DataExchangeRedo redo = new DataExchangeRedo();    redo.setDataTypeID(meta.getCompoId());    redo.setDataTypeName("询价报价管理");    redo.setRecordID(bj.getProjCode() + "@" + bj.getSupplierCode());    redo.setMasterTableName("ZC_EB_XUNJIA_BAOJIA");    redo.setIsExported("0");    redo.setGenerateDate(new Date());    redo.setOperateType(meta.getFuncId());    if ("fsave".equals(meta.getFuncId())) {      return;    } else if ("fcallback".equals(meta.getFuncId())) {      dataExchangeDao.deleteByRecordIDAndDataTypeID(redo);      return;    } else if ("fsend".equals(meta.getFuncId())) {      redo.setRecordName("询价报价");    } else if ("fdelete".equals(meta.getFuncId())) {      dataExchangeDao.deleteByRecordIDAndDataTypeID(redo);      return;    } else {      return;    }    dataExchangeDao.deleteByRecordIDAndDataTypeID(redo);    dataExchangeDao.saveRedo(redo);  }  public List findTransData(ElementConditionDto dto, RequestMeta meta) {    List l = new ArrayList();    if (dto.getPmAdjustCodeList() == null) {      return l;    }    for (int i = 0; i < dto.getPmAdjustCodeList().size(); i++) {      DataExchangeRedo redo = (DataExchangeRedo) dto.getPmAdjustCodeList().get(i);      String id = redo.getRecordID();      String[] c = id.split("@");      ZcEbXunJiaBaoJia bj = new ZcEbXunJiaBaoJia();      bj.setProjCode(c[0]);      bj.setSupplierCode(c[1]);      ZcEbXunJiaBaoJia baojia = getXunJiaBaoJiaBySupplier(bj, meta);      //没有报价或者，还没到达报价截止时间的跳过      if (baojia == null || baojia.getStopDate().after(new Date())) {        continue;      }      List signupList = getSignupPack(baojia, null);      baojia.setSignupPackList(signupList);      l.add(baojia);    }    return l;  }  public String importTransData(ZcEbXunJiaBaoJia bj, RequestMeta meta) {    this.isDataChange = true;    baoJiaDao.deleteXunJiaBaoJia(bj);    baoJiaDao.insertXunJiaBaoJia(bj);    return "数据插入成功！";  }  public ZcEbXunJiaBaoJia refreshProjInfo(ZcEbXunJiaBaoJia xunJiaBaoJia, RequestMeta requestMeta) {    IZcEbProjService projService = (IZcEbProjService) SpringContext.getBean("zcEbProjService");    xunJiaBaoJia.setProj(projService.getZcEbProjByProjCode(xunJiaBaoJia.getProjCode()));    return xunJiaBaoJia;  }  public List getSignupPackNew(ZcEbXunJiaBaoJia xunJiaBaoJia) {    return baoJiaDao.getSignupPackNew(xunJiaBaoJia);  }  public List getXunJiaBaoJiaByCondition(ElementConditionDto dto, RequestMeta requestMeta) {    // TODO Auto-generated method stub    return baoJiaDao.getXunJiaBaoJiaByCondition(dto);  }     public List getXunJiaByProjLst(List projIdLst, RequestMeta meta) {    // TODO Auto-generated method stub    List rtn=new ArrayList();    if(projIdLst==null || projIdLst.size()==0)return rtn;    for(int i=0;i<projIdLst.size();i++){      String id=(String) projIdLst.get(i);      Object obj=zcEbBaseServiceDao.queryObject("ZcEbXunJia.getXunJiaByProjCode", id);      if(obj!=null){        rtn.add(obj);      }    }    return rtn;  }     public String importXunjiaTransDatasFN(ZcEbXunJia bill, RequestMeta meta) {    // TODO Auto-generated method stub    zcEbBaseServiceDao.delete("ZcEbXunJia.deleteXunJiaByProjCode", bill.getProjCode());    zcEbBaseServiceDao.insertDataForObject("ZcEbXunJia.insertXunJia", bill);    return "导入询价单成功";  }     public List queryXjBjExportsDatas(List reportIdLst, RequestMeta meta) {    // TODO Auto-generated method stub    ElementConditionDto dto=new ElementConditionDto();    dto.setPmAdjustCodeList(reportIdLst);    List rtn=zcEbBaseServiceDao.queryDataForList("ZC_EB_XUNJIA_BAOJIA.queryXjBjExportsDatas", dto);    if(rtn==null || rtn.size()==0)return rtn;    for(int i=0;i<rtn.size();i++){      ZcEbXunJiaBaoJia bj=(ZcEbXunJiaBaoJia)rtn.get(i);      //返回结果为list，list里的内容为hashmap，这里为了方便查询和后续导入，直接使用了map，并且放入了baojiapacklist和SignupPackList中。      List detailLst=zcEbBaseServiceDao.queryDataForList("ZC_EB_XUNJIA_BAOJIA.getBaoJiaDetailByBjCode", bj.getBjCode());      bj.setBaoJiaPackList(detailLst);      List packLst=zcEbBaseServiceDao.queryDataForList("ZC_EB_XUNJIA_BAOJIA.getBaojiaPackByBjCode", bj.getBjCode());      bj.setSignupPackList(packLst);    }    return rtn;  }     public String importXjBjDataFN(ZcEbXunJiaBaoJia bill, RequestMeta meta) {    // TODO Auto-generated method stub    this.baoJiaDao.deleteXunJiaBaoJia(bill);    this.baoJiaDao.insertXunJiaBaoJia(bill);    List detailLst=bill.getBaoJiaPackList();    if(detailLst!=null && detailLst.size()>0){      HashMap dmap=(HashMap) detailLst.get(0);      String bjCode=(String) dmap.get("bj_code");      zcEbBaseServiceDao.delete("ZC_EB_XUNJIA_BAOJIA.deleteBaoJiaDetailByBjCode", bjCode);      zcEbBaseServiceDao.insertDataForObject("ZC_EB_XUNJIA_BAOJIA.insertBaoJiaDetailByImportData", dmap);    }    List packLst=bill.getSignupPackList();    if(packLst!=null && packLst.size()>0){      HashMap pmap=(HashMap) packLst.get(0);      String bjCode=(String) pmap.get("bj_code");      zcEbBaseServiceDao.delete("ZC_EB_XUNJIA_BAOJIA.deleteBaojiaPackByBjCode", bjCode);      zcEbBaseServiceDao.insertDataForObject("ZC_EB_XUNJIA_BAOJIA.insertBaojiaPackByImportData", pmap);    }    return "导入询价报价单成功";  }}