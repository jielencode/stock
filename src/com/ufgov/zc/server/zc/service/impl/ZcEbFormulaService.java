package com.ufgov.zc.server.zc.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.UUID;import com.ufgov.zc.common.zc.model.ZcEbFormula;import com.ufgov.zc.common.zc.model.ZcEbFormulaItem;import com.ufgov.zc.common.zc.model.ZcEbFormulaPack;import com.ufgov.zc.common.zc.model.ZcEbFormulaPackPlain;import com.ufgov.zc.common.zc.model.ZcEbFormulaParam;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.system.util.NumUtil;import com.ufgov.zc.server.zc.ZcSUtil;import com.ufgov.zc.server.zc.dao.IZcEbBaseServiceDao;import com.ufgov.zc.server.zc.dao.IZcEbFormulaDao;import com.ufgov.zc.server.zc.service.IZcEbFormulaService;public class ZcEbFormulaService implements IZcEbFormulaService {  private IZcEbFormulaDao zcEbFormulaDao;  private IZcEbBaseServiceDao zcEbBaseServiceDao;  public IZcEbBaseServiceDao getZcEbBaseServiceDao() {    return zcEbBaseServiceDao;  }  public void setZcEbBaseServiceDao(IZcEbBaseServiceDao zcEbBaseServiceDao) {    this.zcEbBaseServiceDao = zcEbBaseServiceDao;  }  public IZcEbFormulaDao getZcEbFormulaDao() {    return zcEbFormulaDao;  }  public void setZcEbFormulaDao(IZcEbFormulaDao zcEbFormulaDao) {    this.zcEbFormulaDao = zcEbFormulaDao;  }  public List getZcEbFormulaList(ElementConditionDto dto, RequestMeta meta) {    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getWfcompoId(), NumLimConstants.FWATCH));    return zcEbFormulaDao.getZcEbFormulaList(dto);  }  public List getZcEbFormulaItemList(String formulaCode, ElementConditionDto dto) {    return zcEbFormulaDao.getZcEbFormulaItemList(formulaCode, dto);  }  public List getZcEbFormulaItemList(Map map) {    return zcEbFormulaDao.getZcEbFormulaItemList(map);  }  public List getZcEbFormulaItemByPcode(String formulaCode, String pcode) {    return zcEbFormulaDao.getZcEbFormulaItemByPcode(formulaCode, pcode);  }  public List getZcEbFormulaParamList(String formulaCode) {    return zcEbFormulaDao.getZcEbFormulaParamList(formulaCode);  }  public int deleteForZcEbFormulaByFormulaCode(String formulaCode) {    zcEbFormulaDao.deleteZcEbFormulaItemByFormulaCode(formulaCode);    zcEbFormulaDao.deleteZcEbFormulaParamById(formulaCode);        HashMap m=new HashMap();    m.put("formulaCode", formulaCode);    zcEbFormulaDao.deleteFormulaPackPlain(m);    return zcEbFormulaDao.deleteZcEbFormulaById(formulaCode);  }  public int deleteForZcEbFormulaByProjCode(String projCode) {    ElementConditionDto dto = new ElementConditionDto();    dto.setProjCode(projCode);    List list = zcEbFormulaDao.getZcEbFormulaListByProjCode(dto);    for (int i = 0; i < list.size(); i++) {      ZcEbFormula formula = (ZcEbFormula) list.get(i);      zcEbFormulaDao.deleteZcEbFormulaItemByFormulaCode(formula.getFormulaCode());      zcEbFormulaDao.deleteZcEbFormulaParamById(formula.getFormulaCode());      zcEbFormulaDao.deleteZcEbFormulaById(formula.getFormulaCode());      HashMap m=new HashMap();      m.put("formulaCode", formula.getFormulaCode());      m.put("projCode", projCode);      zcEbFormulaDao.deleteFormulaPackPlain(m);    }    return list.size();  }  public int deleteForZcEbFormulaByPackCode(String packCode) {	  zcEbFormulaDao.deleteFormulaPackPlainByPackCode(packCode);    return zcEbFormulaDao.deleteZcEbFormulaByPackCode(packCode);  }  public ZcEbFormula getZcEbFormula(String packCode) {    ZcEbFormula zcEbFormula = zcEbFormulaDao.getZcEbFormula(packCode);    Map map = new HashMap();    map.put("formulaCode", zcEbFormula.getFormulaCode());    zcEbFormula.setItemList(zcEbFormulaDao.getZcEbFormulaItemList(map));    zcEbFormula.setParamList(zcEbFormulaDao.getZcEbFormulaParamList(zcEbFormula.getFormulaCode()));    zcEbFormula.setDbDigest(zcEbFormula.digest());    zcEbFormula.setDbDigest(zcEbFormula.digest());    return zcEbFormula;  }  public ZcEbFormulaItem getZcEbFormulaItem(String formulaCode, String itemCode) {    ZcEbFormulaItem zcEbFormulaItem = zcEbFormulaDao.getZcEbFormulaItem(formulaCode, itemCode);    zcEbFormulaItem.setDbDigest(zcEbFormulaItem.digest());    return zcEbFormulaItem;  }  public int deleteForZcEbFormulaItem(ZcEbFormulaItem zcEbFormulaItem) {    return zcEbFormulaDao.deleteZcEbFormulaItemById(zcEbFormulaItem.getItemCode());  }  public int deleteForZcEbFormulaItemByFormulaCode(String formulaCode) {    return zcEbFormulaDao.deleteZcEbFormulaItemByFormulaCode(formulaCode);  }  public int deleteForZcEbFormulaParam(String formulaCode) {    return zcEbFormulaDao.deleteZcEbFormulaParamById(formulaCode);  }  public ZcEbFormula updateZcEbFormula(ZcEbFormula zcEbFormula) {    checkZcEbFormulaConsistency(zcEbFormula);    return zcEbFormulaDao.updateZcEbFormula(zcEbFormula);  }  public ZcEbFormula saveZcEbFormula(ZcEbFormula zcEbFormula, String compoId) {    String formulaCode = zcEbFormula.getFormulaCode();    /**     * 先删除掉原来的评标方法。     */    deleteFormula(zcEbFormula);    Date createDate = new Date();    zcEbFormula.setExecuteDate(createDate);    formulaCode = NumUtil.getInstance().getNo(compoId, "FORMULA_CODE", zcEbFormula);    zcEbFormula.setFormulaCode(formulaCode);    //对评审明细进行重新编号    reNO(zcEbFormula);    zcEbFormulaDao.insertZcEbFormula(zcEbFormula);    zcEbFormulaDao.insertZcEbFormulaItemList(zcEbFormula.getItemList(), formulaCode);    for (int i = 0; i < zcEbFormula.getParamList().size(); i++) {      ZcEbFormulaParam bean = (ZcEbFormulaParam) zcEbFormula.getParamList().get(i);      zcEbFormulaDao.insertZcEbFormulaParam(bean);    }    return zcEbFormula;  }private void deleteFormula(ZcEbFormula zcEbFormula) {	ElementConditionDto dto = new ElementConditionDto();    dto.setPackCode(zcEbFormula.getPackCode());    dto.setProjCode(zcEbFormula.getProjectCode());    ZcEbFormula oldZcEbFormula = zcEbFormulaDao.getZcEbFormulaByPackCode(dto);    if (oldZcEbFormula != null) {      deleteForZcEbFormulaByFormulaCode(oldZcEbFormula.getFormulaCode());    }}  private void checkZcEbFormulaConsistency(ZcEbFormula zcEbFormula) {    ZcSUtil.checkConsistency(zcEbFormula, getOriginZcFormula(zcEbFormula), "formulaCode");  }  private ZcEbFormula getOriginZcFormula(ZcEbFormula zcEbFormula) {    return this.zcEbFormulaDao.getZcEbFormula(zcEbFormula.getFormulaCode());  }  public ZcEbFormulaItem updateZcEbFormulaItem(ZcEbFormulaItem zcEbFormulaItem) {    checkZcEbFormulaItemConsistency(zcEbFormulaItem);    return zcEbFormulaDao.updateZcEbFormulaItem(zcEbFormulaItem);  }  public void saveZcEbFormulaItemList(List zcEbFormulaItemList, RequestMeta meta) {    for (int i = 0; i < zcEbFormulaItemList.size(); i++) {      ZcEbFormulaItem zcEbFormulaItem = (ZcEbFormulaItem) zcEbFormulaItemList.get(i);      String itemCode = zcEbFormulaItem.getItemCode();      if (null == itemCode || "".equals(itemCode)) {        insertZcEbFormulaItem(zcEbFormulaItem);      } else {        updateZcEbFormulaItem(zcEbFormulaItem);      }    }  }  private void checkZcEbFormulaItemConsistency(ZcEbFormulaItem zcEbFormulaItem) {    ZcSUtil.checkConsistency(zcEbFormulaItem, getOriginZcEbFormulaItem(zcEbFormulaItem), "itemCode");  }  private ZcEbFormulaItem getOriginZcEbFormulaItem(ZcEbFormulaItem zcEbFormulaItem) {    return this.zcEbFormulaDao.getZcEbFormulaItem(zcEbFormulaItem.getFormulaCode(), zcEbFormulaItem.getItemCode());  }  public void updateZcEbFormulaParam(ZcEbFormulaParam zcEbFormulaParam) {    zcEbFormulaDao.updateZcEbFormulaParam(zcEbFormulaParam);  }  public ZcEbFormula insertZcEbFormula(ZcEbFormula zcEbFormula) {    return zcEbFormulaDao.insertZcEbFormula(zcEbFormula);  }  public ZcEbFormulaItem insertZcEbFormulaItem(ZcEbFormulaItem zcEbFormulaItem) {    return zcEbFormulaDao.insertZcEbFormulaItem(zcEbFormulaItem);  }  public void insertZcEbFormulaItemByTemplateItem(List zcEbFormulaItemList) {    String formulaCode = ((ZcEbFormulaItem) zcEbFormulaItemList.get(0)).getFormulaCode();    zcEbFormulaDao.deleteZcEbFormulaItemByFormulaCode(formulaCode);    for (int i = 0; i < zcEbFormulaItemList.size(); i++) {      zcEbFormulaDao.insertZcEbFormulaItemByTemplate((ZcEbFormulaItem) zcEbFormulaItemList.get(i));    }  }  public void insertZcEbFormulaParam(ZcEbFormulaParam zcEbFormulaParam) {    zcEbFormulaDao.insertZcEbFormulaParam(zcEbFormulaParam);  }  public int isExistsByItemName(String formulaCode, String itemName, String itemCode) {    return zcEbFormulaDao.isExistsByItemName(formulaCode, itemName, itemCode);  }  public void saveZcEbFormulaParam(List params, String formulaCode) {    deleteForZcEbFormulaParam(formulaCode);    for (int i = 0; i < params.size(); i++) {      ZcEbFormulaParam bean = (ZcEbFormulaParam) params.get(i);      bean.setFormulaCode(formulaCode);      insertZcEbFormulaParam(bean);    }  }  public ZcEbFormula getZcEbFormulaByPackCode(ElementConditionDto dto) {    ZcEbFormula zcEbFormula = zcEbFormulaDao.getZcEbFormulaByPackCode(dto);    if (zcEbFormula == null) {      return null;    }    Map map = new HashMap();    map.clear();    map.put("formulaCode", zcEbFormula.getFormulaCode());    zcEbFormula.setItemList(zcEbFormulaDao.getZcEbFormulaItemList(map));    zcEbFormula.setParamList(zcEbFormulaDao.getZcEbFormulaParamList(zcEbFormula.getFormulaCode()));    return zcEbFormula;  }  //获取评审指标集  public ZcEbFormula getZcEbFormulaById(ElementConditionDto dto) {    ZcEbFormula zcEbFormula = zcEbFormulaDao.getZcEbFormulaByPackCode(dto);    if (zcEbFormula == null) {      return null;    }    List scoreItemList = getZcEbFormItemByFormCodeAndItemCode(zcEbFormula.getFormulaCode(), "SC");    List complItemList = getZcEbFormItemByFormCodeAndItemCode(zcEbFormula.getFormulaCode(), "CP");    List itemList = new ArrayList();    itemList.addAll(scoreItemList);    itemList.addAll(complItemList);    zcEbFormula.setItemList(itemList);    zcEbFormula.setParamList(zcEbFormulaDao.getZcEbFormulaParamList(zcEbFormula.getFormulaCode()));    initFormulaItemChildren(scoreItemList);    initFormulaItemChildren(complItemList);    return zcEbFormula;  }  private List getZcEbFormItemByFormCodeAndItemCode(String formulaCode, String itemCode) {    Map map = new HashMap();    map.put("formulaCode", formulaCode);    map.put("itemCode", itemCode);    return getZcEbFormulaItemList(map);  }  //将评标项组装起来，建立父子关系  private void initFormulaItemChildren(List formulaItems) {    for (int i = 0; i < formulaItems.size(); i++) {      ZcEbFormulaItem item = (ZcEbFormulaItem) formulaItems.get(i);      for (int j = 0; j < formulaItems.size(); j++) {        ZcEbFormulaItem tempItem = (ZcEbFormulaItem) formulaItems.get(j);        if (tempItem.getParentItemCode().equals(item.getItemCode())) {          item.getChildItemList().add(tempItem);        }      }    }  }  public List getZcEbFormulaListWithoutDetail(ElementConditionDto dto) {    return zcEbFormulaDao.getZcEbFormulaList(dto);  }  public List getZcEbFormulaListByProjCode(ElementConditionDto dto) {    return zcEbFormulaDao.getZcEbFormulaListByProjCode(dto);  }  /**   * 对评审明细重新编号   */  /**   * 要对指标集重新编码,因为一个指标集模板可能被多个项目引用。每个项目的指标项的编码要不一样。   */  private void reNO(ZcEbFormula zcEbFormula) {    /**     * 对评审指标项目进行编号     */    for (int i = 0; i < zcEbFormula.getItemList().size(); i++) {      ZcEbFormulaItem item = (ZcEbFormulaItem) zcEbFormula.getItemList().get(i);      if (item.getParentItemCode().equals("CP")) {        setFormulaItemCode(item, item.getChildItemList(), zcEbFormula.getFormulaCode());      }      if (item.getParentItemCode().equals("SC")) {        setFormulaItemCode(item, item.getChildItemList(), zcEbFormula.getFormulaCode());      }    }    /**     * 对评审参数进行重新编号     */    if (zcEbFormula.getParamList() != null && zcEbFormula.getParamList().size() > 0) {      for (int j = 0; j < zcEbFormula.getParamList().size(); j++) {        String code = zcEbBaseServiceDao.getSequenceNextVal(ZcSettingConstants.SEQUENCE_ZC_EB_FORMULA_PRRAM);        ZcEbFormulaParam param = (ZcEbFormulaParam) zcEbFormula.getParamList().get(j);        param.setParamCode(code);        param.setFormulaCode(zcEbFormula.getFormulaCode());      }    }  }  private void setFormulaItemCode(ZcEbFormulaItem zcEbFormulaitem, List list, String formulaCode) {    String itemCode = zcEbFormulaitem.getItemCode();    String newItemCode = UUID.randomUUID().toString();    zcEbFormulaitem.setItemCode(newItemCode);    zcEbFormulaitem.setFormulaCode(formulaCode);    for (int i = 0; i < zcEbFormulaitem.getChildItemList().size(); i++) {      ZcEbFormulaItem item = (ZcEbFormulaItem) zcEbFormulaitem.getChildItemList().get(i);      if (itemCode.equals(item.getParentItemCode())) {        item.setParentItemCode(newItemCode);        setFormulaItemCode(item, item.getChildItemList(), formulaCode);      }    }  }  public void saveZcEbFormulaPack(ZcEbFormulaPack zcEbFormulaPack, String compoId) {    String formulaCode;    ZcEbFormula zcEbFormula = zcEbFormulaPack.getZcEbFormula();    if (zcEbFormulaPack.getFormulaCode() == null) {      formulaCode = NumUtil.getInstance().getNo(compoId, "FORMULA_CODE", zcEbFormula);      zcEbFormula.setFormulaCode(formulaCode);      reNO(zcEbFormula);      //保存评标方法主表      for (int i = 0; i < zcEbFormulaPack.getPackList().size(); i++) {        ZcEbPack pack = (ZcEbPack) zcEbFormulaPack.getPackList().get(i);        zcEbFormula.setPackCode(pack.getPackCode());        zcEbFormulaDao.deleteZcEbFormulaByPackCode(pack.getPackCode());        zcEbFormulaDao.insertZcEbFormula(zcEbFormula);      }      //更新指标项数据，先删后插入数据      zcEbFormulaDao.deleteZcEbFormulaItemByFormulaCode(zcEbFormulaPack.getFormulaCode());//      zcEbFormulaDao.deleteZcEbFormulaParamById(zcEbFormulaPack.getFormulaCode());      //保存指标项数据      System.out.println("保存指标项数据：指标项数量" + zcEbFormula.getItemList().size());      zcEbFormulaDao.insertZcEbFormulaItemList(zcEbFormula.getItemList(), formulaCode);      zcEbFormulaDao.insertZcEbFormulaParamList(zcEbFormula.getParamList(), formulaCode);    } else {      //更新评标方法主表      for (int i = 0; i < zcEbFormulaPack.getPackList().size(); i++) {        ZcEbPack pack = (ZcEbPack) zcEbFormulaPack.getPackList().get(i);        zcEbFormula.setPackCode(pack.getPackCode());        zcEbFormulaDao.deleteZcEbFormulaByPackCode(pack.getPackCode());        zcEbFormulaDao.insertZcEbFormula(zcEbFormula);      }      //更新指标项数据，先删后插入数据      zcEbFormulaDao.deleteZcEbFormulaItemByFormulaCode(zcEbFormulaPack.getFormulaCode());//      zcEbFormulaDao.deleteZcEbFormulaParamById(zcEbFormulaPack.getFormulaCode());      //保存指标项数据      System.out.println("保存指标项数据：指标项数量" + zcEbFormula.getItemList().size());      zcEbFormulaDao.insertZcEbFormulaItemList(zcEbFormula.getItemList(), zcEbFormulaPack.getFormulaCode());      zcEbFormulaDao.insertZcEbFormulaParamList(zcEbFormula.getParamList(), zcEbFormulaPack.getFormulaCode());    }  }  public void updateFormulaProj(ZcEbProj proj) {    List packList = proj.getPackList();    for (int i = 0; i < packList.size(); i++) {      ZcEbPack pack = (ZcEbPack) packList.get(i);      ZcEbFormula formula = new ZcEbFormula();      formula.setProjectCode(proj.getProjCode());      formula.setProjectName(proj.getProjName());      formula.setPackCode(pack.getPackCode());      zcEbFormulaDao.updateFormulaProj(formula);    }  }public void saveZcEbFormula(ZcEbFormula zcEbFormula,List packLst,String projCode, RequestMeta meta) {		deleteFormula(zcEbFormula);	zcEbFormulaDao.insertZcEbFormula(zcEbFormula);	zcEbFormulaDao.insertZcEbFormulaItemList(zcEbFormula.getItemList(), zcEbFormula.getFormulaCode());    for (int j = 0; j < zcEbFormula.getParamList().size(); j++) {      ZcEbFormulaParam bean = (ZcEbFormulaParam) zcEbFormula.getParamList().get(j);      bean.setFormulaCode(zcEbFormula.getFormulaCode());      zcEbFormulaDao.insertZcEbFormulaParam(bean);    }	// TODO Auto-generated method stub    ZcEbFormulaPackPlain m;	for(int i=0;i<packLst.size();i++){		String  packCode=(String)packLst.get(i);		m=new ZcEbFormulaPackPlain();		   m.setFormulaCode(zcEbFormula.getFormulaCode());	   m.setPackCode(packCode);	   m.setProjCode(projCode);	    zcEbFormulaDao.insertFormulaPackPlain(m);	}		/*	zcEbFormula.setExecutor(meta.getSvUserName());	zcEbFormula.setNd(new Integer(meta.getSvNd()));	zcEbFormula.setAgency(meta.getSvCoCode());	String compoId = meta.getCompoId();*/	} public List getFormulaExportDatas(List projIdLst, RequestMeta meta) {  // TODO Auto-generated method stub  List rtn=new ArrayList();  for(int j=0;j<projIdLst.size();j++){    String projId=(String) projIdLst.get(j);    ElementConditionDto dto=new ElementConditionDto();    dto.setProjCode(projId);    List formulaLst = zcEbFormulaDao.getZcEbFormulaListByProjCode(dto);    if(formulaLst==null || formulaLst.size()==0)continue;    for(int k=0;k<formulaLst.size();k++){      ZcEbFormula zcEbFormula=(ZcEbFormula)formulaLst.get(k);      Map map = new HashMap();      map.put("formulaCode", zcEbFormula.getFormulaCode());      zcEbFormula.setItemList(zcEbFormulaDao.getZcEbFormulaItemList(map));      zcEbFormula.setParamList(zcEbFormulaDao.getZcEbFormulaParamList(zcEbFormula.getFormulaCode()));      zcEbFormula.setFormulaPackPlainList(zcEbFormulaDao.getFormulaPackPlainList(zcEbFormula.getFormulaCode()));      rtn.add(zcEbFormula);          }  }  return rtn;} public String importTransDatasFN(ZcEbFormula bill, RequestMeta meta) {  // TODO Auto-generated method stub  zcEbFormulaDao.deleteZcEbFormulaById(bill.getFormulaCode());  zcEbFormulaDao.deleteZcEbFormulaItemByFormulaCode(bill.getFormulaCode());  zcEbFormulaDao.deleteZcEbFormulaParamById(bill.getFormulaCode());  zcEbBaseServiceDao.delete("ZcEbFormula.deleteFormulaPackPlainByFormulaCode", bill.getFormulaCode());    zcEbBaseServiceDao.insertDataForObject("ZcEbFormula.insertZcEbFormula", bill);  zcEbFormulaDao.insertZcEbFormulaItemList(bill.getItemList(), bill.getFormulaCode());  if(bill.getParamList()!=null){    for(int i=0;i<bill.getParamList().size();i++){      ZcEbFormulaParam param=(ZcEbFormulaParam)bill.getParamList().get(i);      zcEbFormulaDao.insertZcEbFormulaParam(param);    }  }  if(bill.getFormulaPackPlainList()!=null){    for(int i=0;i<bill.getFormulaPackPlainList().size();i++){      ZcEbFormulaPackPlain plain=(ZcEbFormulaPackPlain)bill.getFormulaPackPlainList().get(i);      zcEbFormulaDao.insertFormulaPackPlain(plain);    }  }  return "导入评标方法成功";}}