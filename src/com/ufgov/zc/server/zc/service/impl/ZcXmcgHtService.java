package com.ufgov.zc.server.zc.service.impl;import java.math.BigDecimal;import java.sql.SQLException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import com.kingdrive.workflow.context.WorkflowContext;import com.ufgov.zc.common.commonbiz.model.Position;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.common.zc.model.ZcEbEntrust;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcHtModel;import com.ufgov.zc.common.zc.model.ZcHtPrePayBillItem;import com.ufgov.zc.common.zc.model.ZcPProMitemBi;import com.ufgov.zc.common.zc.model.ZcTBchtItem;import com.ufgov.zc.common.zc.model.ZcTBchtItemExample;import com.ufgov.zc.common.zc.model.ZcXmcgHt;import com.ufgov.zc.common.zc.model.ZcXmcgHtBi;import com.ufgov.zc.common.zc.model.ZcXmcgHtBiExample;import com.ufgov.zc.common.zc.model.ZcXmcgHtExample;import com.ufgov.zc.server.budget.util.BudgetUtil;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.util.AsOptionUtil;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.system.util.NumUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.ZcSUtil;import com.ufgov.zc.server.zc.dao.IBaseDao;import com.ufgov.zc.server.zc.dao.IZcEbEntrustDao;import com.ufgov.zc.server.zc.dao.IZcEbProjDao;import com.ufgov.zc.server.zc.dao.IZcPProMitemBiDao;import com.ufgov.zc.server.zc.dao.IZcTBchtItemDao;import com.ufgov.zc.server.zc.dao.IZcXmcgHtBiDao;import com.ufgov.zc.server.zc.dao.IZcXmcgHtDao;import com.ufgov.zc.server.zc.service.IZcXmcgHtService;public class ZcXmcgHtService implements IZcXmcgHtService {  private IZcXmcgHtDao zcXmcgHtDao;  private WFEngineAdapter wfEngineAdapter;  private IWorkflowDao workflowDao;  private IZcXmcgHtBiDao zcXmcgHtBiDao;  private IZcTBchtItemDao zcTBchtItemDao;  private IZcEbEntrustDao zcEbEntrustDao;  private IZcPProMitemBiDao zcPProMitemBiDao;  private IZcEbProjDao zcEbProjDao;  private IBaseDao baseDao;  public IZcPProMitemBiDao getZcPProMitemBiDao() {    return zcPProMitemBiDao;  }  public void setZcPProMitemBiDao(IZcPProMitemBiDao zcPProMitemBiDao) {    this.zcPProMitemBiDao = zcPProMitemBiDao;  }  public IZcEbEntrustDao getZcEbEntrustDao() {    return zcEbEntrustDao;  }  public void setZcEbEntrustDao(IZcEbEntrustDao zcEbEntrustDao) {    this.zcEbEntrustDao = zcEbEntrustDao;  }  public IZcXmcgHtDao getZcXmcgHtDao() {    return zcXmcgHtDao;  }  public void setZcXmcgHtDao(IZcXmcgHtDao zcXmcgHtDao) {    this.zcXmcgHtDao = zcXmcgHtDao;  }  public List getZcXmcgHt(ZcXmcgHtExample example) throws SQLException {    List list = zcXmcgHtDao.selectByExample(example);    ZcSUtil.setBillDBDigest(list);    return list;  }  public List getZcXmcgHtList(ElementConditionDto dto, RequestMeta meta) throws SQLException {    List list = zcXmcgHtDao.selectListByExample(dto, meta);    ZcSUtil.setBillDBDigest(list);    return list;  }  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  public void setWorkflowDao(IWorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  public IWorkflowDao getWorkflowDao() {    return workflowDao;  }  public IZcXmcgHtBiDao getZcXmcgHtBiDao() {    return zcXmcgHtBiDao;  }  public void setZcXmcgHtBiDao(IZcXmcgHtBiDao zcXmcgHtBiDao) {    this.zcXmcgHtBiDao = zcXmcgHtBiDao;  }  public IZcTBchtItemDao getZcTBchtItemDao() {    return zcTBchtItemDao;  }  public void setZcTBchtItemDao(IZcTBchtItemDao zcTBchtItemDao) {    this.zcTBchtItemDao = zcTBchtItemDao;  }  public List getZcXmcgHtitemBis(String zcHtCode) {    ZcXmcgHtBiExample bi = new ZcXmcgHtBiExample();    bi.createCriteria().andZcHtCodeEqualTo(zcHtCode);    return zcXmcgHtBiDao.selectByExample(bi);  }  public List getZcTBchtItems(String zcHtCode) {    ZcTBchtItemExample item = new ZcTBchtItemExample();    item.createCriteria().andZcHtCodeEqualTo(zcHtCode);    return zcTBchtItemDao.selectByExample(item);  }  public ZcXmcgHt selectByPrimaryKey(String zcHtCode) {    ZcTBchtItemExample item = new ZcTBchtItemExample();    item.createCriteria().andZcHtCodeEqualTo(zcHtCode);    ZcXmcgHt zcXmcgHt = (ZcXmcgHt) zcXmcgHtDao.selectByPrimaryKey(zcHtCode);    //    ZcXmcgHtBiExample exp = new ZcXmcgHtBiExample();    //    //    exp.createCriteria().andZcHtCodeEqualTo(zcHtCode);    if (zcXmcgHt.getZcParhtCode() != null && !"".equals(zcXmcgHt.getZcParhtCode())) {      zcXmcgHt.setBiList(baseDao.query("ZC_XMCG_HT_BI.ibatorgenerated_selectBiByHtCode", zcXmcgHt.getZcHtCode()));    } else {      Map map = new HashMap();      map.put("ZC_HT_CODE", zcHtCode);      List xmcgHtBiList = zcXmcgHtBiDao.selectByExample(map);      List tempList = new ArrayList();      for (int i = 0; i < xmcgHtBiList.size(); i++) {        ZcXmcgHtBi zcXmcgHtBi = (ZcXmcgHtBi) xmcgHtBiList.get(i);        ElementConditionDto dto = new ElementConditionDto();        dto.setZcText1(zcXmcgHtBi.getZcProBiSeq());        List proMitemBiList = zcPProMitemBiDao.getMitemBiWithHtBi(dto);        if (proMitemBiList.size() != 0) {          ZcPProMitemBi zcPProMitemBi = (ZcPProMitemBi) proMitemBiList.get(0);          zcPProMitemBi.setZcBiUsedSum(zcPProMitemBi.getZcBiJhuaSum());          zcXmcgHtBi.setZcPProMitemBi(zcPProMitemBi);        }        tempList.add(zcXmcgHtBi);      }      zcXmcgHt.setBiList(tempList);    }    zcXmcgHt.setItemList(zcTBchtItemDao.selectByExample(item));    zcXmcgHt.setPayBiList(baseDao.query("ZC_HT_PRE_PAY_BILL.selectByBillCode", zcXmcgHt.getZcHtCode()));    zcXmcgHt.setDbDigest(null);    zcXmcgHt.setDbDigest(zcXmcgHt.digest());// 统一入口    return zcXmcgHt;  }  /**   * 根系合同数据，flag=true，这时是补充合同的操作，需要操作指标借口，正常的合同，flag为false，不操作指标   */  public ZcXmcgHt updateZcXmcgHt(ZcXmcgHt zcXmcgHt, boolean flag, String serverAdd, RequestMeta requestMeta) throws Exception {    Map map = null;    if ("".equals(ZcSUtil.safeString(zcXmcgHt.getZcHtCode()))) {      String userId = requestMeta.getSvUserID();      String compoId = requestMeta.getCompoId();      String code = NumUtil.getInstance().getNo(compoId, "ZC_HT_CODE", zcXmcgHt);      Long draftid = workflowDao.createDraftId();      zcXmcgHt.setZcHtCode(code);      zcXmcgHt.setZcInputCode(userId);      zcXmcgHt.setZcInputDate(requestMeta.getSysDate());//      zcXmcgHt.setZcHtType("1");// 项目采购      zcXmcgHt.setProcessInstId(draftid);      ZcXmcgHt zcXmcgHtOrg = zcXmcgHtDao.getOrgAny(zcXmcgHt);      zcXmcgHt.setAgency(zcXmcgHtOrg.getAgency());      zcXmcgHt.setOrgCode(zcXmcgHtOrg.getOrgCode());      zcXmcgHtDao.insert(zcXmcgHt);      AsWfDraft asWfDraft = new AsWfDraft();      asWfDraft.setCompoId(compoId);      asWfDraft.setWfDraftName(code);      asWfDraft.setUserId(userId);      asWfDraft.setMasterTabId(compoId);      asWfDraft.setWfDraftId(BigDecimal.valueOf(draftid.longValue()));      workflowDao.insertAsWfdraft(asWfDraft);      List biList = zcXmcgHt.getBiList();            if(flag){        map = new BudgetUtil().getSaveBudgetBySubHt(zcXmcgHtBiDao, zcXmcgHt.getZcMakeCode(), code, biList);      }      for (int i = 0; i < biList.size(); i++) {        ZcXmcgHtBi bi = (ZcXmcgHtBi) biList.get(i);        bi.setZcHtCode(code);        bi.setZcMakeCode(zcXmcgHt.getZcMakeCode());      }      zcXmcgHtBiDao.insertLst(biList);      List itemList = zcXmcgHt.getItemList();      for (int i = 0; i < itemList.size(); i++) {        ZcTBchtItem item = (ZcTBchtItem) itemList.get(i);        item.setZcHtCode(code);        item.setZcCtgryId(new BigDecimal(i));      }      zcTBchtItemDao.insertLst(itemList);    } else {      String code = zcXmcgHt.getZcHtCode();      ZcXmcgHt originalBean = this.selectByPrimaryKey(code);      ZcSUtil.checkDigest(zcXmcgHt, originalBean, "zcHtCode");// 一致性校验            zcXmcgHtDao.updateByPrimaryKey(zcXmcgHt);      ZcXmcgHtBiExample bie = new ZcXmcgHtBiExample();      bie.createCriteria().andZcHtCodeEqualTo(code);      ZcTBchtItemExample iteme = new ZcTBchtItemExample();      iteme.createCriteria().andZcHtCodeEqualTo(code);      List biList = zcXmcgHt.getBiList();      //这里给bi置ht_code，是指供应商编制合同，预算单位补充资金的情况      for (int i = 0; i < biList.size(); i++) {        ZcXmcgHtBi bi = (ZcXmcgHtBi) biList.get(i);        bi.setZcHtCode(code);        bi.setZcMakeCode(zcXmcgHt.getZcMakeCode());      }      if(flag){        map = new BudgetUtil().getSaveBudgetBySubHt(zcXmcgHtBiDao,zcXmcgHt.getZcMakeCode(), code, biList);      }      zcXmcgHtBiDao.deleteByExample(bie);      zcTBchtItemDao.deleteByExample(iteme);            zcXmcgHtBiDao.insertLst(biList);      zcTBchtItemDao.insertLst( zcXmcgHt.getItemList());    }   /* baseDao.delete("ZC_HT_PRE_PAY_BILL.deleteByBillCode", zcXmcgHt.getZcHtCode());    List biList = zcXmcgHt.getPayBiList();    for (int i = 0; i < biList.size(); i++) {      ZcHtPrePayBillItem bi = (ZcHtPrePayBillItem) biList.get(i);      bi.setBillCode(zcXmcgHt.getZcHtCode());      SimpleDateFormat s = new SimpleDateFormat("yyyyMMdd");      bi.setPayDate(s.parse(bi.getPayYear() + bi.getPayMonth() + "01"));      baseDao.insert("ZC_HT_PRE_PAY_BILL.abatorgenerated_insertITEM", bi);    }*/           if (flag) {      new BudgetUtil().callService(map, requestMeta.getSvNd());    }        return zcXmcgHt;  }  public void deleteByPrimaryKey(String zcHtCode, boolean flag, String serverAdd) throws Exception {    zcXmcgHtDao.deleteByPrimaryKey(zcHtCode);    //合同不涉及指标接口//    Map map = new BudgetUtil().getDelBudget(zcXmcgHtBiDao, flag, zcHtCode);    ZcXmcgHtBiExample bi = new ZcXmcgHtBiExample();    bi.createCriteria().andZcHtCodeEqualTo(zcHtCode);    ZcTBchtItemExample item = new ZcTBchtItemExample();    item.createCriteria().andZcHtCodeEqualTo(zcHtCode);    zcXmcgHtBiDao.deleteByExample(bi);    zcTBchtItemDao.deleteByExample(item);    //合同不涉及指标接口//    new BudgetUtil().callService(map, serverAdd);  }  public ZcXmcgHt callbackFN(ZcXmcgHt ht, RequestMeta requestMeta) {    WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(ht.getComment(), ht, requestMeta);    if (workflowDao.isFinalAudit(ht.getProcessInstId())) {      // 终审收回      if ("Z01".equals(ht.getZcCgLeixing())) {// 项目采购        if (ht == null || "0".equals(ht.getZcHtStatus())) {          zcXmcgHtDao.deleteByPrimaryKey(ht.getZcMakeCode());          wfEngineAdapter.rework(workflowContext.getComment(), ht, requestMeta);        } else {          throw new RuntimeException("对应的采购合同已经处理，不能收回！");        }      } else {        ZcEbEntrust zcEbEntrust = zcEbEntrustDao.getZcEbEntrustByMakeCode(ht.getZcPProMake().getZcMakeCode());        if (zcEbEntrust == null || "0".equals(zcEbEntrust.getStatus())) {          zcEbEntrustDao.deleteByMakeCode(ht.getZcMakeCode());          wfEngineAdapter.rework(workflowContext.getComment(), ht, requestMeta);        } else {          throw new RuntimeException("对应的采购合同已经处理，不能收回！");        }      }    } else {      // 在途收回      wfEngineAdapter.callback(workflowContext);    }    return selectByPrimaryKey(ht.getZcHtCode());  }  public ZcXmcgHt newCommitFN(ZcXmcgHt currentObject, boolean flag, RequestMeta requestMeta) throws Exception {    currentObject.setZcMakeCode(currentObject.getZcPProMake().getZcMakeCode());    this.updateZcXmcgHt(currentObject, flag, "", requestMeta);    // WorkflowContext workflowContext =    // wfEngineAdapter.genCommonWFC(currentObject.getComment(),    // currentObject);    // List result = new ArrayList();    // result.add(currentObject.getZcCoCode() + "fz");//单位编号+jb为采购单位 经办人    // user_id;    // workflowContext.setNextExecutor(result);    wfEngineAdapter.newCommit(currentObject.getComment(), currentObject, requestMeta);    return selectByPrimaryKey(currentObject.getZcHtCode());  }  public ZcXmcgHt auditFN(RequestMeta requestMeta, ZcXmcgHt ht) {    wfEngineAdapter.commit(ht.getComment(), ht, requestMeta);    return ht;  }  public ZcXmcgHt unAuditFN(RequestMeta requestMeta, ZcXmcgHt ht) {    wfEngineAdapter.rework(ht.getComment(), ht, requestMeta);    return ht;  }  public ZcXmcgHt untreadFN(RequestMeta requestMeta, ZcXmcgHt ht) {    wfEngineAdapter.untread(ht.getComment(), ht, requestMeta);    return selectByPrimaryKey(ht.getZcHtCode());  }  public AsFile getContractContent(ZcXmcgHt zcXmcgHt, RequestMeta requestMeta, String wordFileId) {    AsFile protocolContent = new AsFile();    AsFile template = zcXmcgHtDao.getContractTemplateContent(wordFileId);    byte[] protocolByte = null;    try {      if ("Z01".equals(zcXmcgHt.getZcCgLeixing())) {        Map proj = zcEbProjDao.getProjInfoWithView(zcXmcgHt.getZcMakeCode());        if (proj != null) {          zcXmcgHt.setZcAgeyName(proj.get("ZC_AGEY_NAME") == null ? "" : proj.get("ZC_AGEY_NAME").toString());        }      } else {        ZcEbEntrust entrustInfor = zcEbEntrustDao.getZcEbEntrustByMakeCode(zcXmcgHt.getZcMakeCode());        if (entrustInfor != null) {          zcXmcgHt.setZcAgeyName(entrustInfor.getAgency() == null ? "" : entrustInfor.getAgency());        }      }      protocolByte = evaluateFileContext(zcXmcgHt, template.getFileContent());    } catch (Exception e) {      e.printStackTrace();    }    protocolContent.setFileContent(protocolByte);    return protocolContent;  }  private byte[] evaluateFileContext(ZcXmcgHt zcXmcgHt, byte[] fileContent) throws Exception {    Map contextMap = new HashMap();    contextMap.put("contract", zcXmcgHt);    return ZcSUtil.evaluate(contextMap, fileContent, "contract", ZcSUtil.ENCODING_DEFAULT);  }  public String getCompaneyName(String zcCoCode) {    // TODO Auto-generated method stub    return zcXmcgHtDao.getCompaneyName(zcCoCode);  }  public IZcEbProjDao getZcEbProjDao() {    return zcEbProjDao;  }  public void setZcEbProjDao(IZcEbProjDao zcEbProjDao) {    this.zcEbProjDao = zcEbProjDao;  }  public ZcXmcgHt auditFN(ZcXmcgHt ht, RequestMeta requestMeta) {    String caiGouDwOrgCode = zcXmcgHtDao.getOptionValById("CG_HT_AUDIT_CGDW_ORG_CODE_STRING");// 采购单位，单位编号as_emp_position.org_code    String ysdwfz = zcXmcgHtDao.getOptionValById("CG_HT_AUDIT_YSDW_ROLE_STRING");// 使用预算单位负责人角色.as_emp_position.posi_code    String zhuren = zcXmcgHtDao.getOptionValById("CG_HT_AUDIT_CGZX_ZR");// 采购中心主任角色    String fuzhuren = zcXmcgHtDao.getOptionValById("CG_HT_AUDIT_CGZX_FZR");// 采购中心副主任角色    zcXmcgHtDao.updateByPrimaryKeySelective(ht);    HashMap para = new HashMap();    para.put("instance_id", ht.getProcessInstId());    para.put("executor", requestMeta.getSvUserID());    Integer executorCount = (Integer) this.baseDao.read("ZC_XMCG_HT.getExecutorCount", para);    if (requestMeta.containRole(ysdwfz) && executorCount.intValue() < 2) {// 采购单位负责人第一次审批，送中心      this.cgfzrAudit(ht, requestMeta);      return ht;    } else if (ysdwfz.equalsIgnoreCase(requestMeta.getSvPoCode()) && executorCount.intValue() == 2) {// 采购单位负责人第二次审批，送采购处      commitToCgc(ht, requestMeta);      return ht;    }    // } else if (zhuren.equalsIgnoreCase(requestMeta.getSvPoCode()))    // {//主任审过后，送中心经办人    // this.cgfzrAudit(ht, requestMeta);    // return ht;    // }    // } else if (fuzhuren.equalsIgnoreCase(requestMeta.getSvPoCode()))    // {//采购中心副主任审批    // if ("1".equals(ht.getZcConText())) {//是否送主任审批    // wfEngineAdapter.commit(ht.getComment(), ht);    // return ht;    // } else {//副主任不送主任，则送中心经办人    // this.cgfzrAudit(ht, requestMeta);    // return ht;    // }    // }    wfEngineAdapter.commit(ht.getComment(), ht, requestMeta);    return ht;  }  /**   *    * 送采购单位   *    * @param ht   *    * @param requestMeta   */  private void commitToYsdwjb(ZcXmcgHt ht, RequestMeta requestMeta) {    String cgzxjb = getYsdwjbr(ht.getCoCode(), ht.getNd());    WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(ht.getComment(), ht, requestMeta);    List result = new ArrayList();    result.add(cgzxjb);//    workflowContext.setNextExecutor(result);    wfEngineAdapter.commit(workflowContext);  }  // 获取预算单位 经办人id  private String getYsdwjbr(String zcCoCode, Integer nd) {    HashMap para = new HashMap();    para.put("POSI_CODE", AsOptionUtil.getInstance().getOptionVal("CG_HT_AUDIT_YSDW_JB_ROLE_STRING_for_all"));    para.put("CO_CODE", zcCoCode);    para.put("ND", nd);    Position po = (Position) this.baseDao.read("User.getAsEmpPosiByEmpCode", para);    if (po == null)      return null;    return po.getEmpCode();  }  /**   *    * 送采购 处审批   *    * @param ht   *    * @param requestMeta   */  private void commitToCgc(ZcXmcgHt ht, RequestMeta requestMeta) {    String cgcfzr = getCgcfzr(ht, requestMeta);    WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(ht.getComment(), ht, requestMeta);    List result = new ArrayList();    result.add(cgcfzr);//    workflowContext.setNextExecutor(result);    wfEngineAdapter.commit(workflowContext);  }  private String getCgcfzr(ZcXmcgHt ht, RequestMeta requestMeta) {    String val = AsOptionUtil.getInstance().getOptionVal("OPT_HT_AUDIT_TO_CGC_ROLE_STRING");    HashMap para = new HashMap();    para.put("CO_CODE", ht.getCoCode());    para.put("ND", String.valueOf(requestMeta.getSvNd()));    para.put("csbh", ht.getZcZgCsCode());    para.put("ysdwfz", val);    String cgcfzr = zcXmcgHtDao.getCaiGouChuFuZeRenNameForXmcg(para);// 采购处    // 负责人user_id    return cgcfzr;  }  /**   *    * 采购负责人审批   */  private void cgfzrAudit(ZcXmcgHt ht, RequestMeta requestMeta) {    if ("Z01".equals(ht.getZcCgLeixing())) {// 项目采购      WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(ht.getComment(), ht, requestMeta);      Map para = new HashMap();      para.put("PROJ_CODE", ht.getZcPProMake().getZcMakeCode());      ZcEbProj proj = zcEbProjDao.getZcEbProjByProjCode(para);      List result = new ArrayList();      result.add(proj.getManagerCode());//      workflowContext.setNextExecutor(result);      wfEngineAdapter.commit(workflowContext);    } else {// 协议供货      String ysdwfz = zcXmcgHtDao.getOptionValById("CG_HT_AUDIT_YSDW_ROLE_STRING");// 使用预算单位负责人角色.as_emp_position.posi_code      WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(ht.getComment(), ht, requestMeta);      HashMap para = new HashMap();      para.put("CO_CODE", ht.getCoCode());      para.put("ND", String.valueOf(requestMeta.getSvNd()));      para.put("ROLE_CODE", ysdwfz);      String cgcfzr = zcXmcgHtDao.getCaiGouChuFuZeRenNameForXieYi(para);      List result = new ArrayList();      result.add(cgcfzr);//      workflowContext.setNextExecutor(result);      wfEngineAdapter.commit(workflowContext);    }  }  public IBaseDao getBaseDao() {    return baseDao;  }  public void setBaseDao(IBaseDao baseDao) {    this.baseDao = baseDao;  }  public ZcXmcgHt sendToProcurementUnit(ZcXmcgHt ht, RequestMeta requestMeta) {    zcXmcgHtDao.updateByPrimaryKeySelective(ht);    commitToYsdwjb(ht, requestMeta);    ht.setZcConText("2");    zcXmcgHtDao.updateByPrimaryKeySelective(ht);    return ht;  }  public List getZcXmcgHtSupList(ElementConditionDto dto, RequestMeta meta) throws SQLException {    List list = zcXmcgHtDao.selectListByExample(dto, meta);    ZcSUtil.setBillDBDigest(list);    return list;  }  public List getZcItemZxByPackCode(String value, String purType) {    // TODO Auto-generated method stub    Map map = new HashMap();    map.put("purType", purType);    map.put("packCode", value);    return baseDao.query("ZC_T_BCHT_ITEM.selectItemForZxHt", map);  }  public ZcXmcgHt selectZxByPrimaryKey(String zcHtCode, RequestMeta requestMeta) {    ZcTBchtItemExample item = new ZcTBchtItemExample();    item.createCriteria().andZcHtCodeEqualTo(zcHtCode);    ZcXmcgHt zcXmcgHt = (ZcXmcgHt) baseDao.read("ZC_XMCG_HT.ibatorgenerated_selectZxByPrimaryKey", zcHtCode);    Map map = new HashMap();    map.put("ZC_HT_CODE", zcHtCode);    List xmcgHtBiList = zcXmcgHtBiDao.selectByExample(map);    List tempList = new ArrayList();    for (int i = 0; i < xmcgHtBiList.size(); i++) {      ZcXmcgHtBi zcXmcgHtBi = (ZcXmcgHtBi) xmcgHtBiList.get(i);      ElementConditionDto dto = new ElementConditionDto();      dto.setZcText1(zcXmcgHtBi.getZcProBiSeq());      List proMitemBiList = zcPProMitemBiDao.getMitemBiWithHtBi(dto);      if (proMitemBiList.size() != 0) {        ZcPProMitemBi zcPProMitemBi = (ZcPProMitemBi) proMitemBiList.get(0);        zcPProMitemBi.setZcBiUsedSum(zcPProMitemBi.getZcBiJhuaSum());        zcXmcgHtBi.setZcPProMitemBi(zcPProMitemBi);      }      tempList.add(zcXmcgHtBi);    }    zcXmcgHt.setBiList(tempList);    zcXmcgHt.setItemList(zcTBchtItemDao.selectByExample(item));    zcXmcgHt.setPayBiList(baseDao.query("ZC_HT_PRE_PAY_BILL.selectByBillCode", zcXmcgHt.getZcHtCode()));    zcXmcgHt.setDbDigest(null);    zcXmcgHt.setDbDigest(zcXmcgHt.digest());// 统一入口    return zcXmcgHt;  }  public ZcXmcgHt updateZcXmcgHt(ZcXmcgHt zcXmcgHt, RequestMeta requestMeta) throws Exception {    Map map = null;    if ("".equals(ZcSUtil.safeString(zcXmcgHt.getZcHtCode()))) {      String userId = requestMeta.getSvUserID();      String compoId = requestMeta.getCompoId();      String code = NumUtil.getInstance().getNo(compoId, "ZC_HT_CODE", zcXmcgHt);      Long draftid = workflowDao.createDraftId();      zcXmcgHt.setZcHtCode(code);      zcXmcgHt.setZcInputCode(userId);      zcXmcgHt.setZcInputDate(requestMeta.getSysDate());      zcXmcgHt.setZcHtType("1");// 项目采购      zcXmcgHt.setProcessInstId(draftid);      zcXmcgHtDao.insert(zcXmcgHt);      AsWfDraft asWfDraft = new AsWfDraft();      asWfDraft.setCompoId(compoId);      asWfDraft.setWfDraftName(code);      asWfDraft.setUserId(userId);      asWfDraft.setMasterTabId(compoId);      asWfDraft.setWfDraftId(BigDecimal.valueOf(draftid.longValue()));      workflowDao.insertAsWfdraft(asWfDraft);      List biList = zcXmcgHt.getBiList();      for (int i = 0; i < biList.size(); i++) {        ZcXmcgHtBi bi = (ZcXmcgHtBi) biList.get(i);        bi.setZcHtCode(code);        bi.setZcMakeCode(zcXmcgHt.getZcMakeCode());        zcXmcgHtBiDao.insert(bi);      }      List itemList = zcXmcgHt.getItemList();      for (int i = 0; i < itemList.size(); i++) {        ZcTBchtItem item = (ZcTBchtItem) itemList.get(i);        item.setZcHtCode(code);        item.setZcCtgryId(new BigDecimal(i));        zcTBchtItemDao.insert(item);      }    } else {      String code = zcXmcgHt.getZcHtCode();      ZcXmcgHt originalBean = this.selectByPrimaryKey(code);      //      ZcSUtil.checkDigest(zcXmcgHt, originalBean, "zcHtCode");// 一致性校验      int uCount = zcXmcgHtDao.updateByPrimaryKey(zcXmcgHt);      ZcXmcgHtBiExample bie = new ZcXmcgHtBiExample();      bie.createCriteria().andZcHtCodeEqualTo(code);      ZcTBchtItemExample iteme = new ZcTBchtItemExample();      iteme.createCriteria().andZcHtCodeEqualTo(code);      List biList = zcXmcgHt.getBiList();      zcXmcgHtBiDao.deleteByExample(bie);      zcTBchtItemDao.deleteByExample(iteme);      for (int i = 0; i < biList.size(); i++) {        ZcXmcgHtBi bi = (ZcXmcgHtBi) biList.get(i);        bi.setZcHtCode(code);        // bi.setZcBiNo(i + "");        zcXmcgHtBiDao.insert(bi);      }      List itemList = zcXmcgHt.getItemList();      for (int i = 0; i < itemList.size(); i++) {        ZcTBchtItem item = (ZcTBchtItem) itemList.get(i);        item.setZcHtCode(code);        item.setZcCtgryId(new BigDecimal(i));        zcTBchtItemDao.insert(item);      }    }    baseDao.delete("ZC_HT_PRE_PAY_BILL.deleteByBillCode", zcXmcgHt.getZcHtCode());    List biList = zcXmcgHt.getPayBiList();    for (int i = 0; i < biList.size(); i++) {      ZcHtPrePayBillItem bi = (ZcHtPrePayBillItem) biList.get(i);      bi.setBillCode(zcXmcgHt.getZcHtCode());      SimpleDateFormat s = new SimpleDateFormat("yyyyMMdd");      bi.setPayDate(s.parse(bi.getPayYear() + bi.getPayMonth() + "01"));      baseDao.insert("ZC_HT_PRE_PAY_BILL.abatorgenerated_insertITEM", bi);    }    return zcXmcgHt;  }  public ZcHtModel getContractContentZx(String projCode, String packCode, String wordFileId) {    Map map = new HashMap();    map.put("projCode", projCode);    map.put("packCode", packCode);    ZcHtModel model = (ZcHtModel) baseDao.read("ZC_XMCG_HT.selectZcHtModelByPackCode", map);    if (model == null) {      model = new ZcHtModel();    }    AsFile template = zcXmcgHtDao.getContractTemplateContent(wordFileId);    if (template != null) {      model.setFile(template);    } else {      model.setFile(new AsFile());    }    return model;  }  public ZcXmcgHt newCommitZxFN(ZcXmcgHt currentObject, RequestMeta requestMeta) throws Exception {    //    currentObject.setZcMakeCode(currentObject.getZcPProMake().getZcMakeCode());    this.updateZcXmcgHt(currentObject, requestMeta);    wfEngineAdapter.newCommit(currentObject.getComment(), currentObject, requestMeta);    return selectZxByPrimaryKey(currentObject.getZcHtCode(), requestMeta);  }  public ZcXmcgHt untreadZxFN(ZcXmcgHt ht, RequestMeta requestMeta) {    wfEngineAdapter.untread(ht.getComment(), ht, requestMeta);    return selectZxByPrimaryKey(ht.getZcHtCode(), requestMeta);  }  public ZcXmcgHt callbackZxFN(ZcXmcgHt ht, RequestMeta requestMeta) {    WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(ht.getComment(), ht, requestMeta);    if (workflowDao.isFinalAudit(ht.getProcessInstId())) {      // 终审收回      if ("Z01".equals(ht.getZcCgLeixing())) {// 项目采购        if (ht == null || "0".equals(ht.getZcHtStatus())) {          zcXmcgHtDao.deleteByPrimaryKey(ht.getZcMakeCode());          wfEngineAdapter.rework(workflowContext.getComment(), ht, requestMeta);        } else {          throw new RuntimeException("对应的采购合同已经处理，不能收回！");        }      } else {        ZcEbEntrust zcEbEntrust = zcEbEntrustDao.getZcEbEntrustByMakeCode(ht.getZcPProMake().getZcMakeCode());        if (zcEbEntrust == null || "0".equals(zcEbEntrust.getStatus())) {          zcEbEntrustDao.deleteByMakeCode(ht.getZcMakeCode());          wfEngineAdapter.rework(workflowContext.getComment(), ht, requestMeta);        } else {          throw new RuntimeException("对应的采购合同已经处理，不能收回！");        }      }    } else {      // 在途收回      wfEngineAdapter.callback(workflowContext);    }    return selectZxByPrimaryKey(ht.getZcHtCode(), requestMeta);  }  public List getZcXmcgHtZxList(ElementConditionDto dto, RequestMeta requestMeta) throws SQLException {    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getWfcompoId(), NumLimConstants.FWATCH));    List list = baseDao.query("ZC_XMCG_HT.ibatorgenerated_selectZxListByExample", dto);    ZcSUtil.setBillDBDigest(list);    return list;  }}