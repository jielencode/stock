/** * ZcebZbService.java * com.ufgov.gk.server.zc.service.impl * Administrator * 2010-7-16 */package com.ufgov.zc.server.zc.service.impl;import java.math.BigDecimal;import java.util.List;import com.kingdrive.workflow.context.WorkflowContext;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.common.zc.model.ZcebZb;import com.ufgov.zc.common.zc.model.ZcebZbItem;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.util.NumUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.dao.IZcEbZbDao;import com.ufgov.zc.server.zc.service.IZcebZbService;/** * @author Administrator * */public class ZcebZbService implements IZcebZbService {  private IZcEbZbDao zcebZbDao;  private IWorkflowDao workflowDao;  private WFEngineAdapter wfEngineAdapter;  /* (non-Javadoc)   * @see com.ufgov.gk.common.zc.publish.IZcebZbServiceDelegate#deleteByPrimaryKey(java.lang.String, com.ufgov.gk.common.system.RequestMeta)   */  public void deleteByPrimaryKey(String zbCode, RequestMeta requestMeta) {    this.zcebZbDao.deleteByPrimaryKey(zbCode);  }  /* (non-Javadoc)   * @see com.ufgov.gk.common.zc.publish.IZcebZbServiceDelegate#getZcebZb(com.ufgov.gk.common.system.dto.ElementConditionDto, com.ufgov.gk.common.system.RequestMeta)   */  public List getZcebZb(ElementConditionDto dto, RequestMeta meta) {    // TODO Auto-generated method stub    dto.setNd(meta.getSvNd());    return this.zcebZbDao.getZcebZb(dto, meta);  }  /* (non-Javadoc)   * @see com.ufgov.gk.common.zc.publish.IZcebZbServiceDelegate#selectByPrimaryKey(java.lang.String, com.ufgov.gk.common.system.RequestMeta)   */  public ZcebZb selectByPrimaryKey(String zbCode, RequestMeta requestMeta) {    // TODO Auto-generated method stub    return this.zcebZbDao.selectByPrimaryKey(zbCode);  }  /* (non-Javadoc)   * @see com.ufgov.gk.common.zc.publish.IZcebZbServiceDelegate#updateZcebZb(com.ufgov.gk.common.zc.model.ZcebZb, com.ufgov.gk.common.system.RequestMeta)   */  public ZcebZb updateZcebZb(ZcebZb zcebZb, RequestMeta requestMeta) {    // TODO Auto-generated method stub    return this.zcebZbDao.updateZcebZb(zcebZb);  }  public ZcebZb save(ZcebZb zcebZb, RequestMeta meta) {    // TODO Auto-generated method stub    if (zcebZb.getBidCode() == null || "".equals(zcebZb.getBidCode()) || zcebZb.getBidCode().equals("自动编号")) {      return insertZcebZb(zcebZb, meta);    } else {      return updateZcebZb(zcebZb, meta);    }  }  private ZcebZb insertZcebZb(ZcebZb zcebZb, RequestMeta meta) {    // TODO Auto-generated method stub    String userId = meta.getSvUserID();    String compoId = meta.getCompoId();    compoId = "ZC_EB_ZB";    String bidCode = NumUtil.getInstance().getNo("ZC_EB_ZB", "BID_CODE", zcebZb);    Long draftid = workflowDao.createDraftId();    zcebZb.setBidCode(bidCode);    zcebZb.setProcessInstId(draftid);    for (int i = 0; i < zcebZb.getItems().size(); i++) {      ZcebZbItem item = (ZcebZbItem) zcebZb.getItems().get(i);      item.setBidCode(bidCode);    }    this.zcebZbDao.insertZcebZb(zcebZb);    AsWfDraft asWfDraft = new AsWfDraft();    asWfDraft.setCompoId(compoId);    asWfDraft.setWfDraftName(bidCode);    asWfDraft.setUserId(userId);    asWfDraft.setMasterTabId(compoId);    asWfDraft.setWfDraftId(BigDecimal.valueOf(draftid.longValue()));    workflowDao.insertAsWfdraft(asWfDraft);    return zcebZb;  }  public ZcebZb getZcebZbById(ZcebZb curObj, RequestMeta requestMeta) {    // TODO Auto-generated method stub    return this.zcebZbDao.getZcebZbById(curObj.getBidCode());  }  public List getZcebZbItem(String bidCode, RequestMeta meta) {    // TODO Auto-generated method stub    return this.zcebZbDao.getZcebZbItem(bidCode);  }  /**   * @return the zcebZbDao   */  public IZcEbZbDao getZcebZbDao() {    return zcebZbDao;  }  /**   * @param zcebZbDao the zcebZbDao to set   */  public void setZcebZbDao(IZcEbZbDao zcebZbDao) {    this.zcebZbDao = zcebZbDao;  }  /**   * @return the workflowDao   */  public IWorkflowDao getWorkflowDao() {    return workflowDao;  }  /**   * @param workflowDao the workflowDao to set   */  public void setWorkflowDao(IWorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  /**   * @return the wfEngineAdapter   */  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  /**   * @param wfEngineAdapter the wfEngineAdapter to set   */  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public BigDecimal getZcebZbBidSum(String makeCode, RequestMeta meta) {    return this.zcebZbDao.getZcebZbBidSum(makeCode);  }  public BigDecimal getOtherBidSums(ZcebZb zb, RequestMeta meta) {    // TODO Auto-generated method stub    if (zb.getBidCode() == null || zb.getBidCode().equals("")) {      return this.zcebZbDao.getOtherBidSums1(zb);    } else {      return this.zcebZbDao.getOtherBidSums2(zb);    }  }  public ZcebZb untreadFN(ZcebZb zb, RequestMeta meta) {    // TODO Auto-generated method stub    this.wfEngineAdapter.untread(zb.getComment(), zb, meta);    return zb;  }  public ZcebZb auditFN(ZcebZb zb, RequestMeta meta) {    // TODO Auto-generated method stub    this.wfEngineAdapter.commit(zb.getComment(), zb, meta);    return zb;  }  public ZcebZb newCommitFN(ZcebZb zb, RequestMeta meta) {    this.updateZcebZb(zb, meta);    wfEngineAdapter.newCommit(zb.getComment(), zb, meta);    return zb;  }  public ZcebZb callbackFN(ZcebZb zb, RequestMeta meta) {    wfEngineAdapter.callback(zb.getComment(), zb, meta);    return zb;  }  public ZcebZb unAuditFN(ZcebZb zb, RequestMeta meta) {    // TODO Auto-generated method stub    WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(zb.getComment(), zb, meta);    if (workflowDao.isFinalAudit(zb.getProcessInstId())) {      // 终审收回      List lst = this.zcebZbDao.getZcebZbHavingHt(zb.getBidCode());      if (lst == null || lst.size() == 0) {        wfEngineAdapter.rework(workflowContext.getComment(), zb, meta);      } else {        throw new RuntimeException("该中标已经签订合同，不能收回采购计划！");      }    }    return zb;  }}