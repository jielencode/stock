package com.ufgov.zc.server.zc.service.impl;import java.util.Calendar;import java.util.GregorianCalendar;import java.util.List;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.model.User;import com.ufgov.zc.common.zc.model.EmExpertTypeJoin;import com.ufgov.zc.common.zc.model.ExpertPo;import com.ufgov.zc.server.system.service.IUserService;import com.ufgov.zc.server.system.util.AsOptionUtil;import com.ufgov.zc.server.zc.dao.IExpertDao;import com.ufgov.zc.server.zc.dao.IExpertTypeJoinDao;import com.ufgov.zc.server.zc.service.IExpertService;public class ExpertService implements IExpertService {  IExpertDao expertDao = null;  IExpertTypeJoinDao expertTypeJoinDao = null;  IUserService userService = null;  public static final String FAILURE = "failure";  public IExpertTypeJoinDao getExpertTypeJoinDao() {    return expertTypeJoinDao;  }  public IUserService getUserService() {    return userService;  }  public void setUserService(IUserService userService) {    this.userService = userService;  }  public void setExpertTypeJoinDao(IExpertTypeJoinDao expertTypeJoinDao) {    this.expertTypeJoinDao = expertTypeJoinDao;  }  public IExpertDao getExpertDao() {    return expertDao;  }  public void setExpertDao(IExpertDao expertDao) {    this.expertDao = expertDao;  }  public ExpertPo insertExpertPo(ExpertPo expertPo, List emExpertTypeJoinlist, User user) {    try {      if (userService.getUserById(user.getUserId()) == null) {        this.expertDao.insertExpertPo(expertPo);        for (int i = 0; i < emExpertTypeJoinlist.size(); i++) {          EmExpertTypeJoin joinPo = (EmExpertTypeJoin) emExpertTypeJoinlist.get(i);          this.expertTypeJoinDao.insertExpertTypeJoin(joinPo);        }        GregorianCalendar g = new GregorianCalendar();        String nd = String.valueOf(g.get(Calendar.YEAR));                String groupId = AsOptionUtil.getInstance().getOptionVal(ZcElementConstants.OPT_ZC_EXPERT_GROUP_ID);        String orgId = AsOptionUtil.getInstance().getOptionVal(ZcElementConstants.OPT_ZC_EXPERT_ORG_ID);           String coCode=AsOptionUtil.getInstance().getOptionVal(ZcElementConstants.OPT_ZC_EXPERT_CO_CODE);        String posiCode=AsOptionUtil.getInstance().getOptionVal(ZcElementConstants.OPT_ZC_EXPERT_POSI_ID);                userService.addUser(user,coCode, orgId,posiCode, groupId, ""+nd);      } else {      }    } catch (Exception e) {      e.printStackTrace();    }    return expertPo;  }  public boolean checkAsUser(User user) {    if (userService.getUserById(user.getUserId()) == null) {      return false;    } else      return true;  }}