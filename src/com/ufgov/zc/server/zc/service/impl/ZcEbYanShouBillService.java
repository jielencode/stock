package com.ufgov.zc.server.zc.service.impl;import java.math.BigDecimal;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import com.kingdrive.workflow.context.WorkflowContext;import com.ufgov.zc.common.commonbiz.model.Position;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.common.zc.model.ZcEbYanShouBill;import com.ufgov.zc.common.zc.model.ZcEbYanShouBillItem;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.util.AsOptionUtil;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.system.util.NumUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.ZcSUtil;import com.ufgov.zc.server.zc.dao.ibatis.BaseDao;import com.ufgov.zc.server.zc.service.IZcEbYanShouBillService;public class ZcEbYanShouBillService implements IZcEbYanShouBillService {  private BaseDao baseDao;  private WFEngineAdapter wfEngineAdapter;  private IWorkflowDao workflowDao;  public BaseDao getBaseDao() {    return baseDao;  }  public void setBaseDao(BaseDao baseDao) {    this.baseDao = baseDao;  }  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public IWorkflowDao getWorkflowDao() {    return workflowDao;  }  public void setWorkflowDao(IWorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  public ZcEbYanShouBill auditFN(ZcEbYanShouBill zcEbYanShouBill, RequestMeta requestMeta) {    wfEngineAdapter.commit(zcEbYanShouBill.getComment(), zcEbYanShouBill, requestMeta);    return zcEbYanShouBill;  }  public ZcEbYanShouBill callbackFN(ZcEbYanShouBill zcEbYanShouBill, RequestMeta requestMeta) {    wfEngineAdapter.callback(zcEbYanShouBill.getComment(), zcEbYanShouBill, requestMeta);    return zcEbYanShouBill;  }  public void deleteZcEbYanShouBill(ZcEbYanShouBill zcEbYanShouBill) {    if (zcEbYanShouBill.getZcImpFileBlobid() != null && !"".equals(zcEbYanShouBill.getZcImpFileBlobid())) {      baseDao.delete("AsFile.deleteAsFileById", zcEbYanShouBill.getZcImpFileBlobid());    }    if (zcEbYanShouBill.getZcInfoFileBlobid() != null && !"".equals(zcEbYanShouBill.getZcInfoFileBlobid())) {      baseDao.delete("AsFile.deleteAsFileById", zcEbYanShouBill.getZcInfoFileBlobid());    }    baseDao.delete("ZcEbYanShou.deleteZcEbYanShouBillById", zcEbYanShouBill.getBillCode());    baseDao.delete("ZcEbYanShou.deleteZcEbYanShouBillItemByBillCode", zcEbYanShouBill.getBillCode());  }  public void deleteZcEbYanShouBill(List zcEbYanShouBillList) {    for (int i = 0; i < zcEbYanShouBillList.size(); i++) {      ZcEbYanShouBill bill = (ZcEbYanShouBill) zcEbYanShouBillList.get(i);      deleteZcEbYanShouBill(bill);    }  }  public List getEbYanShouBillList(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    elementConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(elementConditionDto.getWfcompoId(), NumLimConstants.FWATCH));    List list = baseDao.query("ZcEbYanShou.getZcEbYanShouBillList", elementConditionDto);    for (int i = 0; i < list.size(); i++) {      ZcEbYanShouBill bill = (ZcEbYanShouBill) list.get(i);      List itemList = baseDao.query("ZcEbYanShou.getZcEbYanShouBillItemList", bill.getBillCode());      bill.setItemList(itemList);    }    ZcSUtil.setBillDBDigest(list);    return list;  }  public ZcEbYanShouBill getZcEbYanShouBill(String billCode) {    ZcEbYanShouBill bill = (ZcEbYanShouBill) baseDao.read("ZcEbYanShou.getEbYanShouBillByBillCode", billCode);    List itemList = baseDao.query("ZcEbYanShou.getZcEbYanShouBillItemList", bill.getBillCode());    bill.setItemList(itemList);    bill.setDbDigest(bill.digest());    return bill;  }  public ZcEbYanShouBill newCommitFN(ZcEbYanShouBill zcEbYanShouBill, RequestMeta requestMeta) {    wfEngineAdapter.newCommit(zcEbYanShouBill.getComment(), zcEbYanShouBill, requestMeta);    return zcEbYanShouBill;  }  /**   *    *    *    * @Description:工作流有供应商发起，送采购人审核。   *    * @return ZcEbYanShouBill 返回类型   *    * @since 1.0   */  public ZcEbYanShouBill providerNewCommitFN(ZcEbYanShouBill zcEbYanShouBill, RequestMeta requestMeta) {    WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(zcEbYanShouBill.getComment(), zcEbYanShouBill, requestMeta);    List executors = new ArrayList();    HashMap para = new HashMap();    para.put("POSI_CODE", AsOptionUtil.getInstance().getOptionVal("CG_HT_AUDIT_YSDW_JB_ROLE_STRING_for_all"));    para.put("CO_CODE", zcEbYanShouBill.getCoCode());    para.put("ND", zcEbYanShouBill.getNd());    Position po = (Position) this.baseDao.read("User.getAsEmpPosiByEmpCode", para);    if (po == null)      return null;    executors.add(po.getEmpCode());    workflowContext.setNextExecutor(executors);    wfEngineAdapter.newCommit(workflowContext, zcEbYanShouBill);    return zcEbYanShouBill;  }  public ZcEbYanShouBill providerAuditFN(ZcEbYanShouBill zcEbYanShouBill, RequestMeta requestMeta) {    WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(zcEbYanShouBill.getComment(), zcEbYanShouBill, requestMeta);    List executors = new ArrayList();    HashMap para = new HashMap();    para.put("POSI_CODE", AsOptionUtil.getInstance().getOptionVal("CG_HT_AUDIT_YSDW_JB_ROLE_STRING_for_all"));    para.put("CO_CODE", zcEbYanShouBill.getCoCode());    para.put("ND", zcEbYanShouBill.getNd());    Position po = (Position) this.baseDao.read("User.getAsEmpPosiByEmpCode", para);    if (po == null)      return null;    executors.add(po.getEmpCode());    workflowContext.setNextExecutor(executors);    wfEngineAdapter.commit(workflowContext);    return zcEbYanShouBill;  }  public ZcEbYanShouBill CaiGouCommitFN(ZcEbYanShouBill zcEbYanShouBill, RequestMeta requestMeta) {    WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(zcEbYanShouBill.getComment(), zcEbYanShouBill, requestMeta);    List executors = new ArrayList();    executors.add(zcEbYanShouBill.getExecutor());    workflowContext.setNextExecutor(executors);    wfEngineAdapter.commit(workflowContext);    return zcEbYanShouBill;  }  public ZcEbYanShouBill saveZcEbYanShouBill(ZcEbYanShouBill zcEbYanShouBill, RequestMeta requestMeta) {    ElementConditionDto dto = new ElementConditionDto();    List biList = zcEbYanShouBill.getItemList();    if (biList == null || biList.size() == 0)      throw new RuntimeException("验收明细不能为空");    String userId = requestMeta.getSvUserID();    String compoId = requestMeta.getCompoId();    boolean isDraft = false;    if (zcEbYanShouBill.getProcessInstId() == null || zcEbYanShouBill.getProcessInstId().longValue() == -1) {      Long draftid = workflowDao.createDraftId();      zcEbYanShouBill.setProcessInstId(draftid);      isDraft = true;    }    if ("".equals(ZcSUtil.safeString(zcEbYanShouBill.getBillCode())) || zcEbYanShouBill.getBillCode().equals("自动编号")) {      String code = NumUtil.getInstance().getNo(compoId, "BILL_CODE", zcEbYanShouBill);      zcEbYanShouBill.setBillCode(code);      baseDao.insert("ZcEbYanShou.insertEbYanShouBill", zcEbYanShouBill);      for (int i = 0; i < biList.size(); i++) {        ZcEbYanShouBillItem bi = (ZcEbYanShouBillItem) biList.get(i);        bi.setBillCode(zcEbYanShouBill.getBillCode());        bi.setItemCode(i + 1 + "");        baseDao.insert("ZcEbYanShou.insertZcEbYanShouBillItem", bi);      }    } else {      String billCode = zcEbYanShouBill.getBillCode();      ZcEbYanShouBill originalBean = getZcEbYanShouBill(billCode);      ZcSUtil.checkDigest(zcEbYanShouBill, originalBean, "billCode");// 一致性校验      baseDao.update("ZcEbYanShou.updateEbYanShouBill", zcEbYanShouBill);      baseDao.delete("ZcEbYanShou.deleteZcEbYanShouBillItemByBillCode", zcEbYanShouBill.getBillCode());      for (int i = 0; i < biList.size(); i++) {        ZcEbYanShouBillItem bi = (ZcEbYanShouBillItem) biList.get(i);        bi.setBillCode(zcEbYanShouBill.getBillCode());        bi.setItemCode(i + 1 + "");        baseDao.insert("ZcEbYanShou.insertZcEbYanShouBillItem", bi);      }    }    if (isDraft) {      AsWfDraft asWfDraft = new AsWfDraft();      asWfDraft.setCompoId(compoId);      asWfDraft.setWfDraftName(zcEbYanShouBill.getBillCode());      asWfDraft.setUserId(userId);      asWfDraft.setMasterTabId(compoId);      asWfDraft.setWfDraftId(BigDecimal.valueOf(zcEbYanShouBill.getProcessInstId().longValue()));      workflowDao.insertAsWfdraft(asWfDraft);    }    return getZcEbYanShouBill(zcEbYanShouBill.getBillCode());  }  public ZcEbYanShouBill unAuditFN(ZcEbYanShouBill zcEbYanShouBill, RequestMeta requestMeta) {    wfEngineAdapter.unAudit(zcEbYanShouBill.getComment(), zcEbYanShouBill, requestMeta);    return zcEbYanShouBill;  }  public ZcEbYanShouBill untreadFN(ZcEbYanShouBill zcEbYanShouBill, RequestMeta requestMeta) {    wfEngineAdapter.untread(zcEbYanShouBill.getComment(), zcEbYanShouBill, requestMeta);    return zcEbYanShouBill;  }  public void sendToProcurementUnit(ZcEbYanShouBill bill, RequestMeta requestMeta) {    // TODO Auto-generated method stub    providerAuditFN(bill, requestMeta);  }}