/** * ZcEbOpenBidTeamService.java * com.ufgov.gk.server.zc.service.impl * Administrator * 2010-5-26 */package com.ufgov.zc.server.zc.service.impl;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.User;import com.ufgov.zc.common.zc.model.EmExpertEvaluation;import com.ufgov.zc.common.zc.model.ZcEbEvalBidTeam;import com.ufgov.zc.common.zc.model.ZcEbEvalBidTeamMember;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.service.IUserService;import com.ufgov.zc.server.system.util.AsOptionUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.dao.IBaseDao;import com.ufgov.zc.server.zc.dao.IZcEbEvalBidTeamDao;import com.ufgov.zc.server.zc.service.IZcEbEvalBidTeamService;import com.ufgov.zc.server.zc.util.GeneralFunc;/** *  * @author Administrator *  *  */public class ZcEbEvalBidTeamService implements IZcEbEvalBidTeamService {	private IZcEbEvalBidTeamDao zcEbEvalBidTeamDao;	private IWorkflowDao workflowDao;	private WFEngineAdapter wfEngineAdapter;	private IBaseDao baseDao;	 private IUserService userService;	public IUserService getUserService() {    return userService;  }  public void setUserService(IUserService userService) {    this.userService = userService;  }  /**	 * @return the baseDao	 */	public IBaseDao getBaseDao() {		return baseDao;	}	/**	 * @param baseDao	 *            the baseDao to set	 */	public void setBaseDao(IBaseDao baseDao) {		this.baseDao = baseDao;	}	public List getEvalBidTeam(ElementConditionDto elementConditionDto,			RequestMeta requestMeta) {		return this.zcEbEvalBidTeamDao.getEvalBidTeam(elementConditionDto,				requestMeta);	}	/**	 * 	 * @return the zcEbEvalBidTeamDao	 */	public IZcEbEvalBidTeamDao getZcEbEvalBidTeamDao() {		return zcEbEvalBidTeamDao;	}	/**	 * 	 * @param zcEbEvalBidTeamDao	 *            the zcEbEvalBidTeamDao to set	 */	public void setZcEbEvalBidTeamDao(IZcEbEvalBidTeamDao zcEbEvalBidTeamDao) {		this.zcEbEvalBidTeamDao = zcEbEvalBidTeamDao;	}	/**	 * 	 * @return the workflowDao	 */	public IWorkflowDao getWorkflowDao() {		return workflowDao;	}	/**	 * 	 * @param workflowDao	 *            the workflowDao to set	 */	public void setWorkflowDao(IWorkflowDao workflowDao) {		this.workflowDao = workflowDao;	}	/**	 * 	 * @return the wfEngineAdapter	 */	public WFEngineAdapter getWfEngineAdapter() {		return wfEngineAdapter;	}	/**	 * 	 * @param wfEngineAdapter	 *            the wfEngineAdapter to set	 */	public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {		this.wfEngineAdapter = wfEngineAdapter;	}	public List getEvalBidTeamMembers(ZcEbEvalBidTeam team,			RequestMeta requestMeta) {		// TODO Auto-generated method stub		return this.zcEbEvalBidTeamDao.getEvalBidTeamMembers(team);	}	public ZcEbEvalBidTeam save(ZcEbEvalBidTeam team, RequestMeta requestMeta) {		// TODO Auto-generated method stub		updateEvalBidTeam(team, requestMeta);		// team.setDbDigest(this.getEvalBidTeamByID(team.getTeamCode()).digest());		return team;	}	private void updateEvalBidTeam(ZcEbEvalBidTeam team, RequestMeta requestMeta) {		// TODO Auto-generated method stub		this.zcEbEvalBidTeamDao.updateEvalBidTeam(team);	}	public ZcEbEvalBidTeam saveSt(ZcEbEvalBidTeam team, RequestMeta requestMeta)			throws Exception {		String projCode = team.getProjCode();		String packCode = team.getPackCode();		List memberList = team.getTeamMembers();		this.zcEbEvalBidTeamDao.deleteEvalBidTeamMemersSt(team.getProjCode(),				team.getPackCode());		List existsList = new ArrayList();		List noExistsList = new ArrayList();		for (int i = 0; i < memberList.size(); i++) {			ZcEbEvalBidTeamMember member = (ZcEbEvalBidTeamMember) memberList					.get(i);			member.setProjCode(projCode);			member.setPackCode(packCode);			member.setExpertEvalProgress("0");			/**			 * 			 * 校验录入的专家登陆账号数据库中是否已经存在，存在的话只是保存专家代码和评审分包的关联关系到ZC_EB_PACK_EXPERT表			 */			if (checkExpertExists(member)) {				existsList.add(member);			} else {				noExistsList.add(member);			}		}		for (int j = 0; j < existsList.size(); j++) {			ZcEbEvalBidTeamMember bean = (ZcEbEvalBidTeamMember) existsList					.get(j);			// 6.0平台 专家的编号就是用户的UserId，不是user_code//			bean.setExpertCode(this.zcEbEvalBidTeamDao.getUserIdByUserCode(bean.getExpertIdCard()));									bean.setExpertCode(this.zcEbEvalBidTeamDao.getAsEmpByUserId(bean.getExpertIdCard()).getEmpCode());						// 存在的话只是保存专家代码和评审分包的关联关系到ZC_EB_PACK_EXPERT表			this.zcEbEvalBidTeamDao.insertEvalBidTeamMemersSt(bean);		}		for (int m = 0; m < noExistsList.size(); m++) {			ZcEbEvalBidTeamMember bean = (ZcEbEvalBidTeamMember) noExistsList.get(m);			/**			 * 校验登陆代码是否重复			 */			if (checkUserCodeExists(bean)) {				throw new Exception("系统中已经存在用户编号为:" + bean.getExpertIdCard()						+ "的用户");			}			saveUser(bean, requestMeta.getSvNd());			bean.setExpertCode(bean.getExpertIdCard());			/**			 * 			 * 专家表中插入数据			 */			this.zcEbEvalBidTeamDao.insertInToEmExpert(bean);			// 根据生成的人员代码,设置成专家代码			this.zcEbEvalBidTeamDao.insertEvalBidTeamMemersSt(bean);		}		// 删除专家评价数据		Map map = new HashMap();		map.put("projCode", projCode);		map.put("packCode", packCode);		this.zcEbEvalBidTeamDao.deleteExpertEvaluateList(map);		// 插入专家评价数据		List expertEvaluationList = team.getExpertEvaluationList();		for (int i = 0; i < expertEvaluationList.size(); i++) {			EmExpertEvaluation bean = (EmExpertEvaluation) expertEvaluationList					.get(i);			bean.getEmExpert().setEmExpertCode(					bean.getTeamMember().getExpertCode());			zcEbEvalBidTeamDao.insertExpertEvaluate(bean);		}		updateEvalBidTeam(team, requestMeta);		return team;	}	public int deleteSt(ZcEbEvalBidTeam team, RequestMeta requestMeta) {		return this.zcEbEvalBidTeamDao.deleteEvalBidTeamMemersSt(				team.getProjCode(), team.getPackCode());	}	public void updateEvalBidTeamMemberEvalProgress(			final ZcEbEvalBidTeamMember record) {		this.zcEbEvalBidTeamDao.updateEvalBidTeamMemberEvalProgress(record);	}	public boolean checkExpertExists(ZcEbEvalBidTeamMember member) {		return this.zcEbEvalBidTeamDao.checkExpertExists(member);	}	public boolean checkUserCodeExists(ZcEbEvalBidTeamMember member) {		return this.zcEbEvalBidTeamDao.checkUserCodeExists(member);	}	public void saveUser(ZcEbEvalBidTeamMember bean, int nd) {	//---------------------------------------           String groupId = AsOptionUtil.getInstance().getOptionVal(ZcElementConstants.OPT_ZC_EXPERT_GROUP_ID);    String orgId = AsOptionUtil.getInstance().getOptionVal(ZcElementConstants.OPT_ZC_EXPERT_ORG_ID);       String coCode=AsOptionUtil.getInstance().getOptionVal(ZcElementConstants.OPT_ZC_EXPERT_CO_CODE);    String posiCode=AsOptionUtil.getInstance().getOptionVal(ZcElementConstants.OPT_ZC_EXPERT_POSI_ID);        User user=new User();    user.setUserId(bean.getExpertIdCard());//组织机构代码作为唯一吗    user.setUserName(bean.getExpertName());    user.setPassword(GeneralFunc._encodePwd2(bean.getExpertIdCard()));        userService.addUser(user,coCode, orgId,posiCode, groupId, ""+nd);	}}