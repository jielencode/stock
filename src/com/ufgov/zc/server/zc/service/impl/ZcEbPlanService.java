/** * ZcEbPlanService.java * com.ufgov.gk.server.zc.service.impl * Administrator * 2010-5-26 */package com.ufgov.zc.server.zc.service.impl;import java.util.List;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbPlan;import com.ufgov.zc.common.zc.model.ZcWorkPlan;import com.ufgov.zc.common.zc.model.ZcWorkPlanDetail;import com.ufgov.zc.common.zc.model.ZcWorkPlanDynamic;import com.ufgov.zc.common.zc.model.ZcWorkPlanDynamicDetail;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.util.NumUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.dao.IBaseDao;import com.ufgov.zc.server.zc.dao.IZcEbPlanDao;import com.ufgov.zc.server.zc.service.IZcEbPlanService;/** * @author Administrator * */public class ZcEbPlanService implements IZcEbPlanService {  private IZcEbPlanDao zcEbPlanDao;  private IWorkflowDao workflowDao;  private WFEngineAdapter wfEngineAdapter;  private IBaseDao baseDao;  /**   * @return the baseDao   */  public IBaseDao getBaseDao() {    return baseDao;  }  /**   * @param baseDao the baseDao to set   */  public void setBaseDao(IBaseDao baseDao) {    this.baseDao = baseDao;  }  public List getZcEbPlan(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    return this.zcEbPlanDao.getZcEbPlan(elementConditionDto);  }  /**   * @return the zcEbPlanDao   */  public IZcEbPlanDao getZcEbPlanDao() {    return zcEbPlanDao;  }  /**   * @param zcEbPlanDao the zcEbPlanDao to set   */  public void setZcEbPlanDao(IZcEbPlanDao zcEbPlanDao) {    this.zcEbPlanDao = zcEbPlanDao;  }  /**   * @return the workflowDao   */  public IWorkflowDao getWorkflowDao() {    return workflowDao;  }  /**   * @param workflowDao the workflowDao to set   */  public void setWorkflowDao(IWorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  /**   * @return the wfEngineAdapter   */  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  /**   * @param wfEngineAdapter the wfEngineAdapter to set   */  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public boolean deletePlan(ZcEbPlan plan, RequestMeta requestMeta) {    return this.zcEbPlanDao.deletePlan(plan);  }  public ZcEbPlan save(ZcEbPlan plan, RequestMeta requestMeta) {    if (plan.getPlanCode() == null || plan.getPlanCode() == "") {      plan = insertPlan(plan, requestMeta);    } else {      updatePlan(plan, requestMeta);    }    //plan.setDbDigest(plan.digest());    return plan;  }  private void updatePlan(ZcEbPlan plan, RequestMeta requestMeta) {    this.zcEbPlanDao.updateZcEbPlan(plan);    this.insertZcEbPlanPack(plan);  }  private ZcEbPlan insertPlan(ZcEbPlan plan, RequestMeta requestMeta) {    //String userId = requestMeta.getSvUserID();    String compoId = requestMeta.getCompoId();    String planCode = NumUtil.getInstance().getNo(compoId, "PLAN_CODE", plan);    //Long draftid = workflowDao.createDraftId();    plan.setPlanCode(planCode);    //plan.setProcessInstId(draftid);    this.zcEbPlanDao.deletePlanByProjcode(plan.getProjCode());    //this.zcEbPlanDao.insertZcEbPlan(plan);    this.insertPlanWithoutWF(plan);    //    AsWfDraft asWfDraft = new AsWfDraft();    //    asWfDraft.setCompoId(compoId);    //    asWfDraft.setWfDraftName(planCode);    //    asWfDraft.setUserId(userId);    //    asWfDraft.setMasterTabId(compoId);    //    asWfDraft.setWfDraftId(BigDecimal.valueOf(draftid.longValue()));    //    workflowDao.insertAsWfdraft(asWfDraft);    return plan;  }  public ZcEbPlan insertPlanWithoutWF(ZcEbPlan plan) {    zcEbPlanDao.insertZcEbPlan(plan);    this.insertZcEbPlanPack(plan);    return plan;  }  private void insertZcEbPlanPack(ZcEbPlan plan) {    for (int i = 0; i < plan.getZcEbPlanPackList().size(); i++) {      ZcEbPack pp = (ZcEbPack) plan.getZcEbPlanPackList().get(i);      this.baseDao.update("ZcEbProj.updateZcEbPackForPlan", pp);    }  }  public ZcEbPlan getZcEbPlanByID(String planCode) {    ZcEbPlan plan = this.zcEbPlanDao.getZcEbPlanByID(planCode);    return plan;  }  public ZcEbPlan getZcEbPlanByProjCode(String projCode) {    return this.zcEbPlanDao.getObjZcEbPlanByProjCode(projCode);  }  //以下为工作计划和工作动态相关数据库操作  /**   * 使用dto中的pmAdjustCodeList   */  public void deleteWorkPlans(ElementConditionDto dto, RequestMeta meta) {    this.baseDao.delete("ZcWorkPlan.deleteWorkPlans", dto);    for (int i = 0; i < dto.getPmAdjustCodeList().size(); i++) {      dto.setInputGroupId(dto.getPmAdjustCodeList().get(i).toString());      this.baseDao.delete("ZcWorkPlan.deleteWorkPlanDetails", dto);    }  }  /**   * 使用dto中的startDate/endDate/status/type/nd属性   */  public List getZcWorkPlans(ElementConditionDto dto, RequestMeta meta) {    return this.baseDao.query("ZcWorkPlan.getWorkPlans", dto);  }  /**    * 使用dto中的inputGroupId属性  */  public ZcWorkPlan getZcWorkPlanById(ZcWorkPlan plan, RequestMeta meta) {    return (ZcWorkPlan) this.baseDao.query("ZcWorkPlan.getWorkPlanById", plan);  }  /**   * 使用dto中的startDate/endDate/status/type/nd属性   */  public List getZcWorkPlansWithDetails(ElementConditionDto dto, RequestMeta meta) {    ZcWorkPlan zwp = null;    List list = this.baseDao.query("ZcWorkPlan.getWorkPlans", dto);    for (int i = 0; i < list.size(); i++) {      zwp = (ZcWorkPlan) list.get(i);      dto.setInputGroupId(zwp.getId());      zwp.setWorkPlanDetailList(this.getZcWorkPlanDetailsByWorkPlanID(dto));    }    return list;  }  public List getZcWorkPlanDetailsWithWorkPlanID(ElementConditionDto dto, RequestMeta meta) {    return this.getZcWorkPlanDetailsByWorkPlanID(dto);  }  /**   * 使用dto中的inputGroupId   * @param dto   * @return   */  public List getZcWorkPlanDetailsByWorkPlanID(ElementConditionDto dto) {    return this.baseDao.query("ZcWorkPlan.getWorkPlanDetails", dto);  }  public ZcWorkPlan saveWorkPlan(ZcWorkPlan workPlan, RequestMeta meta) {    this.baseDao.insert("ZcWorkPlan.insertWorkPlan", workPlan);    this.insertWorkPlanDetails(workPlan.getWorkPlanDetailList(), workPlan.getId());    return workPlan;  }  public void updateWorkPlan(ZcWorkPlan workPlan, RequestMeta meta) {    this.baseDao.update("ZcWorkPlan.updateWorkPlan", workPlan);    ElementConditionDto dto = new ElementConditionDto();    dto.setInputGroupId(workPlan.getId());    this.baseDao.delete("ZcWorkPlan.deleteWorkPlanDetails", dto);    this.insertWorkPlanDetails(workPlan.getWorkPlanDetailList(), workPlan.getId());  }  public void insertWorkPlanDetails(List detailList, String workPlanID) {    ZcWorkPlanDetail wpd = null;    for (int i = 0; i < detailList.size(); i++) {      wpd = (ZcWorkPlanDetail) detailList.get(i);      wpd.setPlanID(workPlanID);      this.baseDao.insert("ZcWorkPlan.insertWorkPlanDetail", wpd);    }  }  public ZcWorkPlan newCommitFN(ZcWorkPlan currPlan, boolean isFromList, RequestMeta requestMeta) throws Exception {    if (!isFromList) {      this.updateWorkPlan(currPlan, null);    }    wfEngineAdapter.newCommit(currPlan.getComment(), currPlan, requestMeta);    return this.getZcWorkPlanById(currPlan, null);  }  public ZcWorkPlan auditFN(ZcWorkPlan plan, RequestMeta requestMeta) {    wfEngineAdapter.commit(plan.getComment(), plan, requestMeta);    return plan;  }  public ZcWorkPlan callbackFN(ZcWorkPlan plan, RequestMeta requestMeta) {    wfEngineAdapter.callback(plan.getComment(), plan, requestMeta);    return plan;  }  public ZcWorkPlan unAuditFN(ZcWorkPlan plan, RequestMeta requestMeta) {    wfEngineAdapter.rework(plan.getComment(), plan, requestMeta);    return plan;  }  public ZcWorkPlan untreadFN(ZcWorkPlan plan, RequestMeta requestMeta) {    wfEngineAdapter.untread(plan.getComment(), plan, requestMeta);    return plan;  }  //以下为工作动态  /**   * 使用dto中的pmAdjustCodeList   */  public void deleteWorkPlanDynamics(ElementConditionDto dto, RequestMeta meta) {    this.baseDao.delete("ZcWorkPlanDynamic.deleteWorkPlanDynamics", dto);    for (int i = 0; i < dto.getPmAdjustCodeList().size(); i++) {      dto.setInputGroupId(dto.getPmAdjustCodeList().get(i).toString());      this.baseDao.delete("ZcWorkPlanDynamic.deleteWorkPlanDynamicDetails", dto);    }  }  /**   * 使用dto中的startDate/endDate/status/type/nd属性   */  public List getZcWorkPlanDynamics(ElementConditionDto dto, RequestMeta meta) {    return this.baseDao.query("ZcWorkPlanDynamic.getWorkPlanDynamics", dto);  }  /**    * 使用dto中的inputGroupId属性  */  public ZcWorkPlanDynamic getZcWorkPlanDynamicById(ZcWorkPlanDynamic plan, RequestMeta meta) {    return (ZcWorkPlanDynamic) this.baseDao.query("ZcWorkPlanDynamic.getWorkPlanDynamicById", plan);  }  /**   * 使用dto中的startDate/endDate/status/type/nd属性   */  public List getZcWorkPlanDynamicsWithDetails(ElementConditionDto dto, RequestMeta meta) {    ZcWorkPlanDynamic zwp = null;    List list = this.baseDao.query("ZcWorkPlanDynamic.getWorkPlanDynamics", dto);    for (int i = 0; i < list.size(); i++) {      zwp = (ZcWorkPlanDynamic) list.get(i);      dto.setInputGroupId(zwp.getId());      zwp.setWorkDynamicDetailList(this.getZcWorkPlanDynamicDetailsByWorkPlanDynamicID(dto));    }    return list;  }  /**   * 使用dto中的inputGroupId   * @param dto   * @return   */  public List getZcWorkPlanDynamicDetailsByWorkPlanDynamicID(ElementConditionDto dto) {    return this.baseDao.query("ZcWorkPlanDynamic.getWorkPlanDynamicDetails", dto);  }  public ZcWorkPlanDynamic saveWorkPlanDynamic(ZcWorkPlanDynamic workPlan, RequestMeta meta) {    this.baseDao.insert("ZcWorkPlanDynamic.insertWorkPlanDynamic", workPlan);    this.insertWorkPlanDynamicDetails(workPlan.getWorkDynamicDetailList(), workPlan.getId());    return workPlan;  }  public void updateWorkPlanDynamic(ZcWorkPlanDynamic workPlan, RequestMeta meta) {    this.baseDao.update("ZcWorkPlanDynamic.updateWorkPlanDynamic", workPlan);    ElementConditionDto dto = new ElementConditionDto();    dto.setInputGroupId(workPlan.getId());    this.baseDao.delete("ZcWorkPlanDynamic.deleteWorkPlanDynamicDetails", dto);    this.insertWorkPlanDynamicDetails(workPlan.getWorkDynamicDetailList(), workPlan.getId());  }  public void insertWorkPlanDynamicDetails(List detailList, String workPlanID) {    ZcWorkPlanDynamicDetail wpd = null;    for (int i = 0; i < detailList.size(); i++) {      wpd = (ZcWorkPlanDynamicDetail) detailList.get(i);      wpd.setDynamicID(workPlanID);      this.baseDao.insert("ZcWorkPlanDynamic.insertWorkPlanDynamicDetail", wpd);    }  }  public ZcWorkPlanDynamic newCommitFN(ZcWorkPlanDynamic currPlan, boolean isFromList, RequestMeta requestMeta) throws Exception {    if (!isFromList) {      this.updateWorkPlanDynamic(currPlan, null);    }    wfEngineAdapter.newCommit(currPlan.getComment(), currPlan, requestMeta);    return this.getZcWorkPlanDynamicById(currPlan, null);  }  public ZcWorkPlanDynamic auditFN(ZcWorkPlanDynamic plan, RequestMeta requestMeta) {    wfEngineAdapter.commit(plan.getComment(), plan, requestMeta);    return plan;  }  public ZcWorkPlanDynamic callbackFN(ZcWorkPlanDynamic plan, RequestMeta requestMeta) {    wfEngineAdapter.callback(plan.getComment(), plan, requestMeta);    return plan;  }  public ZcWorkPlanDynamic unAuditFN(ZcWorkPlanDynamic plan, RequestMeta requestMeta) {    wfEngineAdapter.rework(plan.getComment(), plan, requestMeta);    return plan;  }  public ZcWorkPlanDynamic untreadFN(ZcWorkPlanDynamic plan, RequestMeta requestMeta) {    wfEngineAdapter.untread(plan.getComment(), plan, requestMeta);    return plan;  }  public ZcEbPlan getHistoryZcEbPlan(ElementConditionDto dto) {    return this.zcEbPlanDao.getHistoryZcEbPlan(dto);  }  public List getZcEbPlanPackListByProjCode(String projCode) {    return this.baseDao.query("ZcEbProj.getZcEbPackListByProjCode", projCode);  }}