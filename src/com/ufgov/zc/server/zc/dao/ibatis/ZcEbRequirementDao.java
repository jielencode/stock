package com.ufgov.zc.server.zc.dao.ibatis;import java.sql.SQLException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.orm.ibatis.SqlMapClientCallback;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;import com.ibatis.sqlmap.client.SqlMapExecutor;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbPackReq;import com.ufgov.zc.common.zc.model.ZcEbRequirement;import com.ufgov.zc.common.zc.model.ZcEbRequirementDetail;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.zc.dao.IZcEbRequirementDao;public class ZcEbRequirementDao extends SqlMapClientDaoSupport implements IZcEbRequirementDao {  public List getZcEbRequirementList(ElementConditionDto dto, RequestMeta meta) {    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getWfcompoId(), NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList("ZcEbRequirement.getZcEbRequirementList", dto);  }  public List getZcEbRequirementDetailByReqCode(String reqCode) {    return this.getSqlMapClientTemplate().queryForList("ZcEbRequirement.getZcEbRequirementDetailByReqCode", reqCode);  }  public void deleteZcEbRequirementDetailByReqCode(String reqCode) {    this.getSqlMapClientTemplate().delete("ZcEbRequirement.deleteZcEbRequirementDetailByReqCode", reqCode);  }  public List getOriginZcEbRequirementByIdList(List idList) {    if (idList.isEmpty()) {      return new ArrayList();    }    Map param = new HashMap();    param.put("idList", idList);    return this.getSqlMapClientTemplate().queryForList("ZcEbRequirement.getOriginZcEbRequirementByIdList", param);  }  public void insertZcEbRequirement(ZcEbRequirement zcEbRequirement) {    this.getSqlMapClientTemplate().insert("ZcEbRequirement.insertZcEbRequirement", zcEbRequirement);  }  public void insertZcEbRequirementDetail(ZcEbRequirementDetail zcEbRequirementDetail) {    this.getSqlMapClientTemplate().insert("ZcEbRequirement.insertZcEbRequirementDetail", zcEbRequirementDetail);  }  public void updateZcEbRequirement(ZcEbRequirement zcEbRequirement) {    this.getSqlMapClientTemplate().update("ZcEbRequirement.updateZcEbRequirement", zcEbRequirement);  }  public void updateZcEbRequirementDetail(ZcEbRequirementDetail zcEbRequirementDetail) {    this.getSqlMapClientTemplate().update("ZcEbRequirement.updateZcEbRequirementDetail", zcEbRequirementDetail);  }  public ZcEbRequirement getOriginZcEbRequirementById(String reqCode) {    return (ZcEbRequirement) this.getSqlMapClientTemplate().queryForObject("ZcEbRequirement.getOriginZcEbRequirementById", reqCode);  }  public ZcEbRequirement getZcEbRequirementByUseBudget(String snCode) {    return (ZcEbRequirement) this.getSqlMapClientTemplate().queryForObject("ZcEbRequirement.getZcEbRequirementUseBudget", snCode);  }  public List getOriginZcEbRequirementDetailById(String reqCode) {    return this.getSqlMapClientTemplate().queryForList("ZcEbRequirement.getOriginZcEbRequirementDetailById", reqCode);  }  public void deleteZcEbRequirementByReqCode(String reqCode) {    this.getSqlMapClientTemplate().delete("ZcEbRequirement.deleteZcEbRequirementByReqCode", reqCode);  }  public void insertZcEbPackInfo(final ZcEbRequirement zcEbRequirement, final String isInsert) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        List packList = zcEbRequirement.getPackList();        ZcEbPack pack;        /**         * 删除操作         */        //1:删除需求分包和明细的关联关系表        ElementConditionDto dto = new ElementConditionDto();        dto.setZcText0(zcEbRequirement.getReqCode());        List oraPackList = executor.queryForList("ZcEbReqPack.getZcEbPackByEntrustCode", dto);        for (int i = 0; i < oraPackList.size(); i++) {          ZcEbPack orgPack = (ZcEbPack) oraPackList.get(i);          executor.delete("ZcEbProj.deleteZcEbPackReqByPackCode", orgPack.getPackCode());        }        //2:通过REQ_CODE删除需求的明细表ZC_EB_PACK_REQ_DETAIL        executor.delete("ZcEbProj.deleteZcEbReqDetailBySN", zcEbRequirement.getReqCode());        //3:通过需求编号，删除ZC_EB_REQ_PACK 通过REQ_CODE        executor.delete("ZcEbReqPack.deleteZcEbPackByEntrustCode", zcEbRequirement.getReqCode());        for (int i = 0; i < packList.size(); i++) {          pack = (ZcEbPack) packList.get(i);          pack.setProjCode(zcEbRequirement.getSn());          pack.setReqCode(zcEbRequirement.getReqCode());          executor.insert("ZcEbReqPack.insertZcEbPack", pack);          List packReqList = pack.getRequirementDetailList();//存在一个标段有多个标段需求明细          for (int j = 0; j < packReqList.size(); j++) {            ZcEbPackReq packReq = (ZcEbPackReq) packReqList.get(j);            packReq.setProjCode(zcEbRequirement.getSn());            packReq.setPackCode(pack.getPackCode());            /**             * 删插操作   保存标段和分包明细对应关系表               */            executor.insert("ZcEbProj.insertZcEbPackReq", packReq);            /**             * 删除操作   保存分包明细             */            ZcEbRequirementDetail requdetail = packReq.getRequirementDetail();            requdetail.setReqCode(pack.getReqCode());            if (requdetail != null && requdetail.getDetailCode() != null) {              executor.insert("ZcEbProj.insertZcEbReqDetail", requdetail);            }          }          //          executor.delete("ZcEbRequirement.removePackQua",pack.getPackCode());          //          List packQua = pack.getPackQua();          //          for(int j = 0; j < packQua.size(); j++){          //            ZcEbPackQua qua = (ZcEbPackQua) packQua.get(j);          //            executor.insert("ZcEbRequirement.addPackQua",qua);          //          }        }        executor.executeBatch();        return null;      }    });  }  public List getPackCount(ZcEbRequirement zcEbRequirement) {    return this.getSqlMapClientTemplate().queryForList("ZcEbRequirement.getPackCount", zcEbRequirement);  }  public void deleteZcEbPackQuaByReqCode(String reqCode) {    // TODO Auto-generated method stub    this.getSqlMapClientTemplate().delete("ZcEbRequirement.removePackQuaByReq", reqCode);  }}