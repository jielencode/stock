package com.ufgov.zc.server.zc.dao.ibatis;import java.sql.SQLException;import java.util.List;import java.util.Map;import org.springframework.orm.ibatis.SqlMapClientCallback;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;import com.ibatis.sqlmap.client.SqlMapExecutor;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcEbSignup;import com.ufgov.zc.common.zc.model.ZcEbSignupPackDetail;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.zc.dao.IZcEbSignupDao;/** * @ClassName: ZcEbSignupDao * @Description: TODO(这里用一句话描述这个类的作用) * @date: Apr 21, 2010 4:06:47 PM * @version: V1.0 * @since: 1.0 * @author: xiaofei * @modify: */public class ZcEbSignupDao extends SqlMapClientDaoSupport implements IZcEbSignupDao {  public ZcEbSignup getZcEbSignupByInfo(ElementConditionDto dto) {    return (ZcEbSignup) this.getSqlMapClientTemplate().queryForObject("ZcEbSignup.getZcEbSignupByInfo", dto);  }  public List getZcEbSignup(ElementConditionDto dto, RequestMeta meta) {    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getWfcompoId(), NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList("ZcEbSignup.getZcEbSignup", dto);  }  public List getZcEbSignupList(ElementConditionDto dto, RequestMeta meta) {    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getWfcompoId(), NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList("ZcEbSignup.getZcEbSignupList", dto);  }  public List getZcEbSignupPackDetail(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbSignup.getZcEbSignupPackDetail", dto);  }  public void updateZcEbSignup(final ZcEbSignup signup, RequestMeta requestMeta) {    this.getSqlMapClientTemplate().update("ZcEbSignup.updateZcEbSignup", signup);    deleteSignupDetail(signup.getSignupId());    insertDetails(signup.getSignupPacks());  }  public void deleteSignupDetail(String signupId) {    this.getSqlMapClientTemplate().delete("ZcEbSignup.deleteZcEbSignupPackDetail", signupId);  }  public void insertDetails(final List detailList) {    if (detailList == null)      return;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < detailList.size(); i++) {          ZcEbSignupPackDetail p = (ZcEbSignupPackDetail)detailList.get(i);          // System.out.println(p.getSignupPackId()+"\t"+p.getPackCode()+"\t"+p.getPackName()+"\t"+p.getSignupId());          executor.insert("ZcEbSignup.insertZcEbSignupPackDetail", p);        }        executor.executeBatch();        return null;      }    });  }  public void insertSignupDetail(ZcEbSignupPackDetail detail) {    this.getSqlMapClientTemplate().insert("ZcEbSignup.insertZcEbSignupPackDetail", detail);  }  public void insertZcEbSignup(final ZcEbSignup signup, RequestMeta requestMeta) {    this.getSqlMapClientTemplate().insert("ZcEbSignup.insertZcEbSignup", signup);    // insert the detail data    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < signup.getSignupPacks().size(); i++) {          ZcEbSignupPackDetail p = (ZcEbSignupPackDetail) signup.getSignupPacks().get(i);          // System.out.println(p.getSignupPackId()+"\t"+p.getPackCode()+"\t"+p.getPackName()+"\t"+p.getSignupId());          executor.insert("ZcEbSignup.insertZcEbSignupPackDetail", p);        }        executor.executeBatch();        return null;      }    });  }  public ZcEbSignup getZcEbSignupByID(String signupId) {    return (ZcEbSignup) this.getSqlMapClientTemplate().queryForObject("ZcEbSignup.getZcEbSignupById", signupId);  }  public boolean delete(ZcEbSignup signup, RequestMeta requestMeta) {    this.getSqlMapClientTemplate().delete("ZcEbSignup.deleteZcEbSignup", signup.getSignupId());    this.getSqlMapClientTemplate().delete("ZcEbSignup.deleteZcEbSignupPackDetail", signup.getSignupId());    return true;  }  public ZcEbSignup getZcEbSignupByIDProvider(ZcEbSignup curObj, RequestMeta requestMeta) {    return (ZcEbSignup) this.getSqlMapClientTemplate().queryForObject("ZcEbSignup.getZcEbSignupByIdProvider", curObj);  }  public List getZcEbBid(ElementConditionDto elementConditionDto, RequestMeta meta) {    elementConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(elementConditionDto.getWfcompoId(), NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList("ZcEbSignup.getZcEbBid", elementConditionDto);  }  public void updateZcEbSignupPackProperty(ZcEbSignupPackDetail signupDetail) {    this.getSqlMapClientTemplate().update("ZcEbSignup.updateSignUpPack_IS_SUBMIT_BID_DOC", signupDetail);  }  public void updateZcEbSignupProperty(ZcEbSignup signup) {    this.getSqlMapClientTemplate().update("ZcEbSignup.updateSignUp_IS_SUBMIT_BID_DOC", signup);    updateSubmitDocStatus(signup);  }  public ZcEbSignup getZcEbSignupForU(ElementConditionDto dto) {    return (ZcEbSignup) this.getSqlMapClientTemplate().queryForObject("ZcEbSignup.getZcEbSignupForU", dto);  }  public List getZcEbSignupPackDetailByPackCode(Map pc) {    return this.getSqlMapClientTemplate().queryForList("ZcEbSignup.getZcEbSignupPackDetailByPackCode", pc);  }  public List getSignupProjListForToubiao(Map paras) {    return this.getSqlMapClientTemplate().queryForList("ZcEbSignup.getSignupProjListForToubiao", paras);  }  public List getEcbjProjListForQuotation(Map paras) {    return this.getSqlMapClientTemplate().queryForList("ZcEbSignup.getEcbjProjListForQuotation", paras);  }  public List getProjPack(ElementConditionDto elementConditionDto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbProj.getZcEbPackListByProjCode", elementConditionDto.getProjCode());  }  public ZcEbProj getProj(Map paras) {    return (ZcEbProj) this.getSqlMapClientTemplate().queryForObject("ZcEbProj.readByProjCode", paras);  }  public void updatebzjStatus(Map paras) {    this.getSqlMapClientTemplate().update("ZcEbSignup.updateBZJStatus", paras);  }  public List getSignupProjListByUserID(String userID) {    return this.getSqlMapClientTemplate().queryForList("ZcEbSignup.getSignupByUserID", userID);  }  public List getZcEbPlanNotOverdue() {    return this.getSqlMapClientTemplate().queryForList("ZcEbPlan.getZcEbPlanNotOverDue");  }  public List getZcEbSignupSubmit(ElementConditionDto dto, RequestMeta meta) {    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getWfcompoId(), NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList("ZcEbSignup.getZcEbSignupSubmit", dto);  }  public void unBidZcEbSignupFN(final ZcEbSignup signup) {    this.getSqlMapClientTemplate().update("ZcEbSignup.updateZcEbSignup", signup);//    deleteZcEbSignupPackDetail    this.getSqlMapClientTemplate().delete("ZcEbSignup.deleteZcEbSignupPackDetail", signup.getSignupId());    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < signup.getSignupPacks().size(); i++) {          ZcEbSignupPackDetail p = (ZcEbSignupPackDetail) signup.getSignupPacks().get(i);          // System.out.println(p.getSignupPackId()+"\t"+p.getPackCode()+"\t"+p.getPackName()+"\t"+p.getSignupId());          executor.insert("ZcEbSignup.insertZcEbSignupPackDetail", p);        }        executor.executeBatch();        return null;      }    });  }  public void updateSubmitDocStatus(ZcEbSignup signup) {    List packs = signup.getSignupPacks();    for (int i = 0; i < packs.size(); i++) {      ZcEbSignupPackDetail pack = (ZcEbSignupPackDetail) packs.get(i);      pack.setIsSubmitBidDoc(signup.getIsSubmitBidDoc());      this.getSqlMapClientTemplate().update("ZcEbSignup.updateSubmitDocStatus", pack);    }  }}