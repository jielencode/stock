/** * ZcEbSupplierDao.java * com.ufgov.gk.server.zc.dao.ibatis * Administrator * 2010-4-30 */package com.ufgov.zc.server.zc.dao.ibatis;import java.util.List;import java.util.Map;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.zc.model.ZcEbEcbjItem;import com.ufgov.zc.common.zc.model.ZcEbSupBsType;import com.ufgov.zc.common.zc.model.ZcEbSupplier;import com.ufgov.zc.common.zc.model.ZcEbSupplierFeedback;import com.ufgov.zc.common.zc.model.ZcEbSupplierJudge;import com.ufgov.zc.common.zc.model.ZcEbSupplierQualify;import com.ufgov.zc.common.zc.model.ZcEbSupplierType;import com.ufgov.zc.common.zc.model.ZcEbZyxm;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.zc.dao.IZcEbSupplierDao;/** *  * @author Administrator *  *  */public class ZcEbSupplierDao extends SqlMapClientDaoSupport implements IZcEbSupplierDao {  public List getZcEbSupplier(ElementConditionDto dto, RequestMeta meta) {    if (dto.getWfcompoId() != null)      dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getWfcompoId(), NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList("ZcEbSupplier.getZcEbSupplier", dto);  }  public List getZcEbSupplierBySupplierID(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbSupplier.getZcEbSupplierBySupplierID", dto);  }  public List getZcEbSupplierStatus(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbRfq.getZcEbRfqPackStatusList", dto);  }  public List getZcEbSupplierBd(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbRfq.getZcEbRfqPackBdList", dto);  }  public List getZcEbSupplierFile(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbRfq.getZcSupplierFileID", dto);  }  public List getZcSecEbSupplierFile(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbRfq.getZcEbSecSupplierFile", dto);  }  public List getZcEbScrollStatus(String providerCode) {    return this.getSqlMapClientTemplate().queryForList("ZcEbRfq.getZcEbScrollStatus", providerCode);  }  public List getZcEbSecSupplierAllFile(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbRfq.getZcEbSecSupplierAllFile", dto);  }  public List getZcEbSupplierDetail(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbRfq.getZcEbRfqPackDetailList", dto);  }  public List getZcEbSupplierResult(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbRfq.getZcSupBmDetail", dto);  }  public List getZcEbSupplierForm(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbSupplier.getZcEbSupplier", dto);  }  public List getZcEbSup(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbSupplier.getZcDiscountByMerSu", dto);  }  public boolean deleteSupplier(ZcEbSupplier supplier, RequestMeta requestMeta) {    this.getSqlMapClientTemplate().delete("ZcEbSupplier.deleteSupplier", supplier.getCode());    this.deleteZcEbSupplierFeedbackByCode(supplier.getCode());    this.deleteZcEbSupplierJudgeByCode(supplier.getCode());    this.deleteSupplierQualify(supplier.getCode());    this.delSupBsType(supplier.getCode());    return true;  }  public ZcEbSupplier getSupplierById(String code, RequestMeta requestMeta) {    return (ZcEbSupplier) this.getSqlMapClientTemplate().queryForObject("ZcEbSupplier.getZcEbSupplierById", code);  }  public void insertSupplier(ZcEbSupplier supplier, RequestMeta requestMeta) {    this.getSqlMapClientTemplate().insert("ZcEbSupplier.insertZcEbSupplier", supplier);  }  public void updateZcEbSupplier(ZcEbSupplier supplier, RequestMeta requestMeta) {    this.getSqlMapClientTemplate().update("ZcEbSupplier.updateZcEbSupplier", supplier);  }  public ZcEbSupplier getSupplierByName(String name) {    return (ZcEbSupplier) this.getSqlMapClientTemplate().queryForObject("ZcEbSupplier.getZcEbSupplierByName", name);  }  /**   *    * 获得供应商反馈及评价列表   *    * */  public ZcEbSupplier getZcEbSupplierDetailList(String code, RequestMeta requestMeta) {    ZcEbSupplier zcEbSupplier = new ZcEbSupplier();    List feedbackList = this.getSqlMapClientTemplate().queryForList("ZcEbSupplierFeedback.getZcEbSupplierFeedbackList", code);    List judgeList = this.getSqlMapClientTemplate().queryForList("ZcEbSupplierJudge.getZcEbSupplierJudgeList", code);    zcEbSupplier.setFeedbackList(feedbackList);    zcEbSupplier.setJudgeList(judgeList);    List qualifyList = this.getSqlMapClientTemplate().queryForList("ZcEbSupplierQualify.getZcEbSupplierQualifyByCode", code);    zcEbSupplier.setQualifyList(qualifyList);    List bsTypeList = this.getSqlMapClientTemplate().queryForList("ZcEbSupBsType.getZcEbSupBsTypeByCode", code);    zcEbSupplier.setBsTypeList(bsTypeList);    List zyxmList = this.getSqlMapClientTemplate().queryForList("ZcEbSupBsType.getZcEbZyxmByCode", code);    zcEbSupplier.setZyxmList(zyxmList);    List signupList = this.getSqlMapClientTemplate().queryForList("ZcEbSupSingup.getZcEbSupSinupListBySuCode", code);    zcEbSupplier.setSignupList(signupList);    List gysType = this.getSqlMapClientTemplate().queryForList("ZcEbSupplierType.getZcEbSupplierTypeByCode", code);    zcEbSupplier.setGysTypeList(gysType);        return zcEbSupplier;  }  /**   *    * added by mengw 履约情况反馈表和综合评价表的修改   *    * */  public void deleteZcEbSupplierFeedbackByCode(String code) {    this.getSqlMapClientTemplate().delete("ZcEbSupplierFeedback.deleteZcEbSupplierFeedbackByCode", code);  }  public void deleteZcEbSupplierJudgeByCode(String code) {    this.getSqlMapClientTemplate().delete("ZcEbSupplierJudge.deleteZcEbSupplierJudgeByCode", code);  }  public void insertZcEbSupplierFeedback(ZcEbSupplier supplier) {    List feedbackList = supplier.getFeedbackList();    ZcEbSupplierFeedback zcEbSupplierFeedback = null;    for (int i = 0; i < feedbackList.size(); i++) {      zcEbSupplierFeedback = (ZcEbSupplierFeedback) feedbackList.get(i);      zcEbSupplierFeedback.setSupplierCode(supplier.getCode());      this.getSqlMapClientTemplate().insert("ZcEbSupplierFeedback.insertZcEbSupplierFeedback", zcEbSupplierFeedback);    }  }  public void insertZcEbSupplierJudge(ZcEbSupplier supplier) {    List judgeList = supplier.getJudgeList();    ZcEbSupplierJudge zcEbSupplierJudge = null;    for (int i = 0; i < judgeList.size(); i++) {      zcEbSupplierJudge = (ZcEbSupplierJudge) judgeList.get(i);      zcEbSupplierJudge.setSupplierCode(supplier.getCode());      this.getSqlMapClientTemplate().insert("ZcEbSupplierJudge.insertZcEbSupplierJudge", zcEbSupplierJudge);    }  }  public List getSimpleZcEbSupplier(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbSupplier.getSimpleZcEbSupplier", dto);  }  public List getSupplierPackList(ElementConditionDto dto, RequestMeta requestMeta) {    return this.getSqlMapClientTemplate().queryForList("ZcEbSupplierPack.getZcEbSupplierPack", dto);  }  public float getSurplusOpenTime(ElementConditionDto dto) {    Float f = (Float) this.getSqlMapClientTemplate().queryForObject("ZcEbPlan.getSurplusOpenTime", dto);    if (f == null) {      f = new Float(1);    }    return f.floatValue();  }  public void insertAsFileDirectory(AsFile asFile, RequestMeta meta) {    this.getSqlMapClientTemplate().insert("AsFile.insertAsFile", asFile);  }  public void insertZcEbEcbjItem(ZcEbEcbjItem ecbjItem, RequestMeta meta) {    this.getSqlMapClientTemplate().insert("ZcEbRfq.insertZcEbEcbjItem", ecbjItem);  }  public ZcEbEcbjItem getZcEbEcbjItem(ElementConditionDto dto, RequestMeta meta) {    List list = this.getSqlMapClientTemplate().queryForList("ZcEbRfq.getZcEbEcbjItem", dto);    if (list.size() > 0) {      return (ZcEbEcbjItem) list.get(0);    } else {      return null;    }  }  public void updateAsFileDirectory(AsFile asFile, RequestMeta meta) {    this.getSqlMapClientTemplate().update("AsFile.updateAsFileById", asFile);  }  public AsFile getLargeAsFileById(String fileId) {    return (AsFile) this.getSqlMapClientTemplate().queryForList("AsFile.getLargeAsFileById", fileId);  }  public void insertSupplierQualify(ZcEbSupplierQualify qua) {    this.getSqlMapClientTemplate().insert("ZcEbSupplierQualify.insertZcEbSupplierQualify", qua);  }  public void insertSupBsType(ZcEbSupplier supplier) {    for (int i = 0; i < supplier.getBsTypeList().size(); i++) {      ZcEbSupBsType zcEbSupBsType = (ZcEbSupBsType) supplier.getBsTypeList().get(i);      zcEbSupBsType.setSuCode(supplier.getCode());      this.insertSupBsType(zcEbSupBsType);    }  }  public void insertSupBsType(ZcEbSupBsType typeVal) {    this.getSqlMapClientTemplate().insert("ZcEbSupBsType.insertSupBsType", typeVal);  }  public void delSupBsType(String suCode) {    this.getSqlMapClientTemplate().delete("ZcEbSupBsType.deleteZcEbSupBsType", suCode);  }  public void insertSupplierQualifyList(ZcEbSupplier supplier) {    if (supplier == null || supplier.getQualifyList() == null) {      return;    }    ZcEbSupplierQualify qua = null;    for (int i = 0; i < supplier.getQualifyList().size(); i++) {      qua = (ZcEbSupplierQualify) supplier.getQualifyList().get(i);      qua.setSupplierCode(supplier.getCode());      this.insertSupplierQualify(qua);    }  }  public void deleteSupplierQualify(String code) {    this.getSqlMapClientTemplate().delete("ZcEbSupplierQualify.deleteSupplierQualify", code);  }  public List getZcEbSupplierDetailListByZcMerCode(String zcMerCode) {    return this.getSqlMapClientTemplate().queryForList("ZcEbSupplier.getZcEbSupplierDetailListByZcMerCode", zcMerCode);  }  public List getZcEbSupplierListByIDs(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("ZcEbSupplier.getZcEbSupplierListByIDs", dto);  }  public ZcEbSupplier getSupplierByLoginName(String loginName) {    List list = this.getSqlMapClientTemplate().queryForList("ZcEbSupplier.getZcEbSupplierByLoginName", loginName);    if (list.size() > 0) {      return (ZcEbSupplier) list.get(0);    } else {      return null;    }  }  public void insertSupZyxm(ZcEbSupplier supplier) {    if (supplier == null || supplier.getZyxmList() == null) {      return;    }    ZcEbZyxm qua = null;    for (int i = 0; i < supplier.getZyxmList().size(); i++) {      qua = (ZcEbZyxm) supplier.getZyxmList().get(i);      qua.setSuCode(supplier.getCode());      this.getSqlMapClientTemplate().insert("ZcEbSupBsType.insertZyxm", qua);    }  }  public void delZyxm(String code) {    this.getSqlMapClientTemplate().delete("ZcEbSupBsType.deleteZcEbZyxmType", code);  }  public Integer getSupplierCount(Map parameterObject) {    return (Integer) this.getSqlMapClientTemplate().queryForObject("ZcEbSupplier.getSupplierCount", parameterObject);  }  public List getSupplier(Map parameterObject) {    return this.getSqlMapClientTemplate().queryForList("ZcEbSupplier.getSupplier", parameterObject);  }  public void enable(ZcEbSupplier supplier) {    this.getSqlMapClientTemplate().update("ZcEbSupplier.enableSupplier", supplier);  }  public AsFile getPictureAsFileById(String fileId) {    return (AsFile) this.getSqlMapClientTemplate().queryForObject("AsFile.getAsFileById", fileId);  }  public List getZcEbSupplierList() {    return this.getSqlMapClientTemplate().queryForList("ZcEbSupplier.getZcEbSupplierList");  }  public List getMailInfo() {    // TODO Auto-generated method stub    return this.getSqlMapClientTemplate().queryForList("ZC_WCMS_CONTENT.getMailInfo");  }  public void insertGysType(ZcEbSupplier supplier) {    // TODO Auto-generated method stub    if (supplier == null || supplier.getGysTypeList() == null) {      return;    }    getSqlMapClientTemplate().delete("ZcEbSupplierType.delete", supplier.getCode());    ZcEbSupplierType gysType = null;    for (int i = 0; i < supplier.getGysTypeList().size(); i++) {      gysType = (ZcEbSupplierType) supplier.getGysTypeList().get(i);            //gys_normal的身份，无论前台是否选择了。都必须默认选上        if(!gysType.getIsSelected().booleanValue() && !gysType.getTypeCode().equals(ZcEbSupplier.GYS_TYPE_NORMAL)){        continue;      }      gysType.setZcSuCode(supplier.getCode());      getSqlMapClientTemplate().insert("ZcEbSupplierType.insert", gysType);    }  }     public void delGysType(String code) {    // TODO Auto-generated method stub    getSqlMapClientTemplate().delete("ZcEbSupplierType.delete", code);  }}