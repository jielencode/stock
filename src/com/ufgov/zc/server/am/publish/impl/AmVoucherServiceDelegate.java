package com.ufgov.zc.server.am.publish.impl;import java.util.List;import java.util.Map;import com.ufgov.zc.common.am.model.AmVoucher;import com.ufgov.zc.common.am.publish.IAmVoucherServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.dto.PrintObject;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.util.ExceptionUtil;import com.ufgov.zc.server.am.service.IAmSpecialAccountService;import com.ufgov.zc.server.am.service.IAmVoucherService;public class AmVoucherServiceDelegate implements IAmVoucherServiceDelegate {  IAmVoucherService amVoucherService;  public IAmVoucherService getAmVoucherService() {    return amVoucherService;  }  public void setAmVoucherService(IAmVoucherService amVoucherService) {    this.amVoucherService = amVoucherService;  }  public List getAmVoucher(ElementConditionDto dto, RequestMeta requestMeta) {    return amVoucherService.getAmVoucher(dto, requestMeta);  }  public List getAmVoucherForSum(ElementConditionDto dto, RequestMeta requestMeta) {    return amVoucherService.getAmVoucherForSum(dto, requestMeta);  }  public List getAmVoucherForNewSum(ElementConditionDto dto, RequestMeta requestMeta) {    return amVoucherService.getAmVoucherForNewSum(dto, requestMeta);  }  public List getAmVoucherForAmVoucherQueryList(ElementConditionDto dto, RequestMeta requestMeta) {    return amVoucherService.getAmVoucherForAmVoucherQueryList(dto, requestMeta);  }  public List getAmVoucherForAmDv(ElementConditionDto dto, RequestMeta requestMeta) {    return amVoucherService.getAmVoucherForAmDv(dto);  }  public List getAmVoucherForAmPvmDp(ElementConditionDto dto, RequestMeta requestMeta) {    return amVoucherService.getAmVoucherForAmPvmDp(dto);  }  public List getAmVoucherForAmPvmDpEditN(ElementConditionDto dto, RequestMeta requestMeta) {    return amVoucherService.getAmVoucherForAmPvmDpEditN(dto);  }  public List getAmVoucherForAmPvmBiEdit(ElementConditionDto dto, RequestMeta requestMeta) {    return amVoucherService.getAmVoucherForAmPvmBiEdit(dto);  }  public List getAmVoucherForAmPvmDpAudit(ElementConditionDto dto, RequestMeta requestMeta) {    return amVoucherService.getAmVoucherForAmPvmDpAudit(dto);  }  public List getAmVoucherForAmPvmBiAudit(ElementConditionDto dto, RequestMeta requestMeta) {    return amVoucherService.getAmVoucherForAmPvmBiAudit(dto);  }  public void updateAmVoucherPayInfo(AmVoucher amVoucher, RequestMeta requestMeta) {    amVoucherService.updateAmVoucherPayInfo(amVoucher);  }  public List getAmVoucherSumDetailById(String amVoucherId, RequestMeta requestMeta) {    return amVoucherService.getAmVoucherSumDetailById(amVoucherId);  }  public String uncreateAmVoucher(String amVoucherIds, String isSum, RequestMeta requestMeta) {    return amVoucherService.uncreateAmVoucher(amVoucherIds, isSum);  }  public void increasePrintTimes(List amVoucherIdList, RequestMeta requestMeta) {    amVoucherService.increasePrintTimes(amVoucherIdList);  }  public PrintObject genSumMainSubPrintObjectFN(List amVoucherList, RequestMeta requestMeta) {    return amVoucherService.genSumMainSubPrintObject(amVoucherList);  }  public AmVoucher auditForAmVoucherFN(AmVoucher amVoucher, RequestMeta meta) {    return amVoucherService.auditForAmVoucher(amVoucher);  }  public void auditForAmVoucherFN(List amVoucherList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < amVoucherList.size(); i++) {      AmVoucher amVoucher = (AmVoucher) amVoucherList.get(i);      try {        amVoucherService.auditForAmVoucherFN(amVoucher);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(amVoucher.getAmVoucherId());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的拨款凭证审核失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void blankoutForAmVoucherFN(AmVoucher amVoucher, RequestMeta requestMeta) {    amVoucherService.blankoutForAmVoucher(amVoucher);  }  public void blankoutForAmVoucherFN(List amVoucherList, RequestMeta requestMeta) {  }  public void callbackForAmVoucherFN(AmVoucher amVoucher, RequestMeta requestMeta) {  }  public void callbackForAmPvmDpEditFN(List amVoucherList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < amVoucherList.size(); i++) {      AmVoucher amVoucher = (AmVoucher) amVoucherList.get(i);      try {        amVoucherService.callbackForAmVoucher(amVoucher);      } catch (Exception ex) {        errorInfo.append(amVoucher.getAmVoucherId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的拨款申请收回失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void callbackForAmVoucherFN(List amVoucherList, RequestMeta requestMeta) {  }  public int deleteForAmVoucherFN(AmVoucher amVoucher, RequestMeta meta) {    return amVoucherService.deleteForAmVoucher(amVoucher);  }  public void deleteForAmVoucherFN(List amVoucherList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < amVoucherList.size(); i++) {      AmVoucher amVoucher = (AmVoucher) amVoucherList.get(i);      try {        int num = amVoucherService.deleteForAmVoucher(amVoucher);        if (num == 0) {          errorInfo.append(": ");          errorInfo.append(amVoucher.getAmVoucherId());          errorInfo.append("已被删除");          fail = true;        }      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(amVoucher.getAmVoucherId());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的拨款凭证除失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void deleteForAmVoucherEditFN(List amVoucherList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < amVoucherList.size(); i++) {      AmVoucher amVoucher = (AmVoucher) amVoucherList.get(i);      try {        int num = amVoucherService.deleteForAmVoucherEdit(amVoucher);        if (num == 0) {          errorInfo.append(": ");          errorInfo.append(amVoucher.getAmVoucherId());          errorInfo.append("已被删除");          fail = true;        }      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(amVoucher.getAmVoucherId());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的拨款凭证除失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public AmVoucher saveAndSendForAmVoucherFN(AmVoucher amVoucher, RequestMeta meta) {    return amVoucherService.saveAndSendForAmVoucher(amVoucher);  }  public AmVoucher saveForAmVoucherFN(AmVoucher amVoucher, RequestMeta meta) {    return amVoucherService.saveForAmVoucher(amVoucher);  }  public AmVoucher saveForAmVoucherEditFN(AmVoucher amVoucher, RequestMeta meta) {    return amVoucherService.saveForAmVoucherEdit(amVoucher);  }  public AmVoucher sendForAmVoucherFN(AmVoucher amVoucher, RequestMeta meta) {    return null;  }  public void sendForAmVoucherFN(List amVoucherList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < amVoucherList.size(); i++) {      AmVoucher amVoucher = (AmVoucher) amVoucherList.get(i);      try {        amVoucherService.sendForAmVoucher(amVoucher);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(amVoucher.getAmVoucherId());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的拨款凭证送审失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public AmVoucher unAuditForAmVoucherFN(AmVoucher amVoucher, RequestMeta requestMeta) {    return amVoucherService.unAuditForAmVoucher(amVoucher);  }  public void unAuditForAmVoucherFN(List amVoucherList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < amVoucherList.size(); i++) {      AmVoucher amVoucher = (AmVoucher) amVoucherList.get(i);      try {        amVoucherService.unAuditForAmVoucher(amVoucher);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(amVoucher.getAmVoucherId());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的拨款凭证销审失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void unAuditForAmPvmDpAuditFN(List amVoucherList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < amVoucherList.size(); i++) {      AmVoucher amVoucher = (AmVoucher) amVoucherList.get(i);      try {        amVoucherService.unAuditForAmVoucher(amVoucher);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(amVoucher.getAmVoucherId());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的拨款凭证销审失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public AmVoucher untreadForAmVoucherFN(AmVoucher amVoucher, RequestMeta meta) {    return amVoucherService.untreadForAmVoucher(amVoucher);  }  public void untreadForAmVoucherFN(List amVoucherList, RequestMeta meta) {  }  public List getAmVoucherForAmVoucherResponse(ElementConditionDto dto, RequestMeta meta) {    return amVoucherService.getAmVoucherForAmVoucherResponse(dto, meta);  }  public String responseAmVoucher(String dealState, List amVoucherIds, RequestMeta requestMeta) {    return amVoucherService.responseAmVoucher(dealState, amVoucherIds);  }  public List getAmVoucherBySumAmVoucherId(String amVoucherId, RequestMeta requestMeta) {    return amVoucherService.getAmVoucherBySumAmVoucherId(amVoucherId);  }  public void sumAmVoucherFN(List amVoucherSumList, RequestMeta requestMeta) {    this.amVoucherService.sumAmVoucher(amVoucherSumList);  }  public void cancelSumAmVoucherFN(List cpVoucherList, RequestMeta requestMeta) {    this.amVoucherService.cancelSumAmVoucher(cpVoucherList);  }  public void updateExpoTimes(List amVoucherList, RequestMeta requestMeta) {    this.amVoucherService.updateExpoTimes(amVoucherList);  }  public void updateVoucherGroupDealState(Map params, RequestMeta requestMeta) {    this.amVoucherService.updateVoucherGroupDealState(params);  }  private IAmSpecialAccountService amSpecialAccountService;  public List getSpecialAccount(ElementConditionDto dto, RequestMeta requestMeta) {    return amSpecialAccountService.getSpecialAccount(dto, requestMeta);  }  public IAmSpecialAccountService getAmSpecialAccountService() {    return amSpecialAccountService;  }  public void setAmSpecialAccountService(IAmSpecialAccountService amSpecialAccountService) {    this.amSpecialAccountService = amSpecialAccountService;  }  public AmVoucher saveForAmVoucherSpAccFN(AmVoucher amVoucher, RequestMeta meta) {    return amVoucherService.saveForAmVoucherSpAcc(amVoucher);  }  public AmVoucher saveAndSendForAmVoucherSpAccFN(AmVoucher amVoucher, RequestMeta meta) {    return amVoucherService.saveAndSendForAmVoucherSpAcc(amVoucher);  }  public void updateExpoTipsTimes(final List amVoucherList, RequestMeta meta) {    amVoucherService.updateExpoTipsTimes(amVoucherList);  }  public void auditForAmPvmDpFN(List amVoucherList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < amVoucherList.size(); i++) {      AmVoucher amVoucher = (AmVoucher) amVoucherList.get(i);      try {        amVoucherService.auditForAmVoucher(amVoucher);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(amVoucher.getAmVoucherId());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的拨款凭证审核失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void auditForAmPvmDpFN(List amVoucherList, String opinion, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < amVoucherList.size(); i++) {      AmVoucher amVoucher = (AmVoucher) amVoucherList.get(i);      try {        amVoucherService.auditForAmVoucher(amVoucher, opinion);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(amVoucher.getAmVoucherId());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的拨款凭证审核失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void untreadForAmPvmDpAuditFN(List amVoucherList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < amVoucherList.size(); i++) {      AmVoucher amVoucher = (AmVoucher) amVoucherList.get(i);      try {        amVoucherService.untreadForAmVoucher(amVoucher);      } catch (Exception ex) {        errorInfo.append(amVoucher.getAmVoucherId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的拨款凭证退回失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void blankoutForAmPvmDpAuditFN(List amVoucherList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < amVoucherList.size(); i++) {      AmVoucher amVoucher = (AmVoucher) amVoucherList.get(i);      try {        amVoucherService.blankoutForAmVoucher(amVoucher);      } catch (Exception ex) {        errorInfo.append(amVoucher.getAmVoucherId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的拨款凭证作废失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }}