package com.ufgov.zc.server.am.publish.impl;import java.util.Date;import java.util.List;import java.util.Map;import com.ufgov.zc.common.am.model.AmApply;import com.ufgov.zc.common.am.publish.IAmApplyServiceDelegate;import com.ufgov.zc.common.commonbiz.model.BankAccount;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.dto.PrintObject;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.model.User;import com.ufgov.zc.common.system.util.ExceptionUtil;import com.ufgov.zc.server.am.service.IAmApplyService;import com.ufgov.zc.server.am.service.IAmSpecialAccountService;public class AmApplyServiceDelegate implements IAmApplyServiceDelegate {  private IAmApplyService amApplyService;  public List getAmApplyForIssum(ElementConditionDto dto, RequestMeta meta) {    return amApplyService.getAmApplyForIssum(dto);  }  public IAmApplyService getAmApplyService() {    return amApplyService;  }  public void setAmApplyService(IAmApplyService amApplyService) {    this.amApplyService = amApplyService;  }  public void sendForAmBpaeEditFN(List selAmApplyList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < selAmApplyList.size(); i++) {      AmApply amApply = (AmApply) selAmApplyList.get(i);      try {        amApplyService.sendForAmApplyEdit(amApply);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(amApply.getAmApplyId());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的拨款通知单送审失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public List getAmApplyForAmBpaeAuditList(ElementConditionDto dto, RequestMeta meta) {    return amApplyService.getAmApplyForAmBpaeAuditList(dto);  }  public List getAmApplyForApplySum(ElementConditionDto dto, RequestMeta meta) {    return amApplyService.getAmApplyForApplySum(dto);  }  public AmApply auditForAmBpAeEditFN(AmApply amApply, RequestMeta meta) {    return amApplyService.auditForAmApply(amApply);  }  public int deleteForAmBpAeEditFN(AmApply amApply, RequestMeta meta) {    return amApplyService.deleteForAmApply(amApply);  }  public AmApply saveAndSendForAmBpAeEditFN(AmApply amApply, RequestMeta meta) {    return amApplyService.saveAndSendForAmApplyBAF(amApply);  }  public AmApply saveForAmBpAeEditFN(AmApply amApply, RequestMeta meta) {    return amApplyService.saveForAmApplyBAF(amApply);  }  public AmApply sendForAmBpAeEditFN(AmApply amApply, RequestMeta meta) {    return amApplyService.sendForAmApplyEdit(amApply);  }  /**   *批量送审   */  public void sendForAmBpAeEditFN(List amApplyList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < amApplyList.size(); i++) {      AmApply amApply = (AmApply) amApplyList.get(i);      try {        amApplyService.sendForAmApplyEdit(amApply);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(amApply.getAmApplyId());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的拨款申请送审失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 批量审核   */  public void auditForAmBpAeEditFN(List amApplyList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < amApplyList.size(); i++) {      AmApply amApply = (AmApply) amApplyList.get(i);      try {        amApplyService.auditForAmApply(amApply);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(amApply.getAmApplyId());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的拨款申请审核失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 批量删除   */  public void deleteForAmBpAeEditFN(List amApplyList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < amApplyList.size(); i++) {      AmApply amApply = (AmApply) amApplyList.get(i);      try {        int num = amApplyService.deleteForAmApply(amApply);        if (num == 0) {          errorInfo.append(": ");          errorInfo.append(amApply.getAmApplyId());          errorInfo.append("已被删除");          fail = true;        }      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(amApply.getAmApplyId());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的拨款申请删除失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 填写意见审核通过   */  public void auditForAmBpAeEditFN(List amApplyList, String opinion, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < amApplyList.size(); i++) {      AmApply amApply = (AmApply) amApplyList.get(i);      try {        amApplyService.auditForAmApply(amApply, opinion);      } catch (Exception ex) {        errorInfo.append(": ");        errorInfo.append(amApply.getAmApplyId());        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的拨款申请审核失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 销审   */  public AmApply unAuditForAmBpAeEditFN(AmApply amApply, RequestMeta requestMeta) {    return amApplyService.unAuditForAmApply(amApply);  }  /**   * 批量销审   */  public void unAuditForAmBpAeEditFN(List amApplyList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < amApplyList.size(); i++) {      AmApply amApply = (AmApply) amApplyList.get(i);      try {        amApplyService.unAuditForAmApply(amApply);      } catch (Exception ex) {        errorInfo.append(amApply.getAmApplyId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的拨款申请销审失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 退回   */  public AmApply untreadForAmBpAeEditFN(AmApply amApply, RequestMeta meta) {    return amApplyService.untreadForAmApply(amApply);  }  /**   * 批量退回   */  public void untreadForAmBpAeEditFN(List amApplyList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < amApplyList.size(); i++) {      AmApply amApply = (AmApply) amApplyList.get(i);      try {        amApplyService.untreadForAmApply(amApply);      } catch (Exception ex) {        errorInfo.append(amApply.getAmApplyId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的拨款申请退回失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 作废   */  public void blankoutForAmBpAeEditFN(AmApply amApply, RequestMeta requestMeta) {    this.amApplyService.blankoutForAmApply(amApply);  }  /**   * 批量作废   */  public void blankoutForAmBpAeEditFN(List amApplyList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < amApplyList.size(); i++) {      AmApply amApply = (AmApply) amApplyList.get(i);      try {        amApplyService.blankoutForAmApply(amApply);      } catch (Exception ex) {        errorInfo.append(amApply.getAmApplyId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的拨款申请作废失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 收回   */  public void callbackForAmBpAeEditFN(AmApply amApply, RequestMeta requestMeta) {    this.amApplyService.callbackForAmApply(amApply);  }  /**   * 批量收回   */  public void callbackForAmBpAeEditFN(List amApplyList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < amApplyList.size(); i++) {      AmApply amApply = (AmApply) amApplyList.get(i);      try {        amApplyService.callbackForAmApply(amApply);      } catch (Exception ex) {        errorInfo.append(amApply.getAmApplyId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的拨款申请收回失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public List getAmApplyForAmPafpv(ElementConditionDto dto, RequestMeta requestMeta) {    return amApplyService.getAmApplyForAmPafpv(dto);  }  public String AmApplyCreateAmVoucher(String coCode, List amApplyList, int nd, User user,  BankAccount payBankAccount, Date createDate, String isSum, RequestMeta requestMeta) {    return amApplyService.AmApplyCreateAmVoucher(coCode, amApplyList, nd, user, payBankAccount, createDate,    isSum);  }  public String AmApplyCreateAmVoucher(List amApplyList, Date createDate, String isSum,  RequestMeta requestMeta) {    return amApplyService.AmApplyCreateAmVoucher(amApplyList, createDate, isSum);  }  public void increasePrintTimes(List amApplyIdList, RequestMeta requestMeta) {    amApplyService.increasePrintTimes(amApplyIdList);  }  public List getAmApplyForAmApplyQueryList(ElementConditionDto dto, RequestMeta requestMeta) {    return amApplyService.getAmApplyForAmApplyQueryList(dto);  }  public List getAmApplyForProvider(ElementConditionDto dto, RequestMeta meta) {    return this.amApplyService.getAmApplyForProvider(dto);  }  public String blankOutApply(Map map, RequestMeta requestMeta) {    return this.amApplyService.blankOutApply(map);  }  public void cancelSumAmApplyFN(List amApplyList, RequestMeta requestMeta) {    this.amApplyService.cancelSumAmApply(amApplyList);  }  public void sumAmApplyFN(List amApplyList, RequestMeta requestMeta) {    this.amApplyService.sumAmApply(amApplyList);  }  public List getAmApplyBySumAmApplyId(String sumAmApplyId, RequestMeta meta) {    return this.amApplyService.getAmApplyBySumAmApplyId(sumAmApplyId);  }  public PrintObject genSumMainSubPrintObjectFN(List printList, RequestMeta requestMeta) {    return this.amApplyService.genSumMainSubPrintObject(printList);  }  private IAmSpecialAccountService amSpecialAccountService;  public List getSpecialAccount(ElementConditionDto dto, RequestMeta requestMeta) {    return amSpecialAccountService.getSpecialAccount(dto, requestMeta);  }  public IAmSpecialAccountService getAmSpecialAccountService() {    return amSpecialAccountService;  }  public void setAmSpecialAccountService(IAmSpecialAccountService amSpecialAccountService) {    this.amSpecialAccountService = amSpecialAccountService;  }  public void updateAmApplyReceInfo(List amApplyList, RequestMeta requestMeta) {    this.amApplyService.updateAmApplyReceInfo(amApplyList);  }  public void updateProcDateForAmBpAeEditFN(List amApplyList, RequestMeta requestMeta) {    this.amApplyService.updateProcDateForAmBpAeEdit(amApplyList);  }}