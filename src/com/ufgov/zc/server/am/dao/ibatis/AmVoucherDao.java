package com.ufgov.zc.server.am.dao.ibatis;import java.sql.SQLException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.orm.ibatis.SqlMapClientCallback;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;import com.ibatis.sqlmap.client.SqlMapExecutor;import com.ufgov.zc.common.am.model.AmVoucher;import com.ufgov.zc.common.commonbiz.util.DpBalanceViewGetter;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.DaoException;import com.ufgov.zc.server.am.dao.IAmVoucherDao;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.system.util.OrderColumnsUtil;public class AmVoucherDao extends SqlMapClientDaoSupport implements IAmVoucherDao {  public AmVoucher insertAmVoucher(AmVoucher amVoucher) {    return (AmVoucher) this.getSqlMapClientTemplate().insert("AmVoucher.insertAmVoucher", amVoucher);  }  public int deleteAmVoucher(AmVoucher amVoucher) {    return this.getSqlMapClientTemplate().delete("AmVoucher.deleteAmVoucherById", amVoucher.getAmVoucherId());  }  public int updateAmVoucher(AmVoucher amVoucher) {    return this.getSqlMapClientTemplate().update("AmVoucher.updateAmVoucher", amVoucher);  }  public List getAmVoucher(ElementConditionDto dto, RequestMeta requestMeta) {    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(dto.getCompoId()));    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(), NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList("AmVoucher.getAmVoucher", dto);  }  public List getAmVoucherForSum(ElementConditionDto dto, RequestMeta requestMeta) {    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(dto.getCompoId()));    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(), NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList("AmVoucher.getAmVoucherForSum", dto);  }  public List getAmVoucherForNewSum(ElementConditionDto dto, RequestMeta requestMeta) {    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(dto.getCompoId()));    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(), NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList("AmVoucher.getAmVoucherForNewSum", dto);  }  public List getAmVoucherBySumAmVoucherId(String amVoucherId) {    Map param = new HashMap();    param.put("sumAmVoucherId", amVoucherId);    return this.getSqlMapClientTemplate().queryForList("AmVoucher.getAmVoucherBySumAmVoucherId", param);  }  public List getAmVoucherByIdList(List idList) {    if (idList.isEmpty()) {      return new ArrayList();    }    Map param = new HashMap();    param.put("amVoucherIdList", idList);    return this.getSqlMapClientTemplate().queryForList("AmVoucher.getAmVoucherByIdList", param);  }  public List getAmVoucherForAmPvmDp(ElementConditionDto dto) {    dto.setDpBalanceMonthView(DpBalanceViewGetter.getMonthView(dto.getMonth()));    //    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("AmVoucher.getAmVoucherForAmPvmDp", dto);  }  public List getAmVoucherForAmPvmDpEditN(ElementConditionDto dto) {    //    dto.setDpBalanceMonthView(DpBalanceViewGetter.getMonthView(dto.getMonth()));    //    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("AmVoucher.getAmVoucherForAmPvmDpEditN", dto);  }  public List getAmVoucherForAmPvmBiEdit(ElementConditionDto dto) {    //    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("AmVoucher.getAmVoucherForAmPvmBiEdit", dto);  }  public List getAmVoucherForAmPvmDpAudit(ElementConditionDto dto) {    //    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("AmVoucher.getAmVoucherForAmPvmDpAudit", dto);  }  public List getAmVoucherForAmPvmBiAudit(ElementConditionDto dto) {    //    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("AmVoucher.getAmVoucherForAmPvmBiAudit", dto);  }  public List getAmVoucherForAmDv(ElementConditionDto eleConditionDto) {    //    eleConditionDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("AmVoucher.getAmVoucherForAmDvList", eleConditionDto);  }  public List getAmVoucherForAmVoucherQueryList(ElementConditionDto elementDto, RequestMeta requestMeta) {    elementDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(elementDto.getNumLimCompoId(), NumLimConstants.FWATCH));    //    elementDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("AmVoucher.getAmVoucherForAmVoucherQueryList", elementDto);  }  public void updateAmVoucherPayInfo(AmVoucher amVoucher) {    this.getSqlMapClientTemplate().update("AmVoucher.updateAmVoucherPayInfo", amVoucher);  }  public List getAmVoucherSumDetailById(String amVoucherId) {    Map map = new HashMap();    map.put("amVoucherId", amVoucherId);    map.put("orderColumns", OrderColumnsUtil.getInstance().getOrderColumns("AM_PVM_SUM"));    return this.getSqlMapClientTemplate().queryForList("AmVoucher.getAmVoucherSumDetailById", map);  }  public void auditForAmVouApplyAudit(AmVoucher amVoucher) {    Map map = new HashMap();    map.put("aStatueCode", "3");    map.put("amVoucherId", amVoucher.getAmVoucherId());    map.put("adate", amVoucher.getAdate());    this.getSqlMapClientTemplate().update("AmVoucher.updateAstatusCodeAndDealState", map);  }  public void depassForAmVouApplyAudit(AmVoucher amVoucher) {    Map map = new HashMap();    map.put("aStatueCode", "0");    map.put("amVoucherId", amVoucher.getAmVoucherId());    this.getSqlMapClientTemplate().update("AmVoucher.updateAstatusCodeAndDealState", map);  }  public String uncreateAmVoucher(String amVoucherIds, String isSum) {    Map map = new HashMap();    map.put("amVoucherIds", amVoucherIds);    map.put("isSum", isSum);    map.put("rtnStr", "");    this.getSqlMapClientTemplate().insert("AmVoucher.uncreateAmVoucher", map);    return (String) map.get("rtnStr");  }  public AmVoucher getAmVoucherById(String amVoucherId) {    Object obj = this.getSqlMapClientTemplate().queryForObject("AmVoucher.getAmVoucherById", amVoucherId);    if (obj != null) {      return (AmVoucher) obj;    } else {      return null;    }  }  public int deleteAmVoucherById(String amVoucherId) {    return this.getSqlMapClientTemplate().delete("AmVoucher.deleteAmVoucherById", amVoucherId);  }  public void increasePrintTimes(List amVoucherIdList) {    Map map = new HashMap();    if (amVoucherIdList.size() == 0) {      throw new DaoException("increasePrintTimes的参数amVoucherIdList为空");    }    map.put("amVoucherIdList", amVoucherIdList);    this.getSqlMapClientTemplate().update("AmVoucher.increasePrintTimes", map);  }  public List getAmVoucherSumDetailByIdList(List amVoucherIdList) {    if (amVoucherIdList.size() == 0) {      throw new DaoException("getAmVoucherSumDetailByIdList的参数amVoucherIdList为空");    }    Map map = new HashMap();    map.put("amVoucherIdList", amVoucherIdList);    map.put("orderColumns", OrderColumnsUtil.getInstance().getOrderColumns("AM_PVM_SUM"));    return this.getSqlMapClientTemplate().queryForList("AmVoucher.getAmVoucherSumDetailByIdList", map);  }  public List getAmVoucherForAmVoucherResponse(ElementConditionDto dto, RequestMeta requestMeta) {    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(dto.getCompoId()));    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(), NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList("AmVoucher.getAmVoucherForAmVoucherResponse", dto);  }  public String responseAmVoucher(String dealState, List amVoucherIds) {    Map map = new HashMap();    map.put("dealState", dealState);    map.put("amVoucherIds", amVoucherIds);    if ("0".equals(dealState)) {      List list = this.getSqlMapClientTemplate().queryForList("AmVoucher.getIsGlVou", map);//是否记账      if (!list.isEmpty()) {        throw new DaoException("以下" + list.size() + "条拨款凭证已经记账,不能取消！\n" + list.toString());      }    }    this.getSqlMapClientTemplate().insert("AmVoucher.updateResponseAmVoucherDealState", map);    return (String) map.get("rtnStr");  }  public void insertAmVoucher(final List amVoucherList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < amVoucherList.size(); i++) {          executor.insert("AmVoucher.insertAmVoucher", amVoucherList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public void updateSumAmVoucherId(final List amVoucherList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < amVoucherList.size(); i++) {          executor.update("AmVoucher.updateSumAmVoucherId", amVoucherList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public void deleteAmVoucher(final List amVoucherList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < amVoucherList.size(); i++) {          executor.delete("AmVoucher.deleteAmVoucherById", amVoucherList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public void setSumAmVoucherIdNull(final List amVoucherList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < amVoucherList.size(); i++) {          executor.update("AmVoucher.setSumAmVoucherIdNull", amVoucherList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public void updateExpoTimes(final List amVoucherList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        AmVoucher voucher = null;        String voucherId = "";        for (int i = 0; i < amVoucherList.size(); i++) {          voucher = (AmVoucher) amVoucherList.get(i);          voucherId = voucher.getAmVoucherId();          executor.update("AmVoucher.updateExpoTimes", voucherId);        }        executor.executeBatch();        return null;      }    });  }  public void updateVoucherGroupDealState(Map params) {    this.getSqlMapClientTemplate().update("AmVoucher.updateVoucherGroupDealState", params);  }  public void updateExpoTipsTimes(final List amVoucherList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        AmVoucher voucher = null;        String voucherId = "";        for (int i = 0; i < amVoucherList.size(); i++) {          voucher = (AmVoucher) amVoucherList.get(i);          voucherId = voucher.getAmVoucherId();          executor.update("AmVoucher.updateExpoTipsTimes", voucherId);        }        executor.executeBatch();        return null;      }    });  }  public void updateAmVoucherForAudit(AmVoucher amVoucher) {    this.getSqlMapClientTemplate().update("AmVoucher.updateAmVoucherForAudit", amVoucher);  }  public int updateAmVoucherFieldValueById(String fieldName, String fieldValue, String amVoucherId) {    Map map = new HashMap();    map.put("fieldName", fieldName);    map.put("fieldValue", fieldValue);    map.put("amVoucherId", amVoucherId);    return this.getSqlMapClientTemplate().update("AmVoucher.updateAmVoucherFieldValueById", map);  }  public int updateAmVoucherForUndo(String isValid, String amVoucherId) {    Map map = new HashMap();    map.put("isValid", isValid);    map.put("amVoucherId", amVoucherId);    return this.getSqlMapClientTemplate().update("AmVoucher.updateAmVoucherForUndo", map);  }}