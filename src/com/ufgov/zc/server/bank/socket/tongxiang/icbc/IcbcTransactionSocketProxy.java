package com.ufgov.zc.server.bank.socket.tongxiang.icbc;import java.io.OutputStream;import java.math.BigDecimal;import java.util.Date;import java.util.HashMap;import java.util.Map;import com.ufgov.zc.common.am.model.AmVoucher;import com.ufgov.zc.common.commonbiz.model.AutheInfo;import com.ufgov.zc.common.commonbiz.model.BaseBill;import com.ufgov.zc.common.cp.model.CpVoucher;import com.ufgov.zc.common.system.constants.SocketConstants;import com.ufgov.zc.common.system.exception.AutheException;import com.ufgov.zc.common.system.model.ResultInfo;import com.ufgov.zc.common.system.util.DateUtil;public class IcbcTransactionSocketProxy extends AbstractIcbcSocketProxy {  public IcbcTransactionSocketProxy() {    super();  }  public IcbcTransactionSocketProxy(Map prop) {    super(prop);  }  public void beforeDealBusinessObject(Object businessObject) throws Exception {    //TODO：IcbcGetDataTmpSocketProxy的prop可能与TransactionSocketProxy的不同    AutheInfo autheInfo = this.getAutheInfo();    if (autheInfo == null) {      throw new AutheException("Usb_Key认证信息为空");    }  }  public String handleSendMessage(Object businessObject, OutputStream output) throws Exception {    // TODO Auto-generated method stub    BaseBill voucher = (BaseBill) businessObject;    String plainText = this.getAutheInfo().getPlainText();    String signData = this.getAutheInfo().getSignData();    String resultStr = "0000000000";    resultStr += plainText.length() + 7 + signData.length();//明文长度 + 7 + 密文长度    resultStr = resultStr.substring(resultStr.length() - 10);    resultStr += plainText;    resultStr += "ICBCCMP";    resultStr += signData;//message = 10位长度(前补零) + 明文(xml) + ICBCCMP + 密文    //Integer buffersize = (Integer) this.getSocketProp().get(SocketConstants.SEND_BUFFER_SIZE);    //buffersize = buffersize == null ? new Integer(1024) : buffersize;    //工行全包发送    String charset = (String) this.getProperty("charset");    charset = charset == null ? "gb2312" : charset;    Integer buffersize = new Integer(resultStr.getBytes(charset).length);    this.sendMessageInfo(resultStr, buffersize.intValue(), output);    return resultStr;  }  public void afterDealBusinessObject(Object businessObject, ResultInfo resultInfo) throws Exception {    System.out.println("it is after ccb transaction");    BaseBill voucher = (BaseBill) businessObject;    String returnCode = resultInfo.getResultCode();    Map params = new HashMap();    if (SocketConstants.SUCCESS.equals(returnCode)) {      //支付交易成功      //TODO:更新凭证数据的状态      params.put("dealState", "3");      this.updateVoucherGroupState(params, voucher);    } else if (SocketConstants.MESSAGE_STRUCTURE_EXCEPTION.equals(returnCode)    || SocketConstants.UNCERTAINTY.equals(returnCode) || SocketConstants.OTHER_EXCEPTION.equals(returnCode)) {      //报文结构不正确、服务器端返回不确定错误、操作的未名错误，都将通过银行提供的查询接口进行查询确定      //6 为状态不确定      params.put("dealState", "6");      this.updateVoucherGroupState(params, voucher);    }  }  public String parseToXml(Object v) throws Exception {    // TODO Auto-generated method stub    BaseBill voucher = (BaseBill) v;    AutheInfo autheInfo = this.getAutheInfo();    //检查认证信息的完整性    this.checkAutheInfo();    String vouNo = "";    Date procDate = null;    String balModel = "";    String operType = "";    if (voucher instanceof CpVoucher) {      vouNo = ((CpVoucher) voucher).getCpVouNo();      procDate = ((CpVoucher) voucher).getProcdate();      balModel = ((CpVoucher) voucher).getBalModeCode();      operType = ((CpVoucher) voucher).getOperationTypeCode();    } else if (voucher instanceof AmVoucher) {      vouNo = ((AmVoucher) voucher).getVouNo();      procDate = ((AmVoucher) voucher).getProcDate();      balModel = ((AmVoucher) voucher).getBalModeCode();      operType = ((AmVoucher) voucher).getOperationTypeCode();    }    StringBuffer buffer = new StringBuffer();    buffer.append("<?xml version=\"1.0\" encoding=\"GB2312\" standalone=\"yes\"?>");    buffer.append("<MESSAGE>");    buffer.append("<TRXCODE>CZGH9300</TRXCODE>");    buffer.append("<AUTHE_INFO>");    buffer.append("<ORIGUSERINFO>" + autheInfo.getOrigUserInfo() + "</ORIGUSERINFO>");    buffer.append("<USERINFO>" + autheInfo.getUserInfo() + "</USERINFO>");    buffer.append("<DATATMP>" + autheInfo.getDataTmp() + "</DATATMP>");    buffer.append("<DATETIME>" + autheInfo.getDateTime() + "</DATETIME>");    buffer.append("<CERINFO>" + autheInfo.getCerInfo() + "</CERINFO>");    buffer.append("<PUBLICKEY>" + autheInfo.getPublicKey() + "</PUBLICKEY>");    buffer.append("<KEYINFO>" + autheInfo.getKeyInfo() + "</KEYINFO>");    buffer.append("</AUTHE_INFO>");    buffer.append("<VOUINFO>");    buffer.append("<VOUTYPE>" + voucher.getPaytypeCode() + "</VOUTYPE>");    if (vouNo == null) {      throw new IllegalArgumentException("财政系统中凭证编号为空");    }    buffer.append("<VOUNO>" + vouNo + "</VOUNO>");    if (procDate == null) {      throw new IllegalArgumentException("财政系统中凭证日期为空");    }    buffer.append("<VOUDATE>" + DateUtil.dateToDdString(procDate) + "</VOUDATE>");    String coCode = voucher.getCoCode();    if (coCode == null)      throw new IllegalArgumentException("财政系统中预算单位编号为空");    buffer.append("<COCODE>" + coCode + "</COCODE>");    String coName = voucher.getCoName();    if (coName == null) {      throw new IllegalArgumentException("财政系统中预算单位名称为空");    }    buffer.append("<CONAME>" + coName + "</CONAME>");    String fundCode = voucher.getFundCode();    if (fundCode == null)      throw new IllegalArgumentException("资金性质为空!");    fundCode = fundCode.substring(1, 2);    fundCode = "1".equals(fundCode) ? fundCode : "2";    buffer.append("<FUNDCODE>" + fundCode + "</FUNDCODE>");    buffer.append("<FUNDNAME>" + voucher.getFundName() + "</FUNDNAME>");    String baccCode = voucher.getBaccCode();    if (baccCode == null)      throw new IllegalArgumentException("预算科目代码为空!");    buffer.append("<BACCCODE>" + baccCode + "</BACCCODE>");    String baccName = voucher.getBaccName();    if (baccName == null) {      throw new IllegalArgumentException("预算科目名称为空!");    }    buffer.append("<BACCNAME>" + baccName + "</BACCNAME>");    buffer.append("<PROJECTCODE>" + voucher.getProjectCode() + "</PROJECTCODE>");    buffer.append("<PROJECTNAME>" + voucher.getProjectName() + "</PROJECTNAME>");    String payBankAccCode = voucher.getPayBankAccCode();    if (payBankAccCode == null)      throw new IllegalArgumentException("付款账号为空!");    buffer.append("<PAYBANKACCCODE>" + payBankAccCode + "</PAYBANKACCCODE>");    String payBankName = voucher.getPayBankNodeName();    if (payBankName == null) {      throw new IllegalArgumentException("付款银行名称为空!");    }    buffer.append("<PAYBANKNAME>" + payBankName + "</PAYBANKNAME>");    String payAccName = voucher.getPayAccName();    if (payAccName == null) {      throw new IllegalArgumentException("付款人开户名称为空");    }    buffer.append("<PAYACCNAME>" + payAccName + "</PAYACCNAME>");    String receBankAccCode = voucher.getReceBankAccCode();    //    if (receBankAccCode == null)    //      throw new IllegalArgumentException("支付交易的收款帐号!");    receBankAccCode = receBankAccCode == null ? "" : receBankAccCode;    buffer.append("<RECEBANKACCCODE>" + receBankAccCode + "</RECEBANKACCCODE>");    String receBankName = voucher.getReceBankNodeName();    //    if (receBankName == null) {    //      throw new IllegalArgumentException("支付交易的银行名称为空");    //    }    receBankName = receBankName == null ? "" : receBankName;    buffer.append("<RECEBANKNAME>" + receBankName + "</RECEBANKNAME>");    String receAccName = voucher.getReceAccName();    if (receAccName == null) {      throw new IllegalArgumentException("收款人开户名称");    }    buffer.append("<RECEACCNAME>" + receAccName + "</RECEACCNAME>");    BigDecimal curMoney = voucher.getCurMoney();    curMoney = curMoney.setScale(2, BigDecimal.ROUND_HALF_UP);    buffer.append("<CURMONEY>" + curMoney.toString() + "</CURMONEY>");    if (balModel == null) {      balModel = "";    } else {      balModel = balModel.substring(1, 2);    }    buffer.append("<BALMODECODE>" + balModel + "</BALMODECODE>");    if (operType == null) {      throw new IllegalArgumentException("业务类型为空!");    }    buffer.append("<OPERATYPECODE>" + operType + "</OPERATYPECODE>");    buffer.append("<REMARK>" + voucher.getRemark() + "</REMARK>");    String dattr5 = voucher.getDattr5();    dattr5 = dattr5 == null ? "" : dattr5;    buffer.append("<BANKSEQU>" + dattr5 + "</BANKSEQU>");    buffer.append("</VOUINFO>");    buffer.append("</MESSAGE>");    return buffer.toString();  }}