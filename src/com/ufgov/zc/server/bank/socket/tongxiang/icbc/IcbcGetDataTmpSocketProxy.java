package com.ufgov.zc.server.bank.socket.tongxiang.icbc;import java.io.InputStream;import java.util.Map;import org.dom4j.Document;import org.dom4j.DocumentException;import com.ufgov.zc.common.commonbiz.model.AutheInfo;import com.ufgov.zc.common.system.constants.SocketConstants;import com.ufgov.zc.common.system.exception.MessageStructureException;import com.ufgov.zc.common.system.model.ResultInfo;import com.ufgov.zc.common.system.util.XmlUtils;public class IcbcGetDataTmpSocketProxy extends AbstractIcbcSocketProxy {  public IcbcGetDataTmpSocketProxy() {    super();  }  public IcbcGetDataTmpSocketProxy(Map prop) {    super(prop);  }  /**   * 获取工行服务器端送回的随机数   */  public ResultInfo handleReceiveMessage(Object businessObject, InputStream input) throws Exception {    ResultInfo result = new ResultInfo();    try {      Integer buffersize = (Integer) this.getSocketProp().get(SocketConstants.RECE_BUFFER_SIZE);      buffersize = buffersize == null ? new Integer(1024) : buffersize;      String message = this.receiveMessageInfo(input, buffersize);      result.setOriginalMessage(message);      Document doc = XmlUtils.parse(message);      String returnCode = XmlUtils.evaluate("//MESSAGE/RETURNCODE", doc);      returnCode = returnCode.trim();      String returnMess = XmlUtils.evaluate("//MESSAGE/RETURNMSG", doc);      String tradeFlag = XmlUtils.evaluate("//MESSAGE/MESSINFO/TRADEFLAG", doc);      String desc = XmlUtils.evaluate("//MESSAGE/MESSINFO/DESC", doc);      if (SocketConstants.SUCCESS.equals(returnCode)) {        result.setResultCode(SocketConstants.SUCCESS);        result.setTradeFlag(tradeFlag);        result.setDesc(desc);        String dataTmp = XmlUtils.evaluate("//MESSAGE/MESSINFO/DATATMP", doc);        String dateTime = XmlUtils.evaluate("//MESSAGE/MESSINFO/DATETIME", doc);        result.put("DATATMP", dataTmp);//存入随机数        result.put("DATETIME", dateTime);//存入系统时间      } else if (SocketConstants.FAILURE.equals(returnCode)) {        result.setResultCode(SocketConstants.FAILURE);      }      result.setResultMessage(returnMess);      return result;    } catch (DocumentException ex) {      throw new MessageStructureException(ex.getMessage(), ex);    }  }  public String parseToXml(Object businessObject) throws Exception {    // TODO Auto-generated method stub    AutheInfo authe = this.getAutheInfo();    StringBuffer buffer = new StringBuffer();    buffer.append("<?xml version=\"1.0\" encoding=\"GB2312\" standalone=\"yes\" ?>");    buffer.append("<MESSAGE>");    buffer.append("<TRXCODE>CZGH9200</TRXCODE>");    buffer.append("<AUTHE_INFO>");    buffer.append("<ORIGUSERINFO>" + authe.getOrigUserInfo() + "</ORIGUSERINFO>");    buffer.append("<USERINFO>" + authe.getUserInfo() + "</USERINFO>");    buffer.append("</AUTHE_INFO>");    buffer.append("</MESSAGE>");    return buffer.toString();  }}