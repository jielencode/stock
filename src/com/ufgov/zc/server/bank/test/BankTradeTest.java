package com.ufgov.zc.server.bank.test;/*package com.ufgov.gk.server.bank.test;

public class BankTradeTest extends MytestCase {  public void testBankTradeTest() {    if (true) return;    try {//      IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(//        IBaseDataServiceDelegate.class, "baseDataServiceDelegate");//      BankUtil.fillCcbAutheInfo(autheInfo);//      ResultInfo result = baseDataServiceDelegate.testTrade(autheInfo, null, BankUtil.JH_TYPE_CODE, WorkEnv.getInstance()//        .getRequestMeta());//      System.out.println(result.getResultCode());//      System.out.println(result.getResultMessage());    } catch (Exception ex) {      ex.printStackTrace();    }  }    public void testGetData() {    if (false) return;    try {//      IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(//        IBaseDataServiceDelegate.class, "baseDataServiceDelegate");//      ResultInfo info = baseDataServiceDelegate.icbcGetDataTrade(autheInfo, WorkEnv.getInstance().getRequestMeta());//      System.out.println(info.getResultCode());//      System.out.println(info.getResultMessage());//      System.out.println(info.get("DATATMP"));//      System.out.println(info.get("DATETIME"));    } catch (Exception ex) {      ex.printStackTrace();    }  }    public void testTransaction() {//    if (true) return;//    try {//      IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(//        IBaseDataServiceDelegate.class, "baseDataServiceDelegate");//      BankUtil.fillCcbAutheInfo(autheInfo);//      ResultInfo result = baseDataServiceDelegate.payTrade(autheInfo, this.voucher, BankUtil.GH_TYPE_CODE, WorkEnv.getInstance().getRequestMeta());//    } catch (Exception ex) {//      ex.printStackTrace();//    }  }    public void testQuery() {//    if (true) return;//    try {//      IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(//        IBaseDataServiceDelegate.class, "baseDataServiceDelegate");//      BankUtil.fillCcbAutheInfo(autheInfo);//      ResultInfo result = baseDataServiceDelegate.queryTrade(autheInfo, this.voucher, BankUtil.GH_TYPE_CODE, WorkEnv.getInstance().getRequestMeta());//    } catch (Exception ex) {//      ex.printStackTrace();//    }  }}*/