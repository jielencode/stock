package com.ufgov.zc.server.jj.dao.ibatis;import java.math.BigDecimal;import java.sql.SQLException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.orm.ibatis.SqlMapClientCallback;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;import com.ibatis.sqlmap.client.SqlMapExecutor;import com.ufgov.zc.common.jj.model.JjPlan;import com.ufgov.zc.common.jj.model.JjPlanDetail;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.DaoException;import com.ufgov.zc.server.jj.dao.IJjPlanDao;public class JjPlanDao extends SqlMapClientDaoSupport implements IJjPlanDao {  public List getJjPlan(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("JjPlan.getJjPlan", dto);  }  public List getJjPlanForEdit(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("JjPlan.getJjPlanForEdit",    dto);  }  public List getJjPlanForAudit(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("JjPlan.getJjPlanForAudit",    dto);  }  public void insertJjPlan(JjPlan jjPlan) {    this.getSqlMapClientTemplate().insert("JjPlan.insertJjPlan", jjPlan);  }  public JjPlan getJjPlanByOid(String oid) {    return (JjPlan) this.getSqlMapClientTemplate().queryForObject(    "JjPlan.getJjPlanByOid", oid);  }  public List getJjPlanDetailByJjPlanOid(String oid) {    return this.getSqlMapClientTemplate().queryForList(    "JjPlan.getJjPlanDetailByJjPlanOid", oid);  }  public void insertJjPlanDetail(JjPlanDetail jjPlanDetail) {    this.getSqlMapClientTemplate().insert("JjPlan.insertJjPlanDetail", jjPlanDetail);  }  public void insertJjPlanDetail(final List jjPlanDetailList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < jjPlanDetailList.size(); i++) {          executor.insert("JjPlan.insertJjPlanDetail", jjPlanDetailList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public void updateJjPlanDetail(final List jjPlanDetailList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < jjPlanDetailList.size(); i++) {          executor.insert("JjPlan.updateJjPlanDetail", jjPlanDetailList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public JjPlanDetail getJjPlanDetailByOid(String oid) {    return (JjPlanDetail) this.getSqlMapClientTemplate().queryForObject(    "JjPlan.getJjPlanDetailByOid", oid);  }  public JjPlanDetail getJjPlanDetailByOidForUpdate(String oid) {    return (JjPlanDetail) this.getSqlMapClientTemplate().queryForObject(    "JjPlan.getJjPlanDetailByOidForUpdate", oid);  }  public List getJjPlanDetailByOidList(List oidList) {    if (oidList.size() == 0) {      return new ArrayList();    }    Map params = new HashMap();    params.put("oidList", oidList);    return this.getSqlMapClientTemplate().queryForList(    "JjPlan.getJjPlanDetailByOidList", params);  }  public void deleteJjPlanDetail(final List jjPlanDetail) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < jjPlanDetail.size(); i++) {          executor.delete("JjPlan.deleteJjPlanDetail", jjPlanDetail.get(i));          executor.delete("JjPlan.updateJjPlanMoney", jjPlanDetail.get(i));        }        executor.executeBatch();        return null;      }    });  }  public void deleteJjPlan(JjPlan jjPlan) {    this.getSqlMapClientTemplate().delete("JjPlan.deleteJjPlan", jjPlan);  }  public void updateJjPlanDetail(JjPlanDetail jjPlanDetail) {    this.getSqlMapClientTemplate().update("JjPlan.updateJjPlanDetail", jjPlanDetail);  }  public void updateJjPlan(JjPlan jjPlan) {    this.getSqlMapClientTemplate().update("JjPlan.updateJjPlan", jjPlan);  }  public void updateJjPlanFinishStatus(JjPlan jjPlan) {    this.getSqlMapClientTemplate().update("JjPlan.updateJjPlanFinishStatus", jjPlan);  }  public void updateJjPlanEffectStatus(JjPlan jjPlan) {    this.getSqlMapClientTemplate().update("JjPlan.updateJjPlanEffectStatus", jjPlan);  }  public List getJjPlan(String projectName, String coCode) {    Map params = new HashMap();    params.put("projectName", projectName);    params.put("coCode", coCode);    return this.getSqlMapClientTemplate().queryForList("JjPlan.getJjPlanByProjectName", params);  }  public void increasePrintTimes(List idList) {    Map map = new HashMap();    if (idList.size() == 0) {      throw new DaoException("increasePrintTimes的参数idList为空");    }    map.put("idList", idList);    this.getSqlMapClientTemplate().update("JjPlan.increasePrintTimes", map);  }  public void updateSumEffectMoney(final List deList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < deList.size(); i++) {          executor.delete("JjPlan.updateSumEffectMoney", deList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public void updateSumPayMoney(String jjPlanDetailOid, BigDecimal payMoney) {    Map params = new HashMap();    params.put("oid", jjPlanDetailOid);    params.put("payMoney", payMoney);    this.getSqlMapClientTemplate().update("JjPlan.updateSumPayMoney", params);  }  public void updateSumEffectMoney(JjPlanDetail de) {    this.getSqlMapClientTemplate().update("JjPlan.updateSumEffectMoney", de);  }  public void updateJjPlanAStatusForUnaudit(JjPlan jjPlan) {    this.getSqlMapClientTemplate().update("JjPlan.updateJjPlanAStatusForUnaudit", jjPlan);  }}