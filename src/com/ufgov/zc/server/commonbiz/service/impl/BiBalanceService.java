package com.ufgov.zc.server.commonbiz.service.impl;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.StringWriter;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Calendar;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.tools.zip.ZipEntry;import org.apache.tools.zip.ZipOutputStream;import org.apache.velocity.VelocityContext;import org.apache.velocity.app.Velocity;import com.ufgov.zc.common.bi.model.BiCarryReviewResult;import com.ufgov.zc.common.commonbiz.dto.BiCdMoneyCheck;import com.ufgov.zc.common.commonbiz.model.BiBalance;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.dto.PrintObject;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.server.commonbiz.dao.IBiBalanceDao;import com.ufgov.zc.server.commonbiz.service.IBiBalanceService;import com.ufgov.zc.server.system.print.PrintManager;import com.ufgov.zc.server.system.util.EnvironmentConfigUtil;public class BiBalanceService implements IBiBalanceService {  private static String CARRYDOWN_DOC_FILE_NAME_SERVER = "carrydown_hasgenerated";  private IBiBalanceDao biBalanceDao;  public IBiBalanceDao getBiBalanceDao() {    return biBalanceDao;  }  public void setBiBalanceDao(IBiBalanceDao biBalanceDao) {    this.biBalanceDao = biBalanceDao;  }  public List getBiBalance(ElementConditionDto dto) {    return biBalanceDao.getBiBalance(dto);  }  public List getAllBiBalanceByDto(ElementConditionDto dto) {    return biBalanceDao.getAllBiBalanceByDto(dto);  }  public List getBiBalanceInfo(ElementConditionDto dto) {    return biBalanceDao.getBiBalanceInfo(dto);  }  public List getBiBalanceForCd(ElementConditionDto dto) {    List list = biBalanceDao.getBiBalanceForCd(dto);    return list;  }  public BiBalance getBiBalanceById(String id) {    return biBalanceDao.getBiBalanceById(id);  }  public int updateBiBalanceForDpAdjust(BigDecimal adjustMoney, String biBalanceId) {    return biBalanceDao.updateBiBalanceForDpAdjust(adjustMoney, biBalanceId);  }  public List getBiBalanceForAm(ElementConditionDto dto) {    return this.biBalanceDao.getBiBalanceForAm(dto);  }  public List getBiBalanceForAmPvmDpEdit(ElementConditionDto dto) {    return this.biBalanceDao.getBiBalanceForAmPvmDpEdit(dto);  }  public List getBiBalanceForDbiTbi(ElementConditionDto dto) {    return this.biBalanceDao.getBiBalanceForDbiTbi(dto);  }  public void updateBiBalanceForAm(BigDecimal adjustMoney, String biBalanceId) {    this.updateBiBalanceForAm(adjustMoney, biBalanceId);  }  public String updateBiBalanceForPreAmToPay(String biBalanceIds, int nd) {    return this.biBalanceDao.updateBiBalanceForPreAmToPay(biBalanceIds, nd);  }  /**   * 获取结转资金的信息   */  public List getCarryDownInfo(Map params) {    return this.biBalanceDao.getCarryDownInfo(params);  }  /**   * 生成结转资金的批准函   */  public byte[] generateCarryDownDoc(List carryDownInfo, int nd) {    try {      // 测试用      File f = new File("c:/new.rtf");      byte[] template = ObjectUtil.getBytesFromFile(f);      byte[] datas = generateCarryDownDoc(carryDownInfo, template, nd);      return datas;    } catch (IOException ex) {      throw new RuntimeException(ex);    }  }  public byte[] generateCarryDownDoc(List carryDownInfo, byte[] template, int nd) {    try {      byte[] datas = makeZipStream(carryDownInfo, nd, template);      writeGenerateDoc(carryDownInfo, nd);      return datas;    } catch (IOException ex) {      throw new RuntimeException(ex);    }  }  public List getGeneratedDocList(int nd) {    try {      String workpath = EnvironmentConfigUtil.getInstance().get("workpath");      File f = new File(workpath + "/" + CARRYDOWN_DOC_FILE_NAME_SERVER);      if (!f.exists())        return new ArrayList();      Map map = (Map) ObjectUtil.readObject(new FileInputStream(f));      List list = (List) map.get(Integer.toString(nd));      list = list == null ? new ArrayList() : list;      return list;    } catch (Exception ex) {      throw new RuntimeException(ex);    }  }  private void writeGenerateDoc(List carryDownInfo, int nd) {    try {      String workpath = EnvironmentConfigUtil.getInstance().get("workpath");      File dir = new File(workpath);      if (!dir.exists()) {        dir.mkdir();      }      File f = new File(dir, CARRYDOWN_DOC_FILE_NAME_SERVER);      if (!f.exists()) {        f.createNewFile();      }      Map map = null;      if (f.length() > 0) {        map = (Map) ObjectUtil.readObject(new FileInputStream(f));      }      map = map == null ? new HashMap() : map;      List records = (List) map.get(Integer.toString(nd));      records = records == null ? new ArrayList() : records;      Map record = null;      for (int i = 0; i < carryDownInfo.size(); i++) {        record = (Map) carryDownInfo.get(i);        String co_code = (String) record.get("COCODE");        if (!records.contains(co_code)) {          records.add(co_code);        }      }      map.put(Integer.toString(nd), records);      ObjectUtil.writeObject(map, new FileOutputStream(f));    } catch (Exception ex) {      throw new RuntimeException(ex);    }  }  private byte[] makeZipStream(List records, int nd, byte[] template) throws IOException {    File f = null;    FileInputStream fo = null;    byte[] buffer = new byte[255];    try {      f = makeZipFileBuffer(records, nd, template);      fo = new FileInputStream(f);      ByteArrayOutputStream out = new ByteArrayOutputStream();      int offset = 0;      while ((offset = fo.read(buffer)) >= 0) {        out.write(buffer, 0, offset);      }      return out.toByteArray();    } finally {      fo.close();      f.delete();    }  }  private static File makeZipFileBuffer(List records, int nd, byte[] templ) throws IOException {    File tempFile = null;    ZipOutputStream zo = null;    try {      tempFile = File.createTempFile(System.currentTimeMillis() + "", "_carrydown.rtf");      zo = new ZipOutputStream(new FileOutputStream(tempFile));      zo.setEncoding("GBK");      VelocityContext context = null;      Map record = null;      int year = Calendar.getInstance().get(Calendar.YEAR);      int month = Calendar.getInstance().get(Calendar.MONTH);      int day = Calendar.getInstance().get(Calendar.DAY_OF_MONTH);      for (int i = 0; i < records.size(); i++) {        // Reader template = new FileReader(templateStr);        ByteArrayInputStream template = new ByteArrayInputStream(templ);        record = (Map) records.get(i);        context = new VelocityContext();        String coName = (String) record.get("CONAME");        context.put("CONAME", coName);        context.put("ND", new Integer(nd));        context.put("NEXTND", new Integer(nd + 1));        context.put("TOTALMONEY", record.get("TOTALMONEY"));        context.put("CDMONEY", record.get("CDMONEY"));        context.put("YEAR", year + "");        context.put("MONTH", month + 1 + "");        context.put("DAY", day + "");        StringWriter writer = new StringWriter();        Velocity.evaluate(context, writer, "makeOffer", template);        ZipEntry ze = new ZipEntry(coName + ".rtf");        zo.putNextEntry(ze);        zo.write(writer.getBuffer().toString().getBytes());        writer.close();      }      return tempFile;    } finally {      try {        zo.closeEntry();        zo.close();      } catch (Exception ex) {      }    }  }  public void insertBiCarryReviewResult(BiCarryReviewResult biCarryReviewResult) {    boolean success = true;    try {      List list = biBalanceDao.getBiCarryReviewResultBycoCode(biCarryReviewResult.getCoCode(), biCarryReviewResult.getNd());      if (list.size() == 0)        success = false;    } catch (Exception ex) {      success = false;    }    if (success) {      updateForBiCarryReviewResult(biCarryReviewResult.getCoCode(), biCarryReviewResult.getNd());    } else {      insertForBiCarryReviewResult(biCarryReviewResult);    }  }  private void insertForBiCarryReviewResult(BiCarryReviewResult biCarryReviewResult) {    this.biBalanceDao.insertForBiCarryReviewResult(biCarryReviewResult);  }  private void updateForBiCarryReviewResult(String coCode, int nd) {    this.biBalanceDao.updateForBiCarryReviewResult(coCode, nd);  }  public List getBiCarryReviewResult(String coCodeFilter, int nd) {    return this.biBalanceDao.getBiCarryReviewResult(coCodeFilter, nd);  }  public PrintObject genBiCdMoneyCheckPrintObject(String coCode, int nd) {    List checkReportList = this.biBalanceDao.getBiCdMoneyCheck(coCode, nd);    List newCheckReportList = new ArrayList();    for (int i = 0; i < checkReportList.size(); i++) {      BiCdMoneyCheck biCdMoneyCheck = (BiCdMoneyCheck) checkReportList.get(i);      BigDecimal biAggregate = biCdMoneyCheck.getBiSubtotal().add(biCdMoneyCheck.getBiWarrant());      BigDecimal biOther = biCdMoneyCheck.getBiSubtotal().subtract(biCdMoneyCheck.getBiLaborage()).subtract(biCdMoneyCheck.getBiGov());      BigDecimal cpAggregate = biCdMoneyCheck.getCpSubtotal().add(biCdMoneyCheck.getCpWarrant());      BigDecimal cpOther = biCdMoneyCheck.getCpSubtotal().subtract(biCdMoneyCheck.getCpLaborage().subtract(biCdMoneyCheck.getCpGov()));      BigDecimal baLaborage = biCdMoneyCheck.getBiLaborage().subtract(biCdMoneyCheck.getCpLaborage());      BigDecimal baGov = biCdMoneyCheck.getBiGov().subtract(biCdMoneyCheck.getCpGov());      BigDecimal baOther = biOther.subtract(cpOther);      BigDecimal baWarrant = biCdMoneyCheck.getBiWarrant().subtract(biCdMoneyCheck.getCpWarrant());      BigDecimal baSubtotal = baLaborage.add(baGov).add(baOther);      BigDecimal baAggregate = baSubtotal.add(baWarrant);      BigDecimal caLaborage = biCdMoneyCheck.getBiLaborage().subtract(biCdMoneyCheck.getCpLaborage());      BigDecimal caGov = biCdMoneyCheck.getBiGov().subtract(biCdMoneyCheck.getCpGov());      BigDecimal caOther = baOther;      BigDecimal caWarrant = biCdMoneyCheck.getBiWarrant().subtract(biCdMoneyCheck.getCpWarrant());      BigDecimal caSubtotal = caLaborage.add(caGov).add(caOther);      BigDecimal caAggregate = caSubtotal.add(caWarrant);      biCdMoneyCheck.setBiAggregate(biAggregate);      biCdMoneyCheck.setCpAggregate(cpAggregate);      biCdMoneyCheck.setBiOther(biOther);      biCdMoneyCheck.setCpOther(cpOther);      biCdMoneyCheck.setBaAggregate(baAggregate);      biCdMoneyCheck.setBaSubtotal(baSubtotal);      biCdMoneyCheck.setBaLaborage(baLaborage);      biCdMoneyCheck.setBaGov(baGov);      biCdMoneyCheck.setBaOther(baOther);      biCdMoneyCheck.setBaWarrant(baWarrant);      biCdMoneyCheck.setCaAggregate(caAggregate);      biCdMoneyCheck.setCaSubtotal(caSubtotal);      biCdMoneyCheck.setCaLaborage(caLaborage);      biCdMoneyCheck.setCaGov(caGov);      biCdMoneyCheck.setCaOther(caOther);      biCdMoneyCheck.setCaWarrant(caWarrant);      newCheckReportList.add(biCdMoneyCheck);    }    return PrintManager.genMainBillPrintObject(newCheckReportList, "BI_CARRY_REVIEW_FORM");  }  public List getBiBalanceByDto(ElementConditionDto dto) {    return biBalanceDao.getBiBalanceByDto(dto);  }  public List getBiBalanceForDz(ElementConditionDto dto) {    return biBalanceDao.getBiBalanceForDz(dto);  }  public void updateBiBalanceOperateType(List biBalanceIdList, String operateType) {    biBalanceDao.updateBiBalanceOperateType(biBalanceIdList, operateType);  }}