package com.ufgov.zc.server.commonbiz.helper;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.Map;import java.util.Set;import org.apache.log4j.Logger;import com.ufgov.zc.common.bi.model.BiTrack;import com.ufgov.zc.common.commonbiz.model.BiBalance;import com.ufgov.zc.common.system.constants.BillTypeConstants;import com.ufgov.zc.common.system.constants.BusinessOptionConstants;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.server.bi.dao.IBiTrackDao;import com.ufgov.zc.server.commonbiz.dao.IBiBalanceDao;import com.ufgov.zc.server.commonbiz.dao.IBillElementDao;import com.ufgov.zc.server.system.SpringContext;import com.ufgov.zc.server.system.dao.IAsOptionDao;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.util.AutoNum;import com.ufgov.zc.server.system.util.RequestMetaUtil;/** * @author UFGOV * 处理指标审核及产生指标余额记录 */public class BiBalanceUpdateForBiTrack {  private static final Logger logger = Logger.getLogger(BiBalanceUpdateForBiTrack.class);  private static IBiTrackDao biTrackDao = (IBiTrackDao) SpringContext.getBean("biTrackDao");  private static IBiBalanceDao biBalanceDao = (IBiBalanceDao) SpringContext.getBean("biBalanceDao");  private static IBillElementDao billElementDao = (IBillElementDao) SpringContext.getBean("billElementDao");  private static IAsOptionDao asOptionDao = (IAsOptionDao) SpringContext.getBean("asOptionDao");  private static IWorkflowDao workflowDao = (IWorkflowDao) SpringContext.getBean("workflowDao");  private String billTypeCode;  private String compoId;  public BiBalanceUpdateForBiTrack() {  }  public BiBalanceUpdateForBiTrack(String billTypeCode, String compoId) {    this.billTypeCode = billTypeCode;    this.compoId = compoId;  }  /**   * @param biTrack   * @throws BusinessException   * @根据选项回写来源指标余额记录并产生本级指标余额记录   * @如果是保存占余额,则对来源指标余额的修改在保存时完成   * @如果是终审占余额,在此处修改来源指标余额   * @如果是总指标,不作来源指标余额处理   */  public void updateBibalanceForBiTrackEditAudit(BiTrack biTrack) throws BusinessException {    String biBalanceId = null;    String option = BusinessOptionConstants.OPT_CP_BI_TRACK;    boolean isAssign = true;// 如果是总指标则不用更新BI_UPPER_MONEY    BigDecimal diffCurMoney = new BigDecimal("0");    BigDecimal decMoney = biTrack.getCurMoney();    String balFlag = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DECBAL_FLAG_BI).getOptVal();    if ((balFlag.equalsIgnoreCase("1") || decMoney.floatValue() < 0) && !isBiAbi()) {      diffCurMoney = biTrack.getCurMoney();      int iRow = biBalanceDao.updateBiBalanceForBiDbiAudit(diffCurMoney, biTrack.getOriginBalanceId());      if (iRow != 1) {        throw new BusinessException("指标余额ID为" + biTrack.getOriginBalanceId() + "的余额不足！");      }    }    if (isBiAbi()) {      isAssign = false;    }    if (needGenNewId(biTrack, option)) {      biBalanceId = createNewBalance(biTrack, isAssign);    } else {      biBalanceId = getOldBiBalanceNo(biTrack);      if (biBalanceId == null) {        biBalanceId = createNewBalance(biTrack, isAssign);        // 不是核销要素的字段需要清空        if (!option.equalsIgnoreCase(BusinessOptionConstants.OPT_CP_BI_TRACK)) {          setNotDecFieldForNullValue(biBalanceId);        }      } else {        updateBalance(biBalanceId, biTrack, false);        if (isAssign) {          updateBalance(biBalanceId, biTrack, true);        }      }    }    biTrack.setTargetBalanceId(biBalanceId);    biTrackDao.rewriteBiBalanceIdToBiTrack(biBalanceId, biTrack.getBiTrackId());  }  private void updateBalance(String balanceId, BiTrack bitrack, boolean isUpperMoney) {    String moneyField = "bi_money";    BigDecimal curMoney = new BigDecimal("0");    curMoney = bitrack.getCurMoney();    if (isUpperMoney) {      moneyField = "BI_UPPER_MONEY";    }    int iRow = biBalanceDao.updateOldBiBalanceForBiAudit(curMoney, moneyField, balanceId);    if (iRow != 1) {      throw new BusinessException("更新指标余额表条数不唯一！");    }  }  /**   * @param biTrack   * @param option   * @return true or false   * @是否产生一条新的指标余额记录   */  private boolean needGenNewId(BiTrack biTrack, String option) {    boolean result = false;    String biLevel = (String) biTrack.getBiLevel();    String paytypeCode = (String) biTrack.getPaytypeCode();    String manageCode = (String) biTrack.getManageCode();    String curCoCode = (String) biTrack.getCoCode();    if (biLevel.equalsIgnoreCase("03")) {      String optCoCode = this.getOptionValue();      if (optCoCode != null && curCoCode.equalsIgnoreCase(optCoCode)) {        result = true;      } else {        result = isNotManagedByBalanceForDbi(paytypeCode, manageCode);      }    } else {      result = isNotManagedByBalanceForAbiTbi(option);    }    return result;  }  /**   * 杭州项目增加选项OPT_BI_BALANCE_SINGLE。   * 根据该选项判断某单位是否需要合并生成指标余额。   * @return   */  private String getOptionValue() {    String optvalue = null;    optvalue = asOptionDao.getAsOption(BusinessOptionConstants.OPT_BI_BALANCE_SINGLE).getOptVal();    return optvalue;  }  /**   * 单位指标的余额生成方式   * @param paytypeCode: 支付类型代码   * @param manageCode: 管理类型代码   * @return   */  private boolean isNotManagedByBalanceForDbi(String paytypeCode, String manageCode) {    if (paytypeCode == null || paytypeCode.length() == 0)      return true;    boolean result = true;    String optionValue = getOptionValueByPayTypeCode(paytypeCode);    if (optionValue != null) {      if (optionValue.equalsIgnoreCase("0")) {        result = false;      } else if (optionValue.equalsIgnoreCase("1")) {        result = true;      } else if (optionValue.equalsIgnoreCase("2")) {        if (manageCode.equalsIgnoreCase("02")) {          result = true;        } else {          result = false;        }      } else if (optionValue.equalsIgnoreCase("3")) {        if (manageCode.equalsIgnoreCase("01")) {          result = true;        } else {          result = false;        }      }    }    return result;  }  /**   * 总指标、科处室指标余额的生成方式的选项判断   * @param option  选项"OPT_CP_BI_TRACK"的值   * @return   */  private boolean isNotManagedByBalanceForAbiTbi(String option) {    return asOptionDao.getAsOption(option).getOptVal().equals("1");  }  /**   * 根据支付方式得到正确的选项值   * @param paytypeCode   * @return   */  private String getOptionValueByPayTypeCode(String paytypeCode) {    String optionId = null;    String optionValue = null;    if (paytypeCode.indexOf("01") == 0 || paytypeCode.indexOf("03") == 0) {      optionId = BusinessOptionConstants.OPT_CP_ADP_TRACK;    } else if (paytypeCode.indexOf("02") == 0) {      optionId = BusinessOptionConstants.OPT_CP_CDP_TRACK;    }    if (optionId == null)      optionId = BusinessOptionConstants.OPT_CP_ADP_TRACK;    optionValue = asOptionDao.getAsOption(optionId).getOptVal();    return optionValue;  }  private String createNewBalance(BiTrack biTrack, boolean isAssign) {    BiBalance biBalance = this.constructBiBalance(biTrack, this.billTypeCode, isAssign);    String biBalanceId = AutoNum.genNum("BI_BALANCE", biTrack);    biBalance.setBiBalanceId(biBalanceId);    biBalanceDao.insertOneBiAbiBalance(biBalance);    return biBalanceId;  }  private BiBalance constructBiBalance(BiTrack biTrack, String billTypeCode, boolean isAssign) {    BiBalance biBalance = new BiBalance();    biBalance.setBiLevel(biTrack.getBiLevel());    biBalance.setBiTargetCode(biTrack.getBiTargetCode());    biBalance.setNd(biTrack.getNd());    biBalance.setIsControl(biTrack.getIsControl());    biBalance.setOrgCode(biTrack.getOrgCode());    biBalance.setCoCode(biTrack.getCoCode());    biBalance.setBaccCode(biTrack.getBaccCode());    biBalance.setOutlayCode(biTrack.getOutlayCode());    biBalance.setProjectTypeCode(biTrack.getProjectTypeCode());    biBalance.setProjectCode(biTrack.getProjectCode());    biBalance.setFundCode(biTrack.getFundCode());    biBalance.setOriginCode(biTrack.getOriginCode());    biBalance.setPaytypeCode(biTrack.getPaytypeCode());    biBalance.setPayoutCode(biTrack.getPayoutCode());    biBalance.setManageCode(biTrack.getManageCode());    biBalance.setInceptDocCode(biTrack.getInceptDocCode());    biBalance.setSendDocTypeCode(biTrack.getSendDocTypeCode());    biBalance.setBiMoney(biTrack.getCurMoney());    biBalance.setSendDocCode(biTrack.getSendDocCode());    if (isAssign) {      biBalance.setBiUpperMoney(biTrack.getCurMoney());    } else {      biBalance.setBiUpperMoney(new BigDecimal("0"));    }    biBalance.setDattr1(biTrack.getDattr1());    biBalance.setDattr2(biTrack.getDattr2());    biBalance.setDattr3(biTrack.getDattr3());    biBalance.setDattr4(biTrack.getDattr4());    biBalance.setDattr5(biTrack.getDattr5());    biBalance.setProjectDetailCode(biTrack.getProjectDetailCode());    biBalance.setRemark(biTrack.getRemark());    biBalance.setFileName(biTrack.getFileName());    biBalance.setFilenameBlobid(biTrack.getFilenameBlobid());    return biBalance;  }  private String getOldBiBalanceNo(BiTrack biTrack) {    Map map = billElementDao.getDecBillElement(RequestMetaUtil.getSvNd(), this.billTypeCode);    if (map.isEmpty()) {      throw new BusinessException(biTrack.getBiTrackId() + " 产生指标余额失败,要素控制表中没有定义！");    }    String whereSql = getOldBiBalanceIdWhere(map, biTrack);    return biBalanceDao.queryOldBiBalanceId(whereSql, biTrack.getBiTrackId());  }  private String getOldBiBalanceIdWhere(Map ELEMENT_CODEs, BiTrack biTrack) {    StringBuffer elementWhere = new StringBuffer();    Set keySet = ELEMENT_CODEs.keySet();    List keyList = new ArrayList();    keyList.addAll(keySet);    for (int i = 0; i < keyList.size(); i++) {      String elementCode = (String) keyList.get(i);      if (i == 0) {        elementWhere.append(" a.nd='").append(biTrack.getNd()).append("' and ");        elementWhere.append(" nvl(TO_CHAR(a.");        elementWhere.append(elementCode);        elementWhere.append("),'*') ");        elementWhere.append("=nvl(TO_CHAR(b.");        elementWhere.append(elementCode);        elementWhere.append("), '*')");      } else {        elementWhere.append(" and nvl(TO_CHAR(a.");        elementWhere.append(elementCode);        elementWhere.append("),'*') ");        elementWhere.append("=nvl(TO_CHAR(b.");        elementWhere.append(elementCode);        elementWhere.append("), '*') ");      }    }    return elementWhere.toString();  }  /**将不是核销要素的字段的值置空   * @param biBalance   */  private void setNotDecFieldForNullValue(String biBalanceId) {    Map decFieldmap = billElementDao.getDecBillElement(RequestMetaUtil.getSvNd(), this.billTypeCode);    Map includeFieldmap = billElementDao.getBillIncludeElement(RequestMetaUtil.getSvNd(), this.billTypeCode);    if (decFieldmap.isEmpty() || includeFieldmap.isEmpty()) {      throw new BusinessException(biBalanceId + " 产生指标余额失败,要素控制表中没有定义！");    }    Set decFieldSet = decFieldmap.keySet();    List decFlagList = Arrays.asList(decFieldSet.toArray());    for (int i = 0; i < decFlagList.size(); i++) {      if (includeFieldmap.containsKey(decFlagList.get(i))) {        includeFieldmap.remove(decFlagList.get(i));      }    }    Set includeFieldSet = includeFieldmap.keySet();    List includeFlagList = Arrays.asList(includeFieldSet.toArray());    String updateSql = "";    for (int j = 0; j < includeFlagList.size(); j++) {      if (j == includeFlagList.size() - 1) {        updateSql = updateSql + includeFlagList.get(j) + " = null";      } else {        updateSql = updateSql + includeFlagList.get(j) + " = null,";      }    }    int iRow = biBalanceDao.updateBiBalanceNotDecToNull(updateSql, biBalanceId);    if (iRow != 1) {      throw new BusinessException("清空非核销要素字段时，更新记录不唯一！");    }  }  /**   * 重启流程更新状态字段;   *   */  public void reworkUpdateAstatusCode(BiTrack biTrack) {    int nodeValue = workflowDao.getWfTemplateNode(this.compoId);    String astatusCode = "";    if (String.valueOf(nodeValue).equalsIgnoreCase("1")) {      astatusCode = "4";    } else {      astatusCode = "2";    }    biTrack.setastatusCode(astatusCode);    int iRow = biTrackDao.updateBiTrackAstatusCode(astatusCode, biTrack.getBiTrackId());    if (iRow != 1) {      throw new BusinessException("更新指标记录状态失败！");    }  }  /**   * 指标编辑销审;   * @param biTrack   */  public void reworkProcessBalanceForBiEdit(BiTrack biTrack) {    this.beforeRework(biTrack);    String option = BusinessOptionConstants.OPT_CP_BI_TRACK;    BigDecimal diffCurMoney = new BigDecimal("0");    String balFlag = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DECBAL_FLAG_BI).getOptVal();    if ((balFlag.equalsIgnoreCase("1") || biTrack.getCurMoney().floatValue() < 0) && !isBiAbi()) {      diffCurMoney = biTrack.getCurMoney();      int ibirow = biBalanceDao.updateSourceBiBalanceForBiUnaudit(diffCurMoney, biTrack.getBiTrackId());      if (ibirow != 1) {        throw new BusinessException("更新指标余额表失败,指标余额不足,不能销审！");      }    }    if (needGenNewId(biTrack, option)) {      int retBalanceCount = biBalanceDao.deleteSelfBiBalanceForUnaudit(biTrack.getBiTrackId());      if (retBalanceCount != 1) {        throw new BusinessException("删除指标余额记录时失败！");      }    } else {      if (isBiAbi()) {        diffCurMoney = new BigDecimal("0");      } else {        diffCurMoney = biTrack.getCurMoney();      }      int iRow = biBalanceDao.updateSelfBiBalanceForUnaudit(diffCurMoney, biTrack.getBiTrackId());      if (iRow != 1) {        throw new BusinessException("更新指标余额表记录失败！");      }    }  }  private void beforeRework(BiTrack biTrack) {    BiBalance biBalance = biBalanceDao.getBiBalanceById(biTrack.getTargetBalanceId());    if (biBalance != null) {      if (biTrack.getBiLevel().equals("01") || biTrack.getBiLevel().equals("02")) {        if (biBalance.getBiAssignMoney().doubleValue() > 0) {          throw new BusinessException("指标已经使用，不能销审！");        }      } else {        if (biBalance.getDpMoney().doubleValue() + biBalance.getAmMoney().doubleValue()        + biBalance.getCpMoney().doubleValue() + biBalance.getFreezeMoney().doubleValue()        + biBalance.getLpMoney().doubleValue() + biBalance.getCdMoney().doubleValue() > 0) {          throw new BusinessException("指标已经使用，不能销审！");        }      }    }  }  /**   * 指标作废   * @param biTrack   */  public void invalidBiTrackForBiEdit(BiTrack biTrack) {    String balFlag = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DECBAL_FLAG_BI).getOptVal();    if (balFlag.equalsIgnoreCase("0") && !isBiAbi()) {      int iRow = biBalanceDao.updateSelfBiBalanceForValid(biTrack.getBiTrackId());      if (iRow != 1) {        throw new BusinessException("更新指标余额表记录失败！");      }    }  }  /**   * 指标删除还余额   * @param biTrack   */  public void updateBiTrackForBiDelete(BiTrack biTrack) {    String balFlag = asOptionDao.getAsOption(BusinessOptionConstants.OPT_CP_DECBAL_FLAG_BI).getOptVal();    if (balFlag.equalsIgnoreCase("0") && !isBiAbi()) {      int iRow = biBalanceDao.updateSelfBiBalanceForValid(biTrack.getBiTrackId());      if (iRow != 1) {        throw new BusinessException("更新指标余额表记录失败！");      }    }  }  /** 返回TRUE则是总指标(总指标划拨返回false)   * @return   */  private boolean isBiAbi() {    return this.billTypeCode.equalsIgnoreCase(BillTypeConstants.BILL_TYPE_CODE_BI_ABI_QUERY)    && !this.compoId.startsWith("BI_ABI_ABICTRL_XXX");  }  /*   * 指标调剂审核   */  public void updateBibalanceForBiXbiAdjAudit(BiTrack biTrack) throws BusinessException {    String biBalanceId = null;    String option = BusinessOptionConstants.OPT_CP_BI_TRACK;    boolean isAssign = false;// 如果是总指标则不用更新BI_UPPER_MONEY    BigDecimal diffCurMoney = new BigDecimal("0");    diffCurMoney = biTrack.getCurMoney();    int iRow = biBalanceDao.updateBiBalanceForAdjAudit(diffCurMoney, biTrack.getOriginBalanceId());    if (iRow != 1) {      throw new BusinessException("指标余额ID为" + biTrack.getOriginBalanceId() + "的余额不足！");    }    if (needGenNewId(biTrack, option)) {      biBalanceId = createNewBalance(biTrack, isAssign);    } else {      biBalanceId = getOldBiBalanceNo(biTrack);      if (biBalanceId == null) {        biBalanceId = createNewBalance(biTrack, isAssign);        // 不是核销要素的字段需要清空        if (!option.equalsIgnoreCase(BusinessOptionConstants.OPT_CP_BI_TRACK)) {          setNotDecFieldForNullValue(biBalanceId);        }      } else {        updateBalance(biBalanceId, biTrack, false);        if (isAssign) {          updateBalance(biBalanceId, biTrack, true);        }      }    }    biTrack.setTargetBalanceId(biBalanceId);    biTrackDao.rewriteBiBalanceIdToBiTrack(biBalanceId, biTrack.getBiTrackId());  }  /**   * 指标调剂销审;   * @param biTrack   */  public void reworkProcessBalanceForBiBiAdj(BiTrack biTrack) {    String option = BusinessOptionConstants.OPT_CP_BI_TRACK;    BigDecimal diffCurMoney = new BigDecimal("0");    diffCurMoney = biTrack.getCurMoney();    if (needGenNewId(biTrack, option)) {      int retBalanceCount = biBalanceDao.deleteSelfBiBalanceForUnaudit(biTrack.getBiTrackId());      if (retBalanceCount != 1) {        throw new BusinessException("删除指标余额记录时失败！");      }    } else {      int iRow = biBalanceDao.updateSelfBiBalanceForUnaudit(diffCurMoney, biTrack.getBiTrackId());      if (iRow != 1) {        throw new BusinessException("更新指标余额表记录失败！");      }    }  }}