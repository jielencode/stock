package com.ufgov.zc.server.commonbiz.util;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import com.ufgov.zc.common.commonbiz.dto.BankDataDto;import com.ufgov.zc.common.commonbiz.model.MaCpElementMapping;import com.ufgov.zc.common.commonbiz.model.MaExpSerial;import com.ufgov.zc.common.cp.model.CpPayTransferList;import com.ufgov.zc.common.cp.model.CpPayTransferVou;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DateUtil;import com.ufgov.zc.server.commonbiz.dao.IMaCpElementMappingDao;import com.ufgov.zc.server.system.SpringContext;import com.ufgov.zc.server.system.util.BankDataExportUtil;import com.ufgov.zc.server.system.util.ExpSerialUtil;import com.ufgov.zc.server.system.util.RequestMetaUtil;public class BankDataExport {  public static final String BB_AMVE_MAIN = "BB_AMVE.MAIN";  public static final String BB_AMVE_DETAIL = "BB_AMVE.DETAIL";  public static final String BB_DMVE_MAIN = "BB_DMVE.MAIN";  public static final String BB_DMVE_DETAIL = "BB_DMVE.DETAIL";  private static final IMaCpElementMappingDao maCpElementMappingDao = (IMaCpElementMappingDao) SpringContext  .getBean("maCpElementMappingDao");  private static Map getMapping(String type) {    Map map = new HashMap();    ElementConditionDto dto = new ElementConditionDto();    dto.setNd(RequestMetaUtil.getSvNd());    dto.setUseType(MaCpElementMapping.USE_TYPE_BANKEXPORT);    dto.setKind(type);    List list = maCpElementMappingDao.getMaCpElementMapping(dto);    for (int i = 0; i < list.size(); i++) {      MaCpElementMapping mapping = (MaCpElementMapping) list.get(i);      map.put(mapping.getCurYearCode(), mapping.getNextYearCode());    }    return map;  }  private static void handleMapping(CpPayTransferVou vou, Map bankCodeMapping,  Map fundMapping, Map coCodeMapping) {    if (bankCodeMapping.get(vou.getAgentBankCode()) != null) {      vou.setAgentBankCode((String) bankCodeMapping.get(vou.getAgentBankCode()));    }    if (fundMapping.get(vou.getFundCode()) != null) {      vou.setFundCode((String) fundMapping.get(vou.getFundCode()));    }    for (int i = 0; i < vou.getCpPayTransferLists().size(); i++) {      CpPayTransferList de = (CpPayTransferList) vou.getCpPayTransferLists().get(i);      if (coCodeMapping.get(de.getCoCode()) != null) {        de.setCoCode((String) coCodeMapping.get(de.getCoCode()));      }    }  }  private static void preprocessPayTransferVou(List cpPayTransferVouList) {    Map bankCodeMapping = getMapping(MaCpElementMapping.TYPE_BANK_CODE);    Map fundMapping = getMapping(MaCpElementMapping.TYPE_FUND);    Map coCodeMapping = getMapping(MaCpElementMapping.TYPE_CO_CODE);    for (int i = 0; i < cpPayTransferVouList.size(); i++) {      CpPayTransferVou v = (CpPayTransferVou) cpPayTransferVouList.get(i);      handleMapping(v, bankCodeMapping, fundMapping, coCodeMapping);    }  }  public static List bankDataExportAmve(List cpPayTransferVouList) {    preprocessPayTransferVou(cpPayTransferVouList);    List list = new ArrayList();    for (int i = 0; i < cpPayTransferVouList.size(); i++) {      CpPayTransferVou v = (CpPayTransferVou) cpPayTransferVouList.get(i);      list.add(BankDataExport.genBankDataAMVE(v));    }    return list;  }  public static List bankDataExportDmve(List cpPayTransferVouList) {    preprocessPayTransferVou(cpPayTransferVouList);    List list = new ArrayList();    for (int i = 0; i < cpPayTransferVouList.size(); i++) {      CpPayTransferVou v = (CpPayTransferVou) cpPayTransferVouList.get(i);      list.add(BankDataExport.genBankDataDMVE(v));    }    return list;  }  private static BankDataDto genBankDataAMVE(CpPayTransferVou vou) {    BankDataDto dto = new BankDataDto();    String mainTemplate = BankDataExportUtil.getProperty(BB_AMVE_MAIN);    String detailTemplate = BankDataExportUtil.getProperty(BB_AMVE_DETAIL);    StringBuffer result = new StringBuffer("");    result.append(BankDataExportUtil.process(mainTemplate, vou)).append("\r\n");    List detailList = vou.getCpPayTransferLists();    for (int i = 0; i < detailList.size(); i++) {      CpPayTransferList de = (CpPayTransferList) detailList.get(i);      result.append(BankDataExportUtil.process(detailTemplate, de)).append("\r\n");    }    dto.setData(result.toString());    String yyyymmdd = DateUtil.dateToShortDdString(RequestMetaUtil.getTransDate());    String xx = ExpSerialUtil.getSerialNo(yyyymmdd, MaExpSerial.EXP_TYPE_02,    RequestMetaUtil.getSvNd(), 2);    String tt = "27";//默认正常的    if ("200".equals(vou.getCpAdjustCode())) {//退款      tt = "28";    }    String m = "0";    String fileName = yyyymmdd + xx + tt + m;    dto.setFileName(fileName);    return dto;  }  private static BankDataDto genBankDataDMVE(CpPayTransferVou vou) {    BankDataDto dto = new BankDataDto();    String mainTemplate = BankDataExportUtil.getProperty(BB_DMVE_MAIN);    String detailTemplate = BankDataExportUtil.getProperty(BB_DMVE_DETAIL);    StringBuffer result = new StringBuffer("");    result.append(BankDataExportUtil.process(mainTemplate, vou)).append("\r\n");    List detailList = vou.getCpPayTransferLists();    for (int i = 0; i < detailList.size(); i++) {      CpPayTransferList de = (CpPayTransferList) detailList.get(i);      result.append(BankDataExportUtil.process(detailTemplate, de)).append("\r\n");    }    dto.setData(result.toString());    String yyyymmdd = DateUtil.dateToShortDdString(RequestMetaUtil.getTransDate());    String xx = ExpSerialUtil.getSerialNo(yyyymmdd, MaExpSerial.EXP_TYPE_03,    RequestMetaUtil.getSvNd(), 2);    String tt = "25";//默认正常的    if ("200".equals(vou.getCpAdjustCode())) {//退款      tt = "26";    }    String m = "0";    String fileName = yyyymmdd + xx + tt + m;    dto.setFileName(fileName);    return dto;  }}