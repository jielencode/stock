package com.ufgov.zc.server.dp.dao.ibatis;import java.sql.SQLException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.orm.ibatis.SqlMapClientCallback;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;import com.ibatis.sqlmap.client.SqlMapExecutor;import com.ufgov.zc.common.dp.dto.DpTempBiReport;import com.ufgov.zc.common.dp.model.DpDetail;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.DaoException;import com.ufgov.zc.server.dp.dao.IDpDetailDao;import com.ufgov.zc.server.system.util.GkGetDataRuleUtil;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.system.util.OrderColumnsUtil;import com.ufgov.zc.server.system.util.RequestMetaUtil;public class DpDetailDao extends SqlMapClientDaoSupport implements IDpDetailDao {  public void insertDpDetail(DpDetail dpDetail) {    this.getSqlMapClientTemplate().insert("DpDetail.insertDpDetail", dpDetail);  }  public void insertDpDetail(final List dpDetailList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < dpDetailList.size(); i++) {          executor.insert("DpDetail.insertDpDetail", dpDetailList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public void updateSumPdId(final List dpDetailList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < dpDetailList.size(); i++) {          executor.update("DpDetail.updateSumPdId", dpDetailList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public void updateDpDetail(DpDetail dpDetail) {    this.getSqlMapClientTemplate().update("DpDetail.updateDpDetail", dpDetail);  }  public void updateDpDetailForJJ(DpDetail dpDetail) {    this.getSqlMapClientTemplate().update("DpDetail.updateDpDetailForJJ", dpDetail);  }  public void updateDpDetailBatchInfo(final List dpDetailIdList, final String batchInfo) {    if (dpDetailIdList.size() == 0) {      throw new DaoException("updateDpDetailBatchInfo的参数dpDetailIdList为空");    }    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < dpDetailIdList.size(); i++) {          Map map = new HashMap();          map.put("dpDetailId", (String) dpDetailIdList.get(i));          map.put("batchInfo", batchInfo);          executor.update("DpDetail.updateDpDetailBatchInfo", map);        }        executor.executeBatch();        return null;      }    });  }  public void increasePrintTimes(List dpDetailIdList) {    Map map = new HashMap();    if (dpDetailIdList.size() == 0) {      throw new DaoException("increasePrintTimes的参数dpDetailIdList为空");    }    map.put("dpDetailIdList", dpDetailIdList);    this.getSqlMapClientTemplate().update("DpDetail.increasePrintTimes", map);  }  public void updateDpDetailValid(String dpDetailId, String isValid) {    Map map = new HashMap();    map.put("dpDetailId", dpDetailId);    map.put("isValid", isValid);    this.getSqlMapClientTemplate().update("DpDetail.updateDpDetailValid", map);  }  public void deleteDpDetailById(String id) {    this.getSqlMapClientTemplate().delete("DpDetail.deleteDpDetailById", id);  }  public void deleteDpDetail(final List idList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < idList.size(); i++) {          executor.update("DpDetail.deleteDpDetailById", idList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public void setSumPdIdNull(final List sumPdIdList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < sumPdIdList.size(); i++) {          executor.update("DpDetail.setSumPdIdNull", sumPdIdList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public int getDpDetailCount() {    return ((Integer) this.getSqlMapClientTemplate().queryForObject("DpDetail.getDpDetailCount")).intValue();  }  public List getDpDetail(int pageNum, int pageSize) {    int startRow = pageSize * (pageNum - 1) + 1;    int endRow = pageSize * pageNum;    Map map = new HashMap();    map.put("startRow", new Integer(startRow));    map.put("endRow", new Integer(endRow));    return this.getSqlMapClientTemplate().queryForList("DpDetail.getDpDetailPageData", map);  }  public List getDpDetailForDpEdit(ElementConditionDto dto) {//    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    if (dto.getDataRuleCondiStr() == null || dto.getDataRuleCondiStr().trim().equals("")) {      dto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance().getDataRuleCondiStr(dto.getDataRuleId()));    }    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("DpDetail.getDpDetailForDpEdit", dto);  }  public List getDpDetail(ElementConditionDto dto) {//    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("DpDetail.getDpDetail", dto);  }  public List getDpBalanceForUpdate(ElementConditionDto dto) {//    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList("DpDetail.getDataForDP_BALANCE_CONTROL", dto);  }  public List getDpDetailBySumDpDetailId(String sumDpDetailId) {    Map param = new HashMap();    param.put("sumDpDetailId", sumDpDetailId);    return this.getSqlMapClientTemplate().queryForList("DpDetail.getDpDetailBySumDpDetailId", param);  }  public List getDpDetailBySumDpDetailIdForPrint(List sumDpDetailIdList) {    if (sumDpDetailIdList.isEmpty()) {      return new ArrayList();    }    Map param = new HashMap();    param.put("sumDpDetailIdList", sumDpDetailIdList);    return this.getSqlMapClientTemplate().queryForList("DpDetail.getDpDetailBySumDpDetailIdForPrint", param);  }  public List getDpDetailForDpEditAudit(ElementConditionDto dto) {//    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("DpDetail.getDpDetailForDpEditAudit", dto);  }  /*   * 用款计划调整列表页面查询数据,设置查询条件构造map对象 (non-Javadoc)   *   * @see com.ufgov.gk.server.dao.dp.IDpDetailDao#getDpDetailForDpAdjust(int)   */  public List getDpDetailForDpAdjust(ElementConditionDto dto) {//    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("DpDetail.getDpDetailForDpAdjust", dto);  }  public List getDpDetailForDpAdjustAudit(ElementConditionDto dto) {//    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("DpDetail.getDpDetailForDpAdjustAudit", dto);  }  public DpDetail getDpDetailForUpdateById(String DpDetailId) {    return (DpDetail) this.getSqlMapClientTemplate().queryForObject("DpDetail.getDpDetailForUpdateById",    DpDetailId);  }  public void dpAdjustUpdateDpDetail(DpDetail dpDetail) {    this.getSqlMapClientTemplate().update("DpDetail.dpAdjustUpdateDpDetail", dpDetail);  }  public List getDpDetailInfo(String dpBanlancelId, int nd) {    Map map = new HashMap();    map.put("nd", new Integer(nd));    map.put("dpBalanceId", dpBanlancelId);    return this.getSqlMapClientTemplate().queryForList("DpDetail.getDpDetailInfo", map);  }  public List getDpDetailForBiBalanceId(String biBalanceId, int nd) {    Map map = new HashMap();    map.put("nd", new Integer(nd));    map.put("biBalanceId", biBalanceId);    return this.getSqlMapClientTemplate().queryForList("DpDetail.getDpDetailForBiBalanceId", map);  }  public String getMaxOrMinBiBalanceForDpAdjust(String strmaxOrmin, int nd, String dpDetailId) {    Map map = new HashMap();    map.put("strmaxOrmin", strmaxOrmin);    map.put("nd", new Integer(nd));    map.put("dpBalanceId", dpDetailId);    return (String) this.getSqlMapClientTemplate().queryForObject("DpDetail.getBiBalanceIdForDpAdjust", map);  }  public int updateDetailForDpAdjustAudit(String biBalanceId, String userId, String dpDetailId) {    Map hmap = new HashMap();    hmap.put("biBalanceId", biBalanceId);    hmap.put("userId", userId);    hmap.put("dpDetailId", dpDetailId);    return this.getSqlMapClientTemplate().update("DpDetail.upDataDpDetailForDpAdjustAudit", hmap);  }  public int updateDpDetailAstatusCode(String dpDetailId) {    return this.getSqlMapClientTemplate().update("DpDetail.updateDpDetailAstatusCode", dpDetailId);  }  public int updateDpDetailMonth(String dpDetailId, String smonth) {    Map hmap = new HashMap();    hmap.put("smonth", smonth);    hmap.put("dpDetailId", dpDetailId);    return this.getSqlMapClientTemplate().update("DpDetail.updateDpDetailMonth", hmap);  }  /**   * 用款计划终审按照系统选项判断更新月份,广东地区对帐;   * @param dpDetailId   * @param smonth   * @param oldMonth   * @return   */  public int updateDpDetailMonthForDpAudit(String dpDetailId, String smonth, String oldMonth) {    Map hmap = new HashMap();    hmap.put("smonth", smonth);    hmap.put("dpDetailId", dpDetailId);    hmap.put("oldMonth", oldMonth);    return this.getSqlMapClientTemplate().update("DpDetail.updateDpDetailMonthForDpAudit", hmap);  }  public int updateDpDetailForDpEditAudit(String dpBalanceId, String userId, String dpDetailId) {    Map hmap = new HashMap();    hmap.put("dpBalanceId", dpBalanceId);    hmap.put("userId", userId);    hmap.put("dpDetailId", dpDetailId);    return this.getSqlMapClientTemplate().update("DpDetail.updateDpDetailForDpEditAudit", hmap);  }  public int updateDpDetailForDpDpdeailAdjust(String userId, String dpDetailId) {    Map hmap = new HashMap();    hmap.put("userId", userId);    hmap.put("dpDetailId", dpDetailId);    return this.getSqlMapClientTemplate().update("DpDetail.updateDpDetailForDpDetailAdjust", hmap);  }  public List getUnsumAuthPayList(ElementConditionDto conditionDto) {    conditionDto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance().getDataRuleCondiStr(    conditionDto.getDataRuleId()));//    conditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(//    conditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList("DpDetail.getUnsumAuthPayList", conditionDto);  }  public void sumAtzdForDpDetail(String createTzdType, String billType, String pDpDetailId, String pUserId,  String pProcDate, String pRemark) {    //   String identifier= GkTempUtil.getInstance().insert(pDpDetailId.split(","));    Map map = new HashMap();    map.put("pCreateTzdType", createTzdType);    map.put("pBillType", billType);    map.put("pDpDetailId", pDpDetailId);    map.put("pUserId", pUserId);    map.put("pProcDate", pProcDate);    map.put("pRemark", pRemark);    this.getSqlMapClientTemplate().update("DpDetail.sumAtzdForDp", map);  }  public String cancelAtadForDpDetail(String pCreateTzdType, String pPkName, String pPkValue, int pNd,  String pRemark) {    Map map = new HashMap();    map.put("pCreateTzdType", pCreateTzdType);    map.put("pPkName", pPkName);    map.put("pPkValue", pPkValue);    map.put("pNd", new Integer(pNd));    map.put("pRemark", pRemark);    map.put("pRetInfo", "");    this.getSqlMapClientTemplate().update("DpDetail.cancelAtzdForDp", map);    return (String) map.get("pRetInfo");  }  //  public List getApproveTableViewList(String dpDetailIds,String nd,String month){  //    Map map = new HashMap();  //    List list = new ArrayList();  //    map.put("resultSets", list);  //    map.put("dpDetailIds", dpDetailIds);  //    map.put("nd",nd);  //    map.put("month", month);  //     this.getSqlMapClientTemplate().queryForObject("DpTempBiReport.getApproveTableViewList", map);  //     List rList = (List) map.get("resultSets");  //     if (rList == null || rList.size() == 0)  //       rList = new ArrayList();  //   return rList;  //  }  public List getApproveTableViewList(List dpDetailIdList, int nd) {    Map param = new HashMap();    param.put("dpDetailIdList", dpDetailIdList);    param.put("nd", new Integer(nd));    return this.getSqlMapClientTemplate().queryForList("DpTempBiReport.getApproveTableViewList", param);  }  public List getApplyTableForMonth(List dpDetailIdList, String nd, String coCode) {    Map map = new HashMap();    List list = new ArrayList();    map.put("dpDetailIdList", dpDetailIdList);    map.put("nd", nd);    map.put("coCode", coCode);    return this.getSqlMapClientTemplate().queryForList("DpApplyTableAsMonth.getApplyTableForMonth", map);    //     List rList = (List) map.get("resultSet");    //     if (rList == null || rList.size() == 0)    //       rList = new ArrayList();    //   return rList;  }  public DpDetail getDpDetailById(String dpDetailId) {    return (DpDetail) this.getSqlMapClientTemplate().queryForObject("DpDetail.getDpDetailById", dpDetailId);  }  public List getDpDetailByOid(String dpDetailId) {    return this.getSqlMapClientTemplate().queryForList("DpDetail.getDpDetailByOid", dpDetailId);  }  public List getDpDetailByIdList(List idList) {    if (idList.isEmpty()) {      return new ArrayList();    }    Map param = new HashMap();    param.put("dpDetailIdList", idList);    return this.getSqlMapClientTemplate().queryForList("DpDetail.getDpDetailByIdList", param);  }  public List getDpDetailByIdList2(List idList) {    if (idList.isEmpty()) {      return new ArrayList();    }    Map param = new HashMap();    param.put("dpDetailIdList", idList);    return this.getSqlMapClientTemplate().queryForList("DpDetail.getDpDetailByIdList2", param);  }  public void updateDpDetailForAudit(DpDetail dpDetail) {    this.getSqlMapClientTemplate().update("DpDetail.updateDpDetailForAudit", dpDetail);  }  /**   * 根据主键更新计划明细的a_status_code   * @param dpDetail   */  public void updateAstatusCode(DpDetail dpDetail) {    this.getSqlMapClientTemplate().update("DpDetail.updateDpDetailAstatusCodeForReWork", dpDetail);  }  /**   * 用款计划销审后更新明细数据;   * @param dpDetail   */  public void upDpDetailForUnAudit(DpDetail dpDetail) {    this.getSqlMapClientTemplate().update("DpDetail.updateDpDetailAstatusCodeForUnAudit", dpDetail);  }  /**   * 计划下达操作   * @param dpDetail   */  public int upDpDetailForEffect(DpDetail dpDetail) {    return this.getSqlMapClientTemplate().update("DpDetail.updateDpDetailForEffect", dpDetail);  }  /**   * 用款计划反下达后更新明细数据;   * @param dpDetail   */  public int upDpDetailForUnEffect(DpDetail dpDetail) {    return this.getSqlMapClientTemplate().update("DpDetail.updateDpDetailForUnEffect", dpDetail);  }  public void updateDpDetailAstatusCodeForAdjustUnaudit(DpDetail dpDetail) {    this.getSqlMapClientTemplate().update("DpDetail.updateDpDetailAstatusCodeForAdjustUnaudit", dpDetail);  }  /**   * 用款计划编辑作废修改状态;   * @param isValid   * @param astatusCode   * @param dpDetailId   */  public void updateDpDetailIsValid(String isValid, String astatusCode, String dpDetailId) {    Map map = new HashMap();    map.put("isValid", isValid);    map.put("astatusCode", astatusCode);    map.put("dpDetailId", dpDetailId);    this.getSqlMapClientTemplate().update("DpDetail.updateDpDetailIsValid", map);  }  /**   * 用款计划编辑销审判断是否产生余额   * @param dpDetailId   * @return   */  public int getDpDetailCountForUnAudit(String dpDetailId) {    return ((Integer) this.getSqlMapClientTemplate().queryForObject("DpDetail.getDpDetailCountForUnAudit",    dpDetailId)).intValue();  }  public List getDpDetailForDpDetailQuery(ElementConditionDto dto) {//    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    dto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance().getDataRuleCondiStr(dto.getDataRuleId()));    return this.getSqlMapClientTemplate().queryForList("DpDetail.getDpDetailForDpDetailQuery", dto);  }  public List getDpDetailForDpDetailEffect(ElementConditionDto dto) {//    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    dto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance().getDataRuleCondiStr(dto.getDataRuleId()));    return this.getSqlMapClientTemplate().queryForList("DpDetail.getDpDetailForDpDetailEffect", dto);  }  public int getDpDetailForLimitBiTimesCheck(ElementConditionDto dto) {    return ((Integer) this.getSqlMapClientTemplate().queryForObject(    "DpDetail.getDpDetailForLimitBiTimesCheck", dto)).intValue();  }  public String dpDetailCreateAmVoucher(String processInstId, String action, String compoId) {    Map map = new HashMap();    map.put("processInstId", processInstId);    map.put("action", action);    map.put("inputorId", RequestMetaUtil.getSvUserID());    map.put("inputorName", RequestMetaUtil.getSvUserName());    map.put("inputorDate", RequestMetaUtil.getTransDate());    map.put("compoId", compoId);    map.put("reoutvalue", "");    this.getSqlMapClientTemplate().insert("DpDetail.dpDetailCreateAmVoucher", map);    return (String) map.get("reoutvalue");  }  public List getDtztForDpUncollectedList(ElementConditionDto conditionDto) {//    conditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    conditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList("DpDetail.getDtztForDpUncollectedList", conditionDto);  }  public void updateDpDetailByPlanClearBillId(final String planClearBillId, final String billNo,  List dpDetailIds) {    final List list = dpDetailIds;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        Map param = new HashMap();        param.put("planClearBillId", planClearBillId);        param.put("billNo", billNo);        for (int i = 0; i < list.size(); i++) {          param.put("dpDetailId", list.get(i));          executor.update("DpDetail.updateDpDetailByPlanClearBillId", param);        }        executor.executeBatch();        return null;      }    });  }  public List getDpDetailByPlanAgentBillId(String planAgentBillId) {    return this.getSqlMapClientTemplate().queryForList("DpDetail.getDpDetailByPlanAgentBillId",    planAgentBillId);  }  public List getDpDetailByBillId(String planAgentBillId) {    return this.getSqlMapClientTemplate().queryForList("DpDetail.getDpDetailByBillId",    planAgentBillId);  }  public DpTempBiReport getSumMoney(Map hashMap) {    List list = this.getSqlMapClientTemplate().queryForList("DpTempBiReport.getSumMoney", hashMap);    return (DpTempBiReport) list.get(0);  }}