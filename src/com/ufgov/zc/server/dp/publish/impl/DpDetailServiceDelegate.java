package com.ufgov.zc.server.dp.publish.impl;import java.util.List;import com.ufgov.zc.common.dp.model.DpDetail;import com.ufgov.zc.common.dp.publish.IDpDetailServiceDelegate;import com.ufgov.zc.common.system.PageData;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.dto.PrintObject;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.util.ExceptionUtil;import com.ufgov.zc.server.dp.service.IDpDetailService;public class DpDetailServiceDelegate implements IDpDetailServiceDelegate {  private IDpDetailService dpDetailService;  public IDpDetailService getDpDetailService() {    return dpDetailService;  }  public void setDpDetailService(IDpDetailService dpDetailService) {    this.dpDetailService = dpDetailService;  }  public DpDetail auditForDpAdjustFN(DpDetail dpDetail, RequestMeta requestMeta) {    return dpDetailService.auditForDpAdjust(dpDetail);  }  public void updateDpDetailBatchInfo(List dpDetailIdList, String batchInfo, RequestMeta requestMeta) {    dpDetailService.updateDpDetailBatchInfo(dpDetailIdList, batchInfo);  }  public void increasePrintTimes(List dpDetailIdList, RequestMeta requestMeta) {    dpDetailService.increasePrintTimes(dpDetailIdList);  }  public PrintObject genMainSubPrintObject(List dpDetailList, int nd, String elementId, RequestMeta requestMeta) {    return dpDetailService.genMainSubPrintObject(dpDetailList, nd, elementId);  }  public DpDetail auditForDpEditFN(DpDetail dpDetail, RequestMeta requestMeta) {    return dpDetailService.auditForDpEdit(dpDetail);  }  public DpDetail deleteForDpAdjustFN(DpDetail dpDetail, RequestMeta requestMeta) {    return dpDetailService.deleteForDpAdjust(dpDetail);  }  public DpDetail deleteForDpEditFN(DpDetail dpDetail, RequestMeta requestMeta) {    return dpDetailService.deleteForDpEdit(dpDetail);  }  public void dpAdjustUpdateDpDetail(DpDetail dpDetail, RequestMeta requestMeta) {    dpDetailService.dpAdjustUpdateDpDetail(dpDetail);  }  public List getDpDetail(int pageNum, int pageSize, RequestMeta requestMeta) {    return dpDetailService.getDpDetail(pageNum, pageSize);  }  public List getDpDetailForDpEdit(ElementConditionDto dto, RequestMeta requestMeta) {    return dpDetailService.getDpDetailForDpEdit(dto);  }  public int getDpDetailCount(RequestMeta requestMeta) {    return dpDetailService.getDpDetailCount();  }  public List getDpDetailForDpAdjust(ElementConditionDto dto, RequestMeta requestMeta) {    return dpDetailService.getDpDetailForDpAdjust(dto);  }  public List getDpDetailForDpAdjustAudit(ElementConditionDto dto, RequestMeta requestMeta) {    return dpDetailService.getDpDetailForDpAdjustAudit(dto);  }  public List getDpDetailForDpEditAudit(ElementConditionDto dto, RequestMeta requestMeta) {    return dpDetailService.getDpDetailForDpEditAudit(dto);  }  public List getDpDetailInfo(String dpBanlancelId, int nd, RequestMeta requestMeta) {    return dpDetailService.getDpDetailInfo(dpBanlancelId, nd);  }  public List getDpDetailForBiBalanceId(String biBanlancelId, int nd, RequestMeta requestMeta) {    return dpDetailService.getDpDetailForBiBalanceId(biBanlancelId, nd);  }  public PageData getDpDetailPageData(int pageNum, int pageSize, RequestMeta requestMeta) {    return dpDetailService.getDpDetailPageData(pageNum, pageSize);  }  public String getMaxOrMinBiBalanceForDpAdjust(String strmaxOrmin, int nd, String dpBalanceId,  RequestMeta requestMeta) {    return dpDetailService.getMaxOrMinBiBalanceForDpAdjust(strmaxOrmin, nd, dpBalanceId);  }  public DpDetail insertDpDetail(DpDetail dpDetail, RequestMeta requestMeta) {    return dpDetailService.insertDpDetail(dpDetail);  }  public void insertDpDetailList(List dpDetailList, RequestMeta requestMeta) {    dpDetailService.insertDpDetailList(dpDetailList);  }  public DpDetail saveAndSendForDpAdjustFN(DpDetail dpDetail, RequestMeta requestMeta) {    return dpDetailService.saveAndSendForDpAdjust(dpDetail);  }  public DpDetail saveAndSendForDpEditFN(DpDetail dpDetail, RequestMeta requestMeta) {    return dpDetailService.saveAndSendForDpEditBAF(dpDetail);  }  public DpDetail saveForDpAdjustFN(DpDetail dpDetail, RequestMeta requestMeta) {    return dpDetailService.saveForDpAdjust(dpDetail);  }  public DpDetail saveForDpEditFN(DpDetail dpDetail, RequestMeta requestMeta) {    return dpDetailService.saveForDpEditBAF(dpDetail);  }  public void saveForDpEditFN(List dpDetailList, RequestMeta requestMeta) {    this.dpDetailService.saveForDpEditBAF(dpDetailList);  }  public int updateDetailForDpAdjustAudit(String biBalanceId, String userId, String dpDetailId,  RequestMeta requestMeta) {    return dpDetailService.updateDetailForDpAdjustAudit(biBalanceId, userId, dpDetailId);  }  public void updateDpDetail(DpDetail dpDetail, RequestMeta requestMeta) {    dpDetailService.updateDpDetail(dpDetail);  }  public int updateDpDetailAstatusCode(String dpDetailId, RequestMeta requestMeta) {    return dpDetailService.updateDpDetailAstatusCode(dpDetailId);  }  public DpDetail sendForDpAdjustFN(DpDetail dpDetail, RequestMeta requestMeta) {    return dpDetailService.sendForDpAdjust(dpDetail);  }  public DpDetail sendForDpEditFN(DpDetail dpDetail, RequestMeta requestMeta) {    return dpDetailService.sendForDpEdit(dpDetail);  }  public List getUnsumAuthPayList(ElementConditionDto conditionDto, RequestMeta requestMeta) {    return dpDetailService.getUnsumAuthPayList(conditionDto);  }  public void sumAtzdForDpDetailFN(String createTzdType, String billType, String pDpDetailId, String pUserId,  String pProcDate, String pRemark, RequestMeta requestMeta) {    dpDetailService.sumAzdForDpDetail(createTzdType, billType, pDpDetailId, pUserId, pProcDate, pRemark);  }  public String cancelAtadForDpDetailFN(String pCreateTzdType, String pPkName, String pPkValue, int pNd,  String pRemark, RequestMeta requestMeta) {    return dpDetailService.cancelAtadForDpDetail(pCreateTzdType, pPkName, pPkValue, pNd, pRemark);  }  /**   *TODO 计划调整批量送审   */  public void sendForDpAdjustFN(List dpDetailList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < dpDetailList.size(); i++) {      DpDetail dpDetail = (DpDetail) dpDetailList.get(i);      try {        dpDetailService.sendForDpAdjust(dpDetail);      } catch (Exception ex) {        errorInfo.append(dpDetail.getDpDetailId()).append("\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的用款计划送审失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   *TODO 计划编辑批量送审   */  public void sendForDpEditFN(List dpDetailList, RequestMeta meta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < dpDetailList.size(); i++) {      DpDetail dpDetail = (DpDetail) dpDetailList.get(i);      try {        dpDetailService.sendForDpEdit(dpDetail);      } catch (Exception ex) {        errorInfo.append(dpDetail.getDpDetailId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的用款计划送审失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 用款计划调整批量审核   */  public void auditForDpAdjustFN(List dpDetailList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < dpDetailList.size(); i++) {      DpDetail dpDetail = (DpDetail) dpDetailList.get(i);      try {        dpDetailService.auditForDpAdjust(dpDetail);      } catch (Exception ex) {        errorInfo.append(dpDetail.getDpDetailId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的用款计划审核失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 用款计划编辑批量审核   */  public void auditForDpEditFN(List dpDetailList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < dpDetailList.size(); i++) {      DpDetail dpDetail = (DpDetail) dpDetailList.get(i);      try {        dpDetailService.auditForDpEdit(dpDetail);      } catch (Exception ex) {        errorInfo.append(dpDetail.getDpDetailId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的用款计划审核失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**   * 用款计划下达   */  public void effectForDpDetail(List dpDetailList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < dpDetailList.size(); i++) {      DpDetail dpDetail = (DpDetail) dpDetailList.get(i);      try {        dpDetailService.effecForDpDetail(dpDetail);      } catch (Exception ex) {        errorInfo.append(dpDetail.getDpDetailId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的用款计划下达失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  /**    * @用款计划反下达   */  public void uneffectForDpDetail(List dpDetailList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < dpDetailList.size(); i++) {      DpDetail dpDetail = (DpDetail) dpDetailList.get(i);      try {        dpDetailService.uneffecForDpDetail(dpDetail);      } catch (Exception ex) {        errorInfo.append(dpDetail.getDpDetailId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的用款计划反下达失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public DpDetail unAuditForDpAdjustFN(DpDetail dpDetail, RequestMeta requestMeta) {    return dpDetailService.unAuditForDpEdit(dpDetail);  }  public void unAuditForDpAdjustFN(List dpDetailList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < dpDetailList.size(); i++) {      DpDetail dpDetail = (DpDetail) dpDetailList.get(i);      try {        dpDetailService.unAuditForDpAdjust(dpDetail);      } catch (Exception ex) {        errorInfo.append(dpDetail.getDpDetailId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的用款计划销审失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public DpDetail unAuditForDpEditFN(DpDetail dpDetail, RequestMeta requestMeta) {    return dpDetailService.unAuditForDpEdit(dpDetail);  }  public void unAuditForDpEditFN(List dpDetailList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < dpDetailList.size(); i++) {      DpDetail dpDetail = (DpDetail) dpDetailList.get(i);      try {        dpDetailService.unAuditForDpEdit(dpDetail);      } catch (Exception ex) {        errorInfo.append(dpDetail.getDpDetailId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的用款计划销审失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public DpDetail untreadForDpAdjustFN(DpDetail dpDetail, RequestMeta requestMeta) {    return dpDetailService.untreadForDpAdjust(dpDetail);  }  public void untreadForDpAdjustFN(List dpDetailList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < dpDetailList.size(); i++) {      DpDetail dpDetail = (DpDetail) dpDetailList.get(i);      try {        dpDetailService.untreadForDpAdjust(dpDetail);      } catch (Exception ex) {        errorInfo.append(dpDetail.getDpDetailId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的用款计划退回失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public DpDetail untreadForDpEditFN(DpDetail dpDetail, RequestMeta requestMeta) {    return dpDetailService.untreadForDpEdit(dpDetail);  }  public void untreadForDpEditFN(List dpDetailList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < dpDetailList.size(); i++) {      DpDetail dpDetail = (DpDetail) dpDetailList.get(i);      try {        dpDetailService.untreadForDpEdit(dpDetail);      } catch (Exception ex) {        errorInfo.append(dpDetail.getDpDetailId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的用款计划退回失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void blankoutDpDetailForDpAdjustFN(List dpDetailList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < dpDetailList.size(); i++) {      DpDetail dpDetail = (DpDetail) dpDetailList.get(i);      try {        dpDetailService.blankoutDpDetailForDpAdjust(dpDetail);      } catch (Exception ex) {        errorInfo.append(dpDetail.getDpDetailId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的用款计划作废失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void blankoutDpDetailForDpAdjustFN(DpDetail dpDetail, RequestMeta requestMeta) {    this.dpDetailService.blankoutDpDetailForDpAdjust(dpDetail);  }  public void blankoutDpDetailForDpEditFN(List dpDetailList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < dpDetailList.size(); i++) {      DpDetail dpDetail = (DpDetail) dpDetailList.get(i);      try {        dpDetailService.blankoutDpDetailForDpEdit(dpDetail);      } catch (Exception ex) {        errorInfo.append(dpDetail.getDpDetailId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的用款计划作废失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void blankoutDpDetailForDpEditFN(DpDetail dpDetail, RequestMeta requestMeta) {    this.dpDetailService.blankoutDpDetailForDpEdit(dpDetail);  }  public void blankoutDpDetail2ForDpEditFN(List dpDetailList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < dpDetailList.size(); i++) {      DpDetail dpDetail = (DpDetail) dpDetailList.get(i);      try {        dpDetailService.blankoutDpDetail2ForDpEdit(dpDetail);      } catch (Exception ex) {        errorInfo.append(dpDetail.getDpDetailId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的用款计划作废失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void blankoutDpDetail2ForDpEditFN(DpDetail dpDetail, RequestMeta requestMeta) {    this.dpDetailService.blankoutDpDetail2ForDpEdit(dpDetail);  }  public void callbackForDpAdjustFN(List dpDetailList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < dpDetailList.size(); i++) {      DpDetail dpDetail = (DpDetail) dpDetailList.get(i);      try {        dpDetailService.callbackForDpAdjust(dpDetail);      } catch (Exception ex) {        errorInfo.append(dpDetail.getDpDetailId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的用款计划收回失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void callbackForDpAdjustFN(DpDetail dpDetail, RequestMeta requestMeta) {    this.dpDetailService.callbackForDpAdjust(dpDetail);  }  public void callbackForDpEditFN(List dpDetailList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为 ");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < dpDetailList.size(); i++) {      DpDetail dpDetail = (DpDetail) dpDetailList.get(i);      try {        dpDetailService.callbackForDpEdit(dpDetail);      } catch (Exception ex) {        errorInfo.append(dpDetail.getDpDetailId() + "\n");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的用款计划收回失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void sendTZDForDpEditFN(List dpDetailList, RequestMeta requestMeta) {    this.dpDetailService.sendTZDForDpEdit(dpDetailList);  }  public PrintObject getApproveTableViewListForPrint(List dpDetailIdList, int nd, RequestMeta requestMeta) {    return this.dpDetailService.getApproveTableViewListForPrint(dpDetailIdList, nd);  }  public List getApplyTableForMonth(List detailIdList, String nd, String coCode, RequestMeta requestMeta) {    return this.dpDetailService.getApplyTableForMonth(detailIdList, nd, coCode);  }  public void callbackForDpEditFN(DpDetail dpDetail, RequestMeta requestMeta) {    this.dpDetailService.callbackForDpEdit(dpDetail);  }  public List getDpDetailForDpDetailQuery(ElementConditionDto dto, RequestMeta requestMeta) {    return this.dpDetailService.getDpDetailForDpDetailQuery(dto);  }  public List getDpDetailForDpDetailEffect(ElementConditionDto dto, RequestMeta requestMeta) {    return this.dpDetailService.getDpDetailForDpDetailEffect(dto);  }  public List getDtztForDpUncollectedList(ElementConditionDto conditionDto, RequestMeta requestMeta) {    return this.dpDetailService.getDtztForDpUncollectedList(conditionDto);  }  public List getDpDetail(ElementConditionDto dto, RequestMeta requestMeta) {    return this.dpDetailService.getDpDetail(dto);  }  public List getDpBalanceForUpdate(ElementConditionDto dto, RequestMeta requestMeta) {    return this.dpDetailService.getDpBalanceForUpdate(dto);  }  public List getDpDetailBySumDpDetailId(String sumDpDetailId, RequestMeta requestMeta) {    return this.dpDetailService.getDpDetailBySumDpDetailId(sumDpDetailId);  }  public void sumDpDetailFN(List DpDetailList, RequestMeta requestMeta) {    this.dpDetailService.sumDpDetail(DpDetailList);  }  public void cancelSumDpDetail(List DpDetailList, RequestMeta requestMeta) {    this.dpDetailService.cancelSumDpDetail(DpDetailList);  }  public PrintObject genSumMainSubPrintObjectFN(List printList, boolean isSumSubData, RequestMeta requestMeta) {    return this.dpDetailService.genSumMainSubPrintObject(printList, isSumSubData);  }}