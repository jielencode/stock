package com.ufgov.zc.server.gwk.dao.ibatis;import java.sql.SQLException;import java.util.List;import org.springframework.orm.ibatis.SqlMapClientCallback;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;import com.ibatis.sqlmap.client.SqlMapExecutor;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.server.gwk.dao.ICpCctradeInfoDao;import com.ufgov.zc.server.system.util.NumLimUtil;public class CpCctradeInfoDao extends SqlMapClientDaoSupport implements ICpCctradeInfoDao {  public void insert(final List tradeInfoList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < tradeInfoList.size(); i++) {          executor.insert("CpCctradeInfo.insert", tradeInfoList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public List getTradeInfo(ElementConditionDto dto) {//    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList("CpCctradeInfo.getTradeInfo", dto);  }  public void deleteTradeInfo(final List tradeInfoList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < tradeInfoList.size(); i++) {          executor.insert("CpCctradeInfo.deleteTradeInfo", tradeInfoList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public void updateTradeInfoStatus(final List tradeInfoList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < tradeInfoList.size(); i++) {          executor.insert("CpCctradeInfo.updateTradeInfoStatus", tradeInfoList.get(i));        }        executor.executeBatch();        return null;      }    });  }}