package com.ufgov.zc.server.bi.service.impl;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Date;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Map.Entry;import org.josql.Query;import org.josql.QueryResults;import com.ufgov.zc.common.bi.model.BcDetail;import com.ufgov.zc.common.bi.model.BiApply;import com.ufgov.zc.common.bi.model.BiTrack;import com.ufgov.zc.common.commonbiz.model.BiBalance;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.dto.PrintObject;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.server.bi.dao.IBcDetailDao;import com.ufgov.zc.server.bi.dao.IBiApplyDao;import com.ufgov.zc.server.bi.dao.IBiTrackDao;import com.ufgov.zc.server.bi.service.IBiXService;import com.ufgov.zc.server.commonbiz.dao.IBiBalanceDao;import com.ufgov.zc.server.system.dao.IAsOptionDao;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.print.PrintManager;import com.ufgov.zc.server.system.util.NumUtil;import com.ufgov.zc.server.system.util.RequestMetaUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;public class BiXService implements IBiXService {  private IBcDetailDao bcDetailDao;  private IBiApplyDao biApplyDao;  private IBiTrackDao biTrackDao;  private IBiBalanceDao biBalanceDao;  private IAsOptionDao asOptionDao;  private IWorkflowDao workflowDao;  private WFEngineAdapter wfEngineAdapter;  /**   * @return the wfEngineAdapter   */  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  /**   * @param wfEngineAdapter the wfEngineAdapter to set   */  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  /**   * @return the workflowDao   */  public IWorkflowDao getWorkflowDao() {    return workflowDao;  }  /**   * @param workflowDao the workflowDao to set   */  public void setWorkflowDao(IWorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  /**   * @return the asOptionDao   */  public IAsOptionDao getAsOptionDao() {    return asOptionDao;  }  /**   * @param asOptionDao the asOptionDao to set   */  public void setAsOptionDao(IAsOptionDao asOptionDao) {    this.asOptionDao = asOptionDao;  }  /**   * @return the biBalanceDao   */  public IBiBalanceDao getBiBalanceDao() {    return biBalanceDao;  }  /**   * @param biBalanceDao the biBalanceDao to set   */  public void setBiBalanceDao(IBiBalanceDao biBalanceDao) {    this.biBalanceDao = biBalanceDao;  }  /**   * @return the biTrackDao   */  public IBiTrackDao getBiTrackDao() {    return biTrackDao;  }  /**   * @param biTrackDao the biTrackDao to set   */  public void setBiTrackDao(IBiTrackDao biTrackDao) {    this.biTrackDao = biTrackDao;  }  public IBcDetailDao getBcDetailDao() {    return bcDetailDao;  }  public void setBcDetailDao(IBcDetailDao bcDetailDao) {    this.bcDetailDao = bcDetailDao;  }  public List getBcDetail(ElementConditionDto dto) {    return bcDetailDao.getBcDetail(dto);  }  public List getBiApply(ElementConditionDto dto) {    return biApplyDao.getBiApply(dto);  }  public void saveBiApply(List insertList, List updateList) {    this.biApplyDao.updateBiApply(updateList);    this.biApplyDao.insertBiApply(insertList);  }  public void saveBcDetail(List insertList, List updateList) {    this.bcDetailDao.updateBcDetail(updateList);    this.bcDetailDao.insertBcDetail(insertList);  }  public void deleteBiApply(List biApplyIdList) {    this.biApplyDao.deleteBiApply(biApplyIdList);  }  public void dzBiApply(List biApplyIdList, Date date) {    this.biApplyDao.dzBiApply(biApplyIdList, date);  }  public void cancelDzBiApply(List biApplyIdList) {    this.biApplyDao.cancelDzBiApply(biApplyIdList);  }  public String genBiApplyId(BiApply biApply) {    return NumUtil.getInstance().getNo(RequestMetaUtil.getCompoId(), "BI_APPLY_ID", biApply);  }  public String genBiApplyInputGroupId(BiApply biApply) {    return NumUtil.getInstance().getNo(RequestMetaUtil.getCompoId(), "INPUT_GROUP_ID", biApply);  }  public String genBcDetailId(BcDetail bcDetail) {    return NumUtil.getInstance().getNo(RequestMetaUtil.getCompoId(), "BC_DETAIL_ID", bcDetail);  }  public IBiApplyDao getBiApplyDao() {    return biApplyDao;  }  public void setBiApplyDao(IBiApplyDao biApplyDao) {    this.biApplyDao = biApplyDao;  }  public void deleteBcDetail(List idList) {    this.bcDetailDao.deleteBcDetail(idList);  }  public void createBiTrack(List bcDetails, String inputor, Date transDate) {    BiTrack track = null;    //新建bitrack    doCreateBitrack(bcDetails, inputor, transDate);    //更新bcDetail    doUpdateBcDetail(bcDetails);    //更新bibalance    doUpdateBiBalance(bcDetails);  }  private void doCreateBitrack(List bcDetails, String inputor, Date transDate) {    BcDetail bcDetail = null;    BiBalance balance = null;    List trackList = new ArrayList();    String userId = RequestMetaUtil.getSvUserID();    int length = bcDetails.size();    for (int i = 0; i < length; i++) {      bcDetail = (BcDetail) bcDetails.get(i);      balance = bcDetail.getBiBalance();      BiTrack track = new BiTrack();      track.setCurMoney(bcDetail.getCurrentMoney());      track.setOrgMoney(bcDetail.getCurrentMoney());      track.setastatusCode("0");      track.setOriginBalanceId(balance.getBiBalanceId());      track.setCreateType("0");      track.setBiLevel("03");      track.setBiAdjustCode("101");      track.setNd(bcDetail.getNd());      track.setBiTrackId(NumUtil.getInstance().getNo("BI_BASE_CONSTRUCT_INPUT", "BI_TRACK_ID", track));      track.setInputGroupId(NumUtil.getInstance().getNo("BI_BASE_CONSTRUCT_INPUT", "INPUT_GROUP_ID", track));      //      track.setBiTrackId("botest");      //      track.setInputGroupId("botest");      track.setProcDate(transDate);      track.setInputorId(inputor);      track.setCdate(transDate);      track.setCoCode(bcDetail.getCoCode());      track.setOrgCode(balance.getOrgCode());      track.setBaccCode(balance.getBaccCode());      track.setBaccName(balance.getBaccName());      track.setOutlayCode(balance.getOutlayCode());      track.setOutlayName(balance.getOutlayName());      track.setProjectTypeCode(balance.getProjectTypeCode());      track.setProjectTypeName(balance.getProjectTypeName());      track.setProjectCode(bcDetail.getProjectCode());      track.setPaytypeCode(bcDetail.getPaytypeCode());      track.setPayoutCode(bcDetail.getPayoutCode());      track.setOutlayCode(bcDetail.getOutlayCode());      track.setRemark(bcDetail.getRemark());      track.setProjectName(balance.getProjectName());      track.setFundCode(balance.getFundCode());      track.setOriginCode(balance.getOriginCode());      track.setManageCode(balance.getManageCode());      track.setInceptDocCode(balance.getInceptDocCode());      track.setSendDocCode(balance.getSendDocCode());      track.setSendDocName(balance.getSendDocName());      track.setDattr1(balance.getDattr1());      track.setDattr2(balance.getDattr2());      track.setDattr3(balance.getDattr3());      track.setDattr4(balance.getDattr4());      track.setDattr5(balance.getDattr5());      track.setIsValid("1");      track.setOriginBalanceId(balance.getBiBalanceId());      track.setBiBillId(bcDetail.getBcDetailId());      track.setIsControl("0");      Long draftid = workflowDao.createDraftId();      AsWfDraft asWfDraft = new AsWfDraft();      asWfDraft.setCompoId("BI_BASE_CONSTRUCT_INPUT");      asWfDraft.setWfDraftName(track.getTitleField());      asWfDraft.setUserId(userId);      asWfDraft.setMasterTabId("BI_TRACK");      asWfDraft.setWfDraftId(new BigDecimal(draftid.toString()));      workflowDao.insertAsWfdraft(asWfDraft);      track.setProcessInstId(draftid);      trackList.add(track);    }    biTrackDao.insertBiTrack(trackList);  }  private void doUpdateBcDetail(List bcDetails) {    String optionValue = asOptionDao.getAsOption("OPT_CP_DECBAL_FLAG_BI").getOptVal();    int length = bcDetails.size();    BcDetail detail = null;    for (int i = 0; i < bcDetails.size(); i++) {      detail = (BcDetail) bcDetails.get(i);      BigDecimal money = detail.getUseMoney().add(detail.getCurrentMoney());      detail.setUseMoney(money);      detail.setIsForArm("true");      BigDecimal tag = detail.getTag().add(new BigDecimal(1));      detail.setTag(tag);    }    bcDetailDao.updateBcDetail(bcDetails);  }  private void doUpdateBiBalance(List bcDetails) {    String optionValue = asOptionDao.getAsOption("OPT_CP_DECBAL_FLAG_BI").getOptVal();    if ("1".equals(optionValue))      return;    String sql = "select biBalance.biBalanceId, biBalance.biAssignMoneyDoubleValue,  sum(currentMoneyDoubleValue) from "    + BcDetail.class.getName() + " group by biBalance.biBalanceId limit 1";    try {      List balances = new ArrayList();      Query query = new Query();      query.parse(sql);      query.execute(bcDetails);      QueryResults results = query.getQueryResults();      Map groupResult = results.getGroupByResults();      Iterator itera = groupResult.entrySet().iterator();      while (itera.hasNext()) {        Entry entry = (Entry) itera.next();        String balanceId = (String) ((List) entry.getKey()).get(0);        List values = (List) entry.getValue();        List value = (List) values.get(0);        BiBalance balance = new BiBalance();        balance.setBiBalanceId(balanceId);        Double assignMoney = (Double) value.get(1);        Double sumMoney = (Double) value.get(2);        BigDecimal money = new BigDecimal(assignMoney.doubleValue() + sumMoney.doubleValue());        balance.setBiAssignMoney(money);        balances.add(balance);      }      biBalanceDao.updateBiBalanceForArmTrackInput(balances);    } catch (Exception ex) {      throw new RuntimeException(ex);    }  }  public void sendDownBcDetail(List idList) {    this.bcDetailDao.sendDownBcDetail(idList);  }  public void callBackBcDetail(List idList) {    this.bcDetailDao.callBackBcDetail(idList);  }  public void sendForBcInput(List trackList) {    BiTrack bill = null;    BiTrack track = new BiTrack();    String optionValue = asOptionDao.getAsOption("OPT_CP_DECBAL_FLAG_BI").getOptVal();    for (int i = 0; i < trackList.size(); i++) {      bill = (BiTrack) trackList.get(i);      wfEngineAdapter.newCommit(bill.getComment(), bill, null);      track.setBiTrackId(bill.getBiTrackId());      track.setNd(bill.getNd());      List tracks = biTrackDao.getBiTrackForQueryData(track);      if (tracks.size() > 0) {        bill = (BiTrack) biTrackDao.getBiTrackForQueryData(track).get(0);        writeBalbance(bill, optionValue);      }    }  }  public void commitForBcInput(List trackList) {    BiTrack bill = null;    BiTrack track = new BiTrack();    String optionValue = asOptionDao.getAsOption("OPT_CP_DECBAL_FLAG_BI").getOptVal();    for (int i = 0; i < trackList.size(); i++) {      bill = (BiTrack) trackList.get(i);      wfEngineAdapter.commit(bill.getComment(), bill, null);      track.setBiTrackId(bill.getBiTrackId());      track.setNd(bill.getNd());      bill = (BiTrack) biTrackDao.getBiTrackForQueryData(track).get(0);      writeBalbance(bill, optionValue);    }  }  public PrintObject genBiTrackPrintObject(List trackList) {    // TODO Auto-generated method stub    return PrintManager.genMainBillPrintObject(trackList);  }  public void delBiTrack(List tracks) {    // TODO Auto-generated method stub    String status = asOptionDao.getAsOption("OPT_CP_DECBAL_FLAG_BI").getOptVal();    bcDetailDao.delBiTrack(tracks, status);  }  public List getBcDetailForArmInput(ElementConditionDto dto) {    // TODO Auto-generated method stub    return bcDetailDao.getBcDetailForArmInput(dto);  }  private void writeBalbance(BiTrack bill, String status) {    BiBalance balance = null;    //终审状态    if (bill.getastatusCode().equals("3") && "1".equals(status)) {      balance = new BiBalance();      balance.setBiBalanceId(bill.getOriginBalanceId());      balance.setBiAssignMoney(bill.getCurMoney());      biBalanceDao.updateBiBalanceForArmTrackInput2(balance);    }  }}