package com.ufgov.zc.server.bi.dao.ibatis;import java.sql.SQLException;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.orm.ibatis.SqlMapClientCallback;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;import com.ibatis.sqlmap.client.SqlMapExecutor;import com.ufgov.zc.common.bi.model.BiIncome;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.server.bi.dao.IBiIncomeDao;import com.ufgov.zc.server.system.util.OrderColumnsUtil;import com.ufgov.zc.server.system.util.RequestMetaUtil;public class BiIncomeDao extends SqlMapClientDaoSupport implements IBiIncomeDao {  public List getBiIncome(ElementConditionDto dto) {    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("BiIncome.getBiIncome", dto);  }  public void insertBiIncome(List biIncomeList) {    final List list = biIncomeList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          BiIncome value = (BiIncome) list.get(i);          executor.insert("BiIncome.insertBiIncome", value);        }        executor.executeBatch();        return null;      }    });  }  public void updateBiIncome(List biIncomeList) {    final List list = biIncomeList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          BiIncome value = (BiIncome) list.get(i);          executor.insert("BiIncome.updateBiIncome", value);        }        executor.executeBatch();        return null;      }    });  }  public void deleteBiIncome(List biIncomeIdList) {    if (biIncomeIdList.size() == 0) {      return;    }    Map map = new HashMap();    map.put("biIncomeIdList", biIncomeIdList);    this.getSqlMapClientTemplate().delete("BiIncome.deleteBiIncome", map);  }}