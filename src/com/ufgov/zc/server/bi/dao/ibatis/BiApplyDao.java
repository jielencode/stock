package com.ufgov.zc.server.bi.dao.ibatis;import java.sql.SQLException;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.orm.ibatis.SqlMapClientCallback;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;import com.ibatis.sqlmap.client.SqlMapExecutor;import com.ufgov.zc.common.bi.model.BiApply;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.server.bi.dao.IBiApplyDao;import com.ufgov.zc.server.system.util.OrderColumnsUtil;import com.ufgov.zc.server.system.util.RequestMetaUtil;public class BiApplyDao extends SqlMapClientDaoSupport implements IBiApplyDao {  public List getBiApply(ElementConditionDto dto) {    dto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("BiApply.getBiApply", dto);  }  public void insertBiApply(List biApplyList) {    final List list = biApplyList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          BiApply value = (BiApply) list.get(i);          executor.insert("BiApply.insertBiApply", value);        }        executor.executeBatch();        return null;      }    });  }  public void updateBiApply(List biApplyList) {    final List list = biApplyList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          BiApply value = (BiApply) list.get(i);          executor.update("BiApply.updateBiApply", value);        }        executor.executeBatch();        return null;      }    });  }  public void deleteBiApply(List biApplyIdList) {    if (biApplyIdList.size() == 0) {      return;    }    Map map = new HashMap();    map.put("biApplyIdList", biApplyIdList);    this.getSqlMapClientTemplate().delete("BiApply.deleteBiApply", map);  }  public void dzBiApply(List biApplyIdList, Date date) {    if (biApplyIdList.size() == 0) {      return;    }    Map map = new HashMap();    map.put("date", date);    map.put("biApplyIdList", biApplyIdList);    this.getSqlMapClientTemplate().update("BiApply.updateBiApplyForIsDz", map);  }  public void cancelDzBiApply(List biApplyIdList) {    if (biApplyIdList.size() == 0) {      return;    }    Map map = new HashMap();    map.put("biApplyIdList", biApplyIdList);    this.getSqlMapClientTemplate().update("BiApply.updateBiApplyForCancelDz", map);  }}