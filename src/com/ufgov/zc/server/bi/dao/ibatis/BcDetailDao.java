package com.ufgov.zc.server.bi.dao.ibatis;import java.math.BigDecimal;import java.sql.SQLException;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.orm.ibatis.SqlMapClientCallback;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;import com.ibatis.sqlmap.client.SqlMapExecutor;import com.ufgov.zc.common.bi.model.BcDetail;import com.ufgov.zc.common.bi.model.BiTrack;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.server.bi.dao.IBcDetailDao;public class BcDetailDao extends SqlMapClientDaoSupport implements IBcDetailDao {  public List getBcDetail(ElementConditionDto dto) {    return this.getSqlMapClientTemplate().queryForList("BcDetail.getBcDetail", dto);  }  public void insertBcDetail(List biList) {    final List list = biList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          BcDetail value = (BcDetail) list.get(i);          executor.insert("BcDetail.insertBcDetail", value);        }        executor.executeBatch();        return null;      }    });  }  public void updateBcDetail(List biList) {    final List list = biList;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < list.size(); i++) {          BcDetail value = (BcDetail) list.get(i);          executor.update("BcDetail.updateBcDetail", value);        }        executor.executeBatch();        return null;      }    });  }  public void deleteBcDetail(List idList) {    if (idList.size() == 0) {      return;    }    Map map = new HashMap();    map.put("idList", idList);    this.getSqlMapClientTemplate().delete("BcDetail.deleteBcDetail", map);  }  public void sendDownBcDetail(List idList) {    if (idList.size() == 0) {      return;    }    Map map = new HashMap();    map.put("idList", idList);    this.getSqlMapClientTemplate().update("BcDetail.sendDownBcDetail", map);  }  public void callBackBcDetail(List idList) {    if (idList.size() == 0) {      return;    }    Map map = new HashMap();    map.put("idList", idList);    this.getSqlMapClientTemplate().update("BcDetail.callBackBcDetail", map);  }  public void delBiTrack(final List tracks, final String status) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        // TODO Auto-generated method stub        BiTrack track = null;        Map param = new HashMap();        executor.startBatch();        for (int i = 0; i < tracks.size(); i++) {          param.clear();          track = (BiTrack) tracks.get(i);          String trackid = track.getBiTrackId();          String balanceid = track.getOriginBalanceId();          String bcdetailid = track.getBiBillId();          BigDecimal money = track.getCurMoney();          executor.delete("BcDetail.deleteTrackById", trackid);          if (status.equals("0")) {            param.put("id", balanceid);            param.put("money", money);            executor.update("BcDetail.withdrawMoneyFromBalance", param);          }          param.put("id", bcdetailid);          param.put("money", money);          executor.update("BcDetail.withdrawMoneyFromTrack", param);        }        executor.executeBatch();        return null;      }    });  }  public List getBcDetailForArmInput(ElementConditionDto dto) {    // TODO Auto-generated method stub    return this.getSqlMapClientTemplate().queryForList("BcDetail.getBcDetailFoArmInput", dto);  }}