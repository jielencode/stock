package com.ufgov.zc.server.bi.publish.impl;import java.util.List;import com.ufgov.zc.common.bi.model.BiCdTrack;import com.ufgov.zc.common.bi.publish.IBiCdTrackServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.util.ExceptionUtil;import com.ufgov.zc.server.bi.service.IBiCdTrackService;public class BiCdTrackServiceDelegate implements IBiCdTrackServiceDelegate {  private IBiCdTrackService biCdTrackService;  public IBiCdTrackService getBiCdTrackService() {    return biCdTrackService;  }  public void setBiCdTrackService(IBiCdTrackService biCdTrackService) {    this.biCdTrackService = biCdTrackService;  }  public void carryDownFN(List biCdTrackList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biCdTrackList.size(); i++) {      BiCdTrack biCdTrack = (BiCdTrack) biCdTrackList.get(i);      try {        biCdTrackService.carryDown(biCdTrack);      } catch (Exception ex) {        errorInfo.append(biCdTrack.getOriginBalanceId()).append(" ");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的单据处理失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public List getBiCdTrack(ElementConditionDto dto, RequestMeta requestMeta) {    return biCdTrackService.getBiCdTrack(dto);  }  public void auditFN(List biCdTrackList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biCdTrackList.size(); i++) {      BiCdTrack biCdTrack = (BiCdTrack) biCdTrackList.get(i);      try {        biCdTrackService.audit(biCdTrack);      } catch (Exception ex) {        errorInfo.append(biCdTrack.getOriginBalanceId()).append(" ");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的单据处理失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void blankoutFN(List biCdTrackList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biCdTrackList.size(); i++) {      BiCdTrack biCdTrack = (BiCdTrack) biCdTrackList.get(i);      try {        biCdTrackService.blankout(biCdTrack);      } catch (Exception ex) {        errorInfo.append(biCdTrack.getOriginBalanceId()).append(" ");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的单据处理失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void unauditFN(List biCdTrackList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biCdTrackList.size(); i++) {      BiCdTrack biCdTrack = (BiCdTrack) biCdTrackList.get(i);      try {        biCdTrackService.unaudit(biCdTrack);      } catch (Exception ex) {        errorInfo.append(biCdTrack.getOriginBalanceId()).append(" ");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的单据处理失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void untreadFN(List biCdTrackList, RequestMeta requestMeta) {    StringBuffer errorInfo = new StringBuffer("id为");    StringBuffer stackTraceMessage = new StringBuffer();    boolean fail = false;    for (int i = 0; i < biCdTrackList.size(); i++) {      BiCdTrack biCdTrack = (BiCdTrack) biCdTrackList.get(i);      try {        biCdTrackService.untread(biCdTrack);      } catch (Exception ex) {        errorInfo.append(biCdTrack.getOriginBalanceId()).append(" ");        stackTraceMessage.append(ExceptionUtil.getStackTrace(ex));        fail = true;      }    }    errorInfo.append("的单据处理失败！");    if (fail) {      BusinessException be = new BusinessException(errorInfo.toString());      be.setStackTraceMessage(stackTraceMessage.toString());      throw be;    }  }  public void importToNextYearFN(List biCdTrackList, RequestMeta requestMeta) {    biCdTrackService.importToNextYear(biCdTrackList);  }}