package com.ufgov.zc.server.cp.dao.ibatis;import java.math.BigDecimal;import java.sql.SQLException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.josql.Query;import org.josql.QueryResults;import org.springframework.orm.ibatis.SqlMapClientCallback;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;import com.ibatis.sqlmap.client.SqlMapExecutor;import com.ufgov.zc.common.commonbiz.util.DpBalanceViewGetter;import com.ufgov.zc.common.cp.model.CpApply;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.DaoException;import com.ufgov.zc.common.system.exception.JoSqlDataHandleException;import com.ufgov.zc.server.cp.dao.ICpApplyDao;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.system.util.OrderColumnsUtil;import com.ufgov.zc.server.system.util.RequestMetaUtil;public class CpApplyDao extends SqlMapClientDaoSupport implements ICpApplyDao {  public Object insertCpApply(CpApply cpApply) {    return this.getSqlMapClientTemplate().insert("CpApply.insertCpApply", cpApply);  }  public void insertCpApply(final List beanList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < beanList.size(); i++) {          executor.insert("CpApply.insertCpApply", beanList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public int updateCpApply(CpApply cpApply) {    return this.getSqlMapClientTemplate().update("CpApply.updateCpApply", cpApply);  }  public int deleteCpApplyById(String id) {    return this.getSqlMapClientTemplate().delete("CpApply.deleteCpApplyById", id);  }  public void deleteCpApply(final List idList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < idList.size(); i++) {          executor.insert("CpApply.deleteCpApplyById", idList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public int getCpApplyCount() {    return ((Integer) this.getSqlMapClientTemplate().queryForObject("CpApply.getCpApplyCount")).intValue();  }  public List getCpApply(int pageNum, int pageSize) {    int startRow = pageSize * (pageNum - 1) + 1;    int endRow = pageSize * pageNum;    Map map = new HashMap();    map.put("startRow", new Integer(startRow));    map.put("endRow", new Integer(endRow));    return this.getSqlMapClientTemplate().queryForList("CpApply.getCpApplyPageData", map);  }  public List getCpApply(int nd) {    return this.getSqlMapClientTemplate().queryForList("CpApply.getCpApply", new Integer(nd));  }  public List getCpApplyForCpDaAuditList(ElementConditionDto elementDto) {    elementDto.setDpBalanceMonthView(DpBalanceViewGetter.getMonthView(elementDto.getMonth()));//    elementDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(elementDto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    elementDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("CpApply.getCpApplyForCpDaAuditList", elementDto);  }  public CpApply getCpApplyById(String id) {    Object obj = this.getSqlMapClientTemplate().queryForObject("CpApply.selectCpApplyById", id);    if (obj != null) {      return (CpApply) obj;    } else {      return null;    }  }  public CpApply getCpApply(ElementConditionDto conditionDto) {    Object obj = this.getSqlMapClientTemplate().queryForObject("CpApply.getCpApplyBean", conditionDto);    if (obj != null) {      return (CpApply) obj;    } else {      return null;    }  }  public List getCpApplyForCpDtzd(ElementConditionDto elementDto) {    Map param = new HashMap();    param.put("isCreateVou", elementDto.getIsCreateVou());    param.put("coCode", elementDto.getCoCode());    param.put("fundCode", elementDto.getFundCode());    param.put("fundCode2", elementDto.getFundCode2());    param.put("numLimitStr", elementDto.getNumLimitStr());    param.put("coCodeFilter", elementDto.getCoCodeFilter());    param.put("nd", new Integer(elementDto.getNd()));    param.put("nd", new Integer(elementDto.getNd()));    param.put("startDate", elementDto.getStartDate());    param.put("endDate", elementDto.getEndDate());    param.put("clearBankCode", elementDto.getClearBankCode());    param.put("bankCode", elementDto.getBankCode());    List list = this.getSqlMapClientTemplate().queryForList("CpApply.getCpApplyForCpDtzd", param);    String josql = "select * from " + CpApply.class.getName() + " ORDER BY  cpApplyId desc ";    Query query = new Query();    QueryResults rs = null;    try {      query.parse(josql);      rs = query.execute(list);    } catch (Exception e) {      new JoSqlDataHandleException(e.getMessage(), e);    }    List list2 = rs.getResults();    return list2;  }  public List getCpApplyForCpDaEditList(ElementConditionDto elementDto) {    elementDto.setDpBalanceMonthView(DpBalanceViewGetter.getMonthView(elementDto.getMonth()));//    elementDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(elementDto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    elementDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("CpApply.getCpApplyForCpDaEditList", elementDto);  }  public List getCpApplyForCpApplyQueryList(ElementConditionDto elementDto) {//    elementDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(elementDto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    elementDto.setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("CpApply.getCpApplyForCpApplyQueryList", elementDto);  }  public int updateCpApplyFieldValueById(String fieldName, String fieldValue, String cpApplyId) {    Map map = new HashMap();    map.put("fieldName", fieldName);    map.put("fieldValue", fieldValue);    map.put("cpApplyId", cpApplyId);    return this.getSqlMapClientTemplate().update("CpApply.updateCpApplyFieldValueById", map);  }  public int updateCpApplyDpCdUseMoneyById(String fieldName, BigDecimal dpCdUseMoney, String cpApplyId) {    Map map = new HashMap();    map.put("fieldName", fieldName);    map.put("dpCdUseMoney", dpCdUseMoney);    map.put("cpApplyId", cpApplyId);    return this.getSqlMapClientTemplate().update("CpApply.updateCpApplyDpCdUseMoneyById", map);  }  public int updateCpApplyForUndo(String isValid, String cpApplyId) {    Map map = new HashMap();    map.put("isValid", isValid);    map.put("cpApplyId", cpApplyId);    return this.getSqlMapClientTemplate().update("CpApply.updateCpApplyForUndo", map);  }  public void updateCpApplyForAudit(CpApply cpApply) {    this.getSqlMapClientTemplate().update("CpApply.updateCpApplyForAudit", cpApply);  }  public void increasePrintTimes(List cpApplyIdList) {    Map map = new HashMap();    if (cpApplyIdList.size() == 0) {      throw new DaoException("updateDpDetailBatchInfo的参数cpApplyIdList为空");    }    map.put("cpApplyIdList", cpApplyIdList);    this.getSqlMapClientTemplate().update("CpApply.increasePrintTimes", map);  }  public int updateCpApplyForAfterUnAudit(String cpApplyId) {    return this.getSqlMapClientTemplate().update("CpApply.updateCpApplyForAfterUnAudit", cpApplyId);  }  public List getCpApplyForSum(ElementConditionDto conditionDto) {//    conditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(////    conditionDto.getNumLimCompoId(), NumLimConstants.FWATCH));    conditionDto    .setOrderColumns(OrderColumnsUtil.getInstance().getOrderColumns(RequestMetaUtil.getCompoId()));    return this.getSqlMapClientTemplate().queryForList("CpApply.getCpApplyForSum", conditionDto);  }  public List getCpApplyByIdList(List idList) {    if (idList.isEmpty()) {      return new ArrayList();    }    Map param = new HashMap();    param.put("cpApplyIdList", idList);    return this.getSqlMapClientTemplate().queryForList("CpApply.getCpApplyByIdList", param);  }  public List getCpApplyBySumCpApplyId(List idList) {    if (idList.isEmpty()) {      return new ArrayList();    }    Map param = new HashMap();    param.put("sumCpApplyIdList", idList);    return this.getSqlMapClientTemplate().queryForList("CpApply.getCpApplyBySumCpApplyIdList", param);  }  public void updateSumCpApplyId(final List subBillList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < subBillList.size(); i++) {          executor.update("CpApply.updateSumCpApplyId", subBillList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public List getCpApplyBySumCpApplyId(String sumCpApplyId) {    Map param = new HashMap();    param.put("sumCpApplyId", sumCpApplyId);    return this.getSqlMapClientTemplate().queryForList("CpApply.getCpApplyBySumCpApplyId", param);  }  public void setSumCpApplyIdNull(final List idList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < idList.size(); i++) {          executor.update("CpApply.setSumCpApplyIdNull", idList.get(i));        }        executor.executeBatch();        return null;      }    });  }  public List getCpApplyBySumCpApplyIdForPrint(List idList) {    if (idList.isEmpty()) {      return new ArrayList();    }    Map param = new HashMap();    param.put("sumCpApplyIdList", idList);    return this.getSqlMapClientTemplate().queryForList("CpApply.getCpApplyBySumCpApplyIdForPrint", param);  }  public List getCpApplyInfo(String dpBalanceId, int nd) {    Map map = new HashMap();    map.put("nd", new Integer(nd));    map.put("dpBalanceId", dpBalanceId);    return this.getSqlMapClientTemplate().queryForList("CpApply.getCpApplyInfo", map);  }  public List getGwkTradeInfo(String cpApplyId, int nd) {    Map map = new HashMap();    map.put("nd", new Integer(nd));    map.put("cpApplyId", cpApplyId);    return this.getSqlMapClientTemplate().queryForList("CpApply.getGwkTradeInfo", map);  }  public void lockedForCpDaDpEdit(CpApply cpApply) {    this.getSqlMapClientTemplate().update("CpApply.updateCpApplyForLocked", cpApply);  }  public void unLockedForCpDaDpEdit(CpApply cpApply) {    this.getSqlMapClientTemplate().update("CpApply.updateCpApplyForUnLocked", cpApply);  }}