package com.ufgov.zc.server.cp.dao.ibatis;import java.sql.SQLException;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.orm.ibatis.SqlMapClientCallback;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;import com.ibatis.sqlmap.client.SqlMapExecutor;import com.ufgov.zc.common.cp.model.CpPlanAgentBill;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.DaoException;import com.ufgov.zc.server.cp.dao.ICpPlanAgentBillDao;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.system.util.RequestMetaUtil;import com.ufgov.zc.server.system.util.Util;public class CpPlanAgentBillDao extends SqlMapClientDaoSupport implements ICpPlanAgentBillDao {  public List getCpPlanAgentBill(ElementConditionDto elementDto) {//    elementDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(elementDto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList("CpPlanAgentBill.getCpPlanAgentBill", elementDto);  }  public List getCpPlanAgentBillForDBill(ElementConditionDto elementDto) {//    elementDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(elementDto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    return this.getSqlMapClientTemplate().queryForList("CpPlanAgentBill.getCpPlanAgentBillForDBill",    elementDto);  }  public void increasePrintTimes(List cpPlanAgentBillIdList) {    Map map = new HashMap();    if (cpPlanAgentBillIdList.size() == 0) {      throw new DaoException("cpPlanAgentBillIdList为空");    }    map.put("planAgentBillIdList", cpPlanAgentBillIdList);    this.getSqlMapClientTemplate().update("CpPlanAgentBill.increasePrintTimes", map);  }  public void increasePrintTimesForDBill(List cpPlanAgentBillIdList) {    Map map = new HashMap();    if (cpPlanAgentBillIdList.size() == 0) {      throw new DaoException("cpPlanAgentBillIdList为空");    }    map.put("planAgentBillIdList", cpPlanAgentBillIdList);    this.getSqlMapClientTemplate().update("CpPlanAgentBill.increasePrintTimesForDBill", map);  }  public String sendBank(List cpPlanBillList, String transtype, String agentType) {    Map map = new HashMap();    if (cpPlanBillList.size() == 0) {      throw new DaoException("CpPlanAgentBillDao-->sendBank的参数cpPlanBillList为空");    }    StringBuffer billids = new StringBuffer();    for (int i = 0; i < cpPlanBillList.size(); i++) {      billids.append(i > 0 ? "," : "");      billids.append(cpPlanBillList.get(i));    }    map.put("Billids", billids.toString());    map.put("Maplanagenttype", agentType);    map.put("Sender", RequestMetaUtil.getSvUserID());    map.put("Fiscal", new Integer(RequestMetaUtil.getSvNd()));    map.put("Fisperd", new Integer(RequestMetaUtil.getSvMonth()));    map.put("Transtype", transtype);    map.put("info", "");    this.getSqlMapClientTemplate().insert("CpPlanAgentBill.SP_BA_CP_SEND_TMP_AI_FOR_SENDBANK", map);    return (String) map.get("info");  }  public String sendBank(List cpPlanBillNoList, String transtype) {    int num = 0;    Map map = new HashMap();    map.put("cpPlanBillNoList", cpPlanBillNoList);    if (transtype.equals("00")) {      num = this.getSqlMapClientTemplate().update("CpPlanAgentBill.sendBankForCpPlanAgentBill", map);    } else if (transtype.equals("01")) {      num = this.getSqlMapClientTemplate().update("CpPlanAgentBill.cancelSendBankForCpPlanAgentBill", map);    }    if (cpPlanBillNoList.size() == num) {      return null;    } else {      throw new DaoException("CpPlanClearBillDao-->sendBank()更新记录不唯一");    }  }  public List getCpPlanAgentBill1(ElementConditionDto elementDto) {//    elementDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(elementDto.getNumLimCompoId(),////    NumLimConstants.FWATCH));    List list = this.getSqlMapClientTemplate().queryForList("CpPlanAgentBill.getCpPlanAgentBill1", elementDto);    List agentList = this.getSqlMapClientTemplate().queryForList("CpPlanAgentList.getCpPlanAgentList2", elementDto);    Map agentListMap = Util.createKeyListMap("planAgentBillId", agentList);    for (int i = 0; i < list.size(); i++) {      CpPlanAgentBill v = (CpPlanAgentBill) list.get(i);      List tempList1 = (List) agentListMap.get(v.getPlanAgentBillId());      if (tempList1 != null) {        v.setAgentLists(tempList1);      }    }    return list;  }  public void insertCpPlanAgentBill(final List cpPlanAgentBillList) {    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        for (int i = 0; i < cpPlanAgentBillList.size(); i++) {          CpPlanAgentBill bill = (CpPlanAgentBill) cpPlanAgentBillList.get(i);          Map map = new HashMap();          map.put("nd", new Integer(bill.getNd()));          map.put("planAgentBillId", bill.getPlanAgentBillId());          map.put("coCode", bill.getCoCode());          map.put("fundCode", bill.getFundCode());          map.put("manageCode", bill.getManageCode());          map.put("originCode", bill.getOriginCode());          executor.insert("CpPlanAgentBill.insert", bill);          executor.update("CpPlanAgentBill.updateCoCodeName", map);          executor.update("CpPlanAgentBill.updateFundName", map);          executor.update("CpPlanAgentBill.updateManageName", map);          executor.update("CpPlanAgentBill.updateOriginName", map);        }        executor.executeBatch();        return null;      }    });  }  public void updateDpDetailByAgentBillId(final String agentBillId, final String billNo, List detailIds) {    final List list = detailIds;    this.getSqlMapClientTemplate().execute(new SqlMapClientCallback() {      public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {        executor.startBatch();        Map param = new HashMap();        param.put("agentBillId", agentBillId);        param.put("billNo", billNo);        for (int i = 0; i < list.size(); i++) {          param.put("dpDetailId", list.get(i));          executor.update("CpPlanAgentBill.updateDpDetailByAgentBillId", param);        }        executor.executeBatch();        return null;      }    });  }  public void updateCpPlanAgentBillPrintTimes(String ids) {    this.getSqlMapClientTemplate().update("CpPlanAgentBill.updateCpPlanAgentBillPrintTimes", ids);  }  public void updateCpPlanAgentBillStatus(Map params) {    this.getSqlMapClientTemplate().update("CpPlanAgentBill.updateCpPlanAgentBillStatus", params);  }  public void deleteCpPlanAgentBill(CpPlanAgentBill bill) {    // TODO Auto-generated method stub    this.getSqlMapClientTemplate().delete("CpPlanAgentBill.deleteCpPlanAgentBill", bill);  }  public void deleteCpPlanAgentListByAgentBill(CpPlanAgentBill bill) {    // TODO Auto-generated method stub    this.getSqlMapClientTemplate().delete("CpPlanAgentBill.deleteCpPlanAgentListByAgentBill", bill);  }  public void deleteCpPlanAgentRelationByAgentBill(CpPlanAgentBill bill) {    // TODO Auto-generated method stub    this.getSqlMapClientTemplate().delete("CpPlanAgentBill.deleteCpPlanAgentRelationByAgentBill", bill);  }  public void updateDpdetailByPlanAgentBillId(CpPlanAgentBill bill) {    this.getSqlMapClientTemplate().update("CpPlanAgentBill.updateDpdetailByPlanAgentBillId",    bill.getPlanAgentBillId());  }}