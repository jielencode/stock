package com.ufgov.zc.common.zc.checkrule;import java.math.BigDecimal;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import com.ufgov.zc.common.zc.model.ZcPProMake;import com.ufgov.zc.common.zc.model.ZcPProMitem;public class ZcMakeCheckRuleBySX implements BaseRule {	public static ZcMakeCheckRuleBySX rule = new ZcMakeCheckRuleBySX();	private ZcMakeCheckRuleBySX() {	}	public static BaseRule getInstance() {		return rule;	}	// 采购中心代码	public static String limtAgeyCode = "029012";	public static List xmhwList = new ArrayList();// 货物	public static List xmgcList = new ArrayList();// 工程	public static List xmfwList = new ArrayList();// 服务	static {		xmhwList.add("A0921");		xmhwList.add("A0927");		xmhwList.add("A0929");		xmhwList.add("A08");		xmhwList.add("A0708");		xmhwList.add("A0703");		xmhwList.add("A99");		xmgcList.add("B0106");		xmgcList.add("B09");		xmgcList.add("B0203");		xmgcList.add("B0204");		xmgcList.add("B0303");		xmgcList.add("B08");		xmgcList.add("B0301");		xmgcList.add("B99");		xmfwList.add("C02");		xmfwList.add("C03");		xmfwList.add("C0601");		xmfwList.add("C0602");		xmfwList.add("C0603");		xmfwList.add("C0604");		xmfwList.add("C0901");		xmfwList.add("C0902");		xmfwList.add("C1001");		xmfwList.add("C1002");		xmfwList.add("C99");	}	public Map check(Map parameter) {		Map mainMap = new HashMap();		Map beanMap = new HashMap();		StringBuffer mainInfo = new StringBuffer();		StringBuffer resInfo = new StringBuffer();		ZcPProMake make = (ZcPProMake) parameter.get("data");		List itemList = make.getItemList();		// 按照品目分组合计数量和金额的Map,key是采购品目,值是ZcPProMitem类		Map ruleMap = new HashMap();		// 填充catalogueMap数据		this.fillGroupItem(ruleMap, itemList);		Iterator ruleType = ruleMap.keySet().iterator();		while (ruleType.hasNext()) {			String ruleId = (String) ruleType.next();			BaseRule rule = CheckRuleBySXFactory.create(ruleId);			Map map = new HashMap();			map.put("data", make);			map.put("ruleId", ruleId);			map.put("itemInfo", ruleMap.get(ruleId));			if (rule != null) {				Map checkMap = rule.check(map);				String checkStr = (String) checkMap.get("resInfo");				if (checkStr != null && !"".equals(checkStr.trim())) {					String ruleInfo = CheckRuleBySXFactory.getRuleName(ruleId);					resInfo.append("<br/><b>").append(ruleInfo)							.append(":</b><br/>&nbsp;&nbsp;&nbsp;");					// resInfo.append("<font color=\"red\">*</font>").append(checkStr);					// 提示信息					resInfo.append(checkStr);					// 校验结果的bean信息					beanMap.put(ruleId, checkMap.get("resMake"));				}			}		}		if (resInfo.length() > 0) {			mainInfo.append("<html>");			mainInfo.append(resInfo					.toString()					.replaceFirst("<br/>", "")					.replaceAll("\\{", "<b>")					.replaceAll("}",					"</b><br/>&nbsp;&nbsp;&nbsp;<font color=\"red\">*</font>")					.replaceAll("\\[", "&nbsp;<b><font color=\"blue\">[")					.replaceAll("]",					"]</font></b>&nbsp;")					.replaceAll(",",							"<br/>&nbsp;&nbsp;&nbsp;<font color=\"red\">*</font>"));			mainInfo.append("<br/><b>是否继续?</b></html>");		}		// 总体提示信息		mainMap.put("resInfo", mainInfo.toString());		// 所有的校验结果bean		mainMap.put("resMake", beanMap);		return mainMap;	}	/*	 * 	 * 按照品目分组合计数量和金额	 */	private void fillGroupItem(Map ruleMap, List itemList) {		if (itemList != null) {			for (int i = 0; i < itemList.size(); i++) {				ZcPProMitem item = (ZcPProMitem) itemList.get(i);				// 品目代码				String catalogueCode = item.getZcCatalogueCode();				if (catalogueCode != null) {					// 转换品目					String ruleCode = (String) CheckRuleBySXFactory.cata2type							.get(catalogueCode);					if (ruleCode != null) {						if (ruleMap.containsKey(ruleCode)) {							ZcPProMitem temp = (ZcPProMitem) ruleMap									.get(ruleCode);							// 数量							if (item.getZcCaigNum() != null) {								temp.setZcCaigNum(temp.getZcCaigNum().add(										item.getZcCaigNum()));							}							// 金额							if (item.getZcItemSum() != null) {								temp.setZcItemSum(temp.getZcItemSum().add(										item.getZcItemSum()));							}						} else {							ZcPProMitem temp = new ZcPProMitem();							// 数量							if (item.getZcCaigNum() == null) {								temp.setZcCaigNum(new BigDecimal(0));							} else {								temp.setZcCaigNum(item.getZcCaigNum());							}							// 金额							if (item.getZcItemSum() == null) {								temp.setZcItemSum(new BigDecimal(0));							} else {								temp.setZcItemSum(item.getZcItemSum());							}							ruleMap.put(ruleCode, temp);						}					}				}			}		}	}}