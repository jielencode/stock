package com.ufgov.zc.common.zc.pagination;/** * * <p>Title: </p> * <p>Description: 提供基础的分页算法。</p> * <p>Copyright: Copyright (c) 2007</p> * <p>Company: MiracleSoft</p> * @version 1.0 */public class GenericPagination implements Pagination {  protected static final int INITIAL_TOTAL_SIZE = Integer.MIN_VALUE;  protected int totalSize = INITIAL_TOTAL_SIZE;// 总记录数目  protected int pageSize = PAGE_SIZE;// 每页记录数  protected int currentPage = 1;// 查询的页号(查询第currentPage页)  /**   * 获取当前页号。   * 注意，当还未设置总记录数时调用该方法将会发生错误，   * 因为在获取当前页时需要对总记录数进行检查以确保页面的正确。   *   */  public int getCurrentPage() {    if (currentPage > getTotalPage()) {// 进行范围限定      currentPage = getTotalPage();    }    return currentPage;  }  public void setCurrentPage(int currentPage) {    if (currentPage > 0) {      this.currentPage = currentPage;    }  }  public int getPageSize() {    return pageSize;  }  public void setPageSize(int pageSize) {    if (pageSize >= 1) {      this.pageSize = pageSize;    }  }  public int getEndIndex() {    int endIndex = getCurrentPage() * getPageSize();    if (endIndex > getTotalSize()) {      endIndex = getTotalSize();    }    return endIndex;  }  public int getStartIndex() {    int index = 0;    if (getTotalSize() == 0) {      return index;    }    index = (getCurrentPage() - 1) * getPageSize() + 1;    if (index < 0) {      index = 0;    }    return index;  }  public int getTotalSize() {    if (this.totalSize == INITIAL_TOTAL_SIZE) {      throw new IllegalStateException("尚未设置总记录数，无法进行分页计算");    }    return totalSize;  }  public void setTotalSize(int totalSize) {    if (totalSize >= 0) {      this.totalSize = totalSize;    } else {      throw new IllegalArgumentException("总记录数不能小于0[totalsize=" + totalSize + "]");    }  }  public int getTotalPage() {    return (getTotalSize() + getPageSize() - 1) / getPageSize();  }  public boolean hasNextPage() {    return getCurrentPage() < getTotalPage();  }  public boolean hasPreviousPage() {    return getCurrentPage() > 1;  }  public int getPreviousPage() {    int ipage = 1;    if (hasPreviousPage()) {      ipage = getCurrentPage() - 1;    }    return ipage;  }  public int getNextPage() {    if (hasNextPage()) {      return getCurrentPage() + 1;    } else {      return getTotalPage();    }  }}