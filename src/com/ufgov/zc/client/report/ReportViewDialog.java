package com.ufgov.zc.client.report;import java.awt.BorderLayout;import java.awt.Container;import java.awt.Dialog;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.List;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.UIConstants;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.common.commonbiz.model.BaseBill;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.PrintObject;public class ReportViewDialog extends GkBaseDialog {  private ReportViewDialog self = this;  ReportView reportView;  private FuncButton previousButton = new PreviousButton();  private FuncButton nextButton = new NextButton();  private List dataList = new ArrayList();  private int currentRow = 0;  private RequestMeta requestMeta;  private String templateCode;  private IBaseDataServiceDelegate baseDataServiceDelegat = (IBaseDataServiceDelegate) ServiceFactory  .create(IBaseDataServiceDelegate.class, "baseDataServiceDelegate");  public ReportViewDialog(Window window, String title, List dataList, int currentRow, String templateCode,  RequestMeta requestMeta) {    super(window, Dialog.ModalityType.APPLICATION_MODAL);    setTitle(title);    initComponents();    this.dataList = dataList;    this.requestMeta = requestMeta;    this.currentRow = currentRow;    this.templateCode = templateCode;    refreshReport();    this.setSize(UIConstants.REPORT_VIEW_DIALOG_WIDTH, UIConstants.REPORT_VIEW_DIALOG_HEIGHT);    this.moveToScreenCenter();    this.setVisible(true);  }  public void initComponents() {    Container container = this.getContentPane();    reportView = new ReportView() {      protected void afterSuccessPrint() {        self.afterSuccessPrint();      }    };    reportView.getToolBar().add(this.previousButton);    reportView.getToolBar().add(this.nextButton);    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doNext();      }    });    container.setLayout(new BorderLayout());    container.add(reportView, BorderLayout.CENTER);  }  private void doPrevious() {    this.currentRow--;    if (this.currentRow < 0) {      this.currentRow = this.dataList.size() - 1;    }    this.refreshReport();  }  private void doNext() {    this.currentRow++;    if (this.currentRow >= this.dataList.size()) {      this.currentRow = 0;    }    this.refreshReport();  }  private void refreshReport() {    if (this.currentRow >= 0 && this.currentRow < this.dataList.size()) {      PrintObject printObject = baseDataServiceDelegat.genMainBillPrintObjectFN(      (BaseBill) dataList.get(this.currentRow), templateCode, requestMeta);      reportView.refreshPrintObject(printObject);      this.repaint();    }  }  protected void afterSuccessPrint() {  }}