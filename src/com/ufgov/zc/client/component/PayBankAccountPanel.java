package com.ufgov.zc.client.component;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JTextField;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.common.commonbiz.model.BankAccount;public class PayBankAccountPanel extends JPanel {  private BankAccount bankAccount;  private int tfWidth = 25;  JLabel lab31 = new JLabel("全称");  JLabel lab32 = new JLabel("账号");  JLabel lab33 = new JLabel("开户银行");  JTextField payerNameTf = new JTextField(tfWidth);  PayBankAccountSelectField payerAccountTf;  JTextField payerBankTf = new JTextField(tfWidth);  public PayBankAccountPanel() {    payerAccountTf = new PayBankAccountSelectField(tfWidth);    init();  }  public PayBankAccountPanel(List dataList) {    payerAccountTf = new PayBankAccountSelectField(tfWidth, null, dataList);    init();  }  public BankAccount getBankAccount() {    bankAccount = payerAccountTf.getBankAccount();    return bankAccount;  }  public void setBankAccount(BankAccount bankAccount) {    this.bankAccount = bankAccount;    payerAccountTf.setBankAccount(bankAccount);  }  public void setEditable(boolean bool) {    payerNameTf.setEditable(bool);    payerAccountTf.setEditable(bool);    payerBankTf.setEditable(bool);  }  public void init() {    payerAccountTf.addValueChangeListener(new ValueChangeListener() {      public void valueChanged(ValueChangeEvent e) {        BankAccount bankAccount = payerAccountTf.getBankAccount();        if (bankAccount == null) {          payerNameTf.setText("");          payerNameTf.setToolTipText(null);          payerBankTf.setText("");          payerBankTf.setToolTipText(null);        } else {          payerNameTf.setText(bankAccount.getAccName());          if (bankAccount.getAccCode() == null)            payerNameTf.setToolTipText(null);          else            payerNameTf.setToolTipText("[" + bankAccount.getAccCode() + "]" + bankAccount.getAccName());          payerBankTf.setText(bankAccount.getBankNodeName());          if (bankAccount.getBankCode() == null)            payerBankTf.setToolTipText(null);          else            payerBankTf.setToolTipText("[" + bankAccount.getBankCode() + "]" + bankAccount.getBankNodeName());        }      }    });    setLayout(new GridBagLayout());    GridBagConstraints gbc = new GridBagConstraints();    gbc.anchor = GridBagConstraints.EAST;    gbc.insets = new Insets(2, 5, 2, 5);    add(lab31, gbc);    gbc.gridwidth = GridBagConstraints.REMAINDER;    add(payerNameTf, gbc);    gbc.gridwidth = 1;    add(lab32, gbc);    gbc.gridwidth = GridBagConstraints.REMAINDER;    add(payerAccountTf, gbc);    gbc.gridwidth = 1;    add(lab33, gbc);    add(payerBankTf, gbc);    setBorder(BorderFactory.createTitledBorder("付款人"));  }}