package com.ufgov.zc.client.component;import java.awt.BorderLayout;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JFrame;import javax.swing.JPanel;import com.ufgov.smartclient.component.JComboBoxEx;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.common.commonbiz.model.MaBank;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;public class AgentBankComboBox extends JComboBoxEx {  public static String BANK_TYPE_ALL = "1";//所有银行  public static String BANK_TYPE_ZERO_BALANCE = "0";//开了领余额帐户的银行  public String bankType = "1";  private List dataList;  private Map<String, MaBank> dataMap = new HashMap<String, MaBank>();  public AgentBankComboBox() {    this(null);  }  public AgentBankComboBox(String bankType) {    this.bankType = bankType;    int nd = WorkEnv.getInstance().getTransNd();    IBaseDataServiceDelegate bankServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(    IBaseDataServiceDelegate.class, "baseDataServiceDelegate");    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    if (this.bankType.equalsIgnoreCase(BANK_TYPE_ZERO_BALANCE)) {      dataList = bankServiceDelegate.getZeroBalanceBank(nd, requestMeta);    } else if (this.bankType.equalsIgnoreCase(this.BANK_TYPE_ALL)) {      dataList = bankServiceDelegate.getAgentBank(nd, "03", WorkEnv.getInstance().getCurrUserId(),      requestMeta);      if (dataList.isEmpty()) {        dataList = bankServiceDelegate.getAgentBank(nd, "03", null, requestMeta);      }    }    this.addItem(null);    for (int i = 0; i < dataList.size(); i++) {      MaBank data = (MaBank) dataList.get(i);      this.addItem(data);      this.addItemDisplaLable(data, data.getCode() + " " + data.getName());      this.dataMap.put(data.getCode(), data);    }    this.addItemListener(new ItemListener() {      public void itemStateChanged(ItemEvent e) {        if (((MaBank) getSelectedItem()) != null) {          setToolTipText(((MaBank) e.getItem()).getName());        } else {          setToolTipText(null);        }      }    });  }  public MaBank getProxyBank() {    return (MaBank) this.getSelectedItem();  }  public void setProxyBank(MaBank maBank) {    this.setSelectedItem(maBank);  }  public void setProxyBankByCode(String bankCode) {    MaBank maBank = dataMap.get(bankCode);    this.setSelectedItem(maBank);  }  public static void main(String[] args) {    JFrame f = new JFrame();    AgentBankComboBox textField = new AgentBankComboBox("0");    textField.setEditable(false);    textField.setEnabled(false);    textField.setEnabled(true);    JPanel panel = new JPanel();    panel.add(textField);    f.getContentPane().add(panel, BorderLayout.NORTH);    // f.pack();    // SwingUtilities.updateComponentTreeUI(panel);    f.setSize(400, 300);    f.setLocationRelativeTo(null);    f.setVisible(true);    f.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent e) {        System.exit(0);      }    });  }}