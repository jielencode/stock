package com.ufgov.zc.client.component;import java.awt.Dialog;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.DefaultTreeModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.util.GkGetDataRuleUtil;import com.ufgov.zc.client.util.NumLimUtil;import com.ufgov.zc.common.commonbiz.model.Company;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.MaElementConstants;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;public class CompanySelectDialog extends JTreeSelectDialog {  public CompanySelectDialog(Dialog owner, boolean modal,  JButtonTextField triggerField) {    super(owner, modal, triggerField);  }  @Override  protected void initTitle() {    LangTransMeta.init("GK%");    this.setTitle(LangTransMeta    .translate(MaElementConstants.TITLE_TRANSGK_ZC_TITLE_COMPANY));  }  @Override  protected void initDataBufferList() {    IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory    .create(IBaseDataServiceDelegate.class, "baseDataServiceDelegate");    int nd = WorkEnv.getInstance().getTransNd();    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    ElementConditionDto dto = new ElementConditionDto();    dto.setNd(nd);    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(    triggerField.compoId, NumLimConstants.FWATCH, triggerField.elementCode));    String dataRuleId = ((CompanySelectField) this.triggerField).getDataRuleId();    if (dataRuleId != null && !dataRuleId.trim().equals("")) {      dto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance().getDataRuleCondiStr(      dataRuleId));    }    this.dataBufferList = baseDataServiceDelegate.getCompany(dto, requestMeta);    for (Object o : dataBufferList) {      Company cpy = (Company) o;      this.triggerField.dataMap.put(cpy.getCode(), cpy);    }    this.triggerField.filteredDataList = dataBufferList;  }  public void setVisible(boolean b) {    if (b) {      initDataBufferList();    }    super.setVisible(b);  }  private List genTreeData() {    List rootCompanyList = new ArrayList();    List childrenCompanyList = new ArrayList();    for (Object o : dataBufferList) {      Company cpy = (Company) o;      if (this.triggerField.dataMap.get(cpy.getParentCode()) == null) {        rootCompanyList.add(cpy);      } else {        childrenCompanyList.add(cpy);      }    }    Map childrenMap = new HashMap();    for (int i = 0; i < childrenCompanyList.size(); i++) {      Company child = (Company) childrenCompanyList.get(i);      List childrenList = (List) childrenMap.get(child.getParentCode());      if (childrenList != null) {        childrenList.add(child);      } else {        List tempList = new ArrayList();        tempList.add(child);        childrenMap.put(child.getParentCode(), tempList);      }    }    for (int i = 0; i < rootCompanyList.size(); i++) {      Company company = (Company) rootCompanyList.get(i);      this.setCompanyChildren(company, childrenMap);    }    return rootCompanyList;  }  private void setCompanyChildren(Company company, Map childrenMap) {    List childrenList = (List) childrenMap.get(company.getCode());    if (childrenList != null) {      company.setChildren(childrenList);      for (int i = 0; i < childrenList.size(); i++) {        Company c = (Company) childrenList.get(i);        setCompanyChildren(c, childrenMap);      }    }  }  protected void initSelectTree() {    DefaultMutableTreeNode root = new DefaultMutableTreeNode("单位");    List companyTreeList = genTreeData();    treeNodeMap.clear();    for (Object o : companyTreeList) {      Company company = (Company) o;      DefaultMutableTreeNode node = new DefaultMutableTreeNode(company);      root.add(node);      treeNodeMap.put(company, node);      this.setChildNode(company, node);    }    this.getSelectTree().setModel(new DefaultTreeModel(root));  }  private void setChildNode(Company company, DefaultMutableTreeNode node) {    if (company.getChildren().size() > 0) {      for (Object o : company.getChildren()) {        Company c = (Company) o;        DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(c);        node.add(childNode);        treeNodeMap.put(c, childNode);        setChildNode(c, childNode);      }    }  }}