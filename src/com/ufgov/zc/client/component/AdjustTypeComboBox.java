package com.ufgov.zc.client.component;import java.awt.BorderLayout;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JFrame;import javax.swing.JPanel;import com.ufgov.smartclient.component.JComboBoxEx;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.model.AsVal;public class AdjustTypeComboBox extends JComboBoxEx {  private static final long serialVersionUID = 4450590796947514865L;  private List dataList = new ArrayList();  private List filterList = null;  private Map<String, AsVal> dataMap = new HashMap<String, AsVal>();  private String adjustCodeSetId = "VS_CP_ADJUST";//全部  private boolean isShowHead = true;  public AdjustTypeComboBox() {    super();    init();  }  public AdjustTypeComboBox(String pmAdjustCodeValsetid) {    super();    this.adjustCodeSetId = pmAdjustCodeValsetid;    init();  }  public AdjustTypeComboBox(String pmAdjustCodeValsetid, boolean isShowHead) {    super();    this.adjustCodeSetId = pmAdjustCodeValsetid;    this.isShowHead = isShowHead;    init();  }  public AdjustTypeComboBox(List filterList) {    super();    this.filterList = filterList;    init();  }  private void init() {    IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(    IBaseDataServiceDelegate.class, "baseDataServiceDelegate");    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    dataList = baseDataServiceDelegate.getAsVal(this.adjustCodeSetId, requestMeta);    if (isShowHead) {      this.addItem(null);    }    for (int i = 0; i < dataList.size(); i++) {      AsVal data = (AsVal) dataList.get(i);      if (filterList == null) {        this.addItem(data);        this.addItemDisplaLable(data, data.getVal());        this.dataMap.put(data.getValId(), data);      } else {        if (filterList.contains(data.getValId())) {          this.addItem(data);          this.addItemDisplaLable(data, data.getVal());          this.dataMap.put(data.getValId(), data);        }      }    }    this.addItemListener(new ItemListener() {      public void itemStateChanged(ItemEvent e) {        if (((AsVal) getSelectedItem()) != null) {          setToolTipText(((AsVal) e.getItem()).getVal());        } else {          setToolTipText(null);        }      }    });  }  public AsVal getSelectedAsVal() {    return (AsVal) this.getSelectedItem();  }  public void setSelectedAsVal(AsVal asVal) {    this.setSelectedItem(asVal);  }  public void setSelectedAsValByCode(String asValCode) {    AsVal asVal = dataMap.get(asValCode);    this.setSelectedItem(asVal);  }  public static void main(String[] args) {    JFrame f = new JFrame();    AdjustTypeComboBox planTypeField = new AdjustTypeComboBox();    JPanel panel = new JPanel();    panel.add(planTypeField);    f.getContentPane().add(panel, BorderLayout.NORTH);    f.setSize(400, 300);    f.setLocationRelativeTo(null);    f.setVisible(true);    f.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent e) {        System.exit(0);      }    });  }}