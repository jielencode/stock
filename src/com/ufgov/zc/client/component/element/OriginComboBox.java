package com.ufgov.zc.client.component.element;import java.awt.BorderLayout;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JFrame;import javax.swing.JPanel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.datacache.OriginDataCache;import com.ufgov.zc.client.util.GkGetDataRuleUtil;import com.ufgov.zc.client.util.NumLimUtil;import com.ufgov.zc.common.commonbiz.model.Origin;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.GkDataRuleConstants;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;public class OriginComboBox extends EditCtrlComboBox {  /**   *    */  private static final long serialVersionUID = -8893093322328140850L;  private Map<String, Origin> dataMap = new HashMap<String, Origin>();  private String dataRuleId;  public String getDataRuleId() {    return dataRuleId;  }  public void setDataRuleId(String dataRuleId) {    this.dataRuleId = dataRuleId;  }  public OriginComboBox() {    super();    init(null);    initDataBufferList();  }  public OriginComboBox(String dataRuleId) {    super();    init(null);    this.dataRuleId = dataRuleId;    initDataBufferList();  }  public OriginComboBox(String compoId, String dataRuleId) {    super();    init(compoId);    this.dataRuleId = dataRuleId;    initDataBufferList();  }  private void init(String compoId) {    this.compoId = compoId;    this.elementCode = "FUND_CODE";    this.addItemListener(new ItemListener() {      public void itemStateChanged(ItemEvent e) {        if (((Origin) getSelectedItem()) != null) {          Origin data = (Origin) getSelectedItem();          setToolTipText("[" + data.getCode() + "]" + data.getName());        } else {          setToolTipText(null);        }      }    });  }  private void initDataBufferList() {    int nd = WorkEnv.getInstance().getTransNd();    IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory    .create(IBaseDataServiceDelegate.class, "baseDataServiceDelegate");    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    ElementConditionDto dto = new ElementConditionDto();    dto.setNd(nd);    //   dataBufferList = baseDataServiceDelegate.getOrigin(dto,requestMeta);    dataBufferList = OriginDataCache.getOrigin();    dto.setNumLimitStr(    NumLimUtil.getInstance().getNumLimCondByCoType(compoId, NumLimConstants.FWATCH, elementCode));    dto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance().getDataRuleCondiStr(    dataRuleId));    if (dto.getNumLimitStr() == null && dto.getDataRuleCondiStr() == null) {      numLimDataList = dataBufferList;    } else {      numLimDataList = baseDataServiceDelegate.getOrigin(dto, requestMeta);    }    for (int i = 0; i < dataBufferList.size(); i++) {      Origin data = (Origin) dataBufferList.get(i);      this.dataMap.put(data.getCode(), data);    }  }  public void initComboBox() {    List dataList = BaseElementDataFilter.doFilter(dataBufferList, randomEdit, prefix, levelCtrl, ctrlLevelNum);    dataList = BaseElementDataFilter.doNumLimFilter(dataList, numLimDataList);    this.removeAllItems();    this.addItem(null);    for (int i = 0; i < dataList.size(); i++) {      Origin data = (Origin) dataList.get(i);      this.addItem(data);      this.addItemDisplaLable(data, "[" + data.getCode() + "]" + data.getName());    }  }  public Origin getSelectedOrigin() {    return (Origin) this.getSelectedItem();  }  public void setSelectedOrigin(Origin origin) {    this.setSelectedItem(origin);  }  public void setSelectedOriginByCode(String originCode) {    Origin origin = dataMap.get(originCode);    this.setSelectedItem(origin);  }  public static void main(String[] args) {    JFrame f = new JFrame();    OriginComboBox textField = new OriginComboBox(GkDataRuleConstants.DP_ORIGIN);    textField.setEditable(false);    textField.setEnabled(false);    textField.setEnabled(true);    //		textField.setLevelCtrl(true);    //		textField.setCtrlLevelNum(3);    //		textField.setRandomEdit(false);    //		textField.setPrefix("03");    textField.initComboBox();    JPanel panel = new JPanel();    panel.add(textField);    f.getContentPane().add(panel, BorderLayout.NORTH);    // f.pack();    // SwingUtilities.updateComponentTreeUI(panel);    f.setSize(400, 300);    f.setLocationRelativeTo(null);    f.setVisible(true);    f.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent e) {        System.exit(0);      }    });  }}