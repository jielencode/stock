package com.ufgov.zc.client.component.element;import java.awt.Dialog;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.List;import javax.swing.JTable;import javax.swing.table.DefaultTableModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.JButtonTextField;import com.ufgov.zc.client.component.JTableSelectDialog;import com.ufgov.zc.client.datacache.OriginDataCache;import com.ufgov.zc.client.util.GkGetDataRuleUtil;import com.ufgov.zc.client.util.GkPreferencesStore;import com.ufgov.zc.client.util.NumLimUtil;import com.ufgov.zc.common.commonbiz.model.Origin;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;public class OriginTableSelectDialog extends JTableSelectDialog {  public OriginTableSelectDialog(Dialog dialog, boolean modal,  JButtonTextField triggerField) {    super(dialog, modal, triggerField);  }  /**   *    */  private static final long serialVersionUID = -4407933154954926841L;  public void initTitle() {    LangTransMeta.init("GK%");    this.setTitle(LangTransMeta.translate("GK_TITLE_ORIGIN"));  }  protected void initDataBufferList() {    int nd = WorkEnv.getInstance().getTransNd();    IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(    IBaseDataServiceDelegate.class, "baseDataServiceDelegate");    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    ElementConditionDto dto = new ElementConditionDto();    dto.setNd(nd);    if (((OriginTableSelectField) triggerField).getNd() == nd) {      dataBufferList = OriginDataCache.getOrigin();    } else {      dto.setNd(((OriginTableSelectField) triggerField).getNd());      this.dataBufferList = baseDataServiceDelegate.getOrigin(dto, requestMeta);    }    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(triggerField.compoId, NumLimConstants.FWATCH, triggerField.elementCode));    String dataRuleId = ((OriginTableSelectField) this.triggerField).getDataRuleId();    dto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance().getDataRuleCondiStr(    dataRuleId));    if (dto.getNumLimitStr() == null && dto.getDataRuleCondiStr() == null) {      numLimDataList = dataBufferList;    } else {      numLimDataList = baseDataServiceDelegate.getOrigin(dto, requestMeta);    }    for (int i = 0; i < dataBufferList.size(); i++) {      Origin rowData = (Origin) dataBufferList.get(i);      this.triggerField.dataMap.put(rowData.getCode(), rowData);    }    this.triggerField.filteredDataList = dataBufferList;  }  private List genTableData() {    List dataList = BaseElementDataFilter.doFilter(dataBufferList, this.triggerField    .isRandomEdit(), this.triggerField.getPrefix(),    this.triggerField.isLevelCtrl(), this.triggerField    .getCtrlLevelNum());    dataList = BaseElementDataFilter.doNumLimFilter(dataList, numLimDataList);    return dataList;  }  public void initSelectTable() {    String[] names = { LangTransMeta.translate("GK_FIELD_ND"),    LangTransMeta.translate("GK_FIELD_ORIGIN_CODE"),    LangTransMeta.translate("GK_FIELD_ORIGIN_NAME") };    Object[][] data = null;    tableDataList = genTableData();    data = new Object[tableDataList.size()][names.length];    for (int i = 0; i < tableDataList.size(); i++) {      Origin rowData = (Origin) tableDataList.get(i);      int col = 0;      data[i][col++] = rowData.getNd();      data[i][col++] = rowData.getCode();      data[i][col++] = rowData.getName();    }    DefaultTableModel model = new DefaultTableModel(data, names) {      public boolean isCellEditable(int row, int colum) {        return false;      }    };    selectTable.setPreferencesKey(this.getClass().getName() + "_selectTable");    selectTable.setPreferenceStore(GkPreferencesStore.preferenceStore());    selectTable.setModel(model);    selectTable.addMouseListener(new MouseAdapter() {      public void mouseClicked(MouseEvent e) {        if (e.getClickCount() == 2) {          doOK();        }      }    });    selectTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);  }}