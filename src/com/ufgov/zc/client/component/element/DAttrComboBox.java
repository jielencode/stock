package com.ufgov.zc.client.component.element;import java.awt.BorderLayout;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JFrame;import javax.swing.JPanel;import javax.swing.event.PopupMenuEvent;import javax.swing.event.PopupMenuListener;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.datacache.DAttrDataCache;import com.ufgov.zc.client.util.ElementRelationUtil;import com.ufgov.zc.client.util.NumLimUtil;import com.ufgov.zc.common.commonbiz.model.BaseBill;import com.ufgov.zc.common.commonbiz.model.DAttr;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.dp.model.DpDetail;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;public class DAttrComboBox extends EditCtrlComboBox {  private String dattrType;  private boolean isPopupRebuild = true;  private Map<String, DAttr> dataMap = new HashMap<String, DAttr>();  public DAttrComboBox(String dattrType) {    super();    this.dattrType = dattrType;    init(this.dattrType);    initDataBufferList();  }  public DAttrComboBox(String dattrType, String compoId) {    super();    this.dattrType = dattrType;    this.compoId = compoId;    init(this.dattrType);    initDataBufferList();  }  public DAttrComboBox(String dattrType, String compoId, boolean isPopupRebuild) {    super();    this.dattrType = dattrType;    this.compoId = compoId;    init(this.dattrType);    initDataBufferList();    this.isPopupRebuild = isPopupRebuild;  }  private void init(String dattrType) {    this.elementCode = (String) DAttr.dAttrMap.get(dattrType);    this.addItemListener(new ItemListener() {      public void itemStateChanged(ItemEvent e) {        if (((DAttr) getSelectedItem()) != null) {          DAttr v = (DAttr) getSelectedItem();          setToolTipText("[" + v.getCode() + "]" + v.getName());        } else {          setToolTipText(null);        }      }    });  }  private void initDataBufferList() {    new Thread() {      public void run() {        int nd = WorkEnv.getInstance().getTransNd();        IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(        IBaseDataServiceDelegate.class, "baseDataServiceDelegate");        RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();        ElementConditionDto dto = new ElementConditionDto();        dto.setNd(nd);        dto.setDattrType(dattrType);        dataBufferList = DAttrDataCache.getDAttr(dattrType);        dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(compoId, NumLimConstants.FWATCH,        elementCode));        if (dto.getNumLimitStr() == null) {          numLimDataList = dataBufferList;        } else {          numLimDataList = baseDataServiceDelegate.getDAttr(dto, requestMeta);        }        for (int i = 0; i < dataBufferList.size(); i++) {          DAttr data = (DAttr) dataBufferList.get(i);          dataMap.put(data.getCode(), data);        }        getLatch().countDown();      }    }.start();  }  private BaseBill bill;  public BaseBill getBill() {    return bill;  }  public void setBill(BaseBill bill) {    this.bill = bill;    DAttr v = this.getSelectedDAttr();    this.initComboBox();    this.setSelectedItem(v);  }  public void rebuildComboBox() {    DAttr adttr = this.getSelectedDAttr();    List dataList = BaseElementDataFilter.doFilter(dataBufferList, randomEdit, prefix, levelCtrl,    ctrlLevelNum);    dataList = BaseElementDataFilter.doNumLimFilter(dataList, numLimDataList);    if (compoId != null) {      dataList = ElementRelationUtil.filterElementByRelation(compoId, bill, this.elementCode, dataList);    }    initComboBox(dataList);    this.setSelectedItem(adttr);  }  public void initComboBox() {    try {      getLatch().await();      List dataList = dataBufferList;      if (isPopupRebuild) {        initComboBox(dataList);        this.addPopupMenuListener(new PopupMenuListener() {          public void popupMenuWillBecomeVisible(PopupMenuEvent e) {            rebuildComboBox();          }          public void popupMenuCanceled(PopupMenuEvent e) {          }          public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {          }        });      } else {        rebuildComboBox();      }    } catch (Exception ex) {      throw new RuntimeException(ex.getMessage(), ex);    }  }  private void initComboBox(List dataList) {    try {      getLatch().await();      this.removeAllItems();      this.addItem(null);      this.dataMap.clear();      for (int i = 0; i < dataList.size(); i++) {        DAttr data = (DAttr) dataList.get(i);        this.addItem(data);        this.addItemDisplaLable(data, "[" + data.getCode() + "]" + data.getName());        this.dataMap.put(data.getCode(), data);      }    } catch (Exception ex) {      throw new RuntimeException(ex.getMessage(), ex);    }  }  public DAttr getSelectedDAttr() {    return (DAttr) this.getSelectedItem();  }  public void setSelectedDAttrByCode(String dAttrCode) {    try {      getLatch().await();      DAttr dAttr = dataMap.get(dAttrCode);      this.setSelectedItem(dAttr);    } catch (Exception ex) {      throw new RuntimeException(ex.getMessage(), ex);    }  }  public static void main(String[] args) {    JFrame f = new JFrame();    DAttrComboBox textField = new DAttrComboBox(DAttr.D_ATTR1_TYPE, "DP_EDIT");    textField.setEditable(false);    textField.setEnabled(false);    textField.setEnabled(true);    //		textField.setPrefix("0001");    textField.setRandomEdit(false);    //		textField.setLevelCtrl(true);    //		textField.setCtrlLevelNum(2);    textField.initComboBox();    DpDetail bill = new DpDetail();    bill.setPayoutCode("111");    bill.setCoCode("607");    textField.setBill(bill);    JPanel panel = new JPanel();    panel.add(textField);    f.getContentPane().add(panel, BorderLayout.NORTH);    // f.pack();    // SwingUtilities.updateComponentTreeUI(panel);    f.setSize(400, 300);    f.setLocationRelativeTo(null);    f.setVisible(true);    f.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent e) {        System.exit(0);      }    });  }  public String getDattrType() {    return dattrType;  }}