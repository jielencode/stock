package com.ufgov.zc.client.component.element;import java.awt.Dialog;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JMenuItem;import javax.swing.JOptionPane;import javax.swing.JPopupMenu;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.DefaultTreeModel;import javax.swing.tree.TreePath;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.JButtonTextField;import com.ufgov.zc.client.component.JTreeSelectDialog;import com.ufgov.zc.client.datacache.SendDocDataCache;import com.ufgov.zc.common.commonbiz.model.SendDoc;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;public class SendDocTreeSelectDialog extends JTreeSelectDialog {  private IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory  .create(IBaseDataServiceDelegate.class, "baseDataServiceDelegate");  public SendDocTreeSelectDialog(Dialog dialog, boolean modal,  JButtonTextField triggerField) {    super(dialog, modal, triggerField);  }  JPopupMenu popupMenu1;  protected void init() {    super.init();    JMenuItem add = new JMenuItem("新建");    JMenuItem edit = new JMenuItem("修改");    JMenuItem del = new JMenuItem("删除");    del.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectTree.getLastSelectedPathComponent();        if (node == null) {          return;        }        if (node.isRoot()) {          return;        }        SendDoc sendDoc = (SendDoc) node.getUserObject();        if (baseDataServiceDelegate.sendDocUsed(sendDoc, WorkEnv.getInstance().getRequestMeta())) {          JOptionPane.showMessageDialog(self, "发文文号已经使用不能删除", "提示",          JOptionPane.INFORMATION_MESSAGE);          return;        }        baseDataServiceDelegate.deleteSendDoc(sendDoc, WorkEnv.getInstance().getRequestMeta());        DefaultMutableTreeNode parenNode = (DefaultMutableTreeNode) node.getParent();        if (parenNode == null) {          return;        }        SendDocDataCache.refreshData();        refreshTree();        if (parenNode.getUserObject() instanceof SendDoc) {          SendDoc parent = (SendDoc) parenNode.getUserObject();          TreePath path = new TreePath((getTreeNodeMap().get(parent)).getPath());          selectTree.setSelectionPath(path);          selectTree.expandPath(path);        }      }    });    add.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        new SendDocEditDialog(SendDocTreeSelectDialog.this, ModalityType.APPLICATION_MODAL, selectTree);      }    });    edit.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectTree.getLastSelectedPathComponent();        if (node == null || node.isRoot()) {          return;        }        SendDoc sendDoc = (SendDoc) node.getUserObject();        new SendDocEditDialog(SendDocTreeSelectDialog.this, ModalityType.APPLICATION_MODAL, selectTree, sendDoc);      }    });    popupMenu1 = new JPopupMenu();    popupMenu1.add(add);    popupMenu1.add(edit);    popupMenu1.add(del);    selectTree.addMouseListener(new MouseAdapter() {      public void mouseReleased(MouseEvent e) {        if (e.isPopupTrigger()) {          TreePath path = selectTree.getPathForLocation(e.getX(), e.getY());          if (path == null) {            return;          }          selectTree.setSelectionPath(path);          popupMenu1.show(selectTree, e.getX(), e.getY());        }      }    });  }  /**   *    */  private static final long serialVersionUID = -4407933154954926841L;  public void initTitle() {    LangTransMeta.init("GK%");    this.setTitle(LangTransMeta.translate("GK_TITLE_SENDDOC"));  }  protected void initDataBufferList() {    dataBufferList = SendDocDataCache.getSendDoc();    for (int i = 0; i < dataBufferList.size(); i++) {      SendDoc rowData = (SendDoc) dataBufferList.get(i);      this.triggerField.dataMap.put(rowData.getCode(), rowData);    }    this.triggerField.filteredDataList = dataBufferList;  }  private List genTreeData() {    List filteredList = genFilteredDataList();    Map map = new HashMap();    for (Object o : filteredList) {      SendDoc temp = (SendDoc) o;      map.put(temp.getCode(), temp);    }    List rootSendDocList = new ArrayList();    List childrenSendDocList = new ArrayList();    for (Object o : filteredList) {      SendDoc temp = (SendDoc) o;      if (map.get(temp.getParentCode()) == null) {        rootSendDocList.add(temp);      } else {        childrenSendDocList.add(temp);      }    }    Map childrenMap = new HashMap();    for (int i = 0; i < childrenSendDocList.size(); i++) {      SendDoc child = (SendDoc) childrenSendDocList.get(i);      List childrenList = (List) childrenMap.get(child.getParentCode());      if (childrenList != null) {        childrenList.add(child);      } else {        List tempList = new ArrayList();        tempList.add(child);        childrenMap.put(child.getParentCode(), tempList);      }    }    for (int i = 0; i < rootSendDocList.size(); i++) {      SendDoc root = (SendDoc) rootSendDocList.get(i);      this.setSendDocChildren(root, childrenMap);    }    return rootSendDocList;  }  private List genFilteredDataList() {    return dataBufferList;  }  private void setSendDocChildren(SendDoc v, Map childrenMap) {    List childrenList = (List) childrenMap.get(v.getCode());    if (childrenList != null) {      v.setChildren(childrenList);      for (int i = 0; i < childrenList.size(); i++) {        SendDoc c = (SendDoc) childrenList.get(i);        setSendDocChildren(c, childrenMap);      }    }  }  protected void initSelectTree() {    this.triggerField.filteredDataList = this.genFilteredDataList();    DefaultMutableTreeNode root = new DefaultMutableTreeNode("发文文号");    List beanList = genTreeData();    treeNodeMap.clear();    for (Object o : beanList) {      SendDoc v = (SendDoc) o;      DefaultMutableTreeNode node = new DefaultMutableTreeNode(v);      root.add(node);      treeNodeMap.put(v, node);      this.setChildNode(v, node);    }    this.getSelectTree().setModel(new DefaultTreeModel(root));  }  public void refreshTree() {    dataBufferList = SendDocDataCache.getSendDoc();    initSelectTree();  }  private void setChildNode(SendDoc v, DefaultMutableTreeNode node) {    if (v.getChildren().size() > 0) {      for (Object o : v.getChildren()) {        SendDoc c = (SendDoc) o;        DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(c);        node.add(childNode);        treeNodeMap.put(c, childNode);        setChildNode(c, childNode);      }    }  }}