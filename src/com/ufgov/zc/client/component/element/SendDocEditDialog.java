/** * */package com.ufgov.zc.client.component.element;import java.awt.BorderLayout;import java.awt.FlowLayout;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTextField;import javax.swing.JTree;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.TreePath;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.datacache.SendDocDataCache;import com.ufgov.zc.common.commonbiz.model.SendDoc;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;public class SendDocEditDialog extends GkBaseDialog {  private SendDocEditDialog self = this;  private static final long serialVersionUID = 3472273909692910630L;  private JLabel codeLabel = new JLabel("文号代码：");  private JTextField codeField = new JTextField(20);  private JLabel nameLabel = new JLabel("发文文号：");  private JTextField nameField = new JTextField(35);  private JButton saveButton;  private JButton cancelButton;  private JTree tree;  private SendDocTreeSelectDialog dialog;  private String editStatus = "new";  public static final String NEW = "new";  public static final String UPDATE = "update";  private SendDoc editingSendDoc;  public SendDocEditDialog(SendDocTreeSelectDialog owner, ModalityType modalityType,  JTree tree) {    super(owner, modalityType);    this.tree = tree;    this.dialog = owner;    init();  }  public SendDocEditDialog(SendDocTreeSelectDialog owner, ModalityType modalityType,  JTree tree, SendDoc oldSendDoc) {    super(owner, modalityType);    this.tree = tree;    this.dialog = owner;    editStatus = UPDATE;    this.editingSendDoc = oldSendDoc;    init();  }  private void init() {    this.getContentPane().setLayout(new BorderLayout());    JPanel contentPanel = new JPanel();    int gridx, gridy, gridwidth, gridheight, anchor, fill, ipadx, ipady;    double weightx, weighty;    Insets inset;    gridwidth = 1;    gridheight = 1;    weightx = 1;    weighty = 1;    ipadx = 0;    ipady = 0;    fill = GridBagConstraints.NONE;    inset = new Insets(2, 2, 2, 2);    GridBagLayout gblBasic = new GridBagLayout();    contentPanel.setLayout(gblBasic);    gridx = 0;    gridy = 0;    anchor = GridBagConstraints.EAST;    fill = GridBagConstraints.HORIZONTAL;    gblBasic.setConstraints(codeLabel, new GridBagConstraints(gridx, gridy,    gridwidth, gridheight, weightx, weighty, anchor, fill, inset, ipadx, ipady));    contentPanel.add(codeLabel);    gridx = 1;    gridy = 0;    anchor = GridBagConstraints.WEST;    fill = GridBagConstraints.HORIZONTAL;    gblBasic.setConstraints(codeField, new GridBagConstraints(gridx, gridy,    gridwidth, gridheight, weightx, weighty, anchor, fill, inset, ipadx, ipady));    contentPanel.add(codeField);    gridx = 0;    gridy = 1;    anchor = GridBagConstraints.EAST;    fill = GridBagConstraints.HORIZONTAL;    gblBasic.setConstraints(nameLabel, new GridBagConstraints(gridx, gridy,    gridwidth, gridheight, weightx, weighty, anchor, fill, inset, ipadx, ipady));    contentPanel.add(nameLabel);    gridx = 1;    gridy = 1;    anchor = GridBagConstraints.WEST;    fill = GridBagConstraints.HORIZONTAL;    gblBasic.setConstraints(nameField, new GridBagConstraints(gridx, gridy,    gridwidth, gridheight, weightx, weighty, anchor, fill, inset, ipadx, ipady));    contentPanel.add(nameField);    this.getContentPane().add(contentPanel, BorderLayout.CENTER);    if (this.editStatus == UPDATE) {      this.codeField.setEnabled(false);      this.codeField.setText(this.editingSendDoc.getCode());      this.nameField.setText(this.editingSendDoc.getName());    }    JPanel panel = new JPanel();    panel.setLayout(new FlowLayout(FlowLayout.RIGHT));//FlowLayout    saveButton = new JButton("保存");    cancelButton = new JButton("关闭");    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave();      }    });    cancelButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        self.closeDialog();      }    });    panel.add(saveButton);    panel.add(cancelButton);    this.getContentPane().add(panel, BorderLayout.SOUTH);    this.setSize(350, 150);    this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);    this.moveToScreenCenter();    this.setTitle("发文文号");    this.setVisible(true);  }  private IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory  .create(IBaseDataServiceDelegate.class, "baseDataServiceDelegate");  private void doSave() {    if (this.editStatus == NEW) {      insert();    } else {      update();    }  }  private void update() {    this.editingSendDoc.setName(this.nameField.getText().trim());    if (editingSendDoc.getName() == null || editingSendDoc.getName().equals("")) {      JOptionPane.showMessageDialog(this, "发文文号不能为空", "提示",      JOptionPane.INFORMATION_MESSAGE);      return;    }    if (this.baseDataServiceDelegate.sendDocNameExistSelfExcluded(editingSendDoc, WorkEnv    .getInstance().getRequestMeta())) {      JOptionPane.showMessageDialog(this, editingSendDoc.getName() + "已存在", "提示",      JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    try {      this.baseDataServiceDelegate.updateSendDoc(editingSendDoc, WorkEnv      .getInstance().getRequestMeta());    } catch (Exception ex) {      logger.error(ex.getMessage(), ex);      success = false;    }    if (success) {      JOptionPane.showMessageDialog(this, "保存成功！", "提示",      JOptionPane.INFORMATION_MESSAGE);      this.dialog.repaint();      this.tree.invalidate();      this.tree.revalidate();      this.tree.repaint();    } else {      JOptionPane.showMessageDialog(this, "保存失败！", "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void insert() {    DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree    .getLastSelectedPathComponent();    if (node == null) {      return;    }    int nd = WorkEnv.getInstance().getTransNd();    SendDoc newSendDoc = new SendDoc();    if (!node.isRoot()) {      SendDoc parent = (SendDoc) node.getUserObject();      newSendDoc.setParentCode(parent.getCode());    }    newSendDoc.setNd(nd);    newSendDoc.setCode(this.codeField.getText().trim());    newSendDoc.setName(this.nameField.getText().trim());    newSendDoc.setIsLowest("N");    newSendDoc.setIsUsed("1");    newSendDoc.setInputor(WorkEnv.getInstance().getCurrUserId());    newSendDoc.setLevel(node.getLevel() + 1);    if (newSendDoc.getCode() == null || newSendDoc.getCode().equals("")) {      JOptionPane.showMessageDialog(this, "文号代码不能为空", "提示",      JOptionPane.INFORMATION_MESSAGE);      return;    }    if (newSendDoc.getName() == null || newSendDoc.getName().equals("")) {      JOptionPane.showMessageDialog(this, "发文文号不能为空", "提示",      JOptionPane.INFORMATION_MESSAGE);      return;    }    if (this.baseDataServiceDelegate.sendDocCodeExist(newSendDoc, WorkEnv.getInstance()    .getRequestMeta())) {      JOptionPane.showMessageDialog(this, newSendDoc.getCode() + "已存在", "提示",      JOptionPane.INFORMATION_MESSAGE);      return;    }    if (this.baseDataServiceDelegate.sendDocNameExist(newSendDoc, WorkEnv.getInstance()    .getRequestMeta())) {      JOptionPane.showMessageDialog(this, newSendDoc.getName() + "已存在", "提示",      JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    try {      this.baseDataServiceDelegate.insertSendDoc(newSendDoc, WorkEnv.getInstance()      .getRequestMeta());    } catch (Exception ex) {      logger.error(ex.getMessage(), ex);      success = false;    }    if (success) {      JOptionPane.showMessageDialog(this, "保存成功！", "提示",      JOptionPane.INFORMATION_MESSAGE);      SendDocDataCache.refreshData();      dialog.refreshTree();      if (!node.isRoot()) {        SendDoc parent = (SendDoc) node.getUserObject();        TreePath path = new TreePath((dialog.getTreeNodeMap().get(parent)).getPath());        tree.setSelectionPath(path);        tree.expandPath(path);      }      self.closeDialog();    } else {      JOptionPane.showMessageDialog(this, "保存失败！", "错误", JOptionPane.ERROR_MESSAGE);    }  }}