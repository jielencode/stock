package com.ufgov.zc.client.component.element;import java.awt.Dialog;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JOptionPane;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.DefaultTreeModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.JButtonTextField;import com.ufgov.zc.client.component.JTreeSelectDialog;import com.ufgov.zc.client.datacache.ProjectDataCache;import com.ufgov.zc.client.util.NumLimUtil;import com.ufgov.zc.common.commonbiz.model.Project;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;public class ProjectTreeSelectDialog extends JTreeSelectDialog {  public ProjectTreeSelectDialog(Dialog owner, boolean modal,  JButtonTextField triggerField) {    super(owner, modal, triggerField);  }  protected void initTitle() {    LangTransMeta.init("GK%");    this.setTitle(LangTransMeta.translate("GK_TITLE_PROJECT"));  }  protected void initDataBufferList() {    int nd = WorkEnv.getInstance().getTransNd();    IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(    IBaseDataServiceDelegate.class, "baseDataServiceDelegate");    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    ElementConditionDto dto = new ElementConditionDto();    dto.setNd(nd);    dto.setNumLimitStr(    NumLimUtil.getInstance().getNumLimCondByCoType(triggerField.compoId, NumLimConstants.FWATCH, triggerField.elementCode));    dataBufferList = ProjectDataCache.getProject();    if (dto.getDataRuleCondiStr() == null && dto.getNumLimitStr() == null) {      numLimDataList = dataBufferList;    } else {      numLimDataList = baseDataServiceDelegate.getProject(dto, requestMeta);    }    for (Object o : dataBufferList) {      Project temp = (Project) o;      this.triggerField.dataMap.put(temp.getCode(), temp);    }    this.triggerField.filteredDataList = dataBufferList;  }  private List genTreeData() {    List filteredList = genFilteredData();    filteredList = ProjectDataFilter.getProject(    ((ProjectTreeSelectField) triggerField).getCompany(), filteredList);    Map map = new HashMap();    for (Object o : filteredList) {      Project temp = (Project) o;      map.put(temp.getCode(), temp);    }    List rootProjectList = new ArrayList();    List childrenProjectList = new ArrayList();    for (Object o : filteredList) {      Project temp = (Project) o;      if (map.get(temp.getParentCode()) == null) {        rootProjectList.add(temp);      } else {        childrenProjectList.add(temp);      }    }    Map childrenMap = new HashMap();    for (int i = 0; i < childrenProjectList.size(); i++) {      Project child = (Project) childrenProjectList.get(i);      List childrenList = (List) childrenMap.get(child.getParentCode());      if (childrenList != null) {        childrenList.add(child);      } else {        List tempList = new ArrayList();        tempList.add(child);        childrenMap.put(child.getParentCode(), tempList);      }    }    for (int i = 0; i < rootProjectList.size(); i++) {      Project root = (Project) rootProjectList.get(i);      this.setProjectChildren(root, childrenMap);    }    return rootProjectList;  }  private List genFilteredData() {    List prefixFilteredProjectList = new ArrayList();    List levelCtrlFilteredProjectList = new ArrayList();    if (!this.triggerField.isRandomEdit()) {      if (this.triggerField.getPrefix() == null) {        this.triggerField.setPrefix("");      }      for (Object o : dataBufferList) {        Project temp = (Project) o;        if (temp.getCode().startsWith(this.triggerField.getPrefix())) {          prefixFilteredProjectList.add(temp);        }      }    }    if (this.triggerField.isLevelCtrl()) {      for (Object o : dataBufferList) {        Project temp = (Project) o;        if (temp.getCode().length() <= this.triggerField.getCtrlLen()) {          levelCtrlFilteredProjectList.add(temp);        }      }    }    List filteredList = null;    if (this.triggerField.isRandomEdit() && !this.triggerField.isLevelCtrl()) {      filteredList = this.dataBufferList;    } else if (!this.triggerField.isRandomEdit() && !this.triggerField.isLevelCtrl()) {      filteredList = prefixFilteredProjectList;    } else if (this.triggerField.isRandomEdit() && this.triggerField.isLevelCtrl()) {      filteredList = levelCtrlFilteredProjectList;    } else {      filteredList = new ArrayList();      for (Object o : prefixFilteredProjectList) {        if (levelCtrlFilteredProjectList.contains(o)) {          filteredList.add(o);        }      }    }    return filteredList;  }  private void setProjectChildren(Project project, Map childrenMap) {    List childrenList = (List) childrenMap.get(project.getCode());    if (childrenList != null) {      project.setChildren(childrenList);      for (int i = 0; i < childrenList.size(); i++) {        Project c = (Project) childrenList.get(i);        setProjectChildren(c, childrenMap);      }    }  }  protected void initSelectTree() {    DefaultMutableTreeNode root = new DefaultMutableTreeNode("项目");    List projectList = this.genTreeData();    for (Object o : projectList) {      Project project = (Project) o;      if (isNumLimContain(project)) {        DefaultMutableTreeNode node = new DefaultMutableTreeNode(project);        root.add(node);        treeNodeMap.put(project, node);        this.setChildNode(project, node);      }    }    this.getSelectTree().setModel(new DefaultTreeModel(root));  }  private void setChildNode(Project project, DefaultMutableTreeNode node) {    if (project.getChildren().size() > 0) {      for (Object o : project.getChildren()) {        Project c = (Project) o;        if (isNumLimContain(c)) {          DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(c);          node.add(childNode);          treeNodeMap.put(c, childNode);          setChildNode(c, childNode);        }      }    }  }  public void doOK() {    if (this.triggerField.isLevelCtrl()) {      DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectTree      .getLastSelectedPathComponent();      if (!node.isLeaf()) {        JOptionPane.showMessageDialog(self, "只能选择叶子节点!", "提示",        JOptionPane.INFORMATION_MESSAGE);        return;      }    }    super.doOK();  }}