package com.ufgov.zc.client.component.element;import java.awt.Dialog;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JOptionPane;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.DefaultTreeModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.JButtonTextField;import com.ufgov.zc.client.component.JTreeSelectDialog;import com.ufgov.zc.client.datacache.DAttrDataCache;import com.ufgov.zc.client.util.NumLimUtil;import com.ufgov.zc.common.commonbiz.model.DAttr;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;public class DAttrTreeSelectDialog extends JTreeSelectDialog {  private static final long serialVersionUID = -4440204815656091893L;  protected String elementCode;  public DAttrTreeSelectDialog(Dialog dialog, boolean modal,  JButtonTextField triggerField, String dAttrType) {    super(dialog, modal, triggerField);  }  public void initTitle() {    DAttrTreeSelectField dAttrField = (DAttrTreeSelectField) triggerField;    LangTransMeta.init("GK%");    this.setTitle(LangTransMeta.translate("GK_TITLE_D_ATTR" + dAttrField.getDattrType()));  }  protected void initDataBufferList() {    DAttrTreeSelectField dAttrField = (DAttrTreeSelectField) triggerField;    int nd = WorkEnv.getInstance().getTransNd();    IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory    .create(IBaseDataServiceDelegate.class, "baseDataServiceDelegate");    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    ElementConditionDto dto = new ElementConditionDto();    dto.setNd(nd);    dto.setDattrType(dAttrField.getDattrType());    dataBufferList = DAttrDataCache.getDAttr(dAttrField.getDattrType());    this.elementCode = (String) DAttr.dAttrMap.get(dAttrField.getDattrType());    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(triggerField.compoId,    NumLimConstants.FWATCH, this.elementCode));    //    //    dataBufferList = OriginDataCache.getOrigin();    //    //    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(    //      triggerField.compoId, NumLimConstants.FWATCH, triggerField.elementCode));    //    String dataRuleId = ((OriginTreeSelectField) this.triggerField).getDataRuleId();    //    dto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance().getDataRuleCondiStr(    //      dataRuleId));    if (dto.getNumLimitStr() == null) {      numLimDataList = dataBufferList;    } else {      numLimDataList = baseDataServiceDelegate.getDAttr(dto, requestMeta);    }    for (int i = 0; i < dataBufferList.size(); i++) {      DAttr rowData = (DAttr) dataBufferList.get(i);      this.triggerField.dataMap.put(rowData.getCode(), rowData);    }    this.triggerField.filteredDataList = dataBufferList;  }  private List genTreeData() {    List filteredList = genFilteredDataList();    Map map = new HashMap();    for (Object o : filteredList) {      DAttr temp = (DAttr) o;      map.put(temp.getCode(), temp);    }    List rootDAttrList = new ArrayList();    List childrenDAttrList = new ArrayList();    for (Object o : filteredList) {      DAttr temp = (DAttr) o;      if (map.get(temp.getParentCode()) == null) {        rootDAttrList.add(temp);      } else {        childrenDAttrList.add(temp);      }    }    Map childrenMap = new HashMap();    for (int i = 0; i < childrenDAttrList.size(); i++) {      DAttr child = (DAttr) childrenDAttrList.get(i);      List childrenList = (List) childrenMap.get(child.getParentCode());      if (childrenList != null) {        childrenList.add(child);      } else {        List tempList = new ArrayList();        tempList.add(child);        childrenMap.put(child.getParentCode(), tempList);      }    }    for (int i = 0; i < rootDAttrList.size(); i++) {      DAttr root = (DAttr) rootDAttrList.get(i);      this.setDAttrChildren(root, childrenMap);    }    return rootDAttrList;  }  private List genFilteredDataList() {    List prefixFilteredDAttrList = new ArrayList();    List levelCtrlFilteredDAttrList = new ArrayList();    if (!this.triggerField.isRandomEdit()) {      if (this.triggerField.getPrefix() == null) {        this.triggerField.setPrefix("");      }      for (Object o : dataBufferList) {        DAttr temp = (DAttr) o;        if (temp.getCode().startsWith(this.triggerField.getPrefix())) {          prefixFilteredDAttrList.add(temp);        }      }    }    if (this.triggerField.isLevelCtrl()) {      for (Object o : dataBufferList) {        DAttr temp = (DAttr) o;        if (temp.getCode().length() <= this.triggerField.getCtrlLen()) {          levelCtrlFilteredDAttrList.add(temp);        }      }    }    List filteredList = null;    if (this.triggerField.isRandomEdit() && !this.triggerField.isLevelCtrl()) {      filteredList = this.dataBufferList;    } else if (!this.triggerField.isRandomEdit() && !this.triggerField.isLevelCtrl()) {      filteredList = prefixFilteredDAttrList;    } else if (this.triggerField.isRandomEdit() && this.triggerField.isLevelCtrl()) {      filteredList = levelCtrlFilteredDAttrList;    } else {      filteredList = new ArrayList();      for (Object o : prefixFilteredDAttrList) {        if (levelCtrlFilteredDAttrList.contains(o)) {          filteredList.add(o);        }      }    }    return filteredList;  }  private void setDAttrChildren(DAttr v, Map childrenMap) {    List childrenList = (List) childrenMap.get(v.getCode());    if (childrenList != null) {      v.setChildren(childrenList);      for (int i = 0; i < childrenList.size(); i++) {        DAttr c = (DAttr) childrenList.get(i);        setDAttrChildren(c, childrenMap);      }    }  }  protected void initSelectTree() {    DAttrTreeSelectField dAttrField = (DAttrTreeSelectField) triggerField;    DefaultMutableTreeNode root = new DefaultMutableTreeNode((LangTransMeta.translate("GK_TITLE_D_ATTR" + dAttrField.getDattrType())));    this.triggerField.filteredDataList = this.genFilteredDataList();    List bAccList = genTreeData();    treeNodeMap.clear();    for (Object o : bAccList) {      DAttr v = (DAttr) o;      if (isNumLimContain(v)) {        DefaultMutableTreeNode node = new DefaultMutableTreeNode(v);        root.add(node);        treeNodeMap.put(v, node);        this.setChildNode(v, node);      }    }    this.getSelectTree().setModel(new DefaultTreeModel(root));  }  private void setChildNode(DAttr v, DefaultMutableTreeNode node) {    if (v.getChildren().size() > 0) {      for (Object o : v.getChildren()) {        DAttr c = (DAttr) o;        if (isNumLimContain(c)) {          DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(c);          node.add(childNode);          treeNodeMap.put(c, childNode);          setChildNode(c, childNode);        }      }    }  }  public void doOK() {    if (this.triggerField.isLevelCtrl()) {      DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectTree      .getLastSelectedPathComponent();      if (node == null) {        return;      }      if (!node.isLeaf()) {        JOptionPane.showMessageDialog(self, "只能选择叶子节点!", "提示",        JOptionPane.INFORMATION_MESSAGE);        return;      }    }    super.doOK();  }}