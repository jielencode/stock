package com.ufgov.zc.client.component;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.ArrayList;import java.util.Enumeration;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JFrame;import javax.swing.JTree;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.DefaultTreeModel;import javax.swing.tree.TreePath;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.common.commonbiz.model.Project;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;public class ProjectTree extends JTree {  private static final long serialVersionUID = 1L;  private List projectList;  private IBaseDataServiceDelegate baseDataServiceDelegate;  private String companServiceName = "baseDataServiceDelegate";  private String compoId;  private RequestMeta requestMeta;  private Map projectMap;  /**   * @param showData 是否打开时就显示数据   */  public ProjectTree(boolean showData) {    this(showData, null);  }  public ProjectTree(boolean showData, String compoId) {    super();    this.compoId = compoId;    init();    if (showData) {      refreshCompanyList();      createTree();    }  }  private void init() {    baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(    IBaseDataServiceDelegate.class, companServiceName);    requestMeta = WorkEnv.getInstance().getRequestMeta();  }  public List getCompanyList() {    return projectList;  }  public void setCompanyList(List companyList) {    this.projectList = companyList;  }  public Map getProjectMap() {    projectMap = new HashMap();    for (int i = 0; i < projectList.size(); i++) {      Project project = (Project) projectList.get(i);      projectMap.put(project.getCode(), project);    }    return projectMap;  }  /**   * 刷新数据   */  public void refreshCompanyList() {    int nd = WorkEnv.getInstance().getTransNd();    requestMeta.setCompoId(compoId);    projectList = baseDataServiceDelegate.getPdProject(nd, requestMeta);  }  protected Map<Object, DefaultMutableTreeNode> treeNodeMap = new HashMap<Object, DefaultMutableTreeNode>();  /**   * 构建树   */  public void createTree() {    DefaultMutableTreeNode root = new DefaultMutableTreeNode("项目");    List projectList = this.genTreeData();    for (Object o : projectList) {      Project project = (Project) o;      DefaultMutableTreeNode node = new DefaultMutableTreeNode(project);      root.add(node);      treeNodeMap.put(project, node);      this.setChildNode(project, node);    }    this.setModel(new DefaultTreeModel(root));  }  private void setChildNode(Project project, DefaultMutableTreeNode node) {    if (project.getChildren().size() > 0) {      for (Object o : project.getChildren()) {        Project c = (Project) o;        DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(c);        node.add(childNode);        treeNodeMap.put(c, childNode);        setChildNode(c, childNode);      }    }  }  private List genTreeData() {    List prefixFilteredProjectList = new ArrayList();    List levelCtrlFilteredProjectList = new ArrayList();    Map map = new HashMap();    for (Object o : projectList) {      Project temp = (Project) o;      map.put(temp.getCode(), temp);    }    List rootProjectList = new ArrayList();    List childrenProjectList = new ArrayList();    for (Object o : projectList) {      Project temp = (Project) o;      if (map.get(temp.getParentCode()) == null) {        rootProjectList.add(temp);      } else {        childrenProjectList.add(temp);      }    }    Map childrenMap = new HashMap();    for (int i = 0; i < childrenProjectList.size(); i++) {      Project child = (Project) childrenProjectList.get(i);      List childrenList = (List) childrenMap.get(child.getParentCode());      if (childrenList != null) {        childrenList.add(child);      } else {        List tempList = new ArrayList();        tempList.add(child);        childrenMap.put(child.getParentCode(), tempList);      }    }    for (int i = 0; i < rootProjectList.size(); i++) {      Project root = (Project) rootProjectList.get(i);      this.setProjectChildren(root, childrenMap);    }    return rootProjectList;  }  private void setProjectChildren(Project project, Map childrenMap) {    List childrenList = (List) childrenMap.get(project.getCode());    if (childrenList != null) {      project.setChildren(childrenList);      for (int i = 0; i < childrenList.size(); i++) {        Project c = (Project) childrenList.get(i);        setProjectChildren(c, childrenMap);      }    }  }  public void expandAll(boolean expand) {    DefaultMutableTreeNode root = (DefaultMutableTreeNode) this.getModel().getRoot();    expandAll(new TreePath(root), expand);  }  /**   * 遍历parent的所有子节点并展开   * @param parent   * @param expand   */  public void expandAll(TreePath parent, boolean expand) {    DefaultMutableTreeNode node = (DefaultMutableTreeNode) parent.getLastPathComponent();    if (node.getChildCount() >= 0) {      for (Enumeration e = node.children(); e.hasMoreElements();) {        DefaultMutableTreeNode n = (DefaultMutableTreeNode) e.nextElement();        TreePath path = parent.pathByAddingChild(n);        expandAll(path, expand);      }    }    if (expand) {      this.expandPath(parent);    } else {      this.collapsePath(parent);    }  }  public static void main(String[] args) {    ProjectTree tree = new ProjectTree(true, null);    tree.expandAll(false);    JFrame f = new JFrame();    f.getContentPane().add(tree);    f.setSize(400, 300);    f.setLocationRelativeTo(null);    f.setVisible(true);    f.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent e) {        System.exit(0);      }    });  }  public Map<Object, DefaultMutableTreeNode> getTreeNodeMap() {    return treeNodeMap;  }  public void setTreeNodeMap(Map<Object, DefaultMutableTreeNode> treeNodeMap) {    this.treeNodeMap = treeNodeMap;  }  public String getCompoId() {    return compoId;  }  public void setCompoId(String compoId) {    this.compoId = compoId;  }}