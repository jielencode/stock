package com.ufgov.zc.client.component;import java.awt.Dialog;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.List;import javax.swing.JTable;import javax.swing.table.DefaultTableModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.util.GkPreferencesStore;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.model.AsCompo;public class MenuSettingSelectDialog extends JTableSelectDialog {  public MenuSettingSelectDialog(Dialog dialog, boolean modal,  JButtonTextField triggerField) {    super(dialog, modal, triggerField);    LangTransMeta.init("GK%");  }  @Override  protected void initDataBufferList() {    String baseDataServiceDelegateName = "baseDataServiceDelegate";    IBaseDataServiceDelegate IBaseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory    .create(IBaseDataServiceDelegate.class, baseDataServiceDelegateName);    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    dataBufferList = IBaseDataServiceDelegate.getMaGkFuncCompo(requestMeta);    for (int i = 0; i < dataBufferList.size(); i++) {      AsCompo rowData = (AsCompo) dataBufferList.get(i);      this.triggerField.dataMap.put(rowData.getCompoId(), rowData);    }    this.triggerField.filteredDataList = dataBufferList;  }  @Override  protected void initSelectTable() {    String[] names = { LangTransMeta.translate("GK_FIELD_COMPO_ID"),    LangTransMeta.translate("GK_FIELD_COMPO_NAME") };    Object[][] data = null;    tableDataList = this.genTableData();    data = new Object[tableDataList.size()][names.length];    for (int i = 0; i < tableDataList.size(); i++) {      AsCompo rowData = (AsCompo) tableDataList.get(i);      int col = 0;      data[i][col++] = rowData.getCompoId();      data[i][col++] = rowData.getCompoName();      //      data[i][col++] = rowData.getRemark();    }    DefaultTableModel model = new DefaultTableModel(data, names) {      @Override      public boolean isCellEditable(int row, int colum) {        return false;      }    };    selectTable.setPreferencesKey(this.getClass().getName() + "_selectTable");    selectTable.setPreferenceStore(GkPreferencesStore.preferenceStore());    selectTable.setModel(model);    selectTable.addMouseListener(new MouseAdapter() {      @Override      public void mouseClicked(MouseEvent e) {        if (e.getClickCount() == 2) {          doOK();        }      }    });    selectTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);  }  @Override  protected void initTitle() {    LangTransMeta.init("GK%");    //this.setTitle(LangTransMeta.translate("GK_TITLE_MANAGE"));    this.setTitle("菜单选择");  }  private List genTableData() {    return dataBufferList;  }}