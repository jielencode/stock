package com.ufgov.zc.client.component;import java.awt.event.MouseEvent;import java.awt.event.MouseMotionListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.ArrayList;import java.util.Enumeration;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JFrame;import javax.swing.JTree;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.DefaultTreeModel;import javax.swing.tree.TreePath;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.util.GkGetDataRuleUtil;import com.ufgov.zc.common.commonbiz.model.Company;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;public class CompanyTree extends JTree {  private static final long serialVersionUID = 1L;  private List companyList;  private IBaseDataServiceDelegate baseDataServiceDelegate;  private String companServiceName = "baseDataServiceDelegate";  private String compoId;  private String ruleId;  private RequestMeta requestMeta;  /**   * @param showData 是否打开时就显示数据   */  public CompanyTree(boolean showData) {    this(showData, null);  }  public CompanyTree(boolean showData, String compoId) {    super();    this.compoId = compoId;    init();    if (showData) {      refreshCompanyList();      createTree();    }  }  public CompanyTree(boolean showData, String compoId, String dataRule) {    super();    this.compoId = compoId;    this.ruleId = dataRule;    init();    if (showData) {      refreshCompanyList();      createTree();    }  }  private void init() {    baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(    IBaseDataServiceDelegate.class, companServiceName);    requestMeta = WorkEnv.getInstance().getRequestMeta();  }  public List getCompanyList() {    return companyList;  }  public void setCompanyList(List companyList) {    this.companyList = companyList;  }  /**   * 刷新单位数据   */  public void refreshCompanyList() {    ElementConditionDto dto = new ElementConditionDto();    dto.setNd(WorkEnv.getInstance().getTransNd());    dto.setDataRuleCondiStr(GkGetDataRuleUtil.getInstance().getDataRuleCondiStr(ruleId));    if (WorkEnv.getInstance().containRole(AsOptionMeta.getOptVal(ZcElementConstants.OPT_ZC_YSDWCG_ROLE))      || WorkEnv.getInstance().containRole(AsOptionMeta.getOptVal(ZcElementConstants.OPT_ZC_CGZG_SH_ROLE))) {      dto.setCoCode(WorkEnv.getInstance().getCurrCoCode());    }    companyList = baseDataServiceDelegate.getCompanyNumLimTree(dto, requestMeta);  }  protected Map<Object, DefaultMutableTreeNode> treeNodeMap = new HashMap<Object, DefaultMutableTreeNode>();  /**   * 构建单位树   */  public void createTree() {    //创建根节点    Company companyRoot = new Company();    companyRoot.setCode("");    companyRoot.setName("单位");    DefaultMutableTreeNode root = new DefaultMutableTreeNode(companyRoot);    //		 DefaultMutableTreeNode priorNode = root;    //		 for (Object o : companyList) {    //		 Company company = (Company) o;    //		 DefaultMutableTreeNode node = new DefaultMutableTreeNode(company);    //		 treeNodeMap.put(company, node);    //		 Company priorCompany = (Company) priorNode.getUserObject();    //		 if ((company.getParentCode() == null) || (company.getParentCode().equalsIgnoreCase("")))    //		 root.add(node);    //		 else if (company.getParentCode().equals(priorCompany.getCode()))    //		 priorNode.add(node);    //		 else {    //		 // 循环取上个节点的父节点，从树深处退出    //		 while (priorNode.getParent() != null) {    //		 priorNode = (DefaultMutableTreeNode) priorNode.getParent();    //		 priorCompany = (Company) priorNode.getUserObject();    //		 if (company.getParentCode().equals(priorCompany.getCode()))    //		 priorNode.add(node);    //		 }    //		 }    //		 priorNode = node;    //		 }    //		 this.setModel(new DefaultTreeModel(root));    /////////////////////    //		 DefaultMutableTreeNode root = new DefaultMutableTreeNode("单位");    List companyTreeList = genTreeData();    treeNodeMap.clear();    for (Object o : companyTreeList) {      Company company = (Company) o;      DefaultMutableTreeNode node = new DefaultMutableTreeNode(company);      root.add(node);      treeNodeMap.put(company, node);      this.setChildNode(company, node);    }    this.setModel(new DefaultTreeModel(root));    addMouseMotionListener(new MouseMotionListener() {      public void mouseDragged(MouseEvent e) {      }      public void mouseMoved(MouseEvent e) {        JTree tree = (JTree) e.getSource();        int rowLocation = tree.getRowForLocation(e.getX(), e.getY());        TreePath treepath = tree.getPathForRow(rowLocation);        if (treepath == null) {          return;        }        DefaultMutableTreeNode node = (DefaultMutableTreeNode) treepath        .getLastPathComponent();        Object userObject = node.getUserObject();        if (userObject instanceof Company) {          Company selCompany = (Company) userObject;          setToolTipText(selCompany);        }      }    });  }  private void setToolTipText(Company c) {    this.setToolTipText(c.toString());  }  ////////  private List genTreeData() {    List rootCompanyList = new ArrayList();    List childrenCompanyList = new ArrayList();    Map dataMap = new HashMap();    for (Object o : companyList) {      Company cpy = (Company) o;      dataMap.put(cpy.getCode(), cpy);    }    for (Object o : companyList) {      Company cpy = (Company) o;      if (dataMap.get(cpy.getParentCode()) == null) {        rootCompanyList.add(cpy);      } else {        childrenCompanyList.add(cpy);      }    }    Map childrenMap = new HashMap();    for (int i = 0; i < childrenCompanyList.size(); i++) {      Company child = (Company) childrenCompanyList.get(i);      List childrenList = (List) childrenMap.get(child.getParentCode());      if (childrenList != null) {        childrenList.add(child);      } else {        List tempList = new ArrayList();        tempList.add(child);        childrenMap.put(child.getParentCode(), tempList);      }    }    for (int i = 0; i < rootCompanyList.size(); i++) {      Company company = (Company) rootCompanyList.get(i);      this.setCompanyChildren(company, childrenMap);    }    return rootCompanyList;  }  private void setCompanyChildren(Company company, Map childrenMap) {    List childrenList = (List) childrenMap.get(company.getCode());    if (childrenList != null) {      company.setChildren(childrenList);      for (int i = 0; i < childrenList.size(); i++) {        Company c = (Company) childrenList.get(i);        setCompanyChildren(c, childrenMap);      }    }  }  private void setChildNode(Company company, DefaultMutableTreeNode node) {    if (company.getChildren().size() > 0) {      for (Object o : company.getChildren()) {        Company c = (Company) o;        DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(c);        node.add(childNode);        treeNodeMap.put(c, childNode);        setChildNode(c, childNode);      }    }  }  ///////  public void expandAll(boolean expand) {    DefaultMutableTreeNode root = (DefaultMutableTreeNode) this.getModel().getRoot();    expandAll(new TreePath(root), expand);  }  /**   * 遍历parent的所有子节点并展开   * @param parent   * @param expand   */  public void expandAll(TreePath parent, boolean expand) {    DefaultMutableTreeNode node = (DefaultMutableTreeNode) parent.getLastPathComponent();    if (node.getChildCount() >= 0) {      for (Enumeration e = node.children(); e.hasMoreElements();) {        DefaultMutableTreeNode n = (DefaultMutableTreeNode) e.nextElement();        TreePath path = parent.pathByAddingChild(n);        expandAll(path, expand);      }    }    if (expand) {      this.expandPath(parent);    } else {      this.collapsePath(parent);    }  }  public static void main(String[] args) {    CompanyTree tree = new CompanyTree(true, null);    tree.expandAll(false);    JFrame f = new JFrame();    f.getContentPane().add(tree);    f.setSize(400, 300);    f.setLocationRelativeTo(null);    f.setVisible(true);    f.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent e) {        System.exit(0);      }    });  }  public Map<Object, DefaultMutableTreeNode> getTreeNodeMap() {    return treeNodeMap;  }  public void setTreeNodeMap(Map<Object, DefaultMutableTreeNode> treeNodeMap) {    this.treeNodeMap = treeNodeMap;  }  public String getCompoId() {    return compoId;  }  public void setCompoId(String compoId) {    this.compoId = compoId;  }}