/** * ForeignEntitySearchConditionItem.java * com.ufgov.gk.client.component.ui.conditionitem * Administrator * 2010-6-8 */package com.ufgov.zc.client.component.ui.conditionitem;import java.util.List;import javax.swing.JComponent;import javax.swing.table.TableModel;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityField;import com.ufgov.zc.client.util.NumLimUtil;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.BeanUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcBBrand;/** * @author Administrator * */public class ZcBrandSearchConditionItem extends AbstractSearchConditionItem {  private String compoId;  private String fieldName = "zcText1";  public ZcBrandSearchConditionItem(String displayName) {    init(displayName);  }  public ZcBrandSearchConditionItem(String displayName, String compoId) {    this.compoId = compoId;    init(displayName);  }  private ForeignEntityField brandSelectField;  @Override  protected JComponent createEditorComponent() {    if (brandSelectField == null) {      creatField();      brandSelectField.addValueChangeListener(new ValueChangeListener() {        public void valueChanged(ValueChangeEvent e) {          ZcBBrand value = (ZcBBrand) brandSelectField.getValue();          String code = null;          if (value != null) {            code = value.getZcBraCode();          }          fireSearch();          fireValueChanged();        }      });    }    return brandSelectField;  }  private void creatField() {    String columNames[] = { "品牌代码", "品牌名称", "年度" };    ZcBBrandHandler brandHandler = new ZcBBrandHandler(columNames);    ElementConditionDto dto = new ElementConditionDto();    // 这里要取业务年度    dto.setNd(WorkEnv.getInstance().getTransNd());    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(compoId, NumLimConstants.FWATCH, "ZC_BRA_CODE"));    brandSelectField = new ForeignEntityField("ZcBrand.getPinpList", dto, 50, brandHandler, columNames, "商品品牌");  }  public void setBrand(ZcBBrand brand) {    if (brandSelectField != null) {      brandSelectField.setValue(brand);    }  }  @Override  public void setValue(Object value) {    brandSelectField.setValue(value);  }  @Override  public Object getValue() {    return brandSelectField.getValue();  }  @Override  public void putToElementConditionDto(ElementConditionDto element) {    String v = "";    if (brandSelectField.getValue() != null) {      ZcBBrand proj = (ZcBBrand) brandSelectField.getValue();      v = proj.getZcBraCode();    }    BeanUtil.set(fieldName, v.equals("") ? null : v, element);  }  private class ZcBBrandHandler implements IForeignEntityHandler {    private String columNames[];    public ZcBBrandHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      // TODO Auto-generated method stub      for (Object object : selectedDatas) {        ZcBBrand brand = (ZcBBrand) object;        ZcBrandSearchConditionItem.this.brandSelectField.setValue(brand);        ZcBrandSearchConditionItem.this.brandSelectField.setText(brand.getZcBraName());        fireSearch();        fireValueChanged();      }    }    @Override    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcBBrand rowData = (ZcBBrand) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getZcBraCode();        data[i][col++] = rowData.getZcBraName();        data[i][col++] = rowData.getZcYear();      }      MyTableModel model = new MyTableModel(data, columNames) {        @Override        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      // TODO Auto-generated method stub      return false;    }  }}