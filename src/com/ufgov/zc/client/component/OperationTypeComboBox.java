package com.ufgov.zc.client.component;import java.awt.BorderLayout;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JFrame;import javax.swing.JPanel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.element.BaseElementDataFilter;import com.ufgov.zc.client.component.element.EditCtrlComboBox;import com.ufgov.zc.client.datacache.OperationTypeDataCache;import com.ufgov.zc.common.commonbiz.model.OperationType;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;public class OperationTypeComboBox extends EditCtrlComboBox {  private static final long serialVersionUID = 7695985762179916173L;  private List flowCodeList;  private Map<String, OperationType> dataMap = new HashMap<String, OperationType>();  public OperationTypeComboBox() {    super();    init();  }  public OperationTypeComboBox(List flowCodeList) {    super();    this.flowCodeList = flowCodeList;    init();  }  private void init() {    dataBufferList = OperationTypeDataCache.getOperationType(flowCodeList);    int nd = WorkEnv.getInstance().getTransNd();    IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(    IBaseDataServiceDelegate.class, "baseDataServiceDelegate");    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    ElementConditionDto dto = new ElementConditionDto();    dto.setNd(nd);    if (dto.getDataRuleCondiStr() == null) {      numLimDataList = dataBufferList;    } else {      numLimDataList = baseDataServiceDelegate.getOperationType(dto, requestMeta);    }    for (int i = 0; i < dataBufferList.size(); i++) {      OperationType data = (OperationType) dataBufferList.get(i);      this.dataMap.put(data.getCode(), data);    }    this.addItemListener(new ItemListener() {      public void itemStateChanged(ItemEvent e) {        if (((OperationType) getSelectedItem()) != null) {          setToolTipText(((OperationType) e.getItem()).getName());        } else {          setToolTipText(null);        }      }    });  }  public OperationType getSelectedOperationType() {    return (OperationType) this.getSelectedItem();  }  public void setSelectedOperationType(OperationType operationType) {    this.setSelectedItem(operationType);  }  public void setSelectedOperationTypeByCode(String code) {    OperationType operationType = dataMap.get(code);    this.setSelectedItem(operationType);  }  public void initComboBox() {    List dataList = BaseElementDataFilter.doFilter(dataBufferList, randomEdit, prefix, levelCtrl,    ctrlLevelNum);    dataList = BaseElementDataFilter.doNumLimFilter(dataList, numLimDataList);    this.removeAllItems();    this.addItem(null);    for (int i = 0; i < dataList.size(); i++) {      OperationType data = (OperationType) dataList.get(i);      this.addItem(data);      this.addItemDisplaLable(data, data.getName());    }  }  public static void main(String[] args) {    JFrame f = new JFrame();    List flowCodeList = new ArrayList();    flowCodeList.add("02");    flowCodeList.add("03");    OperationTypeComboBox textField = new OperationTypeComboBox(flowCodeList);    textField.setEditable(false);    textField.setEnabled(false);    textField.setEnabled(true);    textField.setCtrlLevelNum(0);    textField.setSelectedOperationTypeByCode("02");    JPanel panel = new JPanel();    panel.add(textField);    textField.initComboBox();    f.getContentPane().add(panel, BorderLayout.NORTH);    // f.pack();    // SwingUtilities.updateComponentTreeUI(panel);    f.setSize(400, 300);    f.setLocationRelativeTo(null);    f.setVisible(true);    f.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent e) {        System.exit(0);      }    });  }}