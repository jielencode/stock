package com.ufgov.zc.client.util;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.common.commonbiz.constants.RelationRuleConstants;import com.ufgov.zc.common.commonbiz.fieldmap.FieldMapRegister;import com.ufgov.zc.common.commonbiz.model.BaseElement;import com.ufgov.zc.common.commonbiz.model.MaElementRelationRule;import com.ufgov.zc.common.commonbiz.model.MaElementRelationRuleDetail;import com.ufgov.zc.common.commonbiz.model.MaElementRelationRuleEntry;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.util.BeanUtil;import com.ufgov.zc.common.system.util.ObjectUtil;public class ElementRelationUtil {  static private IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory  .create(IBaseDataServiceDelegate.class, "baseDataServiceDelegate");  private static Map<String, List> cacheRules = new HashMap<String, List>();  private static List getElementRelationAuto(String compoId, String ruleType) {    return getElementRelationRules(compoId, MaElementRelationRule.HANDLE_TYPE_AUTO, ruleType);  }  private static List getElementRelationManual(String compoId, String ruleType) {    return getElementRelationRules(compoId, MaElementRelationRule.HANDLE_TYPE_MANUAL, ruleType);  }  private static List getElementRelationRules(String compoId, String handleType, String ruleType) {    String key = compoId + "-" + handleType + "-" + ruleType;    List list = cacheRules.get(key);    if (list == null) {      list = baseDataServiceDelegate.getElementRelationRules(compoId, handleType, ruleType, WorkEnv      .getInstance().getRequestMeta());      cacheRules.put(key, list);    }    return (List) ObjectUtil.deepCopy(list);  }  public static List filterElementByRelation(String compoId, Object bill, String element,  List elementDataList) {    return filterElementByRelation(compoId, RelationRuleConstants.PLAIN_RELATION, bill, element,    elementDataList);  }  public static List filterElementByRelation(String compoId, String ruleType, Object bill, String element,  List elementDataList) {    List ruleList = getElementRelationManual(compoId, ruleType);    if (ruleList.isEmpty() || bill == null) {      return elementDataList;    }    return dofitler(ruleList, bill, element, elementDataList);  }  private static List dofitler(List<MaElementRelationRule> rrList, Object bill, String element,  List elementDataList) {    for (MaElementRelationRule rr : rrList) {      List entryList = rr.getRuleEntryList();      for (Object o : entryList) {        MaElementRelationRuleEntry entry = (MaElementRelationRuleEntry) o;        boolean flag = isEntryMatched(bill, entry);        List destElementList = entry.getDestElementList();        List filterList = new ArrayList();        if (flag) {          for (int i = 0; i < destElementList.size(); i++) {            MaElementRelationRuleDetail maCpElementRelation = (MaElementRelationRuleDetail) destElementList            .get(i);            if (element.equals(maCpElementRelation.getElement().trim())) {              String rValue = maCpElementRelation.getElementValue();              String operator = maCpElementRelation.getOperator().trim();              if (operator.equals(MaElementRelationRuleDetail.OPERATOR_EQUAL)) {                for (int c = 0; c < elementDataList.size(); c++) {                  BaseElement be = (BaseElement) elementDataList.get(c);                  if (be.getCode().equals(rValue)) {                    filterList.add(be);                  }                }              } else if (operator.equals(MaElementRelationRuleDetail.OPERATOR_LIKE)) {                for (int c = 0; c < elementDataList.size(); c++) {                  BaseElement be = (BaseElement) elementDataList.get(c);                  if (be.getCode().startsWith(rValue)) {                    filterList.add(be);                  }                }              } else if (operator.equals(MaElementRelationRuleDetail.OPERATOR_IN)) {                String[] values = rValue.split(",");                List valueList = new ArrayList();                for (Object o2 : values) {                  valueList.add(((String) o2).trim());                }                for (int c = 0; c < elementDataList.size(); c++) {                  BaseElement be = (BaseElement) elementDataList.get(c);                  if (valueList.contains(be.getCode())) {                    filterList.add(be);                  }                }              } else {                throw new RuntimeException("要素关联关系中不支持操作符" + operator);              }              break;            }          }          return filterList;        }      }    }    return elementDataList;  }  private static boolean isEntryMatched(Object bill, MaElementRelationRuleEntry entry) {    List srcElementList = entry.getSrcElementList();    boolean flag = true;    for (int i = 0; i < srcElementList.size(); i++) {      MaElementRelationRuleDetail maCpElementRelation = (MaElementRelationRuleDetail) srcElementList.get(i);      if (!judgeElement(maCpElementRelation.getElement().toUpperCase(),      maCpElementRelation.getElementValue(), maCpElementRelation.getOperator().toLowerCase(), bill)) {        flag = false;      }    }    return flag;  }  /**   *    * @param compoId   * @param bill   */  public static void handleElementRelationAuto(String compoId, Object bill) {    handleElementRelationAuto(compoId, RelationRuleConstants.PLAIN_RELATION, bill);  }  public static void handleElementRelationAuto(String compoId, String ruleType, Object bill) {    List ruleList = getElementRelationAuto(compoId, ruleType);    if (ruleList.isEmpty() || bill == null) {      return;    }    for (int c = 0; c < ruleList.size(); c++) {      handleRelationAuto((MaElementRelationRule) ruleList.get(c), bill);    }  }  private static void handleRelationAuto(MaElementRelationRule relationRule, Object bill) {    List entryList = relationRule.getRuleEntryList();    for (Object tempEntry : entryList) {      MaElementRelationRuleEntry entry = (MaElementRelationRuleEntry) tempEntry;      boolean flag = isEntryMatched(bill, entry);      List destElementList = entry.getDestElementList();      if (flag) {        for (int i = 0; i < destElementList.size(); i++) {          MaElementRelationRuleDetail ruleDetail = (MaElementRelationRuleDetail) destElementList.get(i);          Map map = FieldMapRegister.get(bill.getClass());          String propertyName = (String) map.get(ruleDetail.getElement().toUpperCase());          if (propertyName == null) {            throw new RuntimeException("没有找到要素" + ruleDetail.getElement() + "对应的属性");          }          BeanUtil.set(propertyName, ruleDetail.getElementValue(), bill);        }      }    }  }  private static boolean judgeElement(String element, String elementValue, String operator, Object bill) {    Map map = FieldMapRegister.get(bill.getClass());    String propertyName = (String) map.get(element);    if (propertyName == null) {      throw new RuntimeException("没有找到要素" + element + "对应的属性");    }    String pValue = ((String) BeanUtil.get(propertyName, bill));    if (pValue == null) {      return false;    }    if (operator.equals(MaElementRelationRuleDetail.OPERATOR_EQUAL)) {      return elementValue.equals(pValue);    } else if (operator.equals(MaElementRelationRuleDetail.OPERATOR_LIKE)) {      String[] values = elementValue.split(",");      List valueList = new ArrayList();      boolean match = false;      for (Object o : values) {        if (pValue.startsWith(((String) o).trim())) {          match = true;          break;        }      }      return match;      //return pValue.startsWith(elementValue.trim());    } else if (operator.equals(MaElementRelationRuleDetail.OPERATOR_IN)) {      String[] values = elementValue.split(",");      List valueList = new ArrayList();      for (Object o : values) {        valueList.add(((String) o).trim());      }      return valueList.contains(pValue);    } else {      throw new RuntimeException("要素关联关系中不支持操作符" + operator);    }  }  /**   *    * @param bill   * @param compoId   * @param handleType : 0: 手动 1： 自动   * @return n 只返回匹配的relationRule并且Rule的entry也只返回匹配的    */  public static List getMatchedRelationRule(Object bill, String compoId, String ruleType) {    List rules = getElementRelationAuto(compoId, ruleType);    return getMatchedRelationRule(bill, rules);  }  /**   *    * @param bill   * @param rules   * @return 只返回匹配的relationRule并且Rule的entry也只返回匹配的    */  public static List getMatchedRelationRule(Object bill, List rules) {    List matchRuleAndEntryList = new ArrayList();    for (int i = 0; i < rules.size(); i++) {      MaElementRelationRule rule = (MaElementRelationRule) rules.get(i);      List entryList = rule.getRuleEntryList();      boolean flag = false;      List matchedEntryList = new ArrayList();      for (int n = 0; n < entryList.size(); n++) {        MaElementRelationRuleEntry ruleEntry = (MaElementRelationRuleEntry) entryList.get(n);        if (isEntryMatched(bill, ruleEntry)) {          matchedEntryList.add(ruleEntry);          flag = true;        }      }      if (flag) {        rule.setRuleEntryList(matchedEntryList);        matchRuleAndEntryList.add(rule);      }    }    return matchRuleAndEntryList;  }  public static int getMatchedRelationRuleTimes(Object bill, String compoId, String ruleType) {    int times = 0;    List rules = getMatchedRelationRule(bill, compoId, ruleType);    for (int i = 0; i < rules.size(); i++) {      MaElementRelationRule rule = (MaElementRelationRule) rules.get(i);      times += rule.getRuleEntryList().size();    }    return times;  }  //    /* public static void main(String[] args) {   ApplicationContext context;   context = new ClassPathXmlApplicationContext("applicationContext*.xml");   SpringContext.setSpringContext(context);   DpDetail bill = new DpDetail();   bill.setPayoutCode("01");   bill.setCoCode("607");   handleElementRelationAuto("DP_EDIT", bill);      getMatchedRelationRule(bill,"DP_EDIT","PLAIN_RELATION");      System.out.println(getMatchedRelationRuleTimes(bill,"DP_EDIT","PLAIN_RELATION"));      DpDetail bill2 = bill;   bill2=null;      }*/}