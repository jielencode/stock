package com.ufgov.zc.client.console;import java.awt.BorderLayout;import java.awt.Container;import java.awt.Dialog;import java.awt.FlowLayout;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.util.List;import java.util.Vector;import javax.swing.JButton;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.table.DefaultTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JListSelectDialog;import com.ufgov.zc.client.component.SearchConditionSelectField;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.common.commonbiz.model.SearchCondition;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;public class SearchConditionSettingDialog extends GkBaseDialog {  private IBaseDataServiceDelegate baseDataServiceDelegate;  private RequestMeta requestMeta;  private DataEditArea defaultSearchPanel;//默认搜索条件  private JButton okBtn = new JButton("确定");  private JButton cancelBtn = new JButton("关闭");  private JButton setTab = new JButton("搜索条件管理");  private String conditionId;  private JPanel compPanel = new JPanel();  public String getConditionId() {    return conditionId;  }  public void setConditionId(String conditionId) {    this.conditionId = conditionId;  }  public void initService() {    requestMeta = WorkEnv.getInstance().getRequestMeta();    String baseDataServiceDelegateName = "baseDataServiceDelegate";    baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(    IBaseDataServiceDelegate.class, baseDataServiceDelegateName);  }  private SearchConditionSelectField selectField = new SearchConditionSelectField(30, "condition");  public SearchConditionSettingDialog(Window window, String title) {    super(window, Dialog.ModalityType.APPLICATION_MODAL);    setTitle(title);    this.setSize(560, 440);    this.moveToScreenCenter();    initService();    initGUI();  }  public void initGUI() {    compPanel.setLayout(new BorderLayout());    defaultSearchPanel = new DataEditArea("默认搜索条件管理", "pmanage", false) {      public void addComponentToPanel() {        searchPanel.add(setTab);      }    };    setTab.addActionListener(new ActionListener() {      public void actionPerformed(final ActionEvent e) {        openSearchDialog();      }    });    compPanel.add(defaultSearchPanel, BorderLayout.CENTER);    JPanel commandPane = new JPanel(new FlowLayout(FlowLayout.RIGHT));    commandPane.add(cancelBtn);    cancelBtn.addActionListener(new ActionListener() {      public void actionPerformed(final ActionEvent e) {        close();      }    });    compPanel.add(commandPane, BorderLayout.SOUTH);    Container container = this.getContentPane();    container.setLayout(new BorderLayout());    JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));    topPanel.add(new JLabel("搜索条件组名称："));    topPanel.add(selectField);    selectField.addValueChangeListener(new ValueChangeListener() {      public void valueChanged(ValueChangeEvent e) {        SearchCondition val = selectField.getSearchCondition();        if (val != null) {          String code = val.getConditionId();          setConditionId(code);        }        else {          setConditionId(null);        }        initEditData();      }    });    container.add(topPanel, BorderLayout.NORTH);    container.add(compPanel, BorderLayout.CENTER);    initEditData();  }  public void openSearchDialog() {    if (conditionId == null) {      JOptionPane.showMessageDialog(this, "请您选择一个搜索条件组名称 ！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    doOpenPageDialog(conditionId);  }  private JListSelectDialog SearchSettingDialog;  private void doOpenPageDialog(String conditionId) {    List allTabList = this.baseDataServiceDelegate.getSearchTypeCondition(conditionId, "condition", requestMeta);    List seletedTabList = baseDataServiceDelegate.getUserSearchCondition(conditionId, "*", requestMeta);    SearchSettingDialog = new JListSelectDialog(null, true, "设置搜索条件") {      public void doOk() {        doUpdateSearchSetting();        this.close();      }    };    SearchSettingDialog.setLeftList(allTabList);    SearchSettingDialog.setRightList(seletedTabList);    SearchSettingDialog.setVisible(true);  }  private void doUpdateSearchSetting() {    List searchConditionList = SearchSettingDialog.getSelectedItem();    this.baseDataServiceDelegate.updateUserSearchCondition("*",    conditionId, searchConditionList, requestMeta);    initEditData();  }  public void initEditData() {    String resId = this.getConditionId();    defaultSearchPanel.setPreferencesKey(this.getClass().getName() + "Condition_Default_Edit");    defaultSearchPanel.setTableModel(getDefaultTableModel(resId));  }  /*   * 默认页签设定   */  public DefaultTableModel getDefaultTableModel(String conditionId) {    DefaultTableModel defaultMode = null;    List beforeList = this.baseDataServiceDelegate.getUserSearchCondition(conditionId, "*", requestMeta);    final Vector names = new Vector();    names.add("搜索条件组ID");    names.add("搜索条件名称");    final Vector data = new Vector();    if (beforeList != null && beforeList.size() > 0) {      for (int i = 0; i < beforeList.size(); i++) {        final Vector row = new Vector();        final SearchCondition rowData = (SearchCondition) beforeList.get(i);        row.add(rowData.getConditionId());        row.add(rowData.getConditionFieldName());        data.add(row);      }    }    defaultMode = new DefaultTableModel(data, names) {      @Override      public int getColumnCount() {        return names.size();      }      @Override      public int getRowCount() {        return data.size();      }      public boolean isCellEditable(int row, int col) {        if (col < 2) {          return false;        } else {          return true;        }      }    };    return defaultMode;  }  public void close() {    this.closeDialog();  }}