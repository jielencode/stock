package com.ufgov.zc.client.console;import java.awt.BorderLayout;import java.awt.Container;import java.awt.Dialog;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.List;import java.util.Vector;import javax.swing.DefaultCellEditor;import javax.swing.JButton;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.AsValComboBox;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.MenuSettingSelectField;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.model.AsCompo;import com.ufgov.zc.common.system.model.AsCompoFunc;import com.ufgov.zc.common.system.model.AsVal;public class CompoFuncSettingDialog extends GkBaseDialog {  private static final Logger logger = Logger.getLogger(CompoFuncSettingDialog.class);  private IBaseDataServiceDelegate baseDataServiceDelegate;  private RequestMeta requestMeta;  private MenuSettingSelectField selectTxt = new MenuSettingSelectField(20);  private DataEditArea editArea = new DataEditArea("", "");  private JButton okBtn = new JButton("确定");  private JButton cancelBtn = new JButton("关闭");  public CompoFuncSettingDialog(Window window, String title) {    super(window, Dialog.ModalityType.APPLICATION_MODAL);    this.setTitle(title);    this.setSize(new Dimension(660, 500));    this.moveToScreenCenter();    requestMeta = WorkEnv.getInstance().getRequestMeta();    initService();    initGUI();  }  public void initService() {    LangTransMeta.init("GK%");    String baseDataServiceDelegateName = "baseDataServiceDelegate";    baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(    IBaseDataServiceDelegate.class, baseDataServiceDelegateName);  }  public void initGUI() {    Container container = this.getContentPane();    container.setLayout(new BorderLayout());    JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));    topPanel.add(new JLabel("菜单选项："));    topPanel.add(selectTxt);    selectTxt.setColumns(26);    selectTxt.addValueChangeListener(new ValueChangeListener() {      public void valueChanged(ValueChangeEvent e) {        refreshData();      }    });    JPanel commandPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));    commandPanel.add(okBtn);    okBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        editArea.stopDataEditArea();        saveDataProcess();        //        List afterEditList = editArea.getAfterEditTableData();        //        if (afterEditList != null)        //          saveDataProcess(editBeforeList, afterEditList);      }    });    commandPanel.add(cancelBtn);    cancelBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        close();      }    });    container.add(topPanel, BorderLayout.NORTH);    container.add(editArea, BorderLayout.CENTER);    container.add(commandPanel, BorderLayout.SOUTH);    refreshData();  }  private void refreshData() {    editArea.setPreferencesKey(this.getClass().getName() + "_CompoFunc_Edit_Table");    AsCompo gkCompo = selectTxt.getAsCompo();    if (gkCompo != null) {      editArea.setTableModel(getTableModel(gkCompo.getCompoId()));    } else {      editArea.setTableModel(getTableModel(null));    }    SwingUtil.setTableCellEditor(editArea.getTable(), "是否写日志", new DefaultCellEditor(new AsValComboBox("VS_Y/N")));    SwingUtil.setTableCellEditor(editArea.getTable(), "是否禁用", new DefaultCellEditor(new AsValComboBox("VS_Y/N")));  }  public void saveDataProcess() {    try {      TableModel tableModel = editArea.getTable().getModel();      List dataList = new ArrayList();      for (int i = 0; i < tableModel.getRowCount(); i++) {        AsCompoFunc asCompo = new AsCompoFunc();        asCompo.setCompoId((String) tableModel.getValueAt(i, 0));        asCompo.setFuncId((String) tableModel.getValueAt(i, 2));        asCompo.setIsWrLog((String) tableModel.getValueAt(i, 4));        asCompo.setIsNeverUse((String) tableModel.getValueAt(i, 5));        dataList.add(asCompo);      }      baseDataServiceDelegate.updateAsCompoFunc(dataList, requestMeta);      JOptionPane.showMessageDialog(this, "功能部件设置更新成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "功能部件设置更新失败！", "错误", JOptionPane.ERROR_MESSAGE);    }  }  public void close() {    this.closeDialog();  }  private DefaultTableModel getTableModel(String compoId) {    DefaultTableModel defaultMode = null;    List dataList = this.baseDataServiceDelegate.getAsCompoFunc(compoId, requestMeta);    final Vector names = new Vector();    names.add("部件ID");    names.add("部件名称");    names.add("功能ID");    names.add("功能名称");    names.add("是否写日志");    names.add("是否禁用");    final Vector data = new Vector();    if (dataList != null && dataList.size() > 0) {      for (int i = 0; i < dataList.size(); i++) {        AsCompoFunc rowData = (AsCompoFunc) dataList.get(i);        Vector row = new Vector();        row.add(rowData.getCompoId());        row.add(rowData.getCompoName());        row.add(rowData.getFuncId());        row.add(rowData.getFuncName());        row.add(rowData.getIsWrLog());        row.add(rowData.getIsNeverUse());        data.add(row);      }    }    defaultMode = new DefaultTableModel(data, names) {      @Override      public int getColumnCount() {        return names.size();      }      @Override      public int getRowCount() {        return data.size();      }      @Override      public void setValueAt(Object aValue, int row, int column) {        Object oldValue = getValueAt(row, column);        Vector rowVector = (Vector) dataVector.elementAt(row);        if ((oldValue != null && aValue != null && !oldValue.toString().equals(aValue.toString()))        || (oldValue == null && aValue != null)) {          if (aValue instanceof AsVal) {            rowVector.setElementAt(((AsVal) aValue).getValId(), column);          } else {            rowVector.setElementAt(aValue, column);          }        }        fireTableCellUpdated(row, column);      }      @Override      public boolean isCellEditable(int row, int colum) {        if (colum < 4) {          return false;        } else {          return true;        }      }    };    return defaultMode;  }}