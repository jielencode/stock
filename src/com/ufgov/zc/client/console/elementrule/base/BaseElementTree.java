package com.ufgov.zc.client.console.elementrule.base;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.ArrayList;import java.util.Enumeration;import java.util.List;import javax.swing.JTree;import javax.swing.tree.DefaultTreeModel;import javax.swing.tree.DefaultTreeSelectionModel;import javax.swing.tree.TreePath;import javax.swing.tree.TreeSelectionModel;import com.ufgov.zc.client.component.CheckNode;import com.ufgov.zc.client.component.CheckRenderer;import com.ufgov.zc.common.commonbiz.model.BaseElement;public class BaseElementTree extends JTree {  /**   *    */  private static final long serialVersionUID = 2333489228720220562L;  public final int DEFAULT_ROWHEIGHT = 20; // 默认行高  private List selectedElements = new ArrayList();  private String rootLabel;  public BaseElementTree(String label) {    this.rootLabel = label;    init();  }  public void setTreeData(List treeData) {    BaseElement rootElement = new BaseElement();    rootElement.setCode("");    rootElement.setName(rootLabel);    CheckNode root = new CheckNode(rootElement);    root.setParentSelected(false);    root.setChildSelected(false);    BaseElement element = null;    for (Object o : treeData) {      element = (BaseElement) o;      CheckNode node = new CheckNode(element);      node.setParentSelected(false);      node.setChildSelected(false);      root.add(node);      this.setChildNode(element, node);    }    this.setModel(new DefaultTreeModel(root));    this.setCellRenderer(new CheckRenderer());    DefaultTreeSelectionModel selectionModel = new DefaultTreeSelectionModel();    selectionModel.setSelectionMode(TreeSelectionModel.CONTIGUOUS_TREE_SELECTION);    this.setSelectionModel(selectionModel);  }  public List getSelectedLeafElement() {    selectedElements.clear();    CheckNode root = (CheckNode) this.getModel().getRoot();    CheckNode node = (CheckNode) root.getFirstLeaf();    BaseElement element = null;    while (node != null) {      if (node.isSelected()) {        element = (BaseElement) node.getUserObject();        selectedElements.add(element);      }      node = (CheckNode) node.getNextLeaf();    }    return selectedElements;  }  //  private void getSelectedElementCode(CheckNode node, StringBuffer buffer) {  //    if (node.isSelected()) {  //      BaseElement element = (BaseElement)node.getUserObject();  //      buffer.append("," + element.getCode());  //    }  //    Enumeration childs = node.children();  //    while (childs.hasMoreElements()) {  //      CheckNode child = (CheckNode)childs.nextElement();  //      getSelectedElementCode(child, buffer);  //    }  //  }  //    //  public String getSelectedElementCode() {  //    CheckNode root = (CheckNode)this.getModel().getRoot();  //    StringBuffer buffer = new StringBuffer();  //    getSelectedElementCode(root, buffer);  //    String result = buffer.toString();  //    result = result.length() > 0 ? result.substring(1) : result;  //    return result;  //  }  public String getSelectedLeafElementCode() {    String codeStr = "";    selectedElements.clear();    CheckNode root = (CheckNode) this.getModel().getRoot();    CheckNode node = (CheckNode) root.getFirstLeaf();    BaseElement element = null;    while (node != null) {      if (node.isSelected()) {        element = (BaseElement) node.getUserObject();        codeStr += "," + element.getCode() + "";      }      node = (CheckNode) node.getNextLeaf();    }    codeStr = codeStr.length() > 0 ? codeStr.substring(1) : codeStr;    return codeStr;  }  public void setSelectedLeafElementList(List selectedElement, boolean strict) {    CheckNode root = (CheckNode) this.getModel().getRoot();    CheckNode node = (CheckNode) root.getFirstLeaf();    while (node != null) {      BaseElement element = (BaseElement) node.getUserObject();      if (selectedElement == null)        node.setSelected(false);      else if (strict) {        if (selectedElement.contains(element))          node.setSelected(true);        else          node.setSelected(false);      } else if (!strict) {        boolean hasCode = false;        for (Object o : selectedElement) {          BaseElement ele = (BaseElement) o;          if (element.getCode().equals(ele.getCode())) {            hasCode = true;            break;          }        }        node.setSelected(hasCode);      }      node = (CheckNode) node.getNextLeaf();    }    repaint();  }  public void setSelectedElementCode(List selectedElement) {    CheckNode root = (CheckNode) this.getModel().getRoot();    setSelectedElementCode(root, selectedElement);  }  private void setSelectedElementCode(CheckNode node, List selectedElement) {    BaseElement element = (BaseElement) node.getUserObject();    node.setSelected(false);    for (Object o : selectedElement) {      String code = (String) o;      if (element.getCode().equals(code)) {        node.setSelected(true);        break;      }    }    Enumeration childs = node.children();    while (childs.hasMoreElements()) {      CheckNode child = (CheckNode) childs.nextElement();      setSelectedElementCode(child, selectedElement);    }  }  public void setSelectedLeafElementCode(List selectedElement) {    CheckNode root = (CheckNode) this.getModel().getRoot();    CheckNode node = (CheckNode) root.getFirstLeaf();    while (node != null) {      BaseElement element = (BaseElement) node.getUserObject();      if (selectedElement == null)        node.setSelected(false);      else {        boolean hasCode = false;        for (Object o : selectedElement) {          String ele = (String) o;          if (element.getCode().equals(ele)) {            hasCode = true;            break;          }        }        node.setSelected(hasCode);      }      node = (CheckNode) node.getNextLeaf();    }    repaint();  }  private void init() {    this.setShowsRootHandles(true);    this.setRootVisible(true);    this.addMouseListener(new MouseAdapter() {      public void mouseClicked(MouseEvent e) {        // 取出点击的节点路径，为null时未点中        int x = e.getX();        int y = e.getY();        int row = getRowForLocation(x, y);        TreePath path = getPathForRow(row);        if (path == null)          return;        CheckNode node = (CheckNode) getLastSelectedPathComponent();        if (node == null)          return;        node.setSelected(!node.isSelected());        repaint();      }    });    this.setRowHeight(DEFAULT_ROWHEIGHT);  }  private void setChildNode(BaseElement parent, CheckNode node) {    BaseElement element = null;    if (parent.getChildren().size() > 0) {      for (Object o : parent.getChildren()) {        element = (BaseElement) o;        CheckNode childNode = new CheckNode(element);        childNode.setParentSelected(false);        childNode.setChildSelected(false);        node.add(childNode);        setChildNode(element, childNode);      }    }  }}