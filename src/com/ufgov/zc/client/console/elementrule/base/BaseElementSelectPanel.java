package com.ufgov.zc.client.console.elementrule.base;import java.awt.Component;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.List;import javax.swing.ButtonGroup;import javax.swing.JLabel;import javax.swing.JPopupMenu;import javax.swing.JRadioButtonMenuItem;import javax.swing.JScrollPane;import javax.swing.JTree;import javax.swing.tree.TreePath;import com.ufgov.zc.client.component.CheckNode;import com.ufgov.zc.common.commonbiz.model.BaseElement;import com.ufgov.zc.common.commonbiz.model.MaElementRelationRuleDetail;import com.ufgov.zc.common.system.util.StringTools;public class BaseElementSelectPanel extends JScrollPane {  /**   *    */  private static final long serialVersionUID = -1064509805156448844L;  private BaseElementTree tree;  private MaElementRelationRuleDetail elementRelation;  private List selectedCodes = null;  private MyPopMenu popMenu = null;  /**   * @return the elementRelation   */  public MaElementRelationRuleDetail getElementRelation() {    return elementRelation;  }  /**   * @param elementRelation the elementRelation to set   */  public void setElementRelation(MaElementRelationRuleDetail elementRelation) {    this.elementRelation = elementRelation;    initTree();  }  public BaseElementSelectPanel(String label, MaElementRelationRuleDetail relation) {    super();    this.elementRelation = relation;    tree = new BaseElementTree(label);    tree.addMouseListener(new MyMouseListener());    this.getViewport().add(tree);    List treeData = BaseElementDataFactory.getBaseElementTreeData(elementRelation.getElement());    tree.setTreeData(treeData);    initTree();    popMenu = new MyPopMenu(tree);  }  public String getSelectedLeafElementCode() {    return tree.getSelectedLeafElementCode();  }  public void clear() {    tree.clearSelection();    if (selectedCodes != null) {      selectedCodes.clear();    }    if (elementRelation != null) {      elementRelation.setElementValue("");    }  }  public void initTree() {    tree.clearSelection();    selectedCodes = StringTools.toList(elementRelation.getElementValue(), ",");    //TODO:liubo tree.setSelectedLeafElementCode(selectedCodes);       tree.setSelectedElementCode(selectedCodes);  }  private class MyMouseListener extends MouseAdapter {    public void mouseClicked(MouseEvent e) {      JTree tree = (JTree) e.getSource();      int x = e.getX();      int y = e.getY();      int row = tree.getRowForLocation(x, y);      TreePath path = tree.getPathForRow(row);      if (path == null)        return;      CheckNode node = (CheckNode) tree.getLastSelectedPathComponent();      setSelectCode(node, selectedCodes);      setElementRelation();    }  }  private void setSelectCode(CheckNode node, List selectList) {    //    BaseElement element = (BaseElement)node.getUserObject();    //    if (node.isLeaf()) {    //      if (node.isSelected()) {    //       if (!selectList.contains(element.getCode())) {    //         selectList.add(element.getCode());    //       }    //      } else {    //        selectList.remove(element.getCode());    //      }    //    } else {    //      Enumeration enu = node.children();    //      while (enu.hasMoreElements()) {    //        setSelectCode((CheckNode)enu.nextElement(), selectList);    //      }    //    }    BaseElement element = (BaseElement) node.getUserObject();    if (node.isSelected()) {      if (!selectList.contains(element.getCode())) {        selectList.add(element.getCode());      }    } else {      selectList.remove(element.getCode());    }  }  private void setElementRelation() {    String value = "";    int length = selectedCodes.size();    for (int i = 0; i < length; i++) {      value += "," + selectedCodes.get(i);    }    value = value.length() > 0 ? value.substring(1) : value;    elementRelation.setElementValue(value);  }  class MyPopMenu extends JPopupMenu implements ActionListener {    private JRadioButtonMenuItem equalItem;    private JRadioButtonMenuItem likeItem;    private JRadioButtonMenuItem inItem;    private Component target;    public MyPopMenu(Component target) {      super();      ButtonGroup group = new ButtonGroup();      equalItem = new JRadioButtonMenuItem("=");      equalItem.setActionCommand(MaElementRelationRuleDetail.OPERATOR_EQUAL);      equalItem.addActionListener(this);      group.add(equalItem);      likeItem = new JRadioButtonMenuItem("LIKE");      likeItem.setActionCommand(MaElementRelationRuleDetail.OPERATOR_LIKE);      likeItem.addActionListener(this);      group.add(likeItem);      inItem = new JRadioButtonMenuItem("IN");      inItem.setActionCommand(MaElementRelationRuleDetail.OPERATOR_IN);      inItem.addActionListener(this);      group.add(inItem);      String opera = elementRelation.getOperator();      opera = opera == null ? "" : opera;      opera = opera.toLowerCase();      if (opera.equals(MaElementRelationRuleDetail.OPERATOR_EQUAL)) {        equalItem.setSelected(true);      } else if (opera.equals(MaElementRelationRuleDetail.OPERATOR_LIKE)) {        likeItem.setSelected(true);      } else if (opera.equals(MaElementRelationRuleDetail.OPERATOR_IN)) {        inItem.setSelected(true);      }      this.add(new JLabel("操作类型"));      this.add(equalItem);      this.add(likeItem);      this.add(inItem);      this.target = target;      target.addMouseListener(new MouseAdapter() {        public void mousePressed(MouseEvent e) {          if (e.getButton() == MouseEvent.BUTTON3) {            MyPopMenu.this.show(e.getComponent(),            e.getX(), e.getY());          }        }      });    }    public void actionPerformed(ActionEvent event) {      String opera = event.getActionCommand();      elementRelation.setOperator(opera);    }  }}