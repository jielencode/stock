package com.ufgov.zc.client.console.elementrule.dialog;import java.awt.BorderLayout;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.List;import javax.swing.JButton;import javax.swing.JDialog;import javax.swing.JPanel;import javax.swing.JScrollPane;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.console.elementrule.RuleEntryModel;import com.ufgov.zc.client.console.elementrule.base.BaseElementTree;import com.ufgov.zc.common.commonbiz.model.BaseElement;import com.ufgov.zc.common.commonbiz.model.MaElementRelationRuleDetail;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.system.util.StringTools;public class ElementRelationSetDialog extends GkBaseDialog {  /**   *    */  private static final long serialVersionUID = 8988207306693855151L;  private List origSelected = new ArrayList();  private RuleEntryModel model = null;  private BaseElementTree tree;  private JButton okBtn = new JButton("确定");  private JButton cancelBtn = new JButton("取消");  private String direction;  public ElementRelationSetDialog(JDialog parent, boolean modal, RuleEntryModel model, String direction) {    super(parent, modal);    this.direction = direction;    if (MaElementRelationRuleDetail.DIRECTION_DEST.equals(direction)) {      this.setTitle("设置目标基本要素");    } else {      this.setTitle("设置源基本要素");    }    this.model = model;    this.getContentPane().setLayout(new BorderLayout());    initTree();    initBottom();    initWithModel();    this.setSize(new Dimension(300, 400));    this.setLocationRelativeTo(null);    this.setVisible(true);  }  private void initTree() {    //TODO:    List treeDate = new ArrayList();    BaseElement coCode = new BaseElement();    coCode.setCode("CO_CODE");    coCode.setName("单位");    treeDate.add(coCode);    BaseElement payoutCode = new BaseElement();    payoutCode.setCode("PAYOUT_CODE");    payoutCode.setName("支出类型");    treeDate.add(payoutCode);    BaseElement fundCode = new BaseElement();    fundCode.setCode("FUND_CODE");    fundCode.setName("资金性质");    treeDate.add(fundCode);    BaseElement baccCode = new BaseElement();    baccCode.setCode("B_ACC_CODE");    baccCode.setName("功能分类");    treeDate.add(baccCode);    BaseElement inceptDoc = new BaseElement();    inceptDoc.setCode("INCEPTDOC_CODE");    inceptDoc.setName("收文编码");    treeDate.add(inceptDoc);    BaseElement manageCode = new BaseElement();    manageCode.setCode("MANAGE_CODE");    manageCode.setName("管理类型");    treeDate.add(manageCode);    BaseElement orgCode = new BaseElement();    orgCode.setCode("ORG_CODE");    orgCode.setName("科处室代码");    treeDate.add(orgCode);    BaseElement orignCode = new BaseElement();    orignCode.setCode("ORIGIN_CODE");    orignCode.setName("指标来源");    treeDate.add(orignCode);    BaseElement outLayCode = new BaseElement();    outLayCode.setCode("OUTLAY_CODE");    outLayCode.setName("经济分类");    treeDate.add(outLayCode);    BaseElement projectCode = new BaseElement();    projectCode.setCode("PROJECT_CODE");    projectCode.setName("项目代码");    treeDate.add(projectCode);    //    BaseElement projectTypeCode = new BaseElement();    //    projectTypeCode.setCode("PROJECT_TYPE_CODE");    //    projectTypeCode.setName("项目类别");    //    treeDate.add(projectTypeCode);    //    //    BaseElement sendDocTypeCode = new BaseElement();    //    sendDocTypeCode.setCode("SENDDOC_TYPE_CODE");    //    sendDocTypeCode.setName("发文类别");    //    treeDate.add(sendDocTypeCode);    BaseElement sendDocCode = new BaseElement();    sendDocCode.setCode("SENDDOC_CODE");    sendDocCode.setName("发文编码");    treeDate.add(sendDocCode);    BaseElement payTypeCode = new BaseElement();    payTypeCode.setCode("PAYTYPE_CODE");    payTypeCode.setName("支付方式");    treeDate.add(payTypeCode);    BaseElement dattr1 = new BaseElement();    dattr1.setCode("D_ATTR1");    dattr1.setName("扩展要素1");    treeDate.add(dattr1);    BaseElement dattr2 = new BaseElement();    dattr2.setCode("D_ATTR2");    dattr2.setName("扩展要素2");    treeDate.add(dattr2);    BaseElement dattr3 = new BaseElement();    dattr3.setCode("D_ATTR3");    dattr3.setName("扩展要素3");    treeDate.add(dattr3);    BaseElement dattr4 = new BaseElement();    dattr4.setCode("D_ATTR4");    dattr4.setName("扩展要素4");    treeDate.add(dattr4);    BaseElement dattr5 = new BaseElement();    dattr5.setCode("D_ATTR5");    dattr5.setName("扩展要素5");    treeDate.add(dattr5);    tree = new BaseElementTree("基本要素");    tree.setTreeData(treeDate);    this.getContentPane().add(new JScrollPane(tree), BorderLayout.CENTER);  }  private void initBottom() {    JPanel bottom = new JPanel(new FlowLayout(FlowLayout.RIGHT));    okBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent event) {        doOk();        doCancel();      }    });    bottom.add(okBtn);    this.getRootPane().setDefaultButton(okBtn);    cancelBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent evenyt) {        doCancel();      }    });    bottom.add(cancelBtn);    this.getContentPane().add(bottom, BorderLayout.SOUTH);  }  private void initWithModel() {    List elementList = null;    if (MaElementRelationRuleDetail.DIRECTION_DEST.equals(direction)) {      elementList = this.model.getRuleEntry().getDestElementList();    } else {      elementList = this.model.getRuleEntry().getSrcElementList();    }    MaElementRelationRuleDetail relation = null;    for (int i = 0; i < elementList.size(); i++) {      relation = (MaElementRelationRuleDetail) elementList.get(i);      origSelected.add(relation.getElement());    }    tree.setSelectedLeafElementCode(origSelected);  }  private void doOk() {    List selectedList = StringTools.toList(tree.getSelectedLeafElementCode(), ",");    List orgiSelectedListCopy = (List) ObjectUtil.deepCopy(this.origSelected);    orgiSelectedListCopy.removeAll(selectedList);    for (int i = 0; i < orgiSelectedListCopy.size(); i++) {      if (MaElementRelationRuleDetail.DIRECTION_DEST.equals(direction)) {        model.removeDesElementRelation((String) orgiSelectedListCopy.get(i));      } else {        model.removeSrcElementRelation((String) orgiSelectedListCopy.get(i));      }    }    List selectedListCopy = (List) ObjectUtil.deepCopy(selectedList);    selectedListCopy.removeAll(this.origSelected);    for (int i = 0; i < selectedListCopy.size(); i++) {      MaElementRelationRuleDetail relation = new MaElementRelationRuleDetail();      relation.setElement((String) selectedListCopy.get(i));      relation.setElementValue("");      relation.setOperator(MaElementRelationRuleDetail.OPERATOR_IN);      relation.setRelationRuleId(model.getRuleEntry().getRelationRuleId());      relation.setEntryId(model.getRuleEntry().getEntryId());      if ("dest".equals(direction)) {        relation.setDirection(MaElementRelationRuleDetail.DIRECTION_DEST);        model.addDesElementRelation(relation);      } else {        relation.setDirection(MaElementRelationRuleDetail.DIRECTION_SRC);        model.addSrcElementRelation(relation);      }    }  }  private void doCancel() {    this.dispose();  }}