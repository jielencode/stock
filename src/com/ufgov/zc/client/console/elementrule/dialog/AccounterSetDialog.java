package com.ufgov.zc.client.console.elementrule.dialog;import java.awt.BorderLayout;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.ArrayList;import java.util.List;import java.util.Vector;import javax.swing.JButton;import javax.swing.JDialog;import javax.swing.JPanel;import javax.swing.table.DefaultTableModel;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.console.elementrule.RuleEntryModel;import com.ufgov.zc.common.commonbiz.constants.RelationRuleConstants;import com.ufgov.zc.common.commonbiz.model.BankAccount;import com.ufgov.zc.common.commonbiz.model.MaElementRelationRuleDetail;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;public class AccounterSetDialog extends GkBaseDialog {  private RuleEntryModel ruleModel = null;  private JPageableFixedTable table;  private JTablePanel tablePanel;  private JButton okBtn = new JButton("确定");  private JButton cancelBtn = new JButton("取消");  private List datas;  IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(  IBaseDataServiceDelegate.class, "baseDataServiceDelegate");  public AccounterSetDialog(JDialog parent, boolean modal, RuleEntryModel model) {    super(parent, modal);    this.setTitle("选择账户");    this.ruleModel = model;    this.getContentPane().setLayout(new BorderLayout());    initTablePane();    initTable();    initCommponent();    this.setSize(600, 400);    this.setLocationRelativeTo(null);  }  private void initTablePane() {    tablePanel = new JTablePanel();    tablePanel.init();    table = tablePanel.getTable();    table.addMouseListener(new MouseAdapter() {      public void mouseClicked(MouseEvent e) {        if (e.getClickCount() == 2) {          doOk();        }      }    });    tablePanel.setTablePreferencesKey(this.getClass().getName() + "_AccounterSetTabel");  }  private void initCommponent() {    this.setLayout(new BorderLayout());    this.add(tablePanel, BorderLayout.CENTER);    JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));    okBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent event) {        doOk();      }    });    bottomPanel.add(okBtn);    cancelBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent event) {        doCancel();      }    });    bottomPanel.add(cancelBtn);    this.add(bottomPanel, BorderLayout.SOUTH);  }  private void initTable() {    int nd = WorkEnv.getInstance().getTransNd();    RequestMeta meta = WorkEnv.getInstance().getRequestMeta();    String ruleType = ruleModel.getRuleEntry().getRuleType();    List accoTypeList = new ArrayList();    if (RelationRuleConstants.CLEAR_ACCOUNTER.equalsIgnoreCase(ruleType)) {      accoTypeList.clear();      accoTypeList.add("01");      accoTypeList.add("06");      accoTypeList.add("07");    } else if (RelationRuleConstants.ZERO_BAL_ACCOUNTER.equalsIgnoreCase(ruleType)) {      accoTypeList.clear();      accoTypeList.add("03");    } else if (RelationRuleConstants.PR_ACCOUNTER.equalsIgnoreCase(ruleType)) {      accoTypeList = null;    } else if (RelationRuleConstants.BASE_ACCOUNTER.equalsIgnoreCase(ruleType)) {      accoTypeList.clear();      accoTypeList.add("01");      accoTypeList.add("02");      accoTypeList.add("05");      accoTypeList.add("06");      accoTypeList.add("07");      accoTypeList.add("08");      accoTypeList.add("09");      accoTypeList.add("10");      accoTypeList.add("11");      accoTypeList.add("20");    }    datas = baseDataServiceDelegate.getPayBankAccountByAccoType(nd, accoTypeList, meta);    Vector columnNames = new Vector();    columnNames.add("单位代码");    columnNames.add("银行账户");    columnNames.add("账户全称");    columnNames.add("账号");    columnNames.add("银行行号");    columnNames.add("银行网点代码");    columnNames.add("银行网点名称");    columnNames.add("银行代码");    columnNames.add("银行名称");    Vector values = new Vector();    for (int i = 0; i < datas.size(); i++) {      BankAccount account = (BankAccount) datas.get(i);      Vector record = new Vector();      record.add(account.getCoCode());      record.add(account.getAccCode());      record.add(account.getAccName());      record.add(account.getBankAccCode());      record.add(account.getBankNo());      record.add(account.getBankNodeCode());      record.add(account.getBankNodeName());      record.add(account.getBankCode());      record.add(account.getBankName());      values.add(record);    }    DefaultTableModel model = new DefaultTableModel(values, columnNames) {      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tablePanel.setTableModel(model);    table.setShowCheckedColumn(false);    table.getTableRowHeader().setPreferredSize(new Dimension(50, 0));  }  private void doOk() {    int index = table.getSelectedRow();    index = table.convertRowIndexToModel(index);    BankAccount account = (BankAccount) datas.get(index);    ruleModel.modifyDesElementRelation("CO_CODE", account.getCoCode(), MaElementRelationRuleDetail.OPERATOR_EQUAL);    ruleModel.modifyDesElementRelation("BANK_ACC_CODE", account.getAccCode(), MaElementRelationRuleDetail.OPERATOR_EQUAL);    ruleModel.modifyDesElementRelation("BANK_ACC_NAME", account.getAccName(), MaElementRelationRuleDetail.OPERATOR_EQUAL);    ruleModel.modifyDesElementRelation("BANK_ACC_NO", account.getBankAccCode(), MaElementRelationRuleDetail.OPERATOR_EQUAL);    ruleModel.modifyDesElementRelation("BANKNODE_CODE", account.getBankNodeCode(), MaElementRelationRuleDetail.OPERATOR_EQUAL);    ruleModel.modifyDesElementRelation("BANKNODE_NAME", account.getBankNodeName(), MaElementRelationRuleDetail.OPERATOR_EQUAL);    ruleModel.modifyDesElementRelation("BANK_CODE", account.getBankCode(), MaElementRelationRuleDetail.OPERATOR_EQUAL);    ruleModel.modifyDesElementRelation("BANK_NAME", account.getBankName(), MaElementRelationRuleDetail.OPERATOR_EQUAL);    ruleModel.modifyDesElementRelation("BANK_NO", account.getBankNo(), MaElementRelationRuleDetail.OPERATOR_EQUAL);    doCancel();  }  private void doCancel() {    this.closeDialog();  }}